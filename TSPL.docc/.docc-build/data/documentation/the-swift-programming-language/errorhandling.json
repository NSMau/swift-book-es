{"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"type":"text","text":"Swift provides first-class support for"},{"type":"text","text":" "},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"type":"text","text":" "},{"type":"text","text":"recoverable errors at runtime."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some operations"},{"type":"text","text":" "},{"type":"text","text":"aren’t guaranteed to always complete execution or produce a useful output."},{"type":"text","text":" "},{"type":"text","text":"Optionals are used to represent the absence of a value,"},{"type":"text","text":" "},{"type":"text","text":"but when an operation fails,"},{"type":"text","text":" "},{"type":"text","text":"it’s often useful to understand what caused the failure,"},{"type":"text","text":" "},{"type":"text","text":"so that your code can respond accordingly."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an example, consider the task of reading and processing data from a file on disk."},{"type":"text","text":" "},{"type":"text","text":"There are a number of ways this task can fail, including"},{"type":"text","text":" "},{"type":"text","text":"the file not existing at the specified path,"},{"type":"text","text":" "},{"type":"text","text":"the file not having read permissions, or"},{"type":"text","text":" "},{"type":"text","text":"the file not being encoded in a compatible format."},{"type":"text","text":" "},{"type":"text","text":"Distinguishing among these different situations"},{"type":"text","text":" "},{"type":"text","text":"allows a program to resolve some errors"},{"type":"text","text":" "},{"type":"text","text":"and to communicate to the user any errors it can’t resolve."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Error handling in Swift interoperates with error handling patterns"},{"type":"text","text":" "},{"type":"text","text":"that use the "},{"type":"codeVoice","code":"NSError"},{"type":"text","text":" class in Cocoa and Objective-C."},{"type":"text","text":" "},{"type":"text","text":"For more information about this class,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/cocoa_design_patterns\/handling_cocoa_errors_in_swift"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"anchor":"Representing-and-Throwing-Errors","level":2,"type":"heading","text":"Representing and Throwing Errors"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift, errors are represented by"},{"type":"text","text":" "},{"type":"text","text":"values of types that conform to the "},{"type":"codeVoice","code":"Error"},{"type":"text","text":" protocol."},{"type":"text","text":" "},{"type":"text","text":"This empty protocol indicates that a type"},{"type":"text","text":" "},{"type":"text","text":"can be used for error handling."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift enumerations are particularly well suited to modeling"},{"type":"text","text":" "},{"type":"text","text":"a group of related error conditions,"},{"type":"text","text":" "},{"type":"text","text":"with associated values allowing for additional information"},{"type":"text","text":" "},{"type":"text","text":"about the nature of an error to be communicated."},{"type":"text","text":" "},{"type":"text","text":"For example, here’s how you might represent the error conditions"},{"type":"text","text":" "},{"type":"text","text":"of operating a vending machine inside a game:"}]},{"type":"codeListing","syntax":"swift","code":["enum VendingMachineError: Error {","    case invalidSelection","    case insufficientFunds(coinsNeeded: Int)","    case outOfStock","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Throwing an error lets you indicate that something unexpected happened"},{"type":"text","text":" "},{"type":"text","text":"and the normal flow of execution can’t continue."},{"type":"text","text":" "},{"type":"text","text":"You use a "},{"type":"codeVoice","code":"throw"},{"type":"text","text":" statement to throw an error."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the following code throws an error to indicate"},{"type":"text","text":" "},{"type":"text","text":"that five additional coins are needed by the vending machine:"}]},{"type":"codeListing","syntax":"swift","code":["throw VendingMachineError.insufficientFunds(coinsNeeded: 5)"]},{"anchor":"Handling-Errors","level":2,"type":"heading","text":"Handling Errors"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When an error is thrown,"},{"type":"text","text":" "},{"type":"text","text":"some surrounding piece of code must be responsible"},{"type":"text","text":" "},{"type":"text","text":"for handling the error —"},{"type":"text","text":" "},{"type":"text","text":"for example, by correcting the problem,"},{"type":"text","text":" "},{"type":"text","text":"trying an alternative approach,"},{"type":"text","text":" "},{"type":"text","text":"or informing the user of the failure."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are four ways to handle errors in Swift."},{"type":"text","text":" "},{"type":"text","text":"You can propagate the error from a function to the code that calls that function,"},{"type":"text","text":" "},{"type":"text","text":"handle the error using a "},{"type":"codeVoice","code":"do"},{"type":"text","text":"-"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"handle the error as an optional value,"},{"type":"text","text":" "},{"type":"text","text":"or assert that the error will not occur."},{"type":"text","text":" "},{"type":"text","text":"Each approach is described in a section below."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a function throws an error,"},{"type":"text","text":" "},{"type":"text","text":"it changes the flow of your program,"},{"type":"text","text":" "},{"type":"text","text":"so it’s important that you can quickly identify places in your code that can throw errors."},{"type":"text","text":" "},{"type":"text","text":"To identify these places in your code, write the "},{"type":"codeVoice","code":"try"},{"type":"text","text":" keyword —"},{"type":"text","text":" "},{"type":"text","text":"or the "},{"type":"codeVoice","code":"try?"},{"type":"text","text":" or "},{"type":"codeVoice","code":"try!"},{"type":"text","text":" variation —"},{"type":"text","text":" "},{"type":"text","text":"before a piece of code that calls a function, method, or initializer that can throw an error."},{"type":"text","text":" "},{"type":"text","text":"These keywords are described in the sections below."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Error handling in Swift resembles exception handling in other languages,"},{"type":"text","text":" "},{"type":"text","text":"with the use of the "},{"type":"codeVoice","code":"try"},{"type":"text","text":", "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" and "},{"type":"codeVoice","code":"throw"},{"type":"text","text":" keywords."},{"type":"text","text":" "},{"type":"text","text":"Unlike exception handling in many languages —"},{"type":"text","text":" "},{"type":"text","text":"including Objective-C —"},{"type":"text","text":" "},{"type":"text","text":"error handling in Swift doesn’t involve unwinding the call stack,"},{"type":"text","text":" "},{"type":"text","text":"a process that can be computationally expensive."},{"type":"text","text":" "},{"type":"text","text":"As such, the performance characteristics"},{"type":"text","text":" "},{"type":"text","text":"of a "},{"type":"codeVoice","code":"throw"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"are comparable to those of a "},{"type":"codeVoice","code":"return"},{"type":"text","text":" statement."}]}],"type":"aside","name":"Note"},{"anchor":"Propagating-Errors-Using-Throwing-Functions","level":3,"type":"heading","text":"Propagating Errors Using Throwing Functions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To indicate that a function, method, or initializer can throw an error,"},{"type":"text","text":" "},{"type":"text","text":"you write the "},{"type":"codeVoice","code":"throws"},{"type":"text","text":" keyword in the function’s declaration"},{"type":"text","text":" "},{"type":"text","text":"after its parameters."},{"type":"text","text":" "},{"type":"text","text":"A function marked with "},{"type":"codeVoice","code":"throws"},{"type":"text","text":" is called a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"throwing function"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the function specifies a return type,"},{"type":"text","text":" "},{"type":"text","text":"you write the "},{"type":"codeVoice","code":"throws"},{"type":"text","text":" keyword before the return arrow ("},{"type":"codeVoice","code":"->"},{"type":"text","text":")."}]},{"type":"codeListing","syntax":"swift","code":["func canThrowErrors() throws -> String","","func cannotThrowErrors() -> String"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A throwing function propagates errors that are thrown inside of it"},{"type":"text","text":" "},{"type":"text","text":"to the scope from which it’s called."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Only throwing functions can propagate errors."},{"type":"text","text":" "},{"type":"text","text":"Any errors thrown inside a nonthrowing function"},{"type":"text","text":" "},{"type":"text","text":"must be handled inside the function."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example below,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"VendingMachine"},{"type":"text","text":" class has a "},{"type":"codeVoice","code":"vend(itemNamed:)"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"that throws an appropriate "},{"type":"codeVoice","code":"VendingMachineError"},{"type":"text","text":" "},{"type":"text","text":"if the requested item isn’t available,"},{"type":"text","text":" "},{"type":"text","text":"is out of stock,"},{"type":"text","text":" "},{"type":"text","text":"or has a cost that exceeds the current deposited amount:"}]},{"type":"codeListing","syntax":"swift","code":["struct Item {","    var price: Int","    var count: Int","}","","class VendingMachine {","    var inventory = [","        \"Candy Bar\": Item(price: 12, count: 7),","        \"Chips\": Item(price: 10, count: 4),","        \"Pretzels\": Item(price: 7, count: 11)","    ]","    var coinsDeposited = 0","","    func vend(itemNamed name: String) throws {","        guard let item = inventory[name] else {","            throw VendingMachineError.invalidSelection","        }","","        guard item.count > 0 else {","            throw VendingMachineError.outOfStock","        }","","        guard item.price <= coinsDeposited else {","            throw VendingMachineError.insufficientFunds(coinsNeeded: item.price - coinsDeposited)","        }","","        coinsDeposited -= item.price","","        var newItem = item","        newItem.count -= 1","        inventory[name] = newItem","","        print(\"Dispensing \\(name)\")","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The implementation of the "},{"type":"codeVoice","code":"vend(itemNamed:)"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"uses "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statements to exit the method early and throw appropriate errors"},{"type":"text","text":" "},{"type":"text","text":"if any of the requirements for purchasing a snack aren’t met."},{"type":"text","text":" "},{"type":"text","text":"Because a "},{"type":"codeVoice","code":"throw"},{"type":"text","text":" statement immediately transfers program control,"},{"type":"text","text":" "},{"type":"text","text":"an item will be vended only if all of these requirements are met."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the "},{"type":"codeVoice","code":"vend(itemNamed:)"},{"type":"text","text":" method propagates any errors it throws,"},{"type":"text","text":" "},{"type":"text","text":"any code that calls this method must either handle the errors —"},{"type":"text","text":" "},{"type":"text","text":"using a "},{"type":"codeVoice","code":"do"},{"type":"text","text":"-"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" statement, "},{"type":"codeVoice","code":"try?"},{"type":"text","text":", or "},{"type":"codeVoice","code":"try!"},{"type":"text","text":"—"},{"type":"text","text":" "},{"type":"text","text":"or continue to propagate them."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"buyFavoriteSnack(person:vendingMachine:)"},{"type":"text","text":" in the example below"},{"type":"text","text":" "},{"type":"text","text":"is also a throwing function,"},{"type":"text","text":" "},{"type":"text","text":"and any errors that the "},{"type":"codeVoice","code":"vend(itemNamed:)"},{"type":"text","text":" method throws will"},{"type":"text","text":" "},{"type":"text","text":"propagate up to the point where the "},{"type":"codeVoice","code":"buyFavoriteSnack(person:vendingMachine:)"},{"type":"text","text":" function is called."}]},{"type":"codeListing","syntax":"swift","code":["let favoriteSnacks = [","    \"Alice\": \"Chips\",","    \"Bob\": \"Licorice\",","    \"Eve\": \"Pretzels\",","]","func buyFavoriteSnack(person: String, vendingMachine: VendingMachine) throws {","    let snackName = favoriteSnacks[person] ?? \"Candy Bar\"","    try vendingMachine.vend(itemNamed: snackName)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"buyFavoriteSnack(person: vendingMachine:)"},{"type":"text","text":" function looks up a given person’s favorite snack"},{"type":"text","text":" "},{"type":"text","text":"and tries to buy it for them by calling the "},{"type":"codeVoice","code":"vend(itemNamed:)"},{"type":"text","text":" method."},{"type":"text","text":" "},{"type":"text","text":"Because the "},{"type":"codeVoice","code":"vend(itemNamed:)"},{"type":"text","text":" method can throw an error,"},{"type":"text","text":" "},{"type":"text","text":"it’s called with the "},{"type":"codeVoice","code":"try"},{"type":"text","text":" keyword in front of it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Throwing initializers can propagate errors in the same way as throwing functions."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the initializer for the "},{"type":"codeVoice","code":"PurchasedSnack"},{"type":"text","text":" structure in the listing below"},{"type":"text","text":" "},{"type":"text","text":"calls a throwing function as part of the initialization process,"},{"type":"text","text":" "},{"type":"text","text":"and it handles any errors that it encounters by propagating them to its caller."}]},{"type":"codeListing","syntax":"swift","code":["struct PurchasedSnack {","    let name: String","    init(name: String, vendingMachine: VendingMachine) throws {","        try vendingMachine.vend(itemNamed: name)","        self.name = name","    }","}"]},{"anchor":"Handling-Errors-Using-Do-Catch","level":3,"type":"heading","text":"Handling Errors Using Do-Catch"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use a "},{"type":"codeVoice","code":"do"},{"type":"text","text":"-"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" statement to handle errors"},{"type":"text","text":" "},{"type":"text","text":"by running a block of code."},{"type":"text","text":" "},{"type":"text","text":"If an error is thrown by the code in the "},{"type":"codeVoice","code":"do"},{"type":"text","text":" clause,"},{"type":"text","text":" "},{"type":"text","text":"it’s matched against the "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clauses"},{"type":"text","text":" "},{"type":"text","text":"to determine which one of them can handle the error."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is the general form of a "},{"type":"codeVoice","code":"do"},{"type":"text","text":"-"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" statement:"}]},{"type":"codeListing","syntax":"swift","code":["do {","    try <#expression#>","    <#statements#>","} catch <#pattern 1#> {","    <#statements#>","} catch <#pattern 2#> where <#condition#> {","    <#statements#>","} catch <#pattern 3#>, <#pattern 4#> where <#condition#> {","    <#statements#>","} catch {","    <#statements#>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You write a pattern after "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" to indicate what errors"},{"type":"text","text":" "},{"type":"text","text":"that clause can handle."},{"type":"text","text":" "},{"type":"text","text":"If a "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause doesn’t have a pattern,"},{"type":"text","text":" "},{"type":"text","text":"the clause matches any error"},{"type":"text","text":" "},{"type":"text","text":"and binds the error to a local constant named "},{"type":"codeVoice","code":"error"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For more information about pattern matching,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the following code matches against all three cases"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"codeVoice","code":"VendingMachineError"},{"type":"text","text":" enumeration."}]},{"type":"codeListing","syntax":"swift","code":["var vendingMachine = VendingMachine()","vendingMachine.coinsDeposited = 8","do {","    try buyFavoriteSnack(person: \"Alice\", vendingMachine: vendingMachine)","    print(\"Success! Yum.\")","} catch VendingMachineError.invalidSelection {","    print(\"Invalid Selection.\")","} catch VendingMachineError.outOfStock {","    print(\"Out of Stock.\")","} catch VendingMachineError.insufficientFunds(let coinsNeeded) {","    print(\"Insufficient funds. Please insert an additional \\(coinsNeeded) coins.\")","} catch {","    print(\"Unexpected error: \\(error).\")","}","\/\/ Prints \"Insufficient funds. Please insert an additional 2 coins.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the above example,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"buyFavoriteSnack(person:vendingMachine:)"},{"type":"text","text":" function is called in a "},{"type":"codeVoice","code":"try"},{"type":"text","text":" expression,"},{"type":"text","text":" "},{"type":"text","text":"because it can throw an error."},{"type":"text","text":" "},{"type":"text","text":"If an error is thrown,"},{"type":"text","text":" "},{"type":"text","text":"execution immediately transfers to the "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clauses,"},{"type":"text","text":" "},{"type":"text","text":"which decide whether to allow propagation to continue."},{"type":"text","text":" "},{"type":"text","text":"If no pattern is matched, the error gets caught by the final "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" "},{"type":"text","text":"clause and is bound to a local "},{"type":"codeVoice","code":"error"},{"type":"text","text":" constant."},{"type":"text","text":" "},{"type":"text","text":"If no error is thrown,"},{"type":"text","text":" "},{"type":"text","text":"the remaining statements in the "},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement are executed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clauses don’t have to handle every possible error"},{"type":"text","text":" "},{"type":"text","text":"that the code in the "},{"type":"codeVoice","code":"do"},{"type":"text","text":" clause can throw."},{"type":"text","text":" "},{"type":"text","text":"If none of the "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clauses handle the error,"},{"type":"text","text":" "},{"type":"text","text":"the error propagates to the surrounding scope."},{"type":"text","text":" "},{"type":"text","text":"However, the propagated error"},{"type":"text","text":" "},{"type":"text","text":"must be handled by "},{"type":"emphasis","inlineContent":[{"type":"text","text":"some"}]},{"type":"text","text":" surrounding scope."},{"type":"text","text":" "},{"type":"text","text":"In a nonthrowing function,"},{"type":"text","text":" "},{"type":"text","text":"an enclosing "},{"type":"codeVoice","code":"do"},{"type":"text","text":"-"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"must handle the error."},{"type":"text","text":" "},{"type":"text","text":"In a throwing function,"},{"type":"text","text":" "},{"type":"text","text":"either an enclosing "},{"type":"codeVoice","code":"do"},{"type":"text","text":"-"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"or the caller"},{"type":"text","text":" "},{"type":"text","text":"must handle the error."},{"type":"text","text":" "},{"type":"text","text":"If the error propagates to the top-level scope"},{"type":"text","text":" "},{"type":"text","text":"without being handled,"},{"type":"text","text":" "},{"type":"text","text":"you’ll get a runtime error."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the above example can be written so any"},{"type":"text","text":" "},{"type":"text","text":"error that isn’t a "},{"type":"codeVoice","code":"VendingMachineError"},{"type":"text","text":" is instead"},{"type":"text","text":" "},{"type":"text","text":"caught by the calling function:"}]},{"type":"codeListing","syntax":"swift","code":["func nourish(with item: String) throws {","    do {","        try vendingMachine.vend(itemNamed: item)","    } catch is VendingMachineError {","        print(\"Couldn't buy that from the vending machine.\")","    }","}","","do {","    try nourish(with: \"Beet-Flavored Chips\")","} catch {","    print(\"Unexpected non-vending-machine-related error: \\(error)\")","}","\/\/ Prints \"Couldn't buy that from the vending machine.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the "},{"type":"codeVoice","code":"nourish(with:)"},{"type":"text","text":" function,"},{"type":"text","text":" "},{"type":"text","text":"if "},{"type":"codeVoice","code":"vend(itemNamed:)"},{"type":"text","text":" throws an error that’s"},{"type":"text","text":" "},{"type":"text","text":"one of the cases of the "},{"type":"codeVoice","code":"VendingMachineError"},{"type":"text","text":" enumeration,"},{"type":"text","text":" "},{"type":"codeVoice","code":"nourish(with:)"},{"type":"text","text":" handles the error by printing a message."},{"type":"text","text":" "},{"type":"text","text":"Otherwise,"},{"type":"text","text":" "},{"type":"codeVoice","code":"nourish(with:)"},{"type":"text","text":" propagates the error to its call site."},{"type":"text","text":" "},{"type":"text","text":"The error is then caught by the general "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another way to catch several related errors"},{"type":"text","text":" "},{"type":"text","text":"is to list them after "},{"type":"codeVoice","code":"catch"},{"type":"text","text":", separated by commas."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["func eat(item: String) throws {","    do {","        try vendingMachine.vend(itemNamed: item)","    } catch VendingMachineError.invalidSelection, VendingMachineError.insufficientFunds, VendingMachineError.outOfStock {","        print(\"Invalid selection, out of stock, or not enough money.\")","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"eat(item:)"},{"type":"text","text":" function lists the vending machine errors to catch,"},{"type":"text","text":" "},{"type":"text","text":"and its error text corresponds to the items in that list."},{"type":"text","text":" "},{"type":"text","text":"If any of the three listed errors are thrown,"},{"type":"text","text":" "},{"type":"text","text":"this "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause handles them by printing a message."},{"type":"text","text":" "},{"type":"text","text":"Any other errors are propagated to the surrounding scope,"},{"type":"text","text":" "},{"type":"text","text":"including any vending-machine errors that might be added later."}]},{"anchor":"Converting-Errors-to-Optional-Values","level":3,"type":"heading","text":"Converting Errors to Optional Values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use "},{"type":"codeVoice","code":"try?"},{"type":"text","text":" to handle an error by converting it to an optional value."},{"type":"text","text":" "},{"type":"text","text":"If an error is thrown while evaluating the "},{"type":"codeVoice","code":"try?"},{"type":"text","text":" expression,"},{"type":"text","text":" "},{"type":"text","text":"the value of the expression is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"in the following code "},{"type":"codeVoice","code":"x"},{"type":"text","text":" and "},{"type":"codeVoice","code":"y"},{"type":"text","text":" have the same value and behavior:"}]},{"type":"codeListing","syntax":"swift","code":["func someThrowingFunction() throws -> Int {","    \/\/ ...","}","","let x = try? someThrowingFunction()","","let y: Int?","do {","    y = try someThrowingFunction()","} catch {","    y = nil","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"someThrowingFunction()"},{"type":"text","text":" throws an error,"},{"type":"text","text":" "},{"type":"text","text":"the value of "},{"type":"codeVoice","code":"x"},{"type":"text","text":" and "},{"type":"codeVoice","code":"y"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Otherwise, the value of "},{"type":"codeVoice","code":"x"},{"type":"text","text":" and "},{"type":"codeVoice","code":"y"},{"type":"text","text":" is the value that the function returned."},{"type":"text","text":" "},{"type":"text","text":"Note that "},{"type":"codeVoice","code":"x"},{"type":"text","text":" and "},{"type":"codeVoice","code":"y"},{"type":"text","text":" are an optional of whatever type "},{"type":"codeVoice","code":"someThrowingFunction()"},{"type":"text","text":" returns."},{"type":"text","text":" "},{"type":"text","text":"Here the function returns an integer, so "},{"type":"codeVoice","code":"x"},{"type":"text","text":" and "},{"type":"codeVoice","code":"y"},{"type":"text","text":" are optional integers."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using "},{"type":"codeVoice","code":"try?"},{"type":"text","text":" lets you write concise error handling code"},{"type":"text","text":" "},{"type":"text","text":"when you want to handle all errors in the same way."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the following code"},{"type":"text","text":" "},{"type":"text","text":"uses several approaches to fetch data,"},{"type":"text","text":" "},{"type":"text","text":"or returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if all of the approaches fail."}]},{"type":"codeListing","syntax":"swift","code":["func fetchData() -> Data? {","    if let data = try? fetchDataFromDisk() { return data }","    if let data = try? fetchDataFromServer() { return data }","    return nil","}"]},{"anchor":"Disabling-Error-Propagation","level":3,"type":"heading","text":"Disabling Error Propagation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sometimes you know a throwing function or method"},{"type":"text","text":" "},{"type":"text","text":"won’t, in fact, throw an error at runtime."},{"type":"text","text":" "},{"type":"text","text":"On those occasions,"},{"type":"text","text":" "},{"type":"text","text":"you can write "},{"type":"codeVoice","code":"try!"},{"type":"text","text":" before the expression to disable error propagation"},{"type":"text","text":" "},{"type":"text","text":"and wrap the call in a runtime assertion that no error will be thrown."},{"type":"text","text":" "},{"type":"text","text":"If an error actually is thrown, you’ll get a runtime error."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the following code uses a "},{"type":"codeVoice","code":"loadImage(atPath:)"},{"type":"text","text":" function,"},{"type":"text","text":" "},{"type":"text","text":"which loads the image resource at a given path"},{"type":"text","text":" "},{"type":"text","text":"or throws an error if the image can’t be loaded."},{"type":"text","text":" "},{"type":"text","text":"In this case, because the image is shipped with the application,"},{"type":"text","text":" "},{"type":"text","text":"no error will be thrown at runtime,"},{"type":"text","text":" "},{"type":"text","text":"so it’s appropriate to disable error propagation."}]},{"type":"codeListing","syntax":"swift","code":["let photo = try! loadImage(atPath: \".\/Resources\/John Appleseed.jpg\")"]},{"anchor":"Specifying-Cleanup-Actions","level":2,"type":"heading","text":"Specifying Cleanup Actions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use a "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement to execute a set of statements"},{"type":"text","text":" "},{"type":"text","text":"just before code execution leaves the current block of code."},{"type":"text","text":" "},{"type":"text","text":"This statement lets you do any necessary cleanup"},{"type":"text","text":" "},{"type":"text","text":"that should be performed regardless"},{"type":"text","text":" "},{"type":"text","text":"of "},{"type":"emphasis","inlineContent":[{"type":"text","text":"how"}]},{"type":"text","text":" execution leaves the current block of code —"},{"type":"text","text":" "},{"type":"text","text":"whether it leaves because an error was thrown"},{"type":"text","text":" "},{"type":"text","text":"or because of a statement such as "},{"type":"codeVoice","code":"return"},{"type":"text","text":" or "},{"type":"codeVoice","code":"break"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For example, you can use a "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"to ensure that file descriptors are closed"},{"type":"text","text":" "},{"type":"text","text":"and manually allocated memory is freed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement defers execution until the current scope is exited."},{"type":"text","text":" "},{"type":"text","text":"This statement consists of the "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" keyword and the statements to be executed later."},{"type":"text","text":" "},{"type":"text","text":"The deferred statements may not contain any code"},{"type":"text","text":" "},{"type":"text","text":"that would transfer control out of the statements,"},{"type":"text","text":" "},{"type":"text","text":"such as a "},{"type":"codeVoice","code":"break"},{"type":"text","text":" or a "},{"type":"codeVoice","code":"return"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"or by throwing an error."},{"type":"text","text":" "},{"type":"text","text":"Deferred actions are executed in the reverse of"},{"type":"text","text":" "},{"type":"text","text":"the order that they’re written in your source code."},{"type":"text","text":" "},{"type":"text","text":"That is, the code in the first "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement executes last,"},{"type":"text","text":" "},{"type":"text","text":"the code in the second "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement executes second to last,"},{"type":"text","text":" "},{"type":"text","text":"and so on."},{"type":"text","text":" "},{"type":"text","text":"The last "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement in source code order executes first."}]},{"type":"codeListing","syntax":"swift","code":["func processFile(filename: String) throws {","    if exists(filename) {","        let file = open(filename)","        defer {","            close(file)","        }","        while let line = try file.readline() {","            \/\/ Work with the file.","        }","        \/\/ close(file) is called here, at the end of the scope.","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The above example uses a "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"to ensure that the "},{"type":"codeVoice","code":"open(_:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"has a corresponding call to "},{"type":"codeVoice","code":"close(_:)"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use a "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"even when no error handling code is involved."}]}],"type":"aside","name":"Note"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn more about using "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/support\/beta-software\/"},{"type":"text","text":"."}]}],"type":"aside","name":"Beta Software"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Respond to and recover from errors."}],"kind":"article","metadata":{"title":"Error Handling"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"role":"article","title":"El lenguaje de programación Swift (5.9 beta)","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language"},"https://developer.apple.com/documentation/swift/cocoa_design_patterns/handling_cocoa_errors_in_swift":{"title":"Handling Cocoa Errors in Swift","titleInlineContent":[{"type":"text","text":"Handling Cocoa Errors in Swift"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/cocoa_design_patterns\/handling_cocoa_errors_in_swift","url":"https:\/\/developer.apple.com\/documentation\/swift\/cocoa_design_patterns\/handling_cocoa_errors_in_swift"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Patterns":{"role":"article","title":"Patterns","abstract":[{"type":"text","text":"Match and destructure values."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/patterns"},"https://developer.apple.com/support/beta-software/":{"title":"Apple’s beta software","titleInlineContent":[{"type":"text","text":"Apple’s beta software"}],"type":"link","identifier":"https:\/\/developer.apple.com\/support\/beta-software\/","url":"https:\/\/developer.apple.com\/support\/beta-software\/"}}}