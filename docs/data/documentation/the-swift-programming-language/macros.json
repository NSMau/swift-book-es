{"abstract":[{"text":"Use macros to generate code at compile time.","type":"text"}],"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"title":"Macros"},"sections":[],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Macros transform your source code when you compile it,"},{"type":"text","text":" "},{"type":"text","text":"letting you avoid writing repetitive code by hand."},{"type":"text","text":" "},{"type":"text","text":"During compilation,"},{"type":"text","text":" "},{"text":"Swift expands any macros in your code before building your code as usual.","type":"text"}]},{"inlineContent":[{"type":"image","identifier":"macro-expansion"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Expanding a macro is always an additive operation:","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Macros add new code,"},{"type":"text","text":" "},{"type":"text","text":"but they never delete or modify existing code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both the input to a macro and the output of macro expansion"},{"type":"text","text":" "},{"type":"text","text":"are checked to ensure they’re syntactically valid Swift code."},{"type":"text","text":" "},{"type":"text","text":"Likewise, the values you pass to a macro"},{"type":"text","text":" "},{"type":"text","text":"and the values in code generated by a macro"},{"text":" ","type":"text"},{"type":"text","text":"are checked to ensure they have the correct types."},{"type":"text","text":" "},{"type":"text","text":"In addition,"},{"type":"text","text":" "},{"text":"if the macro’s implementation encounters an error when expanding that macro,","type":"text"},{"type":"text","text":" "},{"text":"the compiler treats this as a compilation error.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"These guarantees make it easier to reason about code that uses macros,"},{"type":"text","text":" "},{"type":"text","text":"and they make it easier to identify issues"},{"type":"text","text":" "},{"text":"like using a macro incorrectly","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or a macro implementation that has a bug."}]},{"type":"paragraph","inlineContent":[{"text":"Swift has two kinds of macros:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Freestanding macros","type":"text"}],"type":"emphasis"},{"text":" appear on their own,","type":"text"},{"type":"text","text":" "},{"text":"without being attached to a declaration.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Attached macros"}]},{"text":" modify the declaration that they’re attached to.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"You call attached and freestanding macros slightly differently,"},{"text":" ","type":"text"},{"type":"text","text":"but they both follow the same model for macro expansion,"},{"type":"text","text":" "},{"type":"text","text":"and you implement them both using the same approach."},{"text":" ","type":"text"},{"text":"The following sections describe both kinds of macros in more detail.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Macros-Freestanding","type":"heading","text":"Macros Freestanding"},{"inlineContent":[{"type":"text","text":"To call a freestanding macro,"},{"type":"text","text":" "},{"type":"text","text":"you write a number sign ("},{"type":"codeVoice","code":"#"},{"text":") before its name,","type":"text"},{"type":"text","text":" "},{"text":"and you write any arguments to the macro in parentheses after its name.","type":"text"},{"type":"text","text":" "},{"text":"For example:","type":"text"}],"type":"paragraph"},{"code":["func myFunction() {","    print(\"Currently running \\(#function)\")","    #warning(\"Something's wrong\")","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"In the first line,"},{"type":"text","text":" "},{"code":"#function","type":"codeVoice"},{"type":"text","text":" calls the "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/function","isActive":true},{"type":"text","text":" macro from the Swift standard library."},{"text":" ","type":"text"},{"type":"text","text":"When you compile this code,"},{"text":" ","type":"text"},{"type":"text","text":"Swift calls that macro’s implementation,"},{"text":" ","type":"text"},{"text":"which replaces ","type":"text"},{"code":"#function","type":"codeVoice"},{"type":"text","text":" with the name of the current function."},{"type":"text","text":" "},{"type":"text","text":"When you run this code and call "},{"code":"myFunction()","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"it prints “Currently running myFunction()”."},{"text":" ","type":"text"},{"type":"text","text":"In the second line,"},{"type":"text","text":" "},{"code":"#warning","type":"codeVoice"},{"text":" calls the ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/warning(_:)","isActive":true},{"text":" macro from the Swift standard library","type":"text"},{"type":"text","text":" "},{"text":"to produce a custom compile-time warning.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Freestanding macros can produce a value, like "},{"code":"#function","type":"codeVoice"},{"type":"text","text":" does,"},{"text":" ","type":"text"},{"type":"text","text":"or they can perform an action at compile time, like "},{"code":"#warning","type":"codeVoice"},{"type":"text","text":" does."}],"type":"paragraph"},{"anchor":"Macros-Adjuntas","level":2,"text":"Macros Adjuntas","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To call an attached macro,"},{"type":"text","text":" "},{"type":"text","text":"you write an at sign ("},{"type":"codeVoice","code":"@"},{"type":"text","text":") before its name,"},{"type":"text","text":" "},{"text":"and you write any arguments to the macro in parentheses after its name.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Attached macros modify the declaration that they’re attached to.","type":"text"},{"text":" ","type":"text"},{"text":"They add code to that declaration,","type":"text"},{"text":" ","type":"text"},{"text":"like defining a new method or adding conformance to a protocol.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, consider the following code"},{"type":"text","text":" "},{"text":"that doesn’t use macros:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct SundaeToppings: OptionSet {","    let rawValue: Int","    static let nuts = SundaeToppings(rawValue: 1 << 0)","    static let cherry = SundaeToppings(rawValue: 1 << 1)","    static let fudge = SundaeToppings(rawValue: 1 << 2)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this code,"},{"text":" ","type":"text"},{"type":"text","text":"each of the options in the "},{"type":"codeVoice","code":"SundaeToppings"},{"type":"text","text":" option set"},{"text":" ","type":"text"},{"text":"includes a call to the initializer,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which is repetitive and manual."},{"text":" ","type":"text"},{"type":"text","text":"It would be easy to make a mistake when adding a new option,"},{"text":" ","type":"text"},{"text":"like typing the wrong number at the end of the line.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Here’s a version of this code that uses a macro instead:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@OptionSet<Int>","struct SundaeToppings {","    private enum Options: Int {","        case nuts","        case cherry","        case fudge","    }","}"]},{"inlineContent":[{"type":"text","text":"This version of "},{"code":"SundaeToppings","type":"codeVoice"},{"type":"text","text":" calls an "},{"type":"codeVoice","code":"@OptionSet"},{"type":"text","text":" macro."},{"text":" ","type":"text"},{"type":"text","text":"The macro reads the list of cases in the private enumeration,"},{"type":"text","text":" "},{"type":"text","text":"generates the list of constants for each option,"},{"text":" ","type":"text"},{"type":"text","text":"and adds a conformance to the "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/optionset-swift.protocol","type":"reference","isActive":true},{"type":"text","text":" protocol."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For comparison,"},{"text":" ","type":"text"},{"text":"here’s what the expanded version of the ","type":"text"},{"code":"@OptionSet","type":"codeVoice"},{"type":"text","text":" macro looks like."},{"text":" ","type":"text"},{"type":"text","text":"You don’t write this code,"},{"text":" ","type":"text"},{"type":"text","text":"and you would see it only if you specifically asked Swift"},{"type":"text","text":" "},{"type":"text","text":"to show the macro’s expansion."}]},{"syntax":"swift","code":["struct SundaeToppings {","    private enum Options: Int {","        case nuts","        case cherry","        case fudge","    }","","    typealias RawValue = Int","    var rawValue: RawValue","    init() { self.rawValue = 0 }","    init(rawValue: RawValue) { self.rawValue = rawValue }","    static let nuts: Self = Self(rawValue: 1 << Options.nuts.rawValue)","    static let cherry: Self = Self(rawValue: 1 << Options.cherry.rawValue)","    static let fudge: Self = Self(rawValue: 1 << Options.fudge.rawValue)","}","extension SundaeToppings: OptionSet { }"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of the code after the private enumeration"},{"type":"text","text":" "},{"type":"text","text":"comes from the "},{"type":"codeVoice","code":"@OptionSet"},{"text":" macro.","type":"text"},{"type":"text","text":" "},{"text":"The version of ","type":"text"},{"code":"SundaeToppings","type":"codeVoice"},{"text":" ","type":"text"},{"text":"that uses a macro to generate all of the static variables","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is easier to read and easier to maintain"},{"type":"text","text":" "},{"type":"text","text":"than the manually coded version, earlier."}]},{"level":2,"type":"heading","anchor":"Declaraci%C3%B3n-de-Macros","text":"Declaración de Macros"},{"type":"paragraph","inlineContent":[{"text":"In most Swift code,","type":"text"},{"type":"text","text":" "},{"text":"when you implement a symbol, like a function or type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"there’s no separate declaration."},{"type":"text","text":" "},{"type":"text","text":"However, for macros, the declaration and implementation are separate."},{"type":"text","text":" "},{"text":"A macro’s declaration contains its name,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the parameters it takes,"},{"type":"text","text":" "},{"type":"text","text":"where it can be used,"},{"text":" ","type":"text"},{"text":"and what kind of code it generates.","type":"text"},{"text":" ","type":"text"},{"text":"A macro’s implementation contains the code","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that expands the macro by generating Swift code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You introduce a macro declaration with the "},{"type":"codeVoice","code":"macro"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"text":"here’s part of the declaration for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"@OptionSet","type":"codeVoice"},{"type":"text","text":" macro used in the previous example:"}]},{"type":"codeListing","syntax":"swift","code":["public macro OptionSet<RawType>() =","        #externalMacro(module: \"SwiftMacros\", type: \"OptionSetMacro\")"]},{"inlineContent":[{"type":"text","text":"The first line"},{"type":"text","text":" "},{"text":"specifies the macro’s name and its arguments —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the name is "},{"code":"OptionSet","type":"codeVoice"},{"type":"text","text":", and it doesn’t take any arguments."},{"text":" ","type":"text"},{"type":"text","text":"The second line"},{"type":"text","text":" "},{"type":"text","text":"uses the "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/externalmacro(module:type:)"},{"text":" macro from the Swift standard library","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to tell Swift where the macro’s implementation is located."},{"type":"text","text":" "},{"text":"In this case,","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"SwiftMacros"},{"text":" module","type":"text"},{"type":"text","text":" "},{"type":"text","text":"contains a type named "},{"code":"OptionSetMacro","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which implements the "},{"type":"codeVoice","code":"@OptionSet"},{"text":" macro.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Because ","type":"text"},{"type":"codeVoice","code":"OptionSet"},{"text":" is an attached macro,","type":"text"},{"text":" ","type":"text"},{"text":"its name uses upper camel case,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"like the names for structures and classes."},{"type":"text","text":" "},{"type":"text","text":"Freestanding macros have lower camel case names,"},{"type":"text","text":" "},{"text":"like the names for variables and functions.","type":"text"}]},{"type":"aside","name":"Note","content":[{"inlineContent":[{"text":"","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Macros are always declared as "},{"code":"public","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because the code that declares a macro"},{"text":" ","type":"text"},{"type":"text","text":"is in a different module from code that uses that macro,"},{"text":" ","type":"text"},{"type":"text","text":"there isn’t anywhere you could apply a non-public macro."}],"type":"paragraph"}],"style":"note"},{"type":"paragraph","inlineContent":[{"text":"A macro declaration defines the macro’s ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"roles","type":"text"}]},{"text":" —","type":"text"},{"text":" ","type":"text"},{"text":"the places in source code where that macro can be called,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the kinds of code the macro can generate."},{"type":"text","text":" "},{"text":"Every macro has one or more roles,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which you write as part of the attributes"},{"type":"text","text":" "},{"type":"text","text":"at the beginning of the macro declaration."},{"text":" ","type":"text"},{"type":"text","text":"Here’s a bit more of the declaration for "},{"type":"codeVoice","code":"@OptionSet"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"including the attributes for its roles:","type":"text"}]},{"type":"codeListing","code":["@attached(member)","@attached(conformance)","public macro OptionSet<RawType>() =","        #externalMacro(module: \"SwiftMacros\", type: \"OptionSetMacro\")"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"@attached"},{"type":"text","text":" attribute appears twice in this declaration,"},{"text":" ","type":"text"},{"text":"once for each macro role.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The first use, "},{"code":"@attached(member)","type":"codeVoice"},{"text":", indicates that the macro","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"adds new members to the type you apply it to."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"@OptionSet","type":"codeVoice"},{"text":" macro adds an ","type":"text"},{"code":"init(rawValue:)","type":"codeVoice"},{"text":" initializer","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that’s required by the "},{"type":"codeVoice","code":"OptionSet"},{"type":"text","text":" protocol,"},{"text":" ","type":"text"},{"type":"text","text":"as well as some additional members."},{"text":" ","type":"text"},{"text":"The second use, ","type":"text"},{"type":"codeVoice","code":"@attached(conformance)"},{"text":", tells you that ","type":"text"},{"type":"codeVoice","code":"@OptionSet"},{"type":"text","text":" "},{"type":"text","text":"adds one or more protocol conformances."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"@OptionSet"},{"text":" macro","type":"text"},{"text":" ","type":"text"},{"text":"extends the type that you apply the macro to,","type":"text"},{"text":" ","type":"text"},{"text":"to add conformance to the ","type":"text"},{"type":"codeVoice","code":"OptionSet"},{"text":" protocol.","type":"text"}]},{"inlineContent":[{"text":"For a freestanding macro,","type":"text"},{"type":"text","text":" "},{"text":"you write the ","type":"text"},{"code":"@freestanding","type":"codeVoice"},{"type":"text","text":" attribute to specify its role:"}],"type":"paragraph"},{"type":"codeListing","code":["@freestanding(expression)","public macro line<T: ExpressibleByIntegerLiteral>() -> T =","        \/* ... location of the macro implementation... *\/"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"#line"},{"type":"text","text":" macro above has the "},{"type":"codeVoice","code":"expression"},{"type":"text","text":" role."},{"text":" ","type":"text"},{"text":"An expression macro produces a value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or performs a compile-time action like generating a warning."}]},{"inlineContent":[{"text":"In addition to the macro’s role,","type":"text"},{"type":"text","text":" "},{"text":"a macro’s declaration provides information about","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the names of the symbols that the macro generates."},{"type":"text","text":" "},{"type":"text","text":"When a macro declaration provides a list of names,"},{"type":"text","text":" "},{"type":"text","text":"it’s guaranteed to produce only declarations that use those names,"},{"text":" ","type":"text"},{"text":"which helps you understand and debug the generated code.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Here’s the full declaration of "},{"code":"@OptionSet","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@attached(member, names: named(RawValue), named(rawValue),","        named(`init`), arbitrary)","@attached(conformance)","public macro OptionSet<RawType>() =","        #externalMacro(module: \"SwiftMacros\", type: \"OptionSetMacro\")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the declaration above,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"@attached(member)","type":"codeVoice"},{"type":"text","text":" macro includes arguments after the "},{"code":"named:","type":"codeVoice"},{"text":" label","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for each of the symbols that the "},{"code":"@OptionSet","type":"codeVoice"},{"type":"text","text":" macro generates."},{"text":" ","type":"text"},{"type":"text","text":"The macro adds declarations for symbols named"},{"type":"text","text":" "},{"type":"codeVoice","code":"RawValue"},{"type":"text","text":", "},{"code":"rawValue","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"init","type":"codeVoice"},{"text":" —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"because those names are known ahead of time,"},{"type":"text","text":" "},{"text":"the macro declaration lists them explicitly.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The macro declaration also includes ","type":"text"},{"code":"arbitrary","type":"codeVoice"},{"type":"text","text":" after the list of names,"},{"text":" ","type":"text"},{"type":"text","text":"allowing the macro to generate declarations"},{"type":"text","text":" "},{"type":"text","text":"whose names aren’t known until you use the macro."},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when the "},{"type":"codeVoice","code":"@OptionSet"},{"text":" macro is applied to the ","type":"text"},{"code":"SundaeToppings","type":"codeVoice"},{"type":"text","text":" above,"},{"text":" ","type":"text"},{"text":"it generates type properties that correspond to the enumeration cases,","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"nuts"},{"text":", ","type":"text"},{"code":"cherry","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"fudge"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"For more information,"},{"type":"text","text":" "},{"text":"including a full list of macro roles,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#attached","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#freestanding","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"anchor":"Expansi%C3%B3n-de-Macros","text":"Expansión de Macros"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When building Swift code that uses macros,"},{"type":"text","text":" "},{"type":"text","text":"the compiler calls the macros’ implementation to expand them."}]},{"inlineContent":[{"type":"image","identifier":"macro-expansion-full"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Specifically, Swift expands macros in the following way:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"The compiler reads the code,"},{"type":"text","text":" "},{"type":"text","text":"creating an in-memory representation of the syntax."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The compiler sends part of the in-memory representation","type":"text"},{"type":"text","text":" "},{"text":"to the macro implementation,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which expands the macro."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The compiler replaces the macro call with its expanded form."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The compiler continues with compilation,"},{"text":" ","type":"text"},{"type":"text","text":"using the expanded source code."}]}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To go through the specific steps, consider the following:"}]},{"syntax":"swift","type":"codeListing","code":["let magicNumber = #fourCharacterCode(\"ABCD\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"#fourCharacterCode","type":"codeVoice"},{"type":"text","text":" macro takes a string that’s four characters long"},{"text":" ","type":"text"},{"type":"text","text":"and returns an unsigned 32-bit integer"},{"type":"text","text":" "},{"type":"text","text":"that corresponds to the ASCII values in the string joined together."},{"type":"text","text":" "},{"text":"Some file formats use integers like this to identify data","type":"text"},{"text":" ","type":"text"},{"text":"because they’re compact but still readable in a debugger.","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros#Implementaci%C3%B3n-de-Una-Macro"},{"text":" section below","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"shows how to implement this macro."}]},{"inlineContent":[{"type":"text","text":"To expand the macros in the code above,"},{"text":" ","type":"text"},{"type":"text","text":"the compiler reads the Swift file"},{"type":"text","text":" "},{"type":"text","text":"and creates an in-memory representation of that code"},{"type":"text","text":" "},{"text":"known as an ","type":"text"},{"inlineContent":[{"text":"abstract syntax tree","type":"text"}],"type":"emphasis"},{"text":", or AST.","type":"text"},{"type":"text","text":" "},{"text":"The AST makes the code’s structure explicit,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which makes it easier to write code that interacts with that structure —"},{"type":"text","text":" "},{"type":"text","text":"like a compiler or a macro implementation."},{"text":" ","type":"text"},{"type":"text","text":"Here’s a representation of the AST for the code above,"},{"type":"text","text":" "},{"text":"slightly simplified by omitting some extra detail:","type":"text"}],"type":"paragraph"},{"inlineContent":[{"identifier":"macro-ast-original","type":"image"}],"type":"paragraph"},{"inlineContent":[{"text":"The diagram above shows how the structure of this code","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is represented in memory."},{"type":"text","text":" "},{"text":"Each element in the AST","type":"text"},{"type":"text","text":" "},{"type":"text","text":"corresponds to a part of the source code."},{"text":" ","type":"text"},{"type":"text","text":"The “Constant declaration” AST element"},{"type":"text","text":" "},{"text":"has two child elements under it,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which represent the two parts of a constant declaration:"},{"text":" ","type":"text"},{"type":"text","text":"its name and its value."},{"type":"text","text":" "},{"type":"text","text":"The “Macro call” element has child elements"},{"text":" ","type":"text"},{"type":"text","text":"that represent the macro’s name"},{"text":" ","type":"text"},{"type":"text","text":"and the list of arguments being passed to the macro."}],"type":"paragraph"},{"inlineContent":[{"text":"As part of constructing this AST,","type":"text"},{"type":"text","text":" "},{"text":"the compiler checks that the source code is valid Swift.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example, "},{"type":"codeVoice","code":"#fourCharacterCode"},{"type":"text","text":" takes a single argument,"},{"text":" ","type":"text"},{"text":"which must be a string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If you tried to pass an integer argument,"},{"type":"text","text":" "},{"type":"text","text":"or forgot the quotation mark ("},{"type":"codeVoice","code":"\""},{"type":"text","text":") at the end of the string literal,"},{"text":" ","type":"text"},{"type":"text","text":"you’d get an error at this point in the process."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The compiler finds the places in the code where you call a macro,"},{"type":"text","text":" "},{"text":"and loads the external binary that implements those macros.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For each macro call,"},{"type":"text","text":" "},{"text":"the compiler passes part of the AST to that macro’s implementation.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Here’s a representation of that partial AST:"}]},{"type":"paragraph","inlineContent":[{"identifier":"macro-ast-input","type":"image"}]},{"inlineContent":[{"text":"The implementation of the ","type":"text"},{"type":"codeVoice","code":"#fourCharacterCode"},{"type":"text","text":" macro"},{"text":" ","type":"text"},{"text":"reads this partial AST as its input when expanding the macro.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"A macro’s implementation"},{"text":" ","type":"text"},{"text":"operates only on the partial AST that it receives as its input,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"meaning a macro always expands the same way"},{"text":" ","type":"text"},{"type":"text","text":"regardless of what code comes before and after it."},{"type":"text","text":" "},{"text":"This limitation helps make macro expansion easier to understand,","type":"text"},{"type":"text","text":" "},{"text":"and helps your code build faster","type":"text"},{"type":"text","text":" "},{"text":"because Swift can avoid expanding macros that haven’t changed.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Swift helps macro authors avoid accidentally reading other input","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by restricting the code that implements macros:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The AST passed to a macro implementation"},{"type":"text","text":" "},{"type":"text","text":"contains only the AST elements that represent the macro,"},{"text":" ","type":"text"},{"text":"not any of the code that comes before or after it.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"The macro implementation runs in a sandboxed environment","type":"text"},{"text":" ","type":"text"},{"text":"that prevents it from accessing the file system or the network.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"In addition to these safeguards,"},{"type":"text","text":" "},{"text":"the macro’s author is responsible for not reading or modifying anything","type":"text"},{"type":"text","text":" "},{"type":"text","text":"outside of the macro’s inputs."},{"type":"text","text":" "},{"type":"text","text":"For example, a macro’s expansion must not depend on the current time of day."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The implementation of "},{"code":"#fourCharacterCode","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"generates a new AST containing the expanded code."},{"type":"text","text":" "},{"type":"text","text":"Here’s what that code returns to the compiler:"}]},{"type":"paragraph","inlineContent":[{"identifier":"macro-ast-output","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"When the compiler receives this expansion,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it replaces the AST element that contains the macro call"},{"type":"text","text":" "},{"type":"text","text":"with the element that contains the macro’s expansion."},{"type":"text","text":" "},{"text":"After macro expansion,","type":"text"},{"type":"text","text":" "},{"text":"the compiler checks again to ensure","type":"text"},{"type":"text","text":" "},{"text":"the program is still syntactically valid Swift","type":"text"},{"type":"text","text":" "},{"text":"and all the types are correct.","type":"text"},{"type":"text","text":" "},{"text":"That produces a final AST that can be compiled as usual:","type":"text"}]},{"inlineContent":[{"identifier":"macro-ast-result","type":"image"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This AST corresponds to Swift code like this:"}]},{"type":"codeListing","syntax":"swift","code":["let magicNumber = 1145258561"]},{"type":"paragraph","inlineContent":[{"text":"In this example, the input source code has only one macro,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but a real program could have several instances of the same macro"},{"text":" ","type":"text"},{"text":"and several calls to different macros.","type":"text"},{"text":" ","type":"text"},{"text":"The compiler expands macros one at a time.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If one macro appears inside another,"},{"type":"text","text":" "},{"type":"text","text":"the outer macro is expanded first —"},{"type":"text","text":" "},{"text":"this lets the outer macro modify the inner macro before it’s expanded.","type":"text"}]},{"anchor":"Implementaci%C3%B3n-de-Una-Macro","level":2,"text":"Implementación de Una Macro","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To implement a macro, you make two components:"},{"text":" ","type":"text"},{"type":"text","text":"A type that performs the macro expansion,"},{"type":"text","text":" "},{"text":"and a library that declares the macro to expose it as API.","type":"text"},{"type":"text","text":" "},{"text":"These parts are built separately from code that uses the macro,","type":"text"},{"type":"text","text":" "},{"text":"even if you’re developing the macro and its clients together,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because the macro implementation runs"},{"type":"text","text":" "},{"text":"as part of building the macro’s clients.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To create a new macro using Swift Package Manager,"},{"type":"text","text":" "},{"type":"text","text":"run "},{"type":"codeVoice","code":"swift package init --type macro"},{"type":"text","text":" —"},{"type":"text","text":" "},{"text":"this creates several files,","type":"text"},{"type":"text","text":" "},{"text":"including a template for a macro implementation and declaration.","type":"text"}]},{"inlineContent":[{"type":"text","text":"To add macros to an existing project,"},{"type":"text","text":" "},{"text":"add a target for the macro implementation","type":"text"},{"type":"text","text":" "},{"text":"and a target for the macro library.","type":"text"},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can add something like the following to your "},{"code":"Package.swift","type":"codeVoice"},{"type":"text","text":" file,"},{"type":"text","text":" "},{"type":"text","text":"changing the names to match your project:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["targets: [","    \/\/ Macro implementation that performs the source transformations.","    .macro(","        name: \"MyProjectMacros\",","        dependencies: [","            .product(name: \"SwiftSyntaxMacros\", package: \"swift-syntax\"),","            .product(name: \"SwiftCompilerPlugin\", package: \"swift-syntax\")","        ]","    ),","","    \/\/ Library that exposes a macro as part of its API.","    .target(name: \"MyProject\", dependencies: [\"MyProjectMacros\"]),","]"]},{"inlineContent":[{"type":"text","text":"The code above defines two targets:"},{"text":" ","type":"text"},{"type":"codeVoice","code":"MyProjectMacros"},{"type":"text","text":" contains the implementation of the macros,"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"code":"MyProject","type":"codeVoice"},{"type":"text","text":" makes those macros available."}],"type":"paragraph"},{"inlineContent":[{"text":"The implementation of a macro","type":"text"},{"type":"text","text":" "},{"text":"uses the ","type":"text"},{"type":"reference","identifier":"http:\/\/github.com\/apple\/swift-syntax\/","isActive":true},{"type":"text","text":" module to interact with Swift code"},{"text":" ","type":"text"},{"text":"in a structured way, using an AST.","type":"text"},{"type":"text","text":" "},{"text":"If you created a new macro package with Swift Package Manager,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the generated "},{"code":"Package.swift","type":"codeVoice"},{"text":" file","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"automatically includes a dependency on SwiftSyntax."},{"type":"text","text":" "},{"text":"If you’re adding macros to an existing project,","type":"text"},{"type":"text","text":" "},{"text":"add a dependency on SwiftSyntax in your ","type":"text"},{"type":"codeVoice","code":"Package.swift"},{"text":" file:","type":"text"}],"type":"paragraph"},{"code":["dependencies: [","    .package(url: \"https:\/\/github.com\/apple\/swift-syntax.git\", from: \"some-tag\"),","],"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Replace the ","type":"text"},{"type":"codeVoice","code":"some-tag"},{"text":" placeholder in the code above","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with the Git tag for the version of SwiftSyntax you want to use."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Depending on your macro’s role,"},{"type":"text","text":" "},{"type":"text","text":"there’s a corresponding protocol from SwiftSystem"},{"text":" ","type":"text"},{"text":"that the macro implementation conforms to.","type":"text"},{"text":" ","type":"text"},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"consider "},{"code":"#fourCharacterCode","type":"codeVoice"},{"text":" from the previous section.","type":"text"},{"text":" ","type":"text"},{"text":"Here’s a structure that implements that macro:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["public struct FourCharacterCode: ExpressionMacro {","    public static func expansion(","        of node: some FreestandingMacroExpansionSyntax,","        in context: some MacroExpansionContext","    ) throws -> ExprSyntax {","        guard let argument = node.argumentList.first?.expression,","              let segments = argument.as(StringLiteralExprSyntax.self)?.segments,","              segments.count == 1,","              case .stringSegment(let literalSegment)? = segments.first","        else {","            throw CustomError.message(\"Need a static string\")","        }","","        let string = literalSegment.content.text","        guard let result = fourCharacterCode(for: string) else {","            throw CustomError.message(\"Invalid four-character code\")","        }","","        return \"\\(raw: result)\"","    }","}","","private func fourCharacterCode(for characters: String) -> UInt32? {","    guard characters.count == 4 else { return nil }","","    var result: UInt32 = 0","    for character in characters {","        result = result << 8","        guard let asciiValue = character.asciiValue else { return nil }","        result += UInt32(asciiValue)","    }","    return result.bigEndian","}","enum CustomError: Error { case message(String) }"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"#fourCharacterCode","type":"codeVoice"},{"text":" macro","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is a freestanding macro that produces an expression,"},{"text":" ","type":"text"},{"type":"text","text":"so the "},{"code":"FourCharacterCode","type":"codeVoice"},{"text":" type that implements it","type":"text"},{"type":"text","text":" "},{"type":"text","text":"conforms to the "},{"code":"ExpressionMacro","type":"codeVoice"},{"text":" protocol.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"ExpressionMacro"},{"type":"text","text":" protocol has one requirement,"},{"text":" ","type":"text"},{"text":"a ","type":"text"},{"code":"expansion(of:in:)","type":"codeVoice"},{"type":"text","text":" method that expands the AST."},{"type":"text","text":" "},{"text":"For the list of macro roles and their corresponding SwiftSystem protocols,","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#attached","type":"reference","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#freestanding","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","type":"reference","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"To expand the ","type":"text"},{"code":"#fourCharacterCode","type":"codeVoice"},{"text":" macro,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift sends the AST for the code that uses this macro"},{"type":"text","text":" "},{"type":"text","text":"to the library that contains the macro implementation."},{"text":" ","type":"text"},{"text":"Inside the library, Swift calls ","type":"text"},{"code":"FourCharacterCode.expansion(of:in:)","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"passing in the AST and the context as arguments to the method.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The implementation of "},{"type":"codeVoice","code":"expansion(of:in:)"},{"text":" ","type":"text"},{"type":"text","text":"finds the string that was passed as an argument to "},{"code":"#fourCharacterCode","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"and calculates the corresponding integer literal value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"text":" ","type":"text"},{"text":"the first ","type":"text"},{"type":"codeVoice","code":"guard"},{"text":" block extracts the string literal from the AST,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"assigning that AST element to "},{"type":"codeVoice","code":"literalSegment"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"The second "},{"code":"guard","type":"codeVoice"},{"type":"text","text":" block"},{"type":"text","text":" "},{"type":"text","text":"calls the private "},{"type":"codeVoice","code":"FourCharacterCode(for:)"},{"text":" function.","type":"text"},{"type":"text","text":" "},{"text":"Both of these blocks throw an error if the macro is used incorrectly —","type":"text"},{"type":"text","text":" "},{"text":"the error message becomes a compiler error","type":"text"},{"text":" ","type":"text"},{"text":"at the malformed call site.","type":"text"},{"text":" ","type":"text"},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"text":"if you try to call the macro as ","type":"text"},{"type":"codeVoice","code":"#fourCharacterCode(\"AB\" + \"CD\")"},{"type":"text","text":" "},{"text":"the compiler shows the error “Need a static string”.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"expansion(of:in:)","type":"codeVoice"},{"text":" method returns an instance of ","type":"text"},{"type":"codeVoice","code":"ExprSyntax"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"a type from SwiftSyntax that represents an expression in an AST.","type":"text"},{"text":" ","type":"text"},{"text":"Because this type conforms to the ","type":"text"},{"code":"StringLiteralConvertible","type":"codeVoice"},{"text":" protocol,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the macro implementation uses a string literal"},{"type":"text","text":" "},{"text":"as a lightweight syntax to create its result.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"All of the SwiftSyntax types that you return from a macro implementation"},{"text":" ","type":"text"},{"type":"text","text":"conform to "},{"type":"codeVoice","code":"StringLiteralConvertible"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so you can use this approach when implementing any kind of macro."}]},{"type":"heading","text":"Desarrollo y Depuración de Macros","level":2,"anchor":"Desarrollo-y-Depuraci%C3%B3n-de-Macros"},{"inlineContent":[{"text":"Macros are well suited to development using tests:","type":"text"},{"text":" ","type":"text"},{"text":"They transform one AST into another AST","type":"text"},{"type":"text","text":" "},{"type":"text","text":"without depending on any external state,"},{"type":"text","text":" "},{"text":"and without making changes to any external state.","type":"text"},{"type":"text","text":" "},{"text":"In addition, you can create syntax nodes from a string literal,","type":"text"},{"type":"text","text":" "},{"text":"which simplifies setting up the input for a test.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can also read the "},{"type":"codeVoice","code":"description"},{"text":" property of an AST","type":"text"},{"type":"text","text":" "},{"text":"to get a string to compare against an expected value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"here’s a test of the "},{"type":"codeVoice","code":"#fourCharacterCode"},{"text":" macro from previous sections:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let source: SourceFileSyntax =","    \"\"\"","    let abcd = #fourCharacterCode(\"ABCD\")","    \"\"\"","","let file = BasicMacroExpansionContext.KnownSourceFile(","    moduleName: \"MyModule\",","    fullFilePath: \"test.swift\"",")","","let context = BasicMacroExpansionContext(sourceFiles: [source: file])","","let transformedSF = source.expand(","    macros:[\"fourCharacterCode\": FourCC.self],","    in: context",")","","let expectedDescription =","    \"\"\"","    let abcd = 1145258561","    \"\"\"","","precondition(transformedSF.description == expectedDescription)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The example above tests the macro using a precondition,","type":"text"},{"type":"text","text":" "},{"text":"but you could use a testing framework instead.","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"inlineContent":[{"text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conoce más acerca del uso del "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","isActive":true},{"type":"text","text":"."}]}],"type":"aside","name":"Software Beta","style":"note"}],"kind":"content"}],"references":{"http://github.com/apple/swift-syntax/":{"identifier":"http:\/\/github.com\/apple\/swift-syntax\/","url":"http:\/\/github.com\/apple\/swift-syntax\/","type":"link","title":"SwiftSyntax","titleInlineContent":[{"type":"text","text":"SwiftSyntax"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#freestanding":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#freestanding","url":"\/documentation\/the-swift-programming-language\/attributes#freestanding","type":"topic","title":"freestanding","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"url":"\/documentation\/the-swift-programming-language","type":"topic","abstract":[],"kind":"article","title":"The Swift Programming Language (5.9)","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","role":"collection"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes":{"kind":"article","title":"Attributes","url":"\/documentation\/the-swift-programming-language\/attributes","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","abstract":[{"text":"Add information to declarations and types.","type":"text"}],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#attached":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#attached","url":"\/documentation\/the-swift-programming-language\/attributes#attached","type":"topic","title":"attached","abstract":[],"kind":"section"},"macro-expansion-full":{"identifier":"macro-expansion-full","variants":[{"traits":["2x","light"],"url":"\/images\/org.swift.tspl\/macro-expansion-full@2x.png"},{"url":"\/images\/org.swift.tspl\/macro-expansion-full~dark@2x.png","traits":["2x","dark"]}],"type":"image","alt":"Diagram showing the four steps of expanding macros.  The input is Swift source code.  This becomes a tree, representing the code’s structure.  The macro implementation adds branches to the tree.  The result is Swift source with additional code."},"https://developer.apple.com/documentation/swift/function":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/function","url":"https:\/\/developer.apple.com\/documentation\/swift\/function","type":"link","title":"function","titleInlineContent":[{"type":"codeVoice","code":"function"}]},"https://developer.apple.com/documentation/swift/externalmacro(module:type:)":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/externalmacro(module:type:)","url":"https:\/\/developer.apple.com\/documentation\/swift\/externalmacro(module:type:)","type":"link","title":"externalMacro(module:type:)","titleInlineContent":[{"type":"codeVoice","code":"externalMacro(module:type:)"}]},"macro-ast-input":{"identifier":"macro-ast-input","variants":[{"traits":["2x","light"],"url":"\/images\/org.swift.tspl\/macro-ast-input@2x.png"},{"url":"\/images\/org.swift.tspl\/macro-ast-input~dark@2x.png","traits":["2x","dark"]}],"type":"image","alt":"A tree diagram, with a macro call as the root element.  The macro call has a name, fourCharacterCode, and arguments.  The argument is a string literal, ABCD."},"macro-ast-result":{"identifier":"macro-ast-result","variants":[{"traits":["2x","light"],"url":"\/images\/org.swift.tspl\/macro-ast-result@2x.png"},{"url":"\/images\/org.swift.tspl\/macro-ast-result~dark@2x.png","traits":["2x","dark"]}],"type":"image","alt":"A tree diagram, with a constant as the root element.  The constant has a name, magic number, and a value.  The constant’s value is the integer literal 1145258561"},"https://developer.apple.com/documentation/swift/warning(_:)":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/warning(_:)","url":"https:\/\/developer.apple.com\/documentation\/swift\/warning(_:)","type":"link","title":"warning(_:)","titleInlineContent":[{"type":"codeVoice","code":"warning(_:)"}]},"macro-ast-original":{"identifier":"macro-ast-original","variants":[{"traits":["2x","light"],"url":"\/images\/org.swift.tspl\/macro-ast-original@2x.png"},{"url":"\/images\/org.swift.tspl\/macro-ast-original~dark@2x.png","traits":["2x","dark"]}],"type":"image","alt":"A tree diagram, with a constant as the root element.  The constant has a name, magic number, and a value.  The constant’s value is a macro call.  The macro call has a name, fourCharacterCode, and arguments.  The argument is a string literal, ABCD."},"https://developer.apple.com/documentation/swift/optionset-swift.protocol":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/optionset-swift.protocol","url":"https:\/\/developer.apple.com\/documentation\/swift\/optionset-swift.protocol","type":"link","title":"OptionSet","titleInlineContent":[{"type":"codeVoice","code":"OptionSet"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Macros#Implementaci%C3%B3n-de-Una-Macro":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros#Implementaci%C3%B3n-de-Una-Macro","url":"\/documentation\/the-swift-programming-language\/macros#Implementaci%C3%B3n-de-Una-Macro","type":"topic","title":"Implementación de Una Macro","abstract":[],"kind":"section"},"https://developer.apple.com/es/support/beta-software/":{"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"link","title":"software beta de Apple","titleInlineContent":[{"type":"text","text":"software beta de Apple"}]},"macro-expansion":{"identifier":"macro-expansion","variants":[{"traits":["2x","light"],"url":"\/images\/org.swift.tspl\/macro-expansion@2x.png"},{"url":"\/images\/org.swift.tspl\/macro-expansion~dark@2x.png","traits":["2x","dark"]}],"type":"image","alt":"A diagram showing an overview of macro expansion.  On the left, a stylized representation of Swift code.  On the right, the same code with several lines added by the macro."},"macro-ast-output":{"identifier":"macro-ast-output","variants":[{"traits":["2x","light"],"url":"\/images\/org.swift.tspl\/macro-ast-output@2x.png"},{"url":"\/images\/org.swift.tspl\/macro-ast-output~dark@2x.png","traits":["2x","dark"]}],"type":"image","alt":"A tree diagram with a sigle node, the integer literal 1145258561."}}}