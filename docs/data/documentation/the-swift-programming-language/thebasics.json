{"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"metadata":{"title":"Fundamentos"},"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics"},"primaryContentSections":[{"content":[{"inlineContent":[{"type":"text","text":"Swift es un lenguaje de programación para el desarrollo de aplicaciones"},{"type":"text","text":" "},{"type":"text","text":"para iOS, macOS, watchOS, y tvOS."},{"type":"text","text":" "},{"type":"text","text":"Si tienes experiencia desarrollando en C u Objective-C,"},{"type":"text","text":" "},{"text":"muchas partes de Swift te resultarán familiares.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift proporciona sus propias versiones de todos los tipos fundamentales de C y Objective-C,"},{"text":" ","type":"text"},{"type":"text","text":"incluyendo "},{"type":"codeVoice","code":"Int"},{"text":" para enteros, ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":" y ","type":"text"},{"code":"Float","type":"codeVoice"},{"text":" para valores de coma flotante,","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Bool"},{"text":" para valores booleanos y ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" para datos textuales.","type":"text"},{"type":"text","text":" "},{"text":"Swift también ofrece poderosas versiones","type":"text"},{"type":"text","text":" "},{"type":"text","text":"de los tres tipos principales de colecciones: "},{"type":"codeVoice","code":"Array"},{"type":"text","text":", "},{"code":"Set","type":"codeVoice"},{"text":", y ","type":"text"},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"como se describe en "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"Al igual que C, Swift utiliza variables para almacenar y referenciar valores"},{"type":"text","text":" "},{"text":"mediante un nombre de identificación.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift también hace un uso extensivo de variables cuyos valores no pueden ser modificados."},{"text":" ","type":"text"},{"text":"Dichas variables se conocen como constantes","type":"text"},{"text":" ","type":"text"},{"text":"y son mucho más poderosas que las constantes en C.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"En Swift, las constantes son utilizadas"},{"text":" ","type":"text"},{"type":"text","text":"para hacer que el código resulte más seguro y más claro en la intención"},{"text":" ","type":"text"},{"text":"cuando se trabaja con valores que no necesitan cambiar.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Además de los tipos conocidos,","type":"text"},{"text":" ","type":"text"},{"text":"Swift introduce tipos avanzados que no se encuentran en Objective-C,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"como las tuplas."},{"type":"text","text":" "},{"text":"Las tuplas te permiten crear y pasar conjuntos de valores.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Puedes utilizar una tupla para hacer que una función devuelva varios valores"},{"text":" ","type":"text"},{"type":"text","text":"como un único valor compuesto."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Swift también cuenta con tipos opcionales,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"los cuales lidian con la ausencia de un valor."},{"type":"text","text":" "},{"text":"Los opcionales indican que «","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"existe"}]},{"type":"text","text":" un valor, y es igual a x»"},{"type":"text","text":" "},{"type":"text","text":"o «"},{"type":"emphasis","inlineContent":[{"text":"no existe","type":"text"}]},{"type":"text","text":" un valor en lo absoluto»."},{"type":"text","text":" "},{"type":"text","text":"Usar opcionales es similar a usar "},{"code":"nil","type":"codeVoice"},{"text":" con punteros en Objective-C,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"pero funcionan para cualquier tipo, no solo para las clases."},{"type":"text","text":" "},{"type":"text","text":"Los opcionales no solo son más seguros y significativos"},{"type":"text","text":" "},{"text":"que los punteros ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" en Objective-C,"},{"text":" ","type":"text"},{"text":"sino que también forman parte esencial de muchas de las funciones más poderosas de Swift.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift es un lenguaje con "},{"inlineContent":[{"type":"text","text":"seguridad de tipos"}],"type":"emphasis"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"lo que significa que el lenguaje te ayuda a tener claridad"},{"text":" ","type":"text"},{"type":"text","text":"con respecto a los tipos de valores con los que puede trabajar tu código."},{"type":"text","text":" "},{"text":"Si una parte de tu código requiere un ","type":"text"},{"type":"codeVoice","code":"String"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"la seguridad de tipos te impedirá pasar un ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" por error.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Del mismo modo, la seguridad de tipos evitará que pases, accidentalmente,"},{"type":"text","text":" "},{"text":"un ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" opcional a un fragmento de código que requiere un ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" no opcional."},{"type":"text","text":" "},{"type":"text","text":"La seguridad de tipos te ayuda a detectar y corregir errores lo antes posible"},{"type":"text","text":" "},{"text":"en el proceso de desarrollo.","type":"text"}]},{"level":2,"text":"Constantes y variables","type":"heading","anchor":"Constantes-y-variables"},{"inlineContent":[{"text":"Las constantes y variables asocian un nombre","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(como "},{"type":"codeVoice","code":"numeroMaximoDeIntentosDeInicioDeSesion"},{"text":" o ","type":"text"},{"type":"codeVoice","code":"mensajeDeBienvenida"},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"con un valor de un tipo particular"},{"type":"text","text":" "},{"type":"text","text":"(como el número "},{"code":"10","type":"codeVoice"},{"type":"text","text":" o la cadena "},{"code":"\"Hola\"","type":"codeVoice"},{"text":").","type":"text"},{"text":" ","type":"text"},{"text":"El valor de una ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"constante","type":"text"}]},{"text":" no se puede cambiar una vez que se asigna,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"mientras que a una "},{"inlineContent":[{"text":"variable","type":"text"}],"type":"emphasis"},{"type":"text","text":" puede asignársele un valor diferente más adelante."}],"type":"paragraph"},{"text":"Declaración de constantes y variables","anchor":"Declaraci%C3%B3n-de-constantes-y-variables","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Las constantes y variables deben ser declararadas antes de ser utilizadas.","type":"text"},{"type":"text","text":" "},{"text":"Para declarar constantes, se usa la palabra clave ","type":"text"},{"code":"let","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"mientras que las variables se declaran con la palabra clave ","type":"text"},{"code":"var","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Acá tenemos un ejemplo de cómo se pueden utilizar las constantes y variables"},{"text":" ","type":"text"},{"text":"para hacer seguimiento del número de intentos de inicio de sesión que ha realizado un usuario:","type":"text"}]},{"syntax":"swift","code":["let numeroMaximoDeIntentosDeInicioDeSesion = 10","var intentoActualDeInicioDeSesion = 0"],"type":"codeListing"},{"inlineContent":[{"text":"Este código puede leerse como:","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"«Declara una nueva constante llamada ","type":"text"},{"code":"numeroMaximoDeIntentosDeInicioDeSesion","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"y asígnale un valor de ","type":"text"},{"code":"10","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Luego, declara una nueva variable llamada "},{"type":"codeVoice","code":"intentoActualDeInicioDeSesion"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"y asígnale un valor inicial de "},{"code":"0","type":"codeVoice"},{"type":"text","text":".»"}]},{"inlineContent":[{"type":"text","text":"En este ejemplo,"},{"type":"text","text":" "},{"type":"text","text":"el número máximo de intentos de inicio de sesión permitidos se declara como una constante,"},{"type":"text","text":" "},{"text":"porque el valor máximo nunca cambia.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"El contador actual de intentos de inicio de sesión se declara como una variable,"},{"text":" ","type":"text"},{"type":"text","text":"porque este valor debe incrementarse después de cada intento de inicio de sesión fallido."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Puedes declarar múltiples constantes o variables en una sola línea,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"separadas por comas:"}]},{"type":"codeListing","syntax":"swift","code":["var x = 0.0, y = 0.0, z = 0.0"]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Si un valor almacenado en tu código nunca cambia,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"siempre debes declararlo como una constante usando la palabra clave "},{"code":"let","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Utiliza variables solo para almacenar valores que puedan cambiar."}]}],"type":"aside","style":"note","name":"Nota"},{"anchor":"Anotaciones-de-tipo","type":"heading","level":3,"text":"Anotaciones de tipo"},{"type":"paragraph","inlineContent":[{"text":"Al declarar una constante o variable, puedes proveer una ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"anotación de tipo","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"para especificar el tipo de valores que dicha constante o variable puede almacenar."},{"type":"text","text":" "},{"text":"Escribe una anotación de tipo colocando dos puntos (","type":"text"},{"type":"codeVoice","code":":"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"después del nombre de la constante o variable,"},{"text":" ","type":"text"},{"text":"seguido de un espacio, seguido del nombre del tipo a especificar.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"En este ejemplo se agrega una anotación de tipo para una variable llamada "},{"code":"mensajeDeBienvenida","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"para indicar que la variable puede almacenar valores de tipo "},{"code":"String","type":"codeVoice"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["var mensajeDeBienvenida: String"]},{"inlineContent":[{"text":"Los dos puntos en la declaración significan ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"«…de tipo…»"}]},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"por lo que el código anterior se puede leer como:"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"«Declara una variable llamada "},{"code":"mensajeDeBienvenida","type":"codeVoice"},{"text":" que sea de tipo ","type":"text"},{"type":"codeVoice","code":"String"},{"text":".»","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"La frase ","type":"text"},{"inlineContent":[{"type":"text","text":"«de tipo "},{"type":"codeVoice","code":"String"},{"type":"text","text":"»"}],"type":"emphasis"},{"text":" significa «puede almacenar cualquier valor de tipo ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":"»."},{"text":" ","type":"text"},{"type":"text","text":"Piensa en ello como "},{"type":"emphasis","inlineContent":[{"text":"«el tipo de cosa»","type":"text"}]},{"type":"text","text":" (o "},{"inlineContent":[{"text":"«la clase de cosa»","type":"text"}],"type":"emphasis"},{"type":"text","text":") que se puede almacenar."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Ahora, a la variable "},{"code":"mensajeDeBienvenida","type":"codeVoice"},{"type":"text","text":" se le puede asignar cualquier cadena como valor"},{"type":"text","text":" "},{"type":"text","text":"sin ningún problema:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["mensajeDeBienvenida = \"Hola\""]},{"type":"paragraph","inlineContent":[{"text":"Puedes definir múltiples variables del mismo tipo en una sola línea,","type":"text"},{"text":" ","type":"text"},{"text":"separadas por comas, con una única definición de tipo después del nombre de la última variable:","type":"text"}]},{"syntax":"swift","code":["var rojo, verde, azul: Double"],"type":"codeListing"},{"content":[{"inlineContent":[{"type":"text","text":"En la práctica, resulta inusual la necesidad de escribir anotaciones de tipo."},{"text":" ","type":"text"},{"text":"Si al definir una constante o variable, proporcionas un valor inicial para la misma,","type":"text"},{"type":"text","text":" "},{"text":"Swift casi siempre podrá inferir el tipo que se utilizará para esa constante o variable,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"como se describe en "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Seguridad-de-tipos-e-inferencia-de-tipos","isActive":true},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"En el ejemplo anterior, no se provee ningún valor inicial,"},{"type":"text","text":" "},{"text":"por lo que el tipo de la variable ","type":"text"},{"type":"codeVoice","code":"mensajeDeBienvenida"},{"type":"text","text":" "},{"type":"text","text":"se especifica con una anotación de tipo en lugar de inferirse de un valor inicial."}],"type":"paragraph"}],"type":"aside","style":"note","name":"Nota"},{"level":3,"text":"Nombrar constantes y variables","type":"heading","anchor":"Nombrar-constantes-y-variables"},{"inlineContent":[{"type":"text","text":"Los nombres de constantes y variables pueden incluir casi cualquier caracter, incluyendo caracteres Unicode:"}],"type":"paragraph"},{"code":["let π = 3.14159","let 你好 = \"你好世界\"","let 🐶🐮 = \"perrogato\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Los nombres de constantes y variables no pueden"},{"type":"text","text":" "},{"type":"text","text":"contener caracteres de espacio en blanco, símbolos matemáticos, flechas,"},{"text":" ","type":"text"},{"type":"text","text":"valores escalares Unicode de uso privado ni caracteres de dibujo de líneas y recuadros."},{"text":" ","type":"text"},{"type":"text","text":"Tampoco pueden comenzar con un número, aunque estos se pueden incluir en otras partes del nombre."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Una vez que has declarado una constante o variable de cierto tipo,"},{"type":"text","text":" "},{"text":"no podrás volver a declararla con el mismo nombre","type":"text"},{"text":" ","type":"text"},{"text":"ni cambiarla para almacenar valores de un tipo diferente.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Tampoco es posible convertir una constante en una variable"},{"text":" ","type":"text"},{"text":"o una variable en una constante.","type":"text"}]},{"type":"aside","name":"Nota","style":"note","content":[{"inlineContent":[{"type":"text","text":"Si necesitas darle a una constante o variable el mismo nombre"},{"type":"text","text":" "},{"text":"que una palabra clave reservada de Swift,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"encierra la palabra clave con comillas invertidas ("},{"type":"codeVoice","code":"`"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"al usarla como nombre de una variable o constante."},{"type":"text","text":" "},{"type":"text","text":"Sin embargo, evita usar palabras clave como nombres"},{"text":" ","type":"text"},{"type":"text","text":"a menos que no tengas ninguna otra opción en lo absoluto."}],"type":"paragraph"}]},{"inlineContent":[{"text":"Puedes cambiar el valor de una variable existente a otro valor de un tipo compatible.","type":"text"},{"text":" ","type":"text"},{"text":"En este ejemplo, el valor de ","type":"text"},{"code":"recepcionAmigable","type":"codeVoice"},{"text":" cambia de ","type":"text"},{"code":"\"¡Hola!\"","type":"codeVoice"},{"type":"text","text":" a "},{"type":"codeVoice","code":"\"Bonjour!\""},{"type":"text","text":":"}],"type":"paragraph"},{"code":["var recepcionAmigable = \"¡Hola!\"","recepcionAmigable = \"Bonjour!\"","\/\/ Ahora, recepcionAmigable es \"Bonjour!\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"A diferencia de una variable,"},{"text":" ","type":"text"},{"type":"text","text":"el valor de una constante no se puede cambiar después de haber sido asignado."},{"text":" ","type":"text"},{"type":"text","text":"Intentar cambiarlo, resultará en un error al momento de compilar el código:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let nombreDelLenguaje = \"Swift\"","nombreDelLenguaje = \"Swift++\"","\/\/ Esto reporta un error al compilar: nombreDelLenguaje is a 'let' constant"]},{"type":"heading","text":"Impresión de Constantes y Variables","level":3,"anchor":"Impresi%C3%B3n-de-Constantes-y-Variables"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Puedes imprimir el valor actual de una constante o variable mediante la función "},{"type":"codeVoice","code":"print(_:separator:terminator:)"},{"text":":","type":"text"}]},{"code":["print(recepcionAmigable)","\/\/ Imprime \"Bonjour!\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"La función "},{"code":"print(_:separator:terminator:)","type":"codeVoice"},{"text":" ","type":"text"},{"text":"es una función global que imprime uno o más valores","type":"text"},{"type":"text","text":" "},{"text":"a una salida apropiada.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"En Xcode, por ejemplo,"},{"type":"text","text":" "},{"text":"la función ","type":"text"},{"type":"codeVoice","code":"print(_:separator:terminator:)"},{"type":"text","text":" imprime su salida en el panel de consola de Xcode."},{"text":" ","type":"text"},{"type":"text","text":"Los parámetros "},{"code":"separator","type":"codeVoice"},{"text":" y ","type":"text"},{"type":"codeVoice","code":"terminator"},{"text":" tienen valores predeterminados,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"por lo que puedes omitirlos al llamar esta función."},{"text":" ","type":"text"},{"text":"Por defecto, la función termina la línea que imprime agregando un salto de línea.","type":"text"},{"type":"text","text":" "},{"text":"Para imprimir un valor sin un salto de línea después del mismo,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"pasa una cadena vacía como "},{"code":"terminator","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Por ejemplo, "},{"code":"print(someValue, terminator: \"\")","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Para más información sobre parámetros con valores predeterminados,"},{"text":" ","type":"text"},{"text":"consulta ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Par%C3%A1metros-con-valores-predeterminados","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Usa ","type":"text"},{"inlineContent":[{"text":"interpolación de cadenas","type":"text"}],"type":"emphasis"},{"text":" para insertar el nombre de una constante o variable","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a manera de "},{"inlineContent":[{"type":"text","text":"placeholder"}],"type":"emphasis"},{"text":" en una cadena más larga","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"y solicitarle a Swift que le reemplace con el valor actual de esa constante o variable."},{"text":" ","type":"text"},{"type":"text","text":"Encierra el nombre entre paréntesis y precédelo con una barra inclinada invertida ("},{"type":"codeVoice","code":"\\"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"para indicar que es un "},{"inlineContent":[{"text":"placeholder","type":"text"}],"type":"emphasis"},{"text":":","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["print(\"¡El valor actual de recepcionAmigable es \\(recepcionAmigable)!\")","\/\/ Imprime \"¡El valor actual de recepcionAmigable es Bonjour!\""]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Todas las opciones que se pueden utilizar con la interpolación de cadenas,"},{"type":"text","text":" "},{"type":"text","text":"se describen en "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Interpolaci%C3%B3n-de-cadenas","isActive":true},{"text":".","type":"text"}]}],"style":"note","name":"Nota"},{"level":2,"text":"Comentarios","type":"heading","anchor":"Comentarios"},{"inlineContent":[{"text":"Usa comentarios para incluir texto no ejecutable en tu código,","type":"text"},{"text":" ","type":"text"},{"text":"como una nota o un recordatorio personal.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"El compilador de Swift ignora los comentarios al momento de compilar el código."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Los comentarios en Swift son muy similares a los comentarios en C."},{"type":"text","text":" "},{"text":"Los comentarios de una sola línea comienzan con dos barras inclinadas (","type":"text"},{"type":"codeVoice","code":"\/\/"},{"type":"text","text":"):"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Esto es un comentario."],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Los comentarios de varias líneas comienzan con una barra inclinada seguida de un asterisco (","type":"text"},{"type":"codeVoice","code":"\/*"},{"text":")","type":"text"},{"text":" ","type":"text"},{"text":"y terminan con un asterisco seguido de una barra inclinada (","type":"text"},{"type":"codeVoice","code":"*\/"},{"type":"text","text":"):"}]},{"syntax":"swift","code":["\/* Esto también es un comentario,","pero está escrito en varias líneas. *\/"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A diferencia de los comentarios de varias líneas en C,"},{"type":"text","text":" "},{"text":"los comentarios de varias líneas en Swift se pueden anidar","type":"text"},{"type":"text","text":" "},{"type":"text","text":"dentro de otros comentarios de varias líneas."},{"type":"text","text":" "},{"type":"text","text":"Puedes escribir comentarios anidados iniciando un bloque de comentarios de varias líneas"},{"type":"text","text":" "},{"text":"y luego iniciando un segundo comentario de varias líneas dentro del primer bloque.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A continuación, se cierra el segundo bloque, seguido del primer bloque:"}]},{"type":"codeListing","syntax":"swift","code":["\/* Este es el comienzo del primer comentario de varias líneas.","    \/* Este es el segundo comentario de varias líneas (anidado). \/*","Este es el final del primer comentario de varias líneas. *\/"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Los comentarios anidados de varias líneas te permiten comentar grandes bloques de código"},{"text":" ","type":"text"},{"text":"de forma rápida y sencilla,","type":"text"},{"type":"text","text":" "},{"text":"incluso si el código ya contiene comentarios de varias líneas.","type":"text"}]},{"text":"Punto y coma","anchor":"Punto-y-coma","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A diferencia de muchos otros lenguajes,"},{"type":"text","text":" "},{"type":"text","text":"Swift "},{"type":"emphasis","inlineContent":[{"type":"text","text":"no"}]},{"type":"text","text":" requiere que escribas un punto y coma ("},{"type":"codeVoice","code":";"},{"text":") después de cada sentencia en tu código,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"aunque puedes hacerlo si así lo deseas."},{"text":" ","type":"text"},{"text":"Sin embargo, ","type":"text"},{"inlineContent":[{"text":"sí","type":"text"}],"type":"emphasis"},{"type":"text","text":" se requiere si quisieras escribir múltiples declaraciones en una sola línea:"}]},{"syntax":"swift","code":["let gato = \"🐱\"; print(gato)","\/\/ Imprime \"🐱\""],"type":"codeListing"},{"text":"Enteros","level":2,"type":"heading","anchor":"Enteros"},{"inlineContent":[{"text":"Los ","type":"text"},{"inlineContent":[{"type":"text","text":"enteros"}],"type":"emphasis"},{"text":" son números completos sin componente fraccionario,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"como "},{"type":"codeVoice","code":"42"},{"type":"text","text":" y "},{"code":"-23","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Los números enteros pueden tener signo (positivo, cero, o negativo)","type":"text"},{"type":"text","text":" "},{"text":"o no tenerlo (positivo o cero).","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Swift proporciona enteros con y sin signo en diversos formatos: 8, 16, 32, y 64 bits.","type":"text"},{"text":" ","type":"text"},{"text":"Estos enteros siguen una convención de nomenclatura similar a la de C,","type":"text"},{"text":" ","type":"text"},{"text":"de manera que un entero sin signo, de 8 bits es de tipo ","type":"text"},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":" "},{"type":"text","text":"y un entero con signo, de 32 bits es de tipo "},{"type":"codeVoice","code":"Int32"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Como todos los tipos en Swift, estos tipos enteros tienen nombres en mayúscula."}]},{"type":"heading","text":"Límites de enteros","anchor":"L%C3%ADmites-de-enteros","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Puedes acceder a los valores mínimo y máximo de cada tipo de entero"},{"type":"text","text":" "},{"type":"text","text":"mediante las propiedades "},{"code":"min","type":"codeVoice"},{"type":"text","text":" y "},{"code":"max","type":"codeVoice"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let valorMinimo = UInt8.min  \/\/ valorMinimo es igual a 0 y es de tipo UInt8","let valorMaximo = UInt8.max  \/\/ valorMaximo es igual a 255 y es de tipo UInt8"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Los valores de estas propiedades son del tipo numérico de longitud correcta"},{"type":"text","text":" "},{"type":"text","text":"(como "},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":" en el ejemplo anterior)"},{"text":" ","type":"text"},{"text":"y, por lo tanto, pueden ser usados en expresiones junto con otros valores del mismo tipo.","type":"text"}]},{"text":"Int","anchor":"Int","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"En la mayoría de los casos,"},{"text":" ","type":"text"},{"type":"text","text":"no necesitas elegir un tamaño específico de entero para utilizar en tu código."},{"text":" ","type":"text"},{"type":"text","text":"Swift proporciona un tipo entero adicional, "},{"code":"Int","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"el cual tiene el mismo tamaño"},{"type":"text","text":" "},{"type":"text","text":"que el tamaño nativo de una palabra en la plataforma en la que se ejecuta el código:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"En una plataforma de 32 bits, "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" tiene el mismo tamaño que "},{"type":"codeVoice","code":"Int32"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"En una plataforma de 64 bits, ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" tiene el mismo tamaño que ","type":"text"},{"code":"Int64","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"A menos que tengas que trabajar con un tamaño específico de entero,","type":"text"},{"text":" ","type":"text"},{"text":"usa siempre ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" para valores enteros en tu código.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Esto ayuda con la coherencia e interoperabilidad del código."},{"type":"text","text":" "},{"text":"Incluso en plataformas de 32 bits, ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" puede almacenar cualquier valor entre ","type":"text"},{"type":"codeVoice","code":"-2,147,483,648"},{"type":"text","text":" y "},{"code":"2,147,483,647","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"y es lo suficientemente grande para muchos rangos de enteros.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"UInt","anchor":"UInt","level":3},{"inlineContent":[{"type":"text","text":"Swift también proporciona un tipo de número entero sin signo, "},{"type":"codeVoice","code":"UInt"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"el cual tiene el mismo tamaño","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"que el tamaño nativo de una palabra en la plataforma en la que se ejecuta el código:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"En una plataforma de 32 bits, "},{"type":"codeVoice","code":"UInt"},{"type":"text","text":" tiene el mismo tamaño que "},{"type":"codeVoice","code":"UInt32"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"En una plataforma de 64 bits, ","type":"text"},{"code":"UInt","type":"codeVoice"},{"type":"text","text":" tiene el mismo tamaño que "},{"code":"UInt64","type":"codeVoice"},{"type":"text","text":"."}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Usa ","type":"text"},{"code":"UInt","type":"codeVoice"},{"text":" sólo cuando necesites, específicamente,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"un tipo de entero sin signo con el mismo tamaño"},{"type":"text","text":" "},{"text":"que el tamaño nativo de una palabra en la plataforma en la que se ejecuta el código.","type":"text"},{"type":"text","text":" "},{"text":"Si este no es el caso, es preferible usar ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"incluso cuando se sabe que los valores que se almacenarán no son negativos."},{"type":"text","text":" "},{"type":"text","text":"Un uso consistente de "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" para valores enteros ayuda con la interoperabilidad del código,"},{"type":"text","text":" "},{"type":"text","text":"evita la necesidad de convertir entre diferentes tipos de números,"},{"text":" ","type":"text"},{"type":"text","text":"y coincide con la inferencia de tipo enteros, como se describe en"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Seguridad-de-tipos-e-inferencia-de-tipos","type":"reference"},{"type":"text","text":"."}]}],"style":"note","name":"Nota","type":"aside"},{"type":"heading","text":"Números de punto flotante","anchor":"N%C3%BAmeros-de-punto-flotante","level":2},{"type":"paragraph","inlineContent":[{"text":"Los ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"números de punto flotante","type":"text"}]},{"text":" son números con un componente fraccionario,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"como "},{"type":"codeVoice","code":"3.14159"},{"text":", ","type":"text"},{"type":"codeVoice","code":"0.1"},{"type":"text","text":", y "},{"code":"-273.15","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Los tipos de punto flotante pueden representar un rango de valores mucho más amplio","type":"text"},{"type":"text","text":" "},{"type":"text","text":"que los tipos enteros"},{"text":" ","type":"text"},{"text":"y pueden almacenar números mucho más grandes o más pequeños","type":"text"},{"text":" ","type":"text"},{"text":"que los que se pueden almacenar en un ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Swift proporciona dos tipos de números de punto flotante con signo:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Double"},{"text":" representa un número de punto flotante de 64 bits.","type":"text"}]}]},{"content":[{"inlineContent":[{"code":"Float","type":"codeVoice"},{"type":"text","text":" representa un número de punto flotante de 32 bits."}],"type":"paragraph"}]}]},{"name":"Nota","style":"note","content":[{"inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"Double"},{"type":"text","text":" tiene una precisión de al menos 15 dígitos decimales,"},{"text":" ","type":"text"},{"text":"mientras que la precisión de ","type":"text"},{"type":"codeVoice","code":"Float"},{"type":"text","text":" puede ser de tan solo 6 dígitos decimales."},{"type":"text","text":" "},{"text":"El tipo de punto flotante apropiado a utilizar depende de la naturaleza y el rango de","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"valores con los que necesites trabajar en tu código."},{"text":" ","type":"text"},{"text":"En situaciones en las que cualquiera de los dos tipos sea apropiado, es preferible usar ","type":"text"},{"type":"codeVoice","code":"Double"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside"},{"level":2,"type":"heading","text":"Seguridad de tipos e inferencia de tipos","anchor":"Seguridad-de-tipos-e-inferencia-de-tipos"},{"inlineContent":[{"type":"text","text":"Swift es un lenguaje con seguridad de tipos."},{"type":"text","text":" "},{"type":"text","text":"Un lenguaje con seguridad de tipos te incita a ser claro con respecto a"},{"type":"text","text":" "},{"text":"los tipos de valores con los que puede trabajar tu código.","type":"text"},{"text":" ","type":"text"},{"text":"Si parte de tu código requiere un ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":", no podrás pasarle un "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" por error."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Dado que cuenta con seguridad de tipos,"},{"type":"text","text":" "},{"type":"text","text":"Swift realiza "},{"type":"emphasis","inlineContent":[{"type":"text","text":"verificaciones de tipos"}]},{"type":"text","text":" ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"type checks"}]},{"type":"text","text":") al compilar tu código"},{"text":" ","type":"text"},{"type":"text","text":"y marca como error cualquier tipo que no coincida."},{"type":"text","text":" "},{"type":"text","text":"Esto te permite detectar y corregir errores lo antes posible en el proceso de desarrollo."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"La verificación de tipos te ayuda a evitar errores al trabajar con diferentes tipos de valores.","type":"text"},{"text":" ","type":"text"},{"text":"Sin embargo, esto no quiere decir que tengas que especificar el tipo","type":"text"},{"text":" ","type":"text"},{"text":"de cada constante y variable que declares.","type":"text"},{"text":" ","type":"text"},{"text":"Si no especificas el tipo de valor que necesitas,","type":"text"},{"type":"text","text":" "},{"text":"Swift usa la ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"inferencia de tipos","type":"text"}]},{"text":" para determinar el tipo apropiado.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"La inferencia de tipos le permite a un compilador deducir,"},{"text":" ","type":"text"},{"type":"text","text":"de manera automática, el tipo de una expresión en particular al compilar tu código,"},{"text":" ","type":"text"},{"type":"text","text":"simplemente examinando los valores que proporcionas."}]},{"type":"paragraph","inlineContent":[{"text":"Debido a la inferencia de tipos, Swift requiere muchas menos declaraciones de tipos","type":"text"},{"type":"text","text":" "},{"type":"text","text":"que lenguajes como C u Objective-C."},{"text":" ","type":"text"},{"type":"text","text":"Las constantes y las variables siguen teniendo un tipo explícito,"},{"type":"text","text":" "},{"text":"pero tú llevas a cabo gran parte del trabajo de especificar dicho tipo.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"La inferencia de tipos es particularmente útil","type":"text"},{"type":"text","text":" "},{"type":"text","text":"al declarar una constante o variable con un valor inicial."},{"text":" ","type":"text"},{"text":"Esto, a menudo, se hace asignando un ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"valor literal"}]},{"type":"text","text":" (o "},{"inlineContent":[{"text":"literal","type":"text"}],"type":"emphasis"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"a la constante o variable en el momento en que se declara."},{"text":" ","type":"text"},{"text":"(Un valor literal es un valor que aparece directamente en tu código fuente,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"como "},{"type":"codeVoice","code":"42"},{"type":"text","text":" y "},{"code":"3.14159","type":"codeVoice"},{"text":" en los ejemplos siguientes).","type":"text"}]},{"inlineContent":[{"text":"Por ejemplo, si asignas un valor literal de ","type":"text"},{"type":"codeVoice","code":"42"},{"text":" a una nueva constante,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"sin especificar de qué tipo es,"},{"type":"text","text":" "},{"text":"Swift infiere que quieres que la constante sea de tipo ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"porque la has inicializado con un número que parece un entero:"}],"type":"paragraph"},{"code":["let significadoDeLaVida = 42","\/\/ Se infiere que significadoDeLaVida es de tipo Int"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Del mismo modo, si no especificas un tipo para un literal de punto flotante,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift infiere que quieres crear un "},{"type":"codeVoice","code":"Double"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let pi = 3.14159","\/\/ Se infiere que pi es de tipo Double"]},{"type":"paragraph","inlineContent":[{"text":"Swift siempre escoge ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":" (en lugar de ","type":"text"},{"type":"codeVoice","code":"Float"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"al momento de inferir el tipo de números de punto flotante.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Si combinas literales enteros y de punto flotante en una expresión,"},{"type":"text","text":" "},{"text":"se inferirá un tipo ","type":"text"},{"type":"codeVoice","code":"Double"},{"text":" a partir del contexto:","type":"text"}]},{"code":["let otroPi = 3 + 0.14159","\/\/ Se infiere que otroPi también es de tipo Double"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"El valor literal de "},{"code":"3","type":"codeVoice"},{"type":"text","text":" no tiene un tipo explícito en sí mismo,"},{"text":" ","type":"text"},{"type":"text","text":"por lo que se infiere un tipo de salida adecuado "},{"code":"Double","type":"codeVoice"},{"text":" ","type":"text"},{"text":"a partir de la presencia de un literal de punto flotante como parte de la suma.","type":"text"}]},{"level":2,"type":"heading","anchor":"Literales-num%C3%A9ricos","text":"Literales numéricos"},{"inlineContent":[{"text":"Los literales enteros se pueden escribir como:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Un número "},{"type":"emphasis","inlineContent":[{"type":"text","text":"decimal"}]},{"text":", sin prefijo","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Un número "},{"type":"emphasis","inlineContent":[{"text":"binario","type":"text"}]},{"type":"text","text":", con el prefijo "},{"code":"0b","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Un número "},{"type":"emphasis","inlineContent":[{"text":"octal","type":"text"}]},{"type":"text","text":", con el prefijo "},{"code":"0o","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Un número "},{"inlineContent":[{"text":"hexadecimal","type":"text"}],"type":"emphasis"},{"type":"text","text":", con el prefijo "},{"type":"codeVoice","code":"0x"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Todos estos literales enteros tienen un valor decimal de ","type":"text"},{"type":"codeVoice","code":"17"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["let enteroDecimal = 17","let enteroBinario = 0b10001       \/\/ 17 en notación binaria","let enteroOctal = 0o21            \/\/ 17 en notación octal","let enteroHexadecimal = 0x11      \/\/ 17 en notación hexadecimal"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Los literales de punto flotante pueden ser decimales (sin prefijo)"},{"type":"text","text":" "},{"text":"o hexadecimales (con el prefijo ","type":"text"},{"code":"0x","type":"codeVoice"},{"text":").","type":"text"},{"text":" ","type":"text"},{"text":"Siempre deben tener un número (o número hexadecimal) a ambos lados del punto decimal.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Los flotantes decimales también pueden tener un "},{"inlineContent":[{"text":"exponente","type":"text"}],"type":"emphasis"},{"type":"text","text":" opcional,"},{"text":" ","type":"text"},{"text":"representado por una ","type":"text"},{"code":"e","type":"codeVoice"},{"text":" mayúscula o minúscula;","type":"text"},{"type":"text","text":" "},{"type":"text","text":"los flotantes hexadecimales deben tener un exponente,"},{"text":" ","type":"text"},{"type":"text","text":"representado por una "},{"type":"codeVoice","code":"p"},{"type":"text","text":" mayúscula o minúscula."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Para números decimales con un exponente "},{"type":"codeVoice","code":"x"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"se multiplica el número base por 10ˣ:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"1.25e2"},{"type":"text","text":" significa 1.25 x 10², o "},{"type":"codeVoice","code":"125.0"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"1.25e-2","type":"codeVoice"},{"text":" significa 1.25 x 10⁻², o ","type":"text"},{"code":"0.0125","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"Para números hexadecimales con un exponente ","type":"text"},{"type":"codeVoice","code":"x"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"se multiplica el número base por 2ˣ:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"0xFp2"},{"text":" significa 15 x 2², o ","type":"text"},{"type":"codeVoice","code":"60.0"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"0xFp-2"},{"text":" significa 15 x 2⁻², o ","type":"text"},{"code":"3.75","type":"codeVoice"},{"type":"text","text":"."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Todos estos literales de punto flotante tienen un valor decimal de "},{"type":"codeVoice","code":"12.1875"},{"type":"text","text":":"}]},{"syntax":"swift","code":["let doubleDecimal = 12.1875","let doubleExponente = 1.21875e1","let doubleHexadecimal = 0xC.3p0"],"type":"codeListing"},{"inlineContent":[{"text":"Los literales numéricos pueden contener formato adicional para que sean más fáciles de leer.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Tanto los números enteros como los flotantes se pueden rellenar con ceros adicionales"},{"text":" ","type":"text"},{"text":"y pueden contener guiones bajos para facilitar la lectura.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Ningún tipo de formato afecta el valor subyacente del literal:"}],"type":"paragraph"},{"code":["let doubleDecorado = 000123.456","let unMillon = 1_000_000","let pocoMasDeUnMillon = 1_000_000.000_000_1"],"type":"codeListing","syntax":"swift"},{"level":2,"type":"heading","text":"Conversión de tipos numéricos","anchor":"Conversi%C3%B3n-de-tipos-num%C3%A9ricos"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Usa el tipo "},{"code":"Int","type":"codeVoice"},{"text":" para todas las variables y constantes enteras de propósito general en tu código,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"incluso si se sabe que no son negativas."},{"type":"text","text":" "},{"type":"text","text":"Usar el tipo entero predeterminado en situaciones cotidianas significa que"},{"type":"text","text":" "},{"type":"text","text":"las constantes y variables enteras sean inmediatamente interoperables en tu código y"},{"text":" ","type":"text"},{"type":"text","text":"coincidan con el tipo inferido para los valores literales enteros."}]},{"inlineContent":[{"type":"text","text":"Utiliza los otros tipos de enteros solo cuando se requieran, específicamente,"},{"type":"text","text":" "},{"type":"text","text":"para una tarea en particular,"},{"text":" ","type":"text"},{"text":"debido a datos de tamaño explícito de una fuente externa,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"o para la optimización necesaria de rendimiento, uso de memoria u otra."},{"type":"text","text":" "},{"text":"El uso de tipos de tamaño explícito en estas situaciones","type":"text"},{"type":"text","text":" "},{"type":"text","text":"ayuda a detectar cualquier desbordamiento accidental de valores"},{"text":" ","type":"text"},{"type":"text","text":"y documenta, implícitamente, la naturaleza de los datos que se utilizan."}],"type":"paragraph"},{"type":"heading","text":"Conversión de enteros","level":3,"anchor":"Conversi%C3%B3n-de-enteros"},{"inlineContent":[{"text":"El rango de números que se pueden almacenar en una constante o variable entera","type":"text"},{"text":" ","type":"text"},{"text":"es diferente para cada tipo numérico.","type":"text"},{"type":"text","text":" "},{"text":"Una constante o variable de tipo ","type":"text"},{"code":"Int8","type":"codeVoice"},{"text":" puede almacenar números entre ","type":"text"},{"type":"codeVoice","code":"-128"},{"type":"text","text":" y "},{"code":"127","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"mientras que una constante o variable de tipo ","type":"text"},{"code":"UInt8","type":"codeVoice"},{"text":" puede almacenar números entre ","type":"text"},{"type":"codeVoice","code":"0"},{"text":" y ","type":"text"},{"code":"255","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Un número que no encaja en una constante o variable de tipo entero de tamaño fijo"},{"text":" ","type":"text"},{"type":"text","text":"es reportado como un error al momento de compilar tu código:"}],"type":"paragraph"},{"syntax":"swift","code":["let noPuedeSerNegativo: UInt8 = -1","\/\/ UInt8 no puede almacenar números negativos, por lo que esto reporta un error al compilar","let muyGrande: Int8 = Int8.max + 1","\/\/ Int8 no puede almacenar un número mayor que su valor máximo,","\/\/ por lo que esto también reporta un error al compilar"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Dado que cada tipo numérico puede almacenar un rango diferente de valores,"},{"type":"text","text":" "},{"text":"debes optar por una conversión de tipo numérico caso por caso.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Mediante este enfoque, se evitan errores de conversión ocultos"},{"type":"text","text":" "},{"text":"y ayuda a que las intenciones de conversión de tipos sean explícitas en tu código.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Para convertir un tipo de número específico a otro,"},{"type":"text","text":" "},{"type":"text","text":"inicializa un nuevo número del tipo deseado con el valor existente."},{"text":" ","type":"text"},{"type":"text","text":"En el siguiente ejemplo, la constante "},{"type":"codeVoice","code":"dosMil"},{"type":"text","text":" es de tipo "},{"code":"UInt16","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"mientras que la constante ","type":"text"},{"code":"uno","type":"codeVoice"},{"type":"text","text":" es de tipo "},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"No se pueden sumar directamente,","type":"text"},{"text":" ","type":"text"},{"text":"porque no son del mismo tipo.","type":"text"},{"type":"text","text":" "},{"text":"En cambio, en este ejemplo se llama a ","type":"text"},{"code":"UInt16(uno)","type":"codeVoice"},{"text":" para crear","type":"text"},{"type":"text","text":" "},{"text":"un nuevo ","type":"text"},{"code":"UInt16","type":"codeVoice"},{"type":"text","text":" inicializado con el valor de "},{"type":"codeVoice","code":"uno"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"y se usa este valor en lugar del original:"}]},{"syntax":"swift","code":["let dosMil: UInt16 = 2_000","let uno: UInt8 = 1","let dosMilUno = dosMil + UInt16(uno)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Debido a que ambos lados de la adición ahora son del tipo "},{"code":"UInt16","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"la adición es permitida."},{"text":" ","type":"text"},{"type":"text","text":"Se infiere que la constante de salida ("},{"type":"codeVoice","code":"dosMilUno"},{"text":") es del tipo ","type":"text"},{"code":"UInt16","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"porque es la suma de dos valores ","type":"text"},{"code":"UInt16","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"AlgunTipo(conValorInicial)"},{"text":" es la forma predeterminada de llamar al inicializador de un tipo Swift","type":"text"},{"type":"text","text":" "},{"type":"text","text":"y pasar un valor inicial."},{"type":"text","text":" "},{"type":"text","text":"Detrás de cámaras, "},{"code":"UInt16","type":"codeVoice"},{"text":" tiene un inicializador que acepta un valor de tipo ","type":"text"},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"por lo que este inicializador se usa para crear un nuevo "},{"code":"UInt16","type":"codeVoice"},{"text":" a partir de un ","type":"text"},{"type":"codeVoice","code":"UInt8"},{"text":" existente.","type":"text"},{"type":"text","text":" "},{"text":"Sin embargo, no le puedes pasar ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"cualquier"}]},{"type":"text","text":" tipo;"},{"type":"text","text":" "},{"text":"tiene que ser un tipo para el cual ","type":"text"},{"code":"UInt16","type":"codeVoice"},{"text":" proporcione un inicializador.","type":"text"},{"type":"text","text":" "},{"text":"La extensión de los tipos existentes para proporcionar inicializadores que acepten nuevos tipos","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(incluidas tus propias definiciones de tipo)"},{"type":"text","text":" "},{"type":"text","text":"se trata en "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions"},{"text":".","type":"text"}]},{"anchor":"Conversi%C3%B3n-de-n%C3%BAmeros-enteros-y-de-punto-flotante","text":"Conversión de números enteros y de punto flotante","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Toda conversión entre tipos numéricos enteros y de punto flotante debe hacerse de manera explícita:","type":"text"}]},{"code":["let tres = 3","let puntoUnoCuatroUnoCincoNueve = 0.14159","let pi = Double(tres) + puntoUnoCuatroUnoCincoNueve","\/\/ pi es igual a 3.14159 y se infiere que es de tipo Double"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Acá, el valor de la constante "},{"code":"tres","type":"codeVoice"},{"text":" se usa para crear un nuevo valor de tipo ","type":"text"},{"type":"codeVoice","code":"Double"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"de modo que ambos lados de la suma sean del mismo tipo."},{"type":"text","text":" "},{"text":"Sin esta conversión en su lugar, no se permitiría la suma.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"La conversión de punto flotante a entero también debe hacerse de manera explícita."},{"type":"text","text":" "},{"type":"text","text":"Un tipo entero se puede inicializar con un valor de tipo "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" o "},{"type":"codeVoice","code":"Float"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let piEntero = Int(pi)","\/\/ piEntero es igual a 3 y se infiere que es de tipo Int"]},{"type":"paragraph","inlineContent":[{"text":"Los valores de punto flotante siempre resultan truncados al usarse","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"para inicializar un nuevo valor entero de esta manera."},{"type":"text","text":" "},{"type":"text","text":"Esto significa que "},{"code":"4.75","type":"codeVoice"},{"text":" se convierte en ","type":"text"},{"type":"codeVoice","code":"4"},{"type":"text","text":" y "},{"code":"-3.9","type":"codeVoice"},{"text":" se convierte en ","type":"text"},{"code":"-3","type":"codeVoice"},{"text":".","type":"text"}]},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Las reglas para combinar variables y constantes numéricas son diferentes de"},{"type":"text","text":" "},{"text":"las reglas para los literales numéricos.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"El valor literal "},{"type":"codeVoice","code":"3"},{"type":"text","text":" se puede agregar directamente al valor literal "},{"type":"codeVoice","code":"0.14159"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"porque los números literales no tienen un tipo explícito por sí mismos."},{"type":"text","text":" "},{"type":"text","text":"Su tipo se infiere solo al momento en que son evaluados por el compilador."}]}],"name":"Nota"},{"anchor":"Alias-de-tipos","text":"Alias de tipos","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Los “alias de tipos” (","type":"text"},{"inlineContent":[{"text":"type aliases","type":"text"}],"type":"emphasis"},{"type":"text","text":") definen un nombre alternativo para un tipo existente."},{"text":" ","type":"text"},{"type":"text","text":"Los alias de tipos se definen con la palabra clave "},{"code":"typealias","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"Los alias de tipos son útiles cuando deseas referirte a un tipo existente"},{"text":" ","type":"text"},{"text":"con un nombre que sea —contextualmente— más apropiado,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"como cuando se trabaja con datos de un tamaño específico de una fuente externa:"}],"type":"paragraph"},{"syntax":"swift","code":["typealias MuestraDeAudio = UInt16"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Una vez que definas un alias de tipo,"},{"type":"text","text":" "},{"text":"puedes usar el alias en cualquier lugar donde pueda usarse el nombre original:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var maximaAmplitudHallada = MuestraDeAudio.min","\/\/ maximaAmplitudHallada ahora es 0"]},{"inlineContent":[{"text":"Aquí, ","type":"text"},{"type":"codeVoice","code":"MuestraDeAudio"},{"type":"text","text":" se define como un alias para "},{"type":"codeVoice","code":"UInt16"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Debido a que es un alias,"},{"type":"text","text":" "},{"type":"text","text":"el llamado a "},{"type":"codeVoice","code":"MuestraDeAudio.min"},{"type":"text","text":" en realidad llama a "},{"type":"codeVoice","code":"UInt16.min"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"el cual proporciona un valor inicial de ","type":"text"},{"code":"0","type":"codeVoice"},{"type":"text","text":" para la variable "},{"code":"maximaAmplitudHallada","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Booleanos","text":"Booleanos","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Swift tiene un tipo ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"booleano","type":"text"}]},{"type":"text","text":" básico, llamado "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Los valores booleanos se les conoce como ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"lógicos"}]},{"type":"text","text":" "},{"text":"porque solo pueden ser verdaderos o falsos.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift proporciona dos valores constantes booleanos"},{"text":" ","type":"text"},{"text":"— ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" y "},{"code":"false","type":"codeVoice"},{"type":"text","text":":"}]},{"syntax":"swift","code":["let lasNaranjasSonAnaranjadas = true","let lasVerdurasSonDeliciosas = false"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Los tipos de "},{"code":"lasNaranjasSonAnaranjadas","type":"codeVoice"},{"text":" y ","type":"text"},{"code":"lasVerdurasSonDeliciosas","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"han sido inferidos como "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" por el hecho de que"},{"type":"text","text":" "},{"type":"text","text":"se inicializaron con valores literales booleanos."},{"type":"text","text":" "},{"text":"Al igual que con ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" y ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":" anteriormente,","type":"text"},{"text":" ","type":"text"},{"text":"no tienes que declarar constantes o variables como ","type":"text"},{"code":"Bool","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"si les asignas "},{"type":"codeVoice","code":"true"},{"text":" o ","type":"text"},{"type":"codeVoice","code":"false"},{"text":" al momento de crearlas.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"La inferencia de tipo hace que un código en Swift sea más conciso y legible"},{"text":" ","type":"text"},{"type":"text","text":"al inicializar constantes o variables con otros valores cuyo tipo ya se conoce."}]},{"inlineContent":[{"text":"Los valores booleanos son particularmente útiles al trabajar con instrucciones condicionales,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"como es el caso de la instrucción "},{"type":"codeVoice","code":"if"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["if lasVerdurasSonDeliciosas {","    print(\"¡Mmm, deliciosas verduras!\")","} else {","    print(\"No, las verduras son horribles.\")","}","\/\/ Imprime \"No, las verduras son horribles.\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Las instrucciones condicionales, como la instrucción "},{"type":"codeVoice","code":"if"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"se tratan con más detalle en ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"La seguridad de tipo de Swift previene que valores no booleanos se sustituyan por ","type":"text"},{"type":"codeVoice","code":"Bool"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"El siguiente ejemplo resulta en un error al momento de compilar:"}],"type":"paragraph"},{"code":["let i = 1","","if i {","    \/\/ Este ejemplo no se compilará y reportará un error","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sin embargo, el siguiente ejemplo alternativo es válido:"}]},{"type":"codeListing","syntax":"swift","code":["let i = 1","","if i == 1 {","    \/\/ Este ejemplo se compilará sin problemas","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"El resultado de la comparación "},{"type":"codeVoice","code":"i == 1"},{"type":"text","text":" es de tipo "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"por lo que este segundo ejemplo pasa la verificación de tipos.","type":"text"},{"type":"text","text":" "},{"text":"Comparaciones como ","type":"text"},{"code":"i == 1","type":"codeVoice"},{"type":"text","text":" se analizan en "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","type":"reference"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Al igual que con otros ejemplos de seguridad de tipo en Swift,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"este enfoque evita errores accidentales"},{"text":" ","type":"text"},{"text":"y garantiza que la intención de una sección particular del código sea siempre clara.","type":"text"}]},{"anchor":"Tuplas","level":2,"text":"Tuplas","type":"heading"},{"inlineContent":[{"text":"Las ","type":"text"},{"inlineContent":[{"type":"text","text":"tuplas"}],"type":"emphasis"},{"text":" agrupan múltiples valores en un solo valor compuesto.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Los valores dentro de una tupla pueden ser de cualquier tipo"},{"text":" ","type":"text"},{"text":"y no tienen que ser del mismo tipo entre sí.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"En este ejemplo, "},{"type":"codeVoice","code":"(404, \"Not Found\")"},{"text":" es una tupla que describe un ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"código de estado HTTP"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Un código de estado HTTP es un valor especial devuelto por un servidor web"},{"type":"text","text":" "},{"type":"text","text":"cada vez que se le solicita una página web."},{"type":"text","text":" "},{"type":"text","text":"El código de estado "},{"type":"codeVoice","code":"404 Not Found"},{"text":" es devuelto si se solicita una página web que no existe.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let errorHTTP404 = (404, \"Not Found\")","\/\/ errorHTTP404 es de tipo (Int, String) y es igual a (404, \"Not Found\")"]},{"type":"paragraph","inlineContent":[{"text":"La tupla ","type":"text"},{"code":"(404, \"Not Found\")","type":"codeVoice"},{"text":" agrupa un ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" y un "},{"code":"String","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"para dar al código de estado HTTP dos valores separados:"},{"text":" ","type":"text"},{"type":"text","text":"un número y una descripción legible por humanos."},{"type":"text","text":" "},{"type":"text","text":"Se puede describir como “una tupla de tipo "},{"code":"(Int, String)","type":"codeVoice"},{"type":"text","text":"”."}]},{"type":"paragraph","inlineContent":[{"text":"Puedes crear tuplas a partir de cualquier permutación de tipos","type":"text"},{"type":"text","text":" "},{"type":"text","text":"y estas pueden contener tantos tipos diferentes como lo desees."},{"type":"text","text":" "},{"text":"No hay nada que te impida tener","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"una tupla de tipo "},{"type":"codeVoice","code":"(Int, Int, Int)"},{"text":" o ","type":"text"},{"code":"(String, Bool)","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"o cualquier otra permutación que necesites."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Puedes «descomponer» ("},{"inlineContent":[{"type":"text","text":"decompose"}],"type":"emphasis"},{"type":"text","text":") el contenido de una tupla en constantes o variables separadas,"},{"type":"text","text":" "},{"type":"text","text":"a las que luego podrás acceder como de costumbre:"}]},{"syntax":"swift","type":"codeListing","code":["let (codigoDeEstado, mensajeDeEstado) = errorHTTP404","","print(\"El código de estado es \\(codigoDeEstado)\")","\/\/ Imprime \"El código de estado es 404\"","","print(\"El mensaje de estado es \\(mensajeDeEstado)\")","\/\/ Imprime \"El mensaje de estado es Not Found\""]},{"inlineContent":[{"type":"text","text":"Si solo necesitas algunos de los valores de la tupla,"},{"type":"text","text":" "},{"type":"text","text":"ignora miembros de la tupla usando un guión bajo ("},{"type":"codeVoice","code":"_"},{"text":")","type":"text"},{"type":"text","text":" "},{"text":"al descomponerla:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let (soloElCodigoDeEstado, _) = errorHTTP404","","print(\"El código de estado es \\(soloElCodigoDeEstado)\")","\/\/ Imprime \"El código de estado es 404\""],"type":"codeListing"},{"inlineContent":[{"text":"Alternativamente,","type":"text"},{"type":"text","text":" "},{"text":"accede a los valores de los elementos individuales de una tupla mediante números de índices,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"iniciando desde cero:"}],"type":"paragraph"},{"code":["print(\"El código de estado es \\(errorHTTP404.0)\")","\/\/ Imprime \"El código de estado es 404\"","","print(\"El mensaje de estado es \\(errorHTTP404.1)\")","\/\/ Imprime \"El mensaje de estado es Not Found\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Puedes nombrar los elementos individuales en una tupla al momento de definirla:"}],"type":"paragraph"},{"type":"codeListing","code":["let respuestaHTTP200 = (codigoDeEstado: 200, descripcion: \"OK\")"],"syntax":"swift"},{"inlineContent":[{"text":"Si nombras los elementos de una tupla,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"podrás utilizar los nombres de los elementos para acceder a los valores de dichos elementos:"}],"type":"paragraph"},{"code":["print(\"El código de estado es \\(respuestaHTTP200.codigoDeEstado)\")","\/\/ Imprime \"El código de estado es 200\"","","print(\"El mensaje de estado es \\(respuestaHTTP200.descripcion)\")","\/\/ Imprime \"El mensaje de estado es OK\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Las tuplas son particularmente útiles como valores devueltos por una función.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Una función que solicita una página web puede devolver una tupla de tipo "},{"type":"codeVoice","code":"(Int, String)"},{"text":" ","type":"text"},{"type":"text","text":"para describir el éxito o fracaso de dicha solicitud."},{"type":"text","text":" "},{"text":"Al devolver una tupla con dos valores distintos,","type":"text"},{"type":"text","text":" "},{"text":"—cada uno de un tipo diferente—","type":"text"},{"type":"text","text":" "},{"text":"la función proporciona información más útil sobre su resultado","type":"text"},{"type":"text","text":" "},{"text":"que si solo pudiera devolver un único valor de un único tipo.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Para obtener más información, consulta "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Funciones-que-devuelven-m%C3%BAltiples-valores","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Las tuplas son útiles para grupos simples de valores relacionados."},{"text":" ","type":"text"},{"type":"text","text":"Estas no son adecuadas para la creación de estructuras de datos complejas."},{"text":" ","type":"text"},{"type":"text","text":"Si es probable que tu estructura de datos sea más compleja,"},{"text":" ","type":"text"},{"type":"text","text":"modélala como una clase o estructura, en lugar de una tupla."},{"type":"text","text":" "},{"type":"text","text":"Para obtener más información, consulta "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","type":"reference","isActive":true},{"type":"text","text":"."}]}],"name":"Nota","type":"aside","style":"note"},{"type":"heading","level":2,"text":"Opcionales","anchor":"Opcionales"},{"inlineContent":[{"text":"Los ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"opcionales","type":"text"}]},{"type":"text","text":" se utilizan en situaciones en las que un valor puede no existir."},{"text":" ","type":"text"},{"type":"text","text":"Un opcional representa dos posibilidades:"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"existe","type":"text"}]},{"type":"text","text":" un valor, y es posible extraer dicho valor del opcional,"},{"text":" ","type":"text"},{"type":"text","text":"o "},{"type":"emphasis","inlineContent":[{"text":"no existe","type":"text"}]},{"type":"text","text":" ningún valor en lo absoluto."}],"type":"paragraph"},{"name":"Nota","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"El concepto de opcionales no existe en C ni en Objective-C."},{"text":" ","type":"text"},{"type":"text","text":"Lo más cercano en Objective-C es"},{"type":"text","text":" "},{"type":"text","text":"la capacidad de devolver "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" de un método que de otra manera devolvería un objeto,"},{"text":" ","type":"text"},{"type":"text","text":"donde "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" representa “la ausencia de un objeto válido”."},{"text":" ","type":"text"},{"type":"text","text":"Sin embargo, esto solo funciona para objetos;"},{"type":"text","text":" "},{"type":"text","text":"no funciona para estructuras, tipos básicos de C, o valores de enumeraciones."},{"type":"text","text":" "},{"text":"Para estos tipos,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"los métodos en Objective-C suelen devolver un valor especial (como "},{"code":"NSNotFound","type":"codeVoice"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"para indicar la ausencia de un valor."},{"type":"text","text":" "},{"text":"Este mecanismo asume que quien invoca al método sabe que hay","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"un valor especial contra el cual testear y recuerda verificarlo."},{"text":" ","type":"text"},{"type":"text","text":"Los opcionales en Swift te permiten indicar la ausencia de un valor para "},{"type":"emphasis","inlineContent":[{"type":"text","text":"cualquier tipo"}]},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"sin la necesidad de constantes especiales."}]}],"style":"note"},{"type":"paragraph","inlineContent":[{"text":"Aquí hay un ejemplo de cómo se pueden usar opcionales para lidiar con la ausencia de un valor.","type":"text"},{"type":"text","text":" "},{"text":"El tipo ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" de Swift tiene un inicializador","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"que intenta convertir un valor "},{"type":"codeVoice","code":"String"},{"type":"text","text":" en un valor "},{"code":"Int","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Sin embargo, no todas las cadenas pueden ser convertidas en enteros."},{"text":" ","type":"text"},{"type":"text","text":"La cadena "},{"type":"codeVoice","code":"\"123\""},{"text":" puede convertirse en el valor numérico ","type":"text"},{"type":"codeVoice","code":"123"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"pero la cadena ","type":"text"},{"code":"\"Hola, mundo.\"","type":"codeVoice"},{"type":"text","text":" no tiene un valor numérico obvio en el cual convertirse."}]},{"inlineContent":[{"text":"El siguiente ejemplo utiliza el inicializador para intentar convertir un ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" en un ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["let posibleNumero = \"123\"","let numeroConvertido = Int(posibleNumero)","\/\/ Se infiere que numeroConvertido es de tipo \"Int?\" (o \"Int opcional\")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Dado que el inicializador podría fallar,","type":"text"},{"type":"text","text":" "},{"text":"este devuelve un ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" "},{"inlineContent":[{"text":"opcional","type":"text"}],"type":"emphasis"},{"type":"text","text":", en lugar de un "},{"type":"codeVoice","code":"Int"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Un "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" opcional se escribe "},{"type":"codeVoice","code":"Int?"},{"type":"text","text":", no "},{"code":"Int","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"El signo de interrogación indica que el valor que contiene es opcional,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"lo que significa que puede contener "},{"type":"emphasis","inlineContent":[{"type":"text","text":"algún"}]},{"type":"text","text":" valor "},{"code":"Int","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"o puede no contener ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"ningún valor en absoluto"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"(No puede contener nada más, como un valor "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" o un valor "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"O es un "},{"type":"codeVoice","code":"Int"},{"text":", o no es nada en absoluto).","type":"text"}],"type":"paragraph"},{"anchor":"nil","text":"nil","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"You set an optional variable to a valueless state"},{"text":" ","type":"text"},{"type":"text","text":"by assigning it the special value "},{"type":"codeVoice","code":"nil"},{"text":":","type":"text"}]},{"code":["var serverResponseCode: Int? = 404","\/\/ serverResponseCode contains an actual Int value of 404","serverResponseCode = nil","\/\/ serverResponseCode now contains no value"],"syntax":"swift","type":"codeListing"},{"name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"You can’t use ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" with non-optional constants and variables."},{"text":" ","type":"text"},{"text":"If a constant or variable in your code needs to work with","type":"text"},{"text":" ","type":"text"},{"text":"the absence of a value under certain conditions,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"always declare it as an optional value of the appropriate type."}]}],"type":"aside"},{"inlineContent":[{"type":"text","text":"If you define an optional variable without providing a default value,"},{"text":" ","type":"text"},{"text":"the variable is automatically set to ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" for you:"}],"type":"paragraph"},{"code":["var surveyAnswer: String?","\/\/ surveyAnswer is automatically set to nil"],"syntax":"swift","type":"codeListing"},{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"nil"},{"text":" isn’t the same as ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" in Objective-C."},{"text":" ","type":"text"},{"type":"text","text":"In Objective-C, "},{"type":"codeVoice","code":"nil"},{"text":" is a pointer to a nonexistent object.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In Swift, "},{"code":"nil","type":"codeVoice"},{"text":" isn’t a pointer — it’s the absence of a value of a certain type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Optionals of "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" type can be set to "},{"type":"codeVoice","code":"nil"},{"text":", not just object types.","type":"text"}]}]},{"type":"heading","level":3,"anchor":"Sentencias-if-y-extracci%C3%B3n-forzada","text":"Sentencias if y extracción forzada"},{"inlineContent":[{"text":"You can use an ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement to find out whether an optional contains a value"},{"type":"text","text":" "},{"text":"by comparing the optional against ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You perform this comparison with the “equal to” operator ("},{"code":"==","type":"codeVoice"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"or the “not equal to” operator ("},{"type":"codeVoice","code":"!="},{"type":"text","text":")."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If an optional has a value, it’s considered to be “not equal to” "},{"code":"nil","type":"codeVoice"},{"text":":","type":"text"}]},{"syntax":"swift","code":["if convertedNumber != nil {","    print(\"convertedNumber contains some integer value.\")","}","\/\/ Prints \"convertedNumber contains some integer value.\""],"type":"codeListing"},{"inlineContent":[{"text":"Once you’re sure that the optional ","type":"text"},{"inlineContent":[{"text":"does","type":"text"}],"type":"emphasis"},{"type":"text","text":" contain a value,"},{"text":" ","type":"text"},{"text":"you can access its underlying value","type":"text"},{"type":"text","text":" "},{"text":"by adding an exclamation point (","type":"text"},{"code":"!","type":"codeVoice"},{"type":"text","text":") to the end of the optional’s name."},{"type":"text","text":" "},{"type":"text","text":"The exclamation point effectively says,"},{"text":" ","type":"text"},{"type":"text","text":"“I know that this optional definitely has a value; please use it.”"},{"text":" ","type":"text"},{"type":"text","text":"This is known as "},{"inlineContent":[{"text":"forced unwrapping","type":"text"}],"type":"emphasis"},{"type":"text","text":" of the optional’s value:"}],"type":"paragraph"},{"code":["if convertedNumber != nil {","    print(\"convertedNumber has an integer value of \\(convertedNumber!).\")","}","\/\/ Prints \"convertedNumber has an integer value of 123.\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"For more about the "},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"name":"Note","style":"note","type":"aside","content":[{"inlineContent":[{"text":"Trying to use ","type":"text"},{"code":"!","type":"codeVoice"},{"type":"text","text":" to access a nonexistent optional value triggers"},{"text":" ","type":"text"},{"type":"text","text":"a runtime error."},{"type":"text","text":" "},{"type":"text","text":"Always make sure that an optional contains a non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value"},{"type":"text","text":" "},{"text":"before using ","type":"text"},{"code":"!","type":"codeVoice"},{"type":"text","text":" to force-unwrap its value."}],"type":"paragraph"}]},{"text":"Vinculación opcional","type":"heading","level":3,"anchor":"Vinculaci%C3%B3n-opcional"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use "},{"inlineContent":[{"type":"text","text":"optional binding"}],"type":"emphasis"},{"type":"text","text":" to find out whether an optional contains a value,"},{"type":"text","text":" "},{"type":"text","text":"and if so, to make that value available as a temporary constant or variable."},{"type":"text","text":" "},{"type":"text","text":"Optional binding can be used with "},{"type":"codeVoice","code":"if"},{"text":" and ","type":"text"},{"code":"while","type":"codeVoice"},{"type":"text","text":" statements"},{"text":" ","type":"text"},{"text":"to check for a value inside an optional,","type":"text"},{"type":"text","text":" "},{"text":"and to extract that value into a constant or variable,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as part of a single action."},{"type":"text","text":" "},{"code":"if","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"while"},{"text":" statements are described in more detail in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"Write an optional binding for an "},{"code":"if","type":"codeVoice"},{"text":" statement as follows:","type":"text"}],"type":"paragraph"},{"code":["if let <#constantName#> = <#someOptional#> {","   <#statements#>","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"You can rewrite the "},{"type":"codeVoice","code":"possibleNumber"},{"type":"text","text":" example from"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Opcionales","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to use optional binding rather than forced unwrapping:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["if let actualNumber = Int(possibleNumber) {","    print(\"The string \\\"\\(possibleNumber)\\\" has an integer value of \\(actualNumber)\")","} else {","    print(\"The string \\\"\\(possibleNumber)\\\" couldn't be converted to an integer\")","}","\/\/ Prints \"The string \"123\" has an integer value of 123\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This code can be read as:"}]},{"type":"paragraph","inlineContent":[{"text":"“If the optional ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" returned by ","type":"text"},{"type":"codeVoice","code":"Int(possibleNumber)"},{"text":" contains a value,","type":"text"},{"type":"text","text":" "},{"text":"set a new constant called ","type":"text"},{"type":"codeVoice","code":"actualNumber"},{"text":" to the value contained in the optional.”","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the conversion is successful,"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"actualNumber"},{"text":" constant becomes available for use within","type":"text"},{"type":"text","text":" "},{"text":"the first branch of the ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" statement.","type":"text"},{"text":" ","type":"text"},{"text":"It has already been initialized with the value contained ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"within","type":"text"}]},{"type":"text","text":" the optional,"},{"type":"text","text":" "},{"type":"text","text":"and so you don’t use the "},{"type":"codeVoice","code":"!"},{"text":" suffix to access its value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In this example, "},{"code":"actualNumber","type":"codeVoice"},{"type":"text","text":" is simply used to print the result of the conversion."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you don’t need to refer to the original, optional constant or variable"},{"type":"text","text":" "},{"type":"text","text":"after accessing the value it contains,"},{"text":" ","type":"text"},{"text":"you can use the same name for the new constant or variable:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let myNumber = Int(possibleNumber)","\/\/ Here, myNumber is an optional integer","if let myNumber = myNumber {","    \/\/ Here, myNumber is a non-optional integer","    print(\"My number is \\(myNumber)\")","}","\/\/ Prints \"My number is 123\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This code starts by checking whether "},{"code":"myNumber","type":"codeVoice"},{"text":" contains a value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"just like the code in the previous example."},{"type":"text","text":" "},{"type":"text","text":"If "},{"code":"myNumber","type":"codeVoice"},{"text":" has a value,","type":"text"},{"text":" ","type":"text"},{"text":"the value of a new constant named ","type":"text"},{"code":"myNumber","type":"codeVoice"},{"text":" is set to that value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Inside the body of the "},{"type":"codeVoice","code":"if"},{"text":" statement,","type":"text"},{"type":"text","text":" "},{"text":"writing ","type":"text"},{"code":"myNumber","type":"codeVoice"},{"type":"text","text":" refers to that new non-optional constant."},{"type":"text","text":" "},{"type":"text","text":"Before the beginning of the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement and after its end,"},{"type":"text","text":" "},{"text":"writing ","type":"text"},{"type":"codeVoice","code":"myNumber"},{"type":"text","text":" refers to the optional integer constant."}]},{"type":"paragraph","inlineContent":[{"text":"Because this kind of code is so common,","type":"text"},{"type":"text","text":" "},{"text":"you can use a shorter spelling to unwrap an optional value:","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"write just the name of the constant or variable that you’re unwrapping."},{"type":"text","text":" "},{"text":"The new, unwrapped constant or variable","type":"text"},{"type":"text","text":" "},{"text":"implicitly uses the same name as the optional value.","type":"text"}]},{"type":"codeListing","code":["if let myNumber {","    print(\"My number is \\(myNumber)\")","}","\/\/ Prints \"My number is 123\""],"syntax":"swift"},{"inlineContent":[{"text":"You can use both constants and variables with optional binding.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you wanted to manipulate the value of "},{"type":"codeVoice","code":"myNumber"},{"text":" ","type":"text"},{"type":"text","text":"within the first branch of the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement,"},{"text":" ","type":"text"},{"type":"text","text":"you could write "},{"code":"if var myNumber","type":"codeVoice"},{"type":"text","text":" instead,"},{"type":"text","text":" "},{"text":"and the value contained within the optional","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"would be made available as a variable rather than a constant."},{"text":" ","type":"text"},{"text":"Changes you make to ","type":"text"},{"code":"myNumber","type":"codeVoice"},{"text":" inside the body of the ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"apply only to that local variable,"},{"text":" ","type":"text"},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"text":" to the original, optional constant or variable that you unwrapped.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You can include as many optional bindings and Boolean conditions","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in a single "},{"type":"codeVoice","code":"if"},{"text":" statement as you need to,","type":"text"},{"type":"text","text":" "},{"text":"separated by commas.","type":"text"},{"text":" ","type":"text"},{"text":"If any of the values in the optional bindings are ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" "},{"text":"or any Boolean condition evaluates to ","type":"text"},{"code":"false","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"the whole ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement’s condition"},{"type":"text","text":" "},{"text":"is considered to be ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"The following ","type":"text"},{"code":"if","type":"codeVoice"},{"text":" statements are equivalent:","type":"text"}]},{"syntax":"swift","code":["if let firstNumber = Int(\"4\"), let secondNumber = Int(\"42\"), firstNumber < secondNumber && secondNumber < 100 {","    print(\"\\(firstNumber) < \\(secondNumber) < 100\")","}","\/\/ Prints \"4 < 42 < 100\"","","if let firstNumber = Int(\"4\") {","    if let secondNumber = Int(\"42\") {","        if firstNumber < secondNumber && secondNumber < 100 {","            print(\"\\(firstNumber) < \\(secondNumber) < 100\")","        }","    }","}","\/\/ Prints \"4 < 42 < 100\""],"type":"codeListing"},{"content":[{"inlineContent":[{"text":"Constants and variables created with optional binding in an ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"type":"text","text":"are available only within the body of the "},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"In contrast, the constants and variables created with a "},{"code":"guard","type":"codeVoice"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"are available in the lines of code that follow the "},{"type":"codeVoice","code":"guard"},{"text":" statement,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Salida-temprana","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"Note","style":"note","type":"aside"},{"text":"Opcionales extraídos implícitamente","anchor":"Opcionales-extra%C3%ADdos-impl%C3%ADcitamente","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"As described above,"},{"type":"text","text":" "},{"text":"optionals indicate that a constant or variable is allowed to have “no value”.","type":"text"},{"type":"text","text":" "},{"text":"Optionals can be checked with an ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement to see if a value exists,"},{"text":" ","type":"text"},{"text":"and can be conditionally unwrapped with optional binding","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to access the optional’s value if it does exist."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Sometimes it’s clear from a program’s structure that an optional will "},{"inlineContent":[{"type":"text","text":"always"}],"type":"emphasis"},{"type":"text","text":" have a value,"},{"type":"text","text":" "},{"text":"after that value is first set.","type":"text"},{"text":" ","type":"text"},{"text":"In these cases, it’s useful to remove the need","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to check and unwrap the optional’s value every time it’s accessed,"},{"text":" ","type":"text"},{"type":"text","text":"because it can be safely assumed to have a value all of the time."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"These kinds of optionals are defined as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"implicitly unwrapped optionals"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"You write an implicitly unwrapped optional by placing an exclamation point (","type":"text"},{"code":"String!","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"rather than a question mark (","type":"text"},{"code":"String?","type":"codeVoice"},{"type":"text","text":") after the type that you want to make optional."},{"type":"text","text":" "},{"type":"text","text":"Rather than placing an exclamation point after the optional’s name when you use it,"},{"text":" ","type":"text"},{"text":"you place an exclamation point after the optional’s type when you declare it.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Implicitly unwrapped optionals are useful when"},{"text":" ","type":"text"},{"text":"an optional’s value is confirmed to exist immediately after the optional is first defined","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and can definitely be assumed to exist at every point thereafter."},{"type":"text","text":" "},{"text":"The primary use of implicitly unwrapped optionals in Swift is during class initialization,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Referencias-unowned-y-propiedades-opcionales-extra%C3%ADdas-de-forma-impl%C3%ADcita","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"An implicitly unwrapped optional is a normal optional behind the scenes,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but can also be used like a non-optional value,"},{"type":"text","text":" "},{"type":"text","text":"without the need to unwrap the optional value each time it’s accessed."},{"text":" ","type":"text"},{"type":"text","text":"The following example shows the difference in behavior between"},{"type":"text","text":" "},{"text":"an optional string and an implicitly unwrapped optional string","type":"text"},{"type":"text","text":" "},{"text":"when accessing their wrapped value as an explicit ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["let possibleString: String? = \"An optional string.\"","let forcedString: String = possibleString! \/\/ requires an exclamation point","","let assumedString: String! = \"An implicitly unwrapped optional string.\"","let implicitString: String = assumedString \/\/ no need for an exclamation point"],"type":"codeListing"},{"inlineContent":[{"text":"You can think of an implicitly unwrapped optional as","type":"text"},{"text":" ","type":"text"},{"text":"giving permission for the optional to be force-unwrapped if needed.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"When you use an implicitly unwrapped optional value,"},{"type":"text","text":" "},{"text":"Swift first tries to use it as an ordinary optional value;","type":"text"},{"type":"text","text":" "},{"type":"text","text":"if it can’t be used as an optional, Swift force-unwraps the value."},{"type":"text","text":" "},{"text":"In the code above,","type":"text"},{"text":" ","type":"text"},{"text":"the optional value ","type":"text"},{"code":"assumedString","type":"codeVoice"},{"text":" is force-unwrapped","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"before assigning its value to "},{"code":"implicitString","type":"codeVoice"},{"type":"text","text":" "},{"text":"because ","type":"text"},{"type":"codeVoice","code":"implicitString"},{"type":"text","text":" has an explicit, non-optional type of "},{"type":"codeVoice","code":"String"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"In code below,","type":"text"},{"text":" ","type":"text"},{"code":"optionalString","type":"codeVoice"},{"text":" doesn’t have an explicit type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"so it’s an ordinary optional."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let optionalString = assumedString","\/\/ The type of optionalString is \"String?\" and assumedString isn't force-unwrapped."]},{"inlineContent":[{"text":"If an implicitly unwrapped optional is ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" and you try to access its wrapped value,"},{"text":" ","type":"text"},{"type":"text","text":"you’ll trigger a runtime error."},{"text":" ","type":"text"},{"text":"The result is exactly the same as if you place an exclamation point","type":"text"},{"type":"text","text":" "},{"type":"text","text":"after a normal optional that doesn’t contain a value."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can check whether an implicitly unwrapped optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"text":"the same way you check a normal optional:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["if assumedString != nil {","    print(assumedString!)","}","\/\/ Prints \"An implicitly unwrapped optional string.\""]},{"type":"paragraph","inlineContent":[{"text":"You can also use an implicitly unwrapped optional with optional binding,","type":"text"},{"type":"text","text":" "},{"text":"to check and unwrap its value in a single statement:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["if let definiteString = assumedString {","    print(definiteString)","}","\/\/ Prints \"An implicitly unwrapped optional string.\""]},{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"text":"Don’t use an implicitly unwrapped optional when there’s a possibility of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a variable becoming "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" at a later point."},{"text":" ","type":"text"},{"type":"text","text":"Always use a normal optional type if you need to check for a "},{"type":"codeVoice","code":"nil"},{"text":" value","type":"text"},{"type":"text","text":" "},{"text":"during the lifetime of a variable.","type":"text"}],"type":"paragraph"}]},{"text":"Manejo de errores","level":2,"anchor":"Manejo-de-errores","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You use ","type":"text"},{"inlineContent":[{"type":"text","text":"error handling"}],"type":"emphasis"},{"text":" to respond to error conditions","type":"text"},{"type":"text","text":" "},{"text":"your program may encounter during execution.","type":"text"}]},{"inlineContent":[{"type":"text","text":"In contrast to optionals,"},{"text":" ","type":"text"},{"type":"text","text":"which can use the presence or absence of a value"},{"text":" ","type":"text"},{"text":"to communicate success or failure of a function,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"error handling allows you to determine the underlying cause of failure,"},{"text":" ","type":"text"},{"text":"and, if necessary, propagate the error to another part of your program.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a function encounters an error condition, it "},{"inlineContent":[{"type":"text","text":"throws"}],"type":"emphasis"},{"type":"text","text":" an error."},{"type":"text","text":" "},{"text":"That function’s caller can then ","type":"text"},{"inlineContent":[{"text":"catch","type":"text"}],"type":"emphasis"},{"text":" the error and respond appropriately.","type":"text"}]},{"code":["func canThrowAnError() throws {","    \/\/ this function may or may not throw an error","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"A function indicates that it can throw an error","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by including the "},{"type":"codeVoice","code":"throws"},{"type":"text","text":" keyword in its declaration."},{"text":" ","type":"text"},{"type":"text","text":"When you call a function that can throw an error,"},{"text":" ","type":"text"},{"text":"you prepend the ","type":"text"},{"type":"codeVoice","code":"try"},{"text":" keyword to the expression.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Swift automatically propagates errors out of their current scope"},{"type":"text","text":" "},{"text":"until they’re handled by a ","type":"text"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["do {","    try canThrowAnError()","    \/\/ no error was thrown","} catch {","    \/\/ an error was thrown","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement creates a new containing scope,"},{"type":"text","text":" "},{"type":"text","text":"which allows errors to be propagated to one or more "},{"code":"catch","type":"codeVoice"},{"text":" clauses.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Here’s an example of how error handling can be used","type":"text"},{"type":"text","text":" "},{"text":"to respond to different error conditions:","type":"text"}]},{"type":"codeListing","code":["func makeASandwich() throws {","    \/\/ ...","}","","do {","    try makeASandwich()","    eatASandwich()","} catch SandwichError.outOfCleanDishes {","    washDishes()","} catch SandwichError.missingIngredients(let ingredients) {","    buyGroceries(ingredients)","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"In this example, the "},{"type":"codeVoice","code":"makeASandwich()"},{"text":" function will throw an error","type":"text"},{"text":" ","type":"text"},{"text":"if no clean dishes are available","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or if any ingredients are missing."},{"type":"text","text":" "},{"text":"Because ","type":"text"},{"type":"codeVoice","code":"makeASandwich()"},{"text":" can throw an error,","type":"text"},{"type":"text","text":" "},{"text":"the function call is wrapped in a ","type":"text"},{"code":"try","type":"codeVoice"},{"type":"text","text":" expression."},{"text":" ","type":"text"},{"type":"text","text":"By wrapping the function call in a "},{"code":"do","type":"codeVoice"},{"type":"text","text":" statement,"},{"text":" ","type":"text"},{"text":"any errors that are thrown will be propagated","type":"text"},{"text":" ","type":"text"},{"text":"to the provided ","type":"text"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clauses."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If no error is thrown, the "},{"code":"eatASandwich()","type":"codeVoice"},{"type":"text","text":" function is called."},{"text":" ","type":"text"},{"text":"If an error is thrown and it matches the ","type":"text"},{"type":"codeVoice","code":"SandwichError.outOfCleanDishes"},{"type":"text","text":" case,"},{"type":"text","text":" "},{"type":"text","text":"then the "},{"code":"washDishes()","type":"codeVoice"},{"text":" function will be called.","type":"text"},{"type":"text","text":" "},{"text":"If an error is thrown and it matches the ","type":"text"},{"type":"codeVoice","code":"SandwichError.missingIngredients"},{"text":" case,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"then the "},{"code":"buyGroceries(_:)","type":"codeVoice"},{"type":"text","text":" function is called"},{"text":" ","type":"text"},{"text":"with the associated ","type":"text"},{"code":"[String]","type":"codeVoice"},{"text":" value captured by the ","type":"text"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" pattern."}]},{"type":"paragraph","inlineContent":[{"text":"Throwing, catching, and propagating errors is covered in greater detail in","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling"},{"type":"text","text":"."}]},{"type":"heading","level":2,"anchor":"Aserciones-y-precondiciones","text":"Aserciones y precondiciones"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Assertions","type":"text"}]},{"type":"text","text":" and "},{"inlineContent":[{"type":"text","text":"preconditions"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"are checks that happen at runtime."},{"type":"text","text":" "},{"type":"text","text":"You use them to make sure an essential condition is satisfied"},{"text":" ","type":"text"},{"type":"text","text":"before executing any further code."},{"type":"text","text":" "},{"text":"If the Boolean condition in the assertion or precondition","type":"text"},{"type":"text","text":" "},{"type":"text","text":"evaluates to "},{"code":"true","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"code execution continues as usual."},{"text":" ","type":"text"},{"type":"text","text":"If the condition evaluates to "},{"type":"codeVoice","code":"false"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"the current state of the program is invalid;","type":"text"},{"type":"text","text":" "},{"type":"text","text":"code execution ends, and your app is terminated."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You use assertions and preconditions","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to express the assumptions you make"},{"type":"text","text":" "},{"text":"and the expectations you have","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"while coding,"},{"type":"text","text":" "},{"type":"text","text":"so you can include them as part of your code."},{"text":" ","type":"text"},{"type":"text","text":"Assertions help you find mistakes and incorrect assumptions during development,"},{"text":" ","type":"text"},{"type":"text","text":"and preconditions help you detect issues in production."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to verifying your expectations at runtime,"},{"text":" ","type":"text"},{"text":"assertions and preconditions also become a useful form of documentation","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"within the code."},{"text":" ","type":"text"},{"text":"Unlike the error conditions discussed in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Manejo-de-errores"},{"type":"text","text":" above,"},{"type":"text","text":" "},{"text":"assertions and preconditions aren’t used","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for recoverable or expected errors."},{"type":"text","text":" "},{"text":"Because a failed assertion or precondition","type":"text"},{"type":"text","text":" "},{"type":"text","text":"indicates an invalid program state,"},{"text":" ","type":"text"},{"text":"there’s no way to catch a failed assertion.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Using assertions and preconditions"},{"text":" ","type":"text"},{"type":"text","text":"isn’t a substitute for designing your code in such a way"},{"text":" ","type":"text"},{"type":"text","text":"that invalid conditions are unlikely to arise."},{"text":" ","type":"text"},{"type":"text","text":"However,"},{"text":" ","type":"text"},{"text":"using them to enforce valid data and state","type":"text"},{"type":"text","text":" "},{"type":"text","text":"causes your app to terminate more predictably"},{"type":"text","text":" "},{"type":"text","text":"if an invalid state occurs,"},{"text":" ","type":"text"},{"type":"text","text":"and helps make the problem easier to debug."},{"text":" ","type":"text"},{"type":"text","text":"Stopping execution as soon as an invalid state is detected"},{"text":" ","type":"text"},{"text":"also helps limit the damage caused by that invalid state.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The difference between assertions and preconditions is in when they’re checked:","type":"text"},{"type":"text","text":" "},{"text":"Assertions are checked only in debug builds,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but preconditions are checked in both debug and production builds."},{"text":" ","type":"text"},{"type":"text","text":"In production builds,"},{"type":"text","text":" "},{"type":"text","text":"the condition inside an assertion isn’t evaluated."},{"text":" ","type":"text"},{"type":"text","text":"This means you can use as many assertions as you want"},{"type":"text","text":" "},{"text":"during your development process,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"without impacting performance in production."}]},{"type":"heading","text":"Depuración con aserciones","anchor":"Depuraci%C3%B3n-con-aserciones","level":3},{"inlineContent":[{"type":"text","text":"You write an assertion by calling the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1541112-assert"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"from the Swift standard library."},{"type":"text","text":" "},{"type":"text","text":"You pass this function an expression that evaluates to "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"and a message to display if the result of the condition is "},{"code":"false","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"For example:"}],"type":"paragraph"},{"syntax":"swift","code":["let age = -3","assert(age >= 0, \"A person's age can't be less than zero.\")","\/\/ This assertion fails because -3 isn't >= 0."],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, code execution continues if "},{"code":"age >= 0","type":"codeVoice"},{"text":" evaluates to ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"that is, if the value of "},{"code":"age","type":"codeVoice"},{"type":"text","text":" is nonnegative."},{"type":"text","text":" "},{"text":"If the value of ","type":"text"},{"type":"codeVoice","code":"age"},{"type":"text","text":" is negative, as in the code above,"},{"text":" ","type":"text"},{"text":"then ","type":"text"},{"type":"codeVoice","code":"age >= 0"},{"text":" evaluates to ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and the assertion fails, terminating the application."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can omit the assertion message —"},{"type":"text","text":" "},{"type":"text","text":"for example, when it would just repeat the condition as prose."}]},{"type":"codeListing","syntax":"swift","code":["assert(age >= 0)"]},{"inlineContent":[{"type":"text","text":"If the code already checks the condition,"},{"type":"text","text":" "},{"type":"text","text":"you use the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1539616-assertionfailure","isActive":true},{"text":" function","type":"text"},{"type":"text","text":" "},{"text":"to indicate that an assertion has failed.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example:"}],"type":"paragraph"},{"code":["if age > 10 {","    print(\"You can ride the roller-coaster or the ferris wheel.\")","} else if age >= 0 {","    print(\"You can ride the ferris wheel.\")","} else {","    assertionFailure(\"A person's age can't be less than zero.\")","}"],"type":"codeListing","syntax":"swift"},{"level":3,"anchor":"Imposici%C3%B3n-de-precondiciones","text":"Imposición de precondiciones","type":"heading"},{"inlineContent":[{"type":"text","text":"Use a precondition whenever a condition has the potential to be false,"},{"type":"text","text":" "},{"text":"but must ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"definitely"}]},{"text":" be true for your code to continue execution.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example, use a precondition to check that a subscript isn’t out of bounds,"},{"text":" ","type":"text"},{"text":"or to check that a function has been passed a valid value.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You write a precondition by calling the","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1540960-precondition","type":"reference"},{"text":" function.","type":"text"},{"text":" ","type":"text"},{"text":"You pass this function an expression that evaluates to ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" or "},{"type":"codeVoice","code":"false"},{"text":" ","type":"text"},{"type":"text","text":"and a message to display if the result of the condition is "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"For example:","type":"text"}]},{"syntax":"swift","code":["\/\/ In the implementation of a subscript...","precondition(index > 0, \"Index must be greater than zero.\")"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"You can also call the"},{"text":" ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1539374-preconditionfailure","isActive":true,"type":"reference"},{"type":"text","text":" function"},{"type":"text","text":" "},{"text":"to indicate that a failure has occurred —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for example, if the default case of a switch was taken,"},{"text":" ","type":"text"},{"text":"but all valid input data should have been handled","type":"text"},{"type":"text","text":" "},{"text":"by one of the switch’s other cases.","type":"text"}],"type":"paragraph"},{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"If you compile in unchecked mode (","type":"text"},{"code":"-Ounchecked","type":"codeVoice"},{"text":"),","type":"text"},{"type":"text","text":" "},{"text":"preconditions aren’t checked.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The compiler assumes that preconditions are always true,"},{"text":" ","type":"text"},{"type":"text","text":"and it optimizes your code accordingly."},{"text":" ","type":"text"},{"text":"However, the ","type":"text"},{"type":"codeVoice","code":"fatalError(_:file:line:)"},{"text":" function always halts execution,","type":"text"},{"type":"text","text":" "},{"text":"regardless of optimization settings.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You can use the ","type":"text"},{"code":"fatalError(_:file:line:)","type":"codeVoice"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"during prototyping and early development"},{"type":"text","text":" "},{"text":"to create stubs for functionality that hasn’t been implemented yet,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by writing "},{"code":"fatalError(\"Unimplemented\")","type":"codeVoice"},{"text":" as the stub implementation.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because fatal errors are never optimized out,"},{"type":"text","text":" "},{"text":"unlike assertions or preconditions,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can be sure that execution always halts"},{"text":" ","type":"text"},{"text":"if it encounters a stub implementation.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo.","type":"text"}]},{"inlineContent":[{"text":"Conoce más acerca del uso del ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside","style":"note","name":"Software Beta"}],"kind":"content"}],"abstract":[{"text":"Trabaja con tipos comunes de datos y escribe sintaxis básica.","type":"text"}],"sections":[],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Funciones-que-devuelven-m%C3%BAltiples-valores":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Funciones-que-devuelven-m%C3%BAltiples-valores","url":"\/documentation\/the-swift-programming-language\/functions#Funciones-que-devuelven-m%C3%BAltiples-valores","title":"Funciones que devuelven múltiples valores","kind":"section","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"url":"\/documentation\/the-swift-programming-language\/errorhandling","title":"Manejo de errores","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","role":"article","abstract":[{"type":"text","text":"Respond to and recover from errors."}],"type":"topic"},"https://developer.apple.com/documentation/swift/1540960-precondition":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1540960-precondition","titleInlineContent":[{"code":"precondition(_:_:file:line:)","type":"codeVoice"}],"title":"precondition(_:_:file:line:)","url":"https:\/\/developer.apple.com\/documentation\/swift\/1540960-precondition","type":"link"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Opcionales":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Opcionales","url":"\/documentation\/the-swift-programming-language\/thebasics#Opcionales","title":"Opcionales","kind":"section","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters#Interpolaci%C3%B3n-de-cadenas":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Interpolaci%C3%B3n-de-cadenas","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters#Interpolaci%C3%B3n-de-cadenas","title":"Interpolación de cadenas","kind":"section","abstract":[],"type":"topic"},"https://developer.apple.com/documentation/swift/1541112-assert":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1541112-assert","titleInlineContent":[{"code":"assert(_:_:file:line:)","type":"codeVoice"}],"title":"assert(_:_:file:line:)","url":"https:\/\/developer.apple.com\/documentation\/swift\/1541112-assert","type":"link"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Manejo-de-errores":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Manejo-de-errores","url":"\/documentation\/the-swift-programming-language\/thebasics#Manejo-de-errores","title":"Manejo de errores","kind":"section","abstract":[],"type":"topic"},"https://developer.apple.com/documentation/swift/1539374-preconditionfailure":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1539374-preconditionfailure","titleInlineContent":[{"code":"preconditionFailure(_:file:line:)","type":"codeVoice"}],"title":"preconditionFailure(_:file:line:)","url":"https:\/\/developer.apple.com\/documentation\/swift\/1539374-preconditionfailure","type":"link"},"https://developer.apple.com/documentation/swift/1539616-assertionfailure":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1539616-assertionfailure","titleInlineContent":[{"code":"assertionFailure(_:file:line:)","type":"codeVoice"}],"title":"assertionFailure(_:file:line:)","url":"https:\/\/developer.apple.com\/documentation\/swift\/1539616-assertionfailure","type":"link"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures":{"url":"\/documentation\/the-swift-programming-language\/classesandstructures","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","type":"topic","role":"article","abstract":[{"type":"text","text":"Model custom types that encapsulate data."}],"title":"Estructuras y clases","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Par%C3%A1metros-con-valores-predeterminados":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Par%C3%A1metros-con-valores-predeterminados","url":"\/documentation\/the-swift-programming-language\/functions#Par%C3%A1metros-con-valores-predeterminados","title":"Parámetros con valores predeterminados","kind":"section","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Seguridad-de-tipos-e-inferencia-de-tipos":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Seguridad-de-tipos-e-inferencia-de-tipos","url":"\/documentation\/the-swift-programming-language\/thebasics#Seguridad-de-tipos-e-inferencia-de-tipos","title":"Seguridad de tipos e inferencia de tipos","kind":"section","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators":{"url":"\/documentation\/the-swift-programming-language\/basicoperators","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators","type":"topic","title":"Operadores básicos","abstract":[{"type":"text","text":"Perform operations like assignment, arithmetic, and comparison."}],"kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"url":"\/documentation\/the-swift-programming-language","kind":"article","type":"topic","title":"The Swift Programming Language (6)","role":"collection","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"type":"topic","abstract":[{"type":"text","text":"Add functionality to an existing type."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","role":"article","kind":"article","title":"Extensiones","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"url":"\/documentation\/the-swift-programming-language\/controlflow","title":"Flujo de control","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","role":"article","abstract":[{"type":"text","text":"Structure code with branches, loops, and early exits."}],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Salida-temprana":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Salida-temprana","url":"\/documentation\/the-swift-programming-language\/controlflow#Salida-temprana","title":"Salida temprana","kind":"section","abstract":[],"type":"topic"},"https://developer.apple.com/es/support/beta-software/":{"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","titleInlineContent":[{"text":"software beta de Apple","type":"text"}],"title":"software beta de Apple","url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"link"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting#Referencias-unowned-y-propiedades-opcionales-extra%C3%ADdas-de-forma-impl%C3%ADcita":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Referencias-unowned-y-propiedades-opcionales-extra%C3%ADdas-de-forma-impl%C3%ADcita","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting#Referencias-unowned-y-propiedades-opcionales-extra%C3%ADdas-de-forma-impl%C3%ADcita","title":"Referencias unowned y propiedades opcionales extraídas de forma implícita","kind":"section","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"url":"\/documentation\/the-swift-programming-language\/collectiontypes","title":"Tipos de colecciones","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","role":"article","abstract":[{"type":"text","text":"Organize data using arrays, sets, and dictionaries."}],"type":"topic"}}}