{
  "abstract" : [
    {
      "text" : "Trabaja con tipos comunes de datos y escribe sintaxis básica.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics"
  },
  "kind" : "article",
  "metadata" : {
    "title" : "Fundamentos"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "inlineContent" : [
            {
              "text" : "Swift es un lenguaje de programación para el desarrollo de aplicaciones",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para iOS, macOS, watchOS, y tvOS.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Si tienes experiencia desarrollando en C u Objective-C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "muchas partes de Swift te resultarán familiares.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift proporciona sus propias versiones de todos los tipos fundamentales de C y Objective-C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "incluyendo ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " para enteros, ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : " y ",
              "type" : "text"
            },
            {
              "code" : "Float",
              "type" : "codeVoice"
            },
            {
              "text" : " para valores de coma flotante,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : " para valores booleanos y ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " para datos textuales.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift también ofrece poderosas versiones",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "de los tres tipos principales de colecciones: ",
              "type" : "text"
            },
            {
              "code" : "Array",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "Set",
              "type" : "codeVoice"
            },
            {
              "text" : ", y ",
              "type" : "text"
            },
            {
              "code" : "Dictionary",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "como se describe en ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Al igual que C, Swift utiliza variables para almacenar y referenciar valores",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "mediante un nombre de identificación.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift también hace un uso extensivo de variables cuyos valores no pueden ser modificados.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Dichas variables se conocen como constantes",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y son mucho más poderosas que las constantes en C.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "En Swift, las constantes son utilizadas",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para hacer que el código resulte más seguro y más claro en la intención",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "cuando se trabaja con valores que no necesitan cambiar.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Además de los tipos conocidos,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift introduce tipos avanzados que no se encuentran en Objective-C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "como las tuplas.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Las tuplas te permiten crear y pasar conjuntos de valores.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Puedes utilizar una tupla para hacer que una función devuelva varios valores",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "como un único valor compuesto.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift también cuenta con tipos opcionales,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "los cuales lidian con la ausencia de un valor.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Los opcionales indican que «",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "existe",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " un valor, y es igual a x»",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "o «",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "no existe",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " un valor en lo absoluto».",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Usar opcionales es similar a usar ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " con punteros en Objective-C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "pero funcionan para cualquier tipo, no solo para las clases.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Los opcionales no solo son más seguros y significativos",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "que los punteros ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " en Objective-C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "sino que también forman parte esencial de muchas de las funciones más poderosas de Swift.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift es un lenguaje con ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "seguridad de tipos",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "lo que significa que el lenguaje te ayuda a tener claridad",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "con respecto a los tipos de valores con los que puede trabajar tu código.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Si una parte de tu código requiere un ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "la seguridad de tipos te impedirá pasar un ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " por error.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Del mismo modo, la seguridad de tipos evitará que pases, accidentalmente,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "un ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " opcional a un fragmento de código que requiere un ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " no opcional.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "La seguridad de tipos te ayuda a detectar y corregir errores lo antes posible",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "en el proceso de desarrollo.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Constantes-y-variables",
          "level" : 2,
          "text" : "Constantes y variables",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Las constantes y variables asocian un nombre",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(como ",
              "type" : "text"
            },
            {
              "code" : "numeroMaximoDeIntentosDeInicioDeSesion",
              "type" : "codeVoice"
            },
            {
              "text" : " o ",
              "type" : "text"
            },
            {
              "code" : "mensajeDeBienvenida",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "con un valor de un tipo particular",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(como el número ",
              "type" : "text"
            },
            {
              "code" : "10",
              "type" : "codeVoice"
            },
            {
              "text" : " o la cadena ",
              "type" : "text"
            },
            {
              "code" : "\"Hola\"",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "El valor de una ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "constante",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " no se puede cambiar una vez que se asigna,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "mientras que a una ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "variable",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " puede asignársele un valor diferente más adelante.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Declaraci%C3%B3n-de-constantes-y-variables",
          "level" : 3,
          "text" : "Declaración de constantes y variables",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Las constantes y variables deben ser declararadas antes de ser utilizadas.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Para declarar constantes, se usa la palabra clave ",
              "type" : "text"
            },
            {
              "code" : "let",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "mientras que las variables se declaran con la palabra clave ",
              "type" : "text"
            },
            {
              "code" : "var",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Acá tenemos un ejemplo de cómo se pueden utilizar las constantes y variables",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para hacer seguimiento del número de intentos de inicio de sesión que ha realizado un usuario:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let numeroMaximoDeIntentosDeInicioDeSesion = 10",
            "var intentoActualDeInicioDeSesion = 0"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Este código puede leerse como:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "«Declara una nueva constante llamada ",
              "type" : "text"
            },
            {
              "code" : "numeroMaximoDeIntentosDeInicioDeSesion",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y asígnale un valor de ",
              "type" : "text"
            },
            {
              "code" : "10",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Luego, declara una nueva variable llamada ",
              "type" : "text"
            },
            {
              "code" : "intentoActualDeInicioDeSesion",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y asígnale un valor inicial de ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : ".»",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "En este ejemplo,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "el número máximo de intentos de inicio de sesión permitidos se declara como una constante,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "porque el valor máximo nunca cambia.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "El contador actual de intentos de inicio de sesión se declara como una variable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "porque este valor debe incrementarse después de cada intento de inicio de sesión fallido.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Puedes declarar múltiples constantes o variables en una sola línea,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "separadas por comas:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var x = 0.0, y = 0.0, z = 0.0"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Si un valor almacenado en tu código nunca cambia,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "siempre debes declararlo como una constante usando la palabra clave ",
                  "type" : "text"
                },
                {
                  "code" : "let",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Utiliza variables solo para almacenar valores que puedan cambiar.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Nota",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Anotaciones-de-tipo",
          "level" : 3,
          "text" : "Anotaciones de tipo",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Al declarar una constante o variable, puedes proveer una ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "anotación de tipo",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para especificar el tipo de valores que dicha constante o variable puede almacenar.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Escribe una anotación de tipo colocando dos puntos (",
              "type" : "text"
            },
            {
              "code" : ":",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "después del nombre de la constante o variable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "seguido de un espacio, seguido del nombre del tipo a especificar.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "En este ejemplo se agrega una anotación de tipo para una variable llamada ",
              "type" : "text"
            },
            {
              "code" : "mensajeDeBienvenida",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para indicar que la variable puede almacenar valores de tipo ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var mensajeDeBienvenida: String"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los dos puntos en la declaración significan ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "«…de tipo…»",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "por lo que el código anterior se puede leer como:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "«Declara una variable llamada ",
              "type" : "text"
            },
            {
              "code" : "mensajeDeBienvenida",
              "type" : "codeVoice"
            },
            {
              "text" : " que sea de tipo ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ".»",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "La frase ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "«de tipo ",
                  "type" : "text"
                },
                {
                  "code" : "String",
                  "type" : "codeVoice"
                },
                {
                  "text" : "»",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " significa «puede almacenar cualquier valor de tipo ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : "».",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Piensa en ello como ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "«el tipo de cosa»",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " (o ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "«la clase de cosa»",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ") que se puede almacenar.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Ahora, a la variable ",
              "type" : "text"
            },
            {
              "code" : "mensajeDeBienvenida",
              "type" : "codeVoice"
            },
            {
              "text" : " se le puede asignar cualquier cadena como valor",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "sin ningún problema:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "mensajeDeBienvenida = \"Hola\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Puedes definir múltiples variables del mismo tipo en una sola línea,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "separadas por comas, con una única definición de tipo después del nombre de la última variable:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var rojo, verde, azul: Double"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "En la práctica, resulta inusual la necesidad de escribir anotaciones de tipo.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Si al definir una constante o variable, proporcionas un valor inicial para la misma,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Swift casi siempre podrá inferir el tipo que se utilizará para esa constante o variable,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "como se describe en ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Seguridad-de-tipos-e-inferencia-de-tipos",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "En el ejemplo anterior, no se provee ningún valor inicial,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "por lo que el tipo de la variable ",
                  "type" : "text"
                },
                {
                  "code" : "mensajeDeBienvenida",
                  "type" : "codeVoice"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "se especifica con una anotación de tipo en lugar de inferirse de un valor inicial.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Nota",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Nombrar-constantes-y-variables",
          "level" : 3,
          "text" : "Nombrar constantes y variables",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los nombres de constantes y variables pueden incluir casi cualquier caracter, incluyendo caracteres Unicode:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let π = 3.14159",
            "let 你好 = \"你好世界\"",
            "let 🐶🐮 = \"perrogato\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los nombres de constantes y variables no pueden",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "contener caracteres de espacio en blanco, símbolos matemáticos, flechas,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "valores escalares Unicode de uso privado ni caracteres de dibujo de líneas y recuadros.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Tampoco pueden comenzar con un número, aunque estos se pueden incluir en otras partes del nombre.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Una vez que has declarado una constante o variable de cierto tipo,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "no podrás volver a declararla con el mismo nombre",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "ni cambiarla para almacenar valores de un tipo diferente.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Tampoco es posible convertir una constante en una variable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "o una variable en una constante.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Si necesitas darle a una constante o variable el mismo nombre",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "que una palabra clave reservada de Swift,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "encierra la palabra clave con comillas invertidas (",
                  "type" : "text"
                },
                {
                  "code" : "`",
                  "type" : "codeVoice"
                },
                {
                  "text" : ")",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "al usarla como nombre de una variable o constante.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Sin embargo, evita usar palabras clave como nombres",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "a menos que no tengas ninguna otra opción en lo absoluto.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Nota",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Puedes cambiar el valor de una variable existente a otro valor de un tipo compatible.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "En este ejemplo, el valor de ",
              "type" : "text"
            },
            {
              "code" : "recepcionAmigable",
              "type" : "codeVoice"
            },
            {
              "text" : " cambia de ",
              "type" : "text"
            },
            {
              "code" : "\"¡Hola!\"",
              "type" : "codeVoice"
            },
            {
              "text" : " a ",
              "type" : "text"
            },
            {
              "code" : "\"Bonjour!\"",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var recepcionAmigable = \"¡Hola!\"",
            "recepcionAmigable = \"Bonjour!\"",
            "\/\/ Ahora, recepcionAmigable es \"Bonjour!\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A diferencia de una variable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "el valor de una constante no se puede cambiar después de haber sido asignado.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Intentar cambiarlo, resultará en un error al momento de compilar el código:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let nombreDelLenguaje = \"Swift\"",
            "nombreDelLenguaje = \"Swift++\"",
            "\/\/ Esto reporta un error al compilar: nombreDelLenguaje is a 'let' constant"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Impresi%C3%B3n-de-Constantes-y-Variables",
          "level" : 3,
          "text" : "Impresión de Constantes y Variables",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Puedes imprimir el valor actual de una constante o variable mediante la función ",
              "type" : "text"
            },
            {
              "code" : "print(_:separator:terminator:)",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(recepcionAmigable)",
            "\/\/ Imprime \"Bonjour!\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "La función ",
              "type" : "text"
            },
            {
              "code" : "print(_:separator:terminator:)",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "es una función global que imprime uno o más valores",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a una salida apropiada.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "En Xcode, por ejemplo,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "la función ",
              "type" : "text"
            },
            {
              "code" : "print(_:separator:terminator:)",
              "type" : "codeVoice"
            },
            {
              "text" : " imprime su salida en el panel de consola de Xcode.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Los parámetros ",
              "type" : "text"
            },
            {
              "code" : "separator",
              "type" : "codeVoice"
            },
            {
              "text" : " y ",
              "type" : "text"
            },
            {
              "code" : "terminator",
              "type" : "codeVoice"
            },
            {
              "text" : " tienen valores predeterminados,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "por lo que puedes omitirlos al llamar esta función.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Por defecto, la función termina la línea que imprime agregando un salto de línea.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Para imprimir un valor sin un salto de línea después del mismo,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "pasa una cadena vacía como ",
              "type" : "text"
            },
            {
              "code" : "terminator",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Por ejemplo, ",
              "type" : "text"
            },
            {
              "code" : "print(someValue, terminator: \"\")",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Para más información sobre parámetros con valores predeterminados,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "consulta ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Par%C3%A1metros-con-valores-predeterminados",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Usa ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "interpolación de cadenas",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " para insertar el nombre de una constante o variable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a manera de ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "placeholder",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " en una cadena más larga",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y solicitarle a Swift que le reemplace con el valor actual de esa constante o variable.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Encierra el nombre entre paréntesis y precédelo con una barra inclinada invertida (",
              "type" : "text"
            },
            {
              "code" : "\\",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para indicar que es un ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "placeholder",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(\"¡El valor actual de recepcionAmigable es \\(recepcionAmigable)!\")",
            "\/\/ Imprime \"¡El valor actual de recepcionAmigable es Bonjour!\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Todas las opciones que se pueden utilizar con la interpolación de cadenas,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "se describen en ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Interpolaci%C3%B3n-de-cadenas",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Nota",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Comentarios",
          "level" : 2,
          "text" : "Comentarios",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Usa comentarios para incluir texto no ejecutable en tu código,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "como una nota o un recordatorio personal.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "El compilador de Swift ignora los comentarios al momento de compilar el código.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los comentarios en Swift son muy similares a los comentarios en C.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Los comentarios de una sola línea comienzan con dos barras inclinadas (",
              "type" : "text"
            },
            {
              "code" : "\/\/",
              "type" : "codeVoice"
            },
            {
              "text" : "):",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/ Esto es un comentario."
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los comentarios de varias líneas comienzan con una barra inclinada seguida de un asterisco (",
              "type" : "text"
            },
            {
              "code" : "\/*",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y terminan con un asterisco seguido de una barra inclinada (",
              "type" : "text"
            },
            {
              "code" : "*\/",
              "type" : "codeVoice"
            },
            {
              "text" : "):",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/* Esto también es un comentario,",
            "pero está escrito en varias líneas. *\/"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A diferencia de los comentarios de varias líneas en C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "los comentarios de varias líneas en Swift se pueden anidar",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "dentro de otros comentarios de varias líneas.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Puedes escribir comentarios anidados iniciando un bloque de comentarios de varias líneas",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y luego iniciando un segundo comentario de varias líneas dentro del primer bloque.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "A continuación, se cierra el segundo bloque, seguido del primer bloque:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/* Este es el comienzo del primer comentario de varias líneas.",
            "    \/* Este es el segundo comentario de varias líneas (anidado). \/*",
            "Este es el final del primer comentario de varias líneas. *\/"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los comentarios anidados de varias líneas te permiten comentar grandes bloques de código",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "de forma rápida y sencilla,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "incluso si el código ya contiene comentarios de varias líneas.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Punto-y-coma",
          "level" : 2,
          "text" : "Punto y coma",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A diferencia de muchos otros lenguajes,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "no",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " requiere que escribas un punto y coma (",
              "type" : "text"
            },
            {
              "code" : ";",
              "type" : "codeVoice"
            },
            {
              "text" : ") después de cada sentencia en tu código,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "aunque puedes hacerlo si así lo deseas.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Sin embargo, ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "sí",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " se requiere si quisieras escribir múltiples declaraciones en una sola línea:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let gato = \"🐱\"; print(gato)",
            "\/\/ Imprime \"🐱\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Enteros",
          "level" : 2,
          "text" : "Enteros",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "enteros",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " son números completos sin componente fraccionario,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "como ",
              "type" : "text"
            },
            {
              "code" : "42",
              "type" : "codeVoice"
            },
            {
              "text" : " y ",
              "type" : "text"
            },
            {
              "code" : "-23",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Los números enteros pueden tener signo (positivo, cero, o negativo)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "o no tenerlo (positivo o cero).",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift proporciona enteros con y sin signo en diversos formatos: 8, 16, 32, y 64 bits.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Estos enteros siguen una convención de nomenclatura similar a la de C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "de manera que un entero sin signo, de 8 bits es de tipo ",
              "type" : "text"
            },
            {
              "code" : "UInt8",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y un entero con signo, de 32 bits es de tipo ",
              "type" : "text"
            },
            {
              "code" : "Int32",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Como todos los tipos en Swift, estos tipos enteros tienen nombres en mayúscula.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "L%C3%ADmites-de-enteros",
          "level" : 3,
          "text" : "Límites de enteros",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Puedes acceder a los valores mínimo y máximo de cada tipo de entero",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "mediante las propiedades ",
              "type" : "text"
            },
            {
              "code" : "min",
              "type" : "codeVoice"
            },
            {
              "text" : " y ",
              "type" : "text"
            },
            {
              "code" : "max",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let valorMinimo = UInt8.min  \/\/ valorMinimo es igual a 0 y es de tipo UInt8",
            "let valorMaximo = UInt8.max  \/\/ valorMaximo es igual a 255 y es de tipo UInt8"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los valores de estas propiedades son del tipo numérico de longitud correcta",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(como ",
              "type" : "text"
            },
            {
              "code" : "UInt8",
              "type" : "codeVoice"
            },
            {
              "text" : " en el ejemplo anterior)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y, por lo tanto, pueden ser usados en expresiones junto con otros valores del mismo tipo.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Int",
          "level" : 3,
          "text" : "Int",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "En la mayoría de los casos,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "no necesitas elegir un tamaño específico de entero para utilizar en tu código.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift proporciona un tipo entero adicional, ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "el cual tiene el mismo tamaño",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "que el tamaño nativo de una palabra en la plataforma en la que se ejecuta el código:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "En una plataforma de 32 bits, ",
                      "type" : "text"
                    },
                    {
                      "code" : "Int",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " tiene el mismo tamaño que ",
                      "type" : "text"
                    },
                    {
                      "code" : "Int32",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "En una plataforma de 64 bits, ",
                      "type" : "text"
                    },
                    {
                      "code" : "Int",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " tiene el mismo tamaño que ",
                      "type" : "text"
                    },
                    {
                      "code" : "Int64",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "A menos que tengas que trabajar con un tamaño específico de entero,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "usa siempre ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " para valores enteros en tu código.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Esto ayuda con la coherencia e interoperabilidad del código.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Incluso en plataformas de 32 bits, ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " puede almacenar cualquier valor entre ",
              "type" : "text"
            },
            {
              "code" : "-2,147,483,648",
              "type" : "codeVoice"
            },
            {
              "text" : " y ",
              "type" : "text"
            },
            {
              "code" : "2,147,483,647",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y es lo suficientemente grande para muchos rangos de enteros.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "UInt",
          "level" : 3,
          "text" : "UInt",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift también proporciona un tipo de número entero sin signo, ",
              "type" : "text"
            },
            {
              "code" : "UInt",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "el cual tiene el mismo tamaño",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "que el tamaño nativo de una palabra en la plataforma en la que se ejecuta el código:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "En una plataforma de 32 bits, ",
                      "type" : "text"
                    },
                    {
                      "code" : "UInt",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " tiene el mismo tamaño que ",
                      "type" : "text"
                    },
                    {
                      "code" : "UInt32",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "En una plataforma de 64 bits, ",
                      "type" : "text"
                    },
                    {
                      "code" : "UInt",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " tiene el mismo tamaño que ",
                      "type" : "text"
                    },
                    {
                      "code" : "UInt64",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Usa ",
                  "type" : "text"
                },
                {
                  "code" : "UInt",
                  "type" : "codeVoice"
                },
                {
                  "text" : " sólo cuando necesites, específicamente,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "un tipo de entero sin signo con el mismo tamaño",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "que el tamaño nativo de una palabra en la plataforma en la que se ejecuta el código.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Si este no es el caso, es preferible usar ",
                  "type" : "text"
                },
                {
                  "code" : "Int",
                  "type" : "codeVoice"
                },
                {
                  "text" : ",",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "incluso cuando se sabe que los valores que se almacenarán no son negativos.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Un uso consistente de ",
                  "type" : "text"
                },
                {
                  "code" : "Int",
                  "type" : "codeVoice"
                },
                {
                  "text" : " para valores enteros ayuda con la interoperabilidad del código,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "evita la necesidad de convertir entre diferentes tipos de números,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "y coincide con la inferencia de tipo enteros, como se describe en",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Seguridad-de-tipos-e-inferencia-de-tipos",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Nota",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "N%C3%BAmeros-de-punto-flotante",
          "level" : 2,
          "text" : "Números de punto flotante",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "números de punto flotante",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " son números con un componente fraccionario,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "como ",
              "type" : "text"
            },
            {
              "code" : "3.14159",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "0.1",
              "type" : "codeVoice"
            },
            {
              "text" : ", y ",
              "type" : "text"
            },
            {
              "code" : "-273.15",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los tipos de punto flotante pueden representar un rango de valores mucho más amplio",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "que los tipos enteros",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y pueden almacenar números mucho más grandes o más pequeños",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "que los que se pueden almacenar en un ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift proporciona dos tipos de números de punto flotante con signo:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "Double",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " representa un número de punto flotante de 64 bits.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "Float",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " representa un número de punto flotante de 32 bits.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                },
                {
                  "code" : "Double",
                  "type" : "codeVoice"
                },
                {
                  "text" : " tiene una precisión de al menos 15 dígitos decimales,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "mientras que la precisión de ",
                  "type" : "text"
                },
                {
                  "code" : "Float",
                  "type" : "codeVoice"
                },
                {
                  "text" : " puede ser de tan solo 6 dígitos decimales.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "El tipo de punto flotante apropiado a utilizar depende de la naturaleza y el rango de",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "valores con los que necesites trabajar en tu código.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "En situaciones en las que cualquiera de los dos tipos sea apropiado, es preferible usar ",
                  "type" : "text"
                },
                {
                  "code" : "Double",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Nota",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Seguridad-de-tipos-e-inferencia-de-tipos",
          "level" : 2,
          "text" : "Seguridad de tipos e inferencia de tipos",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift es un lenguaje con seguridad de tipos.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Un lenguaje con seguridad de tipos te incita a ser claro con respecto a",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "los tipos de valores con los que puede trabajar tu código.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Si parte de tu código requiere un ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ", no podrás pasarle un ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " por error.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Dado que cuenta con seguridad de tipos,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift realiza ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "verificaciones de tipos",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " (",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type checks",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ") al compilar tu código",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y marca como error cualquier tipo que no coincida.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Esto te permite detectar y corregir errores lo antes posible en el proceso de desarrollo.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "La verificación de tipos te ayuda a evitar errores al trabajar con diferentes tipos de valores.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Sin embargo, esto no quiere decir que tengas que especificar el tipo",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "de cada constante y variable que declares.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Si no especificas el tipo de valor que necesitas,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift usa la ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "inferencia de tipos",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " para determinar el tipo apropiado.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "La inferencia de tipos le permite a un compilador deducir,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "de manera automática, el tipo de una expresión en particular al compilar tu código,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "simplemente examinando los valores que proporcionas.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Debido a la inferencia de tipos, Swift requiere muchas menos declaraciones de tipos",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "que lenguajes como C u Objective-C.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Las constantes y las variables siguen teniendo un tipo explícito,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "pero tú llevas a cabo gran parte del trabajo de especificar dicho tipo.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "La inferencia de tipos es particularmente útil",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "al declarar una constante o variable con un valor inicial.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Esto, a menudo, se hace asignando un ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "valor literal",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " (o ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "literal",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a la constante o variable en el momento en que se declara.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(Un valor literal es un valor que aparece directamente en tu código fuente,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "como ",
              "type" : "text"
            },
            {
              "code" : "42",
              "type" : "codeVoice"
            },
            {
              "text" : " y ",
              "type" : "text"
            },
            {
              "code" : "3.14159",
              "type" : "codeVoice"
            },
            {
              "text" : " en los ejemplos siguientes).",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Por ejemplo, si asignas un valor literal de ",
              "type" : "text"
            },
            {
              "code" : "42",
              "type" : "codeVoice"
            },
            {
              "text" : " a una nueva constante,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "sin especificar de qué tipo es,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift infiere que quieres que la constante sea de tipo ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "porque la has inicializado con un número que parece un entero:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let significadoDeLaVida = 42",
            "\/\/ Se infiere que significadoDeLaVida es de tipo Int"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Del mismo modo, si no especificas un tipo para un literal de punto flotante,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift infiere que quieres crear un ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let pi = 3.14159",
            "\/\/ Se infiere que pi es de tipo Double"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift siempre escoge ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : " (en lugar de ",
              "type" : "text"
            },
            {
              "code" : "Float",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "al momento de inferir el tipo de números de punto flotante.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Si combinas literales enteros y de punto flotante en una expresión,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "se inferirá un tipo ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : " a partir del contexto:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let otroPi = 3 + 0.14159",
            "\/\/ Se infiere que otroPi también es de tipo Double"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "El valor literal de ",
              "type" : "text"
            },
            {
              "code" : "3",
              "type" : "codeVoice"
            },
            {
              "text" : " no tiene un tipo explícito en sí mismo,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "por lo que se infiere un tipo de salida adecuado ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a partir de la presencia de un literal de punto flotante como parte de la suma.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Literales-num%C3%A9ricos",
          "level" : 2,
          "text" : "Literales numéricos",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los literales enteros se pueden escribir como:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Un número ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "decimal",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : ", sin prefijo",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Un número ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "binario",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : ", con el prefijo ",
                      "type" : "text"
                    },
                    {
                      "code" : "0b",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Un número ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "octal",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : ", con el prefijo ",
                      "type" : "text"
                    },
                    {
                      "code" : "0o",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Un número ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "hexadecimal",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : ", con el prefijo ",
                      "type" : "text"
                    },
                    {
                      "code" : "0x",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "Todos estos literales enteros tienen un valor decimal de ",
              "type" : "text"
            },
            {
              "code" : "17",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let enteroDecimal = 17",
            "let enteroBinario = 0b10001       \/\/ 17 en notación binaria",
            "let enteroOctal = 0o21            \/\/ 17 en notación octal",
            "let enteroHexadecimal = 0x11      \/\/ 17 en notación hexadecimal"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los literales de punto flotante pueden ser decimales (sin prefijo)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "o hexadecimales (con el prefijo ",
              "type" : "text"
            },
            {
              "code" : "0x",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Siempre deben tener un número (o número hexadecimal) a ambos lados del punto decimal.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Los flotantes decimales también pueden tener un ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "exponente",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " opcional,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "representado por una ",
              "type" : "text"
            },
            {
              "code" : "e",
              "type" : "codeVoice"
            },
            {
              "text" : " mayúscula o minúscula;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "los flotantes hexadecimales deben tener un exponente,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "representado por una ",
              "type" : "text"
            },
            {
              "code" : "p",
              "type" : "codeVoice"
            },
            {
              "text" : " mayúscula o minúscula.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Para números decimales con un exponente ",
              "type" : "text"
            },
            {
              "code" : "x",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "se multiplica el número base por 10ˣ:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "1.25e2",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " significa 1.25 x 10², o ",
                      "type" : "text"
                    },
                    {
                      "code" : "125.0",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "1.25e-2",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " significa 1.25 x 10⁻², o ",
                      "type" : "text"
                    },
                    {
                      "code" : "0.0125",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "Para números hexadecimales con un exponente ",
              "type" : "text"
            },
            {
              "code" : "x",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "se multiplica el número base por 2ˣ:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "0xFp2",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " significa 15 x 2², o ",
                      "type" : "text"
                    },
                    {
                      "code" : "60.0",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "0xFp-2",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " significa 15 x 2⁻², o ",
                      "type" : "text"
                    },
                    {
                      "code" : "3.75",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "Todos estos literales de punto flotante tienen un valor decimal de ",
              "type" : "text"
            },
            {
              "code" : "12.1875",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let doubleDecimal = 12.1875",
            "let doubleExponente = 1.21875e1",
            "let doubleHexadecimal = 0xC.3p0"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los literales numéricos pueden contener formato adicional para que sean más fáciles de leer.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Tanto los números enteros como los flotantes se pueden rellenar con ceros adicionales",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y pueden contener guiones bajos para facilitar la lectura.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Ningún tipo de formato afecta el valor subyacente del literal:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let doubleDecorado = 000123.456",
            "let unMillon = 1_000_000",
            "let pocoMasDeUnMillon = 1_000_000.000_000_1"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Conversi%C3%B3n-de-tipos-num%C3%A9ricos",
          "level" : 2,
          "text" : "Conversión de tipos numéricos",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Usa el tipo ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " para todas las variables y constantes enteras de propósito general en tu código,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "incluso si se sabe que no son negativas.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Usar el tipo entero predeterminado en situaciones cotidianas significa que",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "las constantes y variables enteras sean inmediatamente interoperables en tu código y",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "coincidan con el tipo inferido para los valores literales enteros.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Utiliza los otros tipos de enteros solo cuando se requieran, específicamente,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para una tarea en particular,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "debido a datos de tamaño explícito de una fuente externa,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "o para la optimización necesaria de rendimiento, uso de memoria u otra.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "El uso de tipos de tamaño explícito en estas situaciones",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "ayuda a detectar cualquier desbordamiento accidental de valores",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y documenta, implícitamente, la naturaleza de los datos que se utilizan.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Conversi%C3%B3n-de-enteros",
          "level" : 3,
          "text" : "Conversión de enteros",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "El rango de números que se pueden almacenar en una constante o variable entera",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "es diferente para cada tipo numérico.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Una constante o variable de tipo ",
              "type" : "text"
            },
            {
              "code" : "Int8",
              "type" : "codeVoice"
            },
            {
              "text" : " puede almacenar números entre ",
              "type" : "text"
            },
            {
              "code" : "-128",
              "type" : "codeVoice"
            },
            {
              "text" : " y ",
              "type" : "text"
            },
            {
              "code" : "127",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "mientras que una constante o variable de tipo ",
              "type" : "text"
            },
            {
              "code" : "UInt8",
              "type" : "codeVoice"
            },
            {
              "text" : " puede almacenar números entre ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : " y ",
              "type" : "text"
            },
            {
              "code" : "255",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Un número que no encaja en una constante o variable de tipo entero de tamaño fijo",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "es reportado como un error al momento de compilar tu código:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let noPuedeSerNegativo: UInt8 = -1",
            "\/\/ UInt8 no puede almacenar números negativos, por lo que esto reporta un error al compilar",
            "let muyGrande: Int8 = Int8.max + 1",
            "\/\/ Int8 no puede almacenar un número mayor que su valor máximo,",
            "\/\/ por lo que esto también reporta un error al compilar"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Dado que cada tipo numérico puede almacenar un rango diferente de valores,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "debes optar por una conversión de tipo numérico caso por caso.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Mediante este enfoque, se evitan errores de conversión ocultos",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y ayuda a que las intenciones de conversión de tipos sean explícitas en tu código.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Para convertir un tipo de número específico a otro,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "inicializa un nuevo número del tipo deseado con el valor existente.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "En el siguiente ejemplo, la constante ",
              "type" : "text"
            },
            {
              "code" : "dosMil",
              "type" : "codeVoice"
            },
            {
              "text" : " es de tipo ",
              "type" : "text"
            },
            {
              "code" : "UInt16",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "mientras que la constante ",
              "type" : "text"
            },
            {
              "code" : "uno",
              "type" : "codeVoice"
            },
            {
              "text" : " es de tipo ",
              "type" : "text"
            },
            {
              "code" : "UInt8",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "No se pueden sumar directamente,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "porque no son del mismo tipo.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "En cambio, en este ejemplo se llama a ",
              "type" : "text"
            },
            {
              "code" : "UInt16(uno)",
              "type" : "codeVoice"
            },
            {
              "text" : " para crear",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "un nuevo ",
              "type" : "text"
            },
            {
              "code" : "UInt16",
              "type" : "codeVoice"
            },
            {
              "text" : " inicializado con el valor de ",
              "type" : "text"
            },
            {
              "code" : "uno",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y se usa este valor en lugar del original:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let dosMil: UInt16 = 2_000",
            "let uno: UInt8 = 1",
            "let dosMilUno = dosMil + UInt16(uno)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Debido a que ambos lados de la adición ahora son del tipo ",
              "type" : "text"
            },
            {
              "code" : "UInt16",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "la adición es permitida.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Se infiere que la constante de salida (",
              "type" : "text"
            },
            {
              "code" : "dosMilUno",
              "type" : "codeVoice"
            },
            {
              "text" : ") es del tipo ",
              "type" : "text"
            },
            {
              "code" : "UInt16",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "porque es la suma de dos valores ",
              "type" : "text"
            },
            {
              "code" : "UInt16",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "code" : "AlgunTipo(conValorInicial)",
              "type" : "codeVoice"
            },
            {
              "text" : " es la forma predeterminada de llamar al inicializador de un tipo Swift",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y pasar un valor inicial.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Detrás de cámaras, ",
              "type" : "text"
            },
            {
              "code" : "UInt16",
              "type" : "codeVoice"
            },
            {
              "text" : " tiene un inicializador que acepta un valor de tipo ",
              "type" : "text"
            },
            {
              "code" : "UInt8",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "por lo que este inicializador se usa para crear un nuevo ",
              "type" : "text"
            },
            {
              "code" : "UInt16",
              "type" : "codeVoice"
            },
            {
              "text" : " a partir de un ",
              "type" : "text"
            },
            {
              "code" : "UInt8",
              "type" : "codeVoice"
            },
            {
              "text" : " existente.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Sin embargo, no le puedes pasar ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "cualquier",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " tipo;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "tiene que ser un tipo para el cual ",
              "type" : "text"
            },
            {
              "code" : "UInt16",
              "type" : "codeVoice"
            },
            {
              "text" : " proporcione un inicializador.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "La extensión de los tipos existentes para proporcionar inicializadores que acepten nuevos tipos",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(incluidas tus propias definiciones de tipo)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "se trata en ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Conversi%C3%B3n-de-n%C3%BAmeros-enteros-y-de-punto-flotante",
          "level" : 3,
          "text" : "Conversión de números enteros y de punto flotante",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Toda conversión entre tipos numéricos enteros y de punto flotante debe hacerse de manera explícita:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let tres = 3",
            "let puntoUnoCuatroUnoCincoNueve = 0.14159",
            "let pi = Double(tres) + puntoUnoCuatroUnoCincoNueve",
            "\/\/ pi es igual a 3.14159 y se infiere que es de tipo Double"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Acá, el valor de la constante ",
              "type" : "text"
            },
            {
              "code" : "tres",
              "type" : "codeVoice"
            },
            {
              "text" : " se usa para crear un nuevo valor de tipo ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "de modo que ambos lados de la suma sean del mismo tipo.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Sin esta conversión en su lugar, no se permitiría la suma.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "La conversión de punto flotante a entero también debe hacerse de manera explícita.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Un tipo entero se puede inicializar con un valor de tipo ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : " o ",
              "type" : "text"
            },
            {
              "code" : "Float",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let piEntero = Int(pi)",
            "\/\/ piEntero es igual a 3 y se infiere que es de tipo Int"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los valores de punto flotante siempre resultan truncados al usarse",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para inicializar un nuevo valor entero de esta manera.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Esto significa que ",
              "type" : "text"
            },
            {
              "code" : "4.75",
              "type" : "codeVoice"
            },
            {
              "text" : " se convierte en ",
              "type" : "text"
            },
            {
              "code" : "4",
              "type" : "codeVoice"
            },
            {
              "text" : " y ",
              "type" : "text"
            },
            {
              "code" : "-3.9",
              "type" : "codeVoice"
            },
            {
              "text" : " se convierte en ",
              "type" : "text"
            },
            {
              "code" : "-3",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Las reglas para combinar variables y constantes numéricas son diferentes de",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "las reglas para los literales numéricos.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "El valor literal ",
                  "type" : "text"
                },
                {
                  "code" : "3",
                  "type" : "codeVoice"
                },
                {
                  "text" : " se puede agregar directamente al valor literal ",
                  "type" : "text"
                },
                {
                  "code" : "0.14159",
                  "type" : "codeVoice"
                },
                {
                  "text" : ",",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "porque los números literales no tienen un tipo explícito por sí mismos.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Su tipo se infiere solo al momento en que son evaluados por el compilador.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Nota",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Alias-de-tipos",
          "level" : 2,
          "text" : "Alias de tipos",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los “alias de tipos” (",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "type aliases",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ") definen un nombre alternativo para un tipo existente.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Los alias de tipos se definen con la palabra clave ",
              "type" : "text"
            },
            {
              "code" : "typealias",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los alias de tipos son útiles cuando deseas referirte a un tipo existente",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "con un nombre que sea —contextualmente— más apropiado,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "como cuando se trabaja con datos de un tamaño específico de una fuente externa:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "typealias MuestraDeAudio = UInt16"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Una vez que definas un alias de tipo,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "puedes usar el alias en cualquier lugar donde pueda usarse el nombre original:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var maximaAmplitudHallada = MuestraDeAudio.min",
            "\/\/ maximaAmplitudHallada ahora es 0"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Aquí, ",
              "type" : "text"
            },
            {
              "code" : "MuestraDeAudio",
              "type" : "codeVoice"
            },
            {
              "text" : " se define como un alias para ",
              "type" : "text"
            },
            {
              "code" : "UInt16",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Debido a que es un alias,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "el llamado a ",
              "type" : "text"
            },
            {
              "code" : "MuestraDeAudio.min",
              "type" : "codeVoice"
            },
            {
              "text" : " en realidad llama a ",
              "type" : "text"
            },
            {
              "code" : "UInt16.min",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "el cual proporciona un valor inicial de ",
              "type" : "text"
            },
            {
              "code" : "0",
              "type" : "codeVoice"
            },
            {
              "text" : " para la variable ",
              "type" : "text"
            },
            {
              "code" : "maximaAmplitudHallada",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Booleanos",
          "level" : 2,
          "text" : "Booleanos",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift tiene un tipo ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "booleano",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " básico, llamado ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Los valores booleanos se les conoce como ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "lógicos",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "porque solo pueden ser verdaderos o falsos.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift proporciona dos valores constantes booleanos",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "— ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : " y ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let lasNaranjasSonAnaranjadas = true",
            "let lasVerdurasSonDeliciosas = false"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los tipos de ",
              "type" : "text"
            },
            {
              "code" : "lasNaranjasSonAnaranjadas",
              "type" : "codeVoice"
            },
            {
              "text" : " y ",
              "type" : "text"
            },
            {
              "code" : "lasVerdurasSonDeliciosas",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "han sido inferidos como ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : " por el hecho de que",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "se inicializaron con valores literales booleanos.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Al igual que con ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " y ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : " anteriormente,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "no tienes que declarar constantes o variables como ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "si les asignas ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : " o ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : " al momento de crearlas.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "La inferencia de tipo hace que un código en Swift sea más conciso y legible",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "al inicializar constantes o variables con otros valores cuyo tipo ya se conoce.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los valores booleanos son particularmente útiles al trabajar con instrucciones condicionales,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "como es el caso de la instrucción ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if lasVerdurasSonDeliciosas {",
            "    print(\"¡Mmm, deliciosas verduras!\")",
            "} else {",
            "    print(\"No, las verduras son horribles.\")",
            "}",
            "\/\/ Imprime \"No, las verduras son horribles.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Las instrucciones condicionales, como la instrucción ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "se tratan con más detalle en ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "La seguridad de tipo de Swift previene que valores no booleanos se sustituyan por ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "El siguiente ejemplo resulta en un error al momento de compilar:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let i = 1",
            "",
            "if i {",
            "    \/\/ Este ejemplo no se compilará y reportará un error",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Sin embargo, el siguiente ejemplo alternativo es válido:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let i = 1",
            "",
            "if i == 1 {",
            "    \/\/ Este ejemplo se compilará sin problemas",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "El resultado de la comparación ",
              "type" : "text"
            },
            {
              "code" : "i == 1",
              "type" : "codeVoice"
            },
            {
              "text" : " es de tipo ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "por lo que este segundo ejemplo pasa la verificación de tipos.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Comparaciones como ",
              "type" : "text"
            },
            {
              "code" : "i == 1",
              "type" : "codeVoice"
            },
            {
              "text" : " se analizan en ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Al igual que con otros ejemplos de seguridad de tipo en Swift,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "este enfoque evita errores accidentales",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y garantiza que la intención de una sección particular del código sea siempre clara.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Tuplas",
          "level" : 2,
          "text" : "Tuplas",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Las ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "tuplas",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " agrupan múltiples valores en un solo valor compuesto.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Los valores dentro de una tupla pueden ser de cualquier tipo",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y no tienen que ser del mismo tipo entre sí.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "En este ejemplo, ",
              "type" : "text"
            },
            {
              "code" : "(404, \"Not Found\")",
              "type" : "codeVoice"
            },
            {
              "text" : " es una tupla que describe un ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "código de estado HTTP",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Un código de estado HTTP es un valor especial devuelto por un servidor web",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "cada vez que se le solicita una página web.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "El código de estado ",
              "type" : "text"
            },
            {
              "code" : "404 Not Found",
              "type" : "codeVoice"
            },
            {
              "text" : " es devuelto si se solicita una página web que no existe.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let errorHTTP404 = (404, \"Not Found\")",
            "\/\/ errorHTTP404 es de tipo (Int, String) y es igual a (404, \"Not Found\")"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "La tupla ",
              "type" : "text"
            },
            {
              "code" : "(404, \"Not Found\")",
              "type" : "codeVoice"
            },
            {
              "text" : " agrupa un ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " y un ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para dar al código de estado HTTP dos valores separados:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "un número y una descripción legible por humanos.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Se puede describir como “una tupla de tipo ",
              "type" : "text"
            },
            {
              "code" : "(Int, String)",
              "type" : "codeVoice"
            },
            {
              "text" : "”.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Puedes crear tuplas a partir de cualquier permutación de tipos",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y estas pueden contener tantos tipos diferentes como lo desees.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "No hay nada que te impida tener",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "una tupla de tipo ",
              "type" : "text"
            },
            {
              "code" : "(Int, Int, Int)",
              "type" : "codeVoice"
            },
            {
              "text" : " o ",
              "type" : "text"
            },
            {
              "code" : "(String, Bool)",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "o cualquier otra permutación que necesites.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Puedes «descomponer» (",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "decompose",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ") el contenido de una tupla en constantes o variables separadas,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a las que luego podrás acceder como de costumbre:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let (codigoDeEstado, mensajeDeEstado) = errorHTTP404",
            "",
            "print(\"El código de estado es \\(codigoDeEstado)\")",
            "\/\/ Imprime \"El código de estado es 404\"",
            "",
            "print(\"El mensaje de estado es \\(mensajeDeEstado)\")",
            "\/\/ Imprime \"El mensaje de estado es Not Found\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Si solo necesitas algunos de los valores de la tupla,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "ignora miembros de la tupla usando un guión bajo (",
              "type" : "text"
            },
            {
              "code" : "_",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "al descomponerla:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let (soloElCodigoDeEstado, _) = errorHTTP404",
            "",
            "print(\"El código de estado es \\(soloElCodigoDeEstado)\")",
            "\/\/ Imprime \"El código de estado es 404\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Alternativamente,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "accede a los valores de los elementos individuales de una tupla mediante números de índices,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "iniciando desde cero:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(\"El código de estado es \\(errorHTTP404.0)\")",
            "\/\/ Imprime \"El código de estado es 404\"",
            "",
            "print(\"El mensaje de estado es \\(errorHTTP404.1)\")",
            "\/\/ Imprime \"El mensaje de estado es Not Found\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Puedes nombrar los elementos individuales en una tupla al momento de definirla:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let respuestaHTTP200 = (codigoDeEstado: 200, descripcion: \"OK\")"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Si nombras los elementos de una tupla,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "podrás utilizar los nombres de los elementos para acceder a los valores de dichos elementos:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(\"El código de estado es \\(respuestaHTTP200.codigoDeEstado)\")",
            "\/\/ Imprime \"El código de estado es 200\"",
            "",
            "print(\"El mensaje de estado es \\(respuestaHTTP200.descripcion)\")",
            "\/\/ Imprime \"El mensaje de estado es OK\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Las tuplas son particularmente útiles como valores devueltos por una función.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Una función que solicita una página web puede devolver una tupla de tipo ",
              "type" : "text"
            },
            {
              "code" : "(Int, String)",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para describir el éxito o fracaso de dicha solicitud.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Al devolver una tupla con dos valores distintos,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "—cada uno de un tipo diferente—",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "la función proporciona información más útil sobre su resultado",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "que si solo pudiera devolver un único valor de un único tipo.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Para obtener más información, consulta ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Funciones-que-devuelven-m%C3%BAltiples-valores",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Las tuplas son útiles para grupos simples de valores relacionados.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Estas no son adecuadas para la creación de estructuras de datos complejas.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Si es probable que tu estructura de datos sea más compleja,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "modélala como una clase o estructura, en lugar de una tupla.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Para obtener más información, consulta ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Nota",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Opcionales",
          "level" : 2,
          "text" : "Opcionales",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "opcionales",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " se utilizan en situaciones en las que un valor puede no existir.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Un opcional representa dos posibilidades:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "existe",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " un valor, y es posible extraer dicho valor del opcional,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "o ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "no existe",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ningún valor en lo absoluto.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "El concepto de opcionales no existe en C ni en Objective-C.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Lo más cercano en Objective-C es",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "la capacidad de devolver ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : " de un método que de otra manera devolvería un objeto,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "donde ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : " representa “la ausencia de un objeto válido”.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Sin embargo, esto solo funciona para objetos;",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "no funciona para estructuras, tipos básicos de C, o valores de enumeraciones.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Para estos tipos,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "los métodos en Objective-C suelen devolver un valor especial (como ",
                  "type" : "text"
                },
                {
                  "code" : "NSNotFound",
                  "type" : "codeVoice"
                },
                {
                  "text" : ")",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "para indicar la ausencia de un valor.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Este mecanismo asume que quien invoca al método sabe que hay",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "un valor especial contra el cual testear y recuerda verificarlo.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Los opcionales en Swift te permiten indicar la ausencia de un valor para ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "cualquier tipo",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : ",",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "sin la necesidad de constantes especiales.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Nota",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Aquí hay un ejemplo de cómo se pueden usar opcionales para lidiar con la ausencia de un valor.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "El tipo ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " de Swift tiene un inicializador",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "que intenta convertir un valor ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " en un valor ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Sin embargo, no todas las cadenas pueden ser convertidas en enteros.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "La cadena ",
              "type" : "text"
            },
            {
              "code" : "\"123\"",
              "type" : "codeVoice"
            },
            {
              "text" : " puede convertirse en el valor numérico ",
              "type" : "text"
            },
            {
              "code" : "123",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "pero la cadena ",
              "type" : "text"
            },
            {
              "code" : "\"Hola, mundo.\"",
              "type" : "codeVoice"
            },
            {
              "text" : " no tiene un valor numérico obvio en el cual convertirse.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "El siguiente ejemplo utiliza el inicializador para intentar convertir un ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : " en un ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let posibleNumero = \"123\"",
            "let numeroConvertido = Int(posibleNumero)",
            "\/\/ Se infiere que numeroConvertido es de tipo \"Int?\" (o \"Int opcional\")"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Dado que el inicializador podría fallar,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "este devuelve un ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "opcional",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ", en lugar de un ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Un ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " opcional se escribe ",
              "type" : "text"
            },
            {
              "code" : "Int?",
              "type" : "codeVoice"
            },
            {
              "text" : ", no ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "El signo de interrogación indica que el valor que contiene es opcional,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "lo que significa que puede contener ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "algún",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " valor ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "o puede no contener ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "ningún valor en absoluto",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(No puede contener nada más, como un valor ",
              "type" : "text"
            },
            {
              "code" : "Bool",
              "type" : "codeVoice"
            },
            {
              "text" : " o un valor ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "O es un ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : ", o no es nada en absoluto).",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "nil",
          "level" : 3,
          "text" : "nil",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You set an optional variable to a valueless state",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by assigning it the special value ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var serverResponseCode: Int? = 404",
            "\/\/ serverResponseCode contains an actual Int value of 404",
            "serverResponseCode = nil",
            "\/\/ serverResponseCode now contains no value"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "You can’t use ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : " with non-optional constants and variables.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "If a constant or variable in your code needs to work with",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the absence of a value under certain conditions,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "always declare it as an optional value of the appropriate type.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you define an optional variable without providing a default value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the variable is automatically set to ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " for you:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var surveyAnswer: String?",
            "\/\/ surveyAnswer is automatically set to nil"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Swift’s ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : " isn’t the same as ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : " in Objective-C.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "In Objective-C, ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : " is a pointer to a nonexistent object.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "In Swift, ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : " isn’t a pointer — it’s the absence of a value of a certain type.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Optionals of ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "any",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " type can be set to ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", not just object types.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Sentencias-if-y-extracci%C3%B3n-forzada",
          "level" : 3,
          "text" : "Sentencias if y extracción forzada",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can use an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement to find out whether an optional contains a value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by comparing the optional against ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You perform this comparison with the “equal to” operator (",
              "type" : "text"
            },
            {
              "code" : "==",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or the “not equal to” operator (",
              "type" : "text"
            },
            {
              "code" : "!=",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If an optional has a value, it’s considered to be “not equal to” ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if convertedNumber != nil {",
            "    print(\"convertedNumber contains some integer value.\")",
            "}",
            "\/\/ Prints \"convertedNumber contains some integer value.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Once you’re sure that the optional ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "does",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " contain a value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can access its underlying value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by adding an exclamation point (",
              "type" : "text"
            },
            {
              "code" : "!",
              "type" : "codeVoice"
            },
            {
              "text" : ") to the end of the optional’s name.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The exclamation point effectively says,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "“I know that this optional definitely has a value; please use it.”",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This is known as ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "forced unwrapping",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " of the optional’s value:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if convertedNumber != nil {",
            "    print(\"convertedNumber has an integer value of \\(convertedNumber!).\")",
            "}",
            "\/\/ Prints \"convertedNumber has an integer value of 123.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more about the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement, see ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Trying to use ",
                  "type" : "text"
                },
                {
                  "code" : "!",
                  "type" : "codeVoice"
                },
                {
                  "text" : " to access a nonexistent optional value triggers",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "a runtime error.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Always make sure that an optional contains a non-",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : " value",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "before using ",
                  "type" : "text"
                },
                {
                  "code" : "!",
                  "type" : "codeVoice"
                },
                {
                  "text" : " to force-unwrap its value.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Vinculaci%C3%B3n-opcional",
          "level" : 3,
          "text" : "Vinculación opcional",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You use ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "optional binding",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " to find out whether an optional contains a value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and if so, to make that value available as a temporary constant or variable.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Optional binding can be used with ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " statements",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to check for a value inside an optional,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and to extract that value into a constant or variable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as part of a single action.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " statements are described in more detail in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Write an optional binding for an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement as follows:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if let <#constantName#> = <#someOptional#> {",
            "   <#statements#>",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can rewrite the ",
              "type" : "text"
            },
            {
              "code" : "possibleNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " example from",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Opcionales",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " section",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to use optional binding rather than forced unwrapping:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if let actualNumber = Int(possibleNumber) {",
            "    print(\"The string \\\"\\(possibleNumber)\\\" has an integer value of \\(actualNumber)\")",
            "} else {",
            "    print(\"The string \\\"\\(possibleNumber)\\\" couldn't be converted to an integer\")",
            "}",
            "\/\/ Prints \"The string \"123\" has an integer value of 123\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This code can be read as:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "“If the optional ",
              "type" : "text"
            },
            {
              "code" : "Int",
              "type" : "codeVoice"
            },
            {
              "text" : " returned by ",
              "type" : "text"
            },
            {
              "code" : "Int(possibleNumber)",
              "type" : "codeVoice"
            },
            {
              "text" : " contains a value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "set a new constant called ",
              "type" : "text"
            },
            {
              "code" : "actualNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " to the value contained in the optional.”",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the conversion is successful,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the ",
              "type" : "text"
            },
            {
              "code" : "actualNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " constant becomes available for use within",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the first branch of the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It has already been initialized with the value contained ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "within",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " the optional,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and so you don’t use the ",
              "type" : "text"
            },
            {
              "code" : "!",
              "type" : "codeVoice"
            },
            {
              "text" : " suffix to access its value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In this example, ",
              "type" : "text"
            },
            {
              "code" : "actualNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " is simply used to print the result of the conversion.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If you don’t need to refer to the original, optional constant or variable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "after accessing the value it contains,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use the same name for the new constant or variable:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let myNumber = Int(possibleNumber)",
            "\/\/ Here, myNumber is an optional integer",
            "if let myNumber = myNumber {",
            "    \/\/ Here, myNumber is a non-optional integer",
            "    print(\"My number is \\(myNumber)\")",
            "}",
            "\/\/ Prints \"My number is 123\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This code starts by checking whether ",
              "type" : "text"
            },
            {
              "code" : "myNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " contains a value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "just like the code in the previous example.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If ",
              "type" : "text"
            },
            {
              "code" : "myNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " has a value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the value of a new constant named ",
              "type" : "text"
            },
            {
              "code" : "myNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " is set to that value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Inside the body of the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "writing ",
              "type" : "text"
            },
            {
              "code" : "myNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " refers to that new non-optional constant.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Before the beginning of the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement and after its end,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "writing ",
              "type" : "text"
            },
            {
              "code" : "myNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " refers to the optional integer constant.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Because this kind of code is so common,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you can use a shorter spelling to unwrap an optional value:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "write just the name of the constant or variable that you’re unwrapping.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The new, unwrapped constant or variable",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "implicitly uses the same name as the optional value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if let myNumber {",
            "    print(\"My number is \\(myNumber)\")",
            "}",
            "\/\/ Prints \"My number is 123\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can use both constants and variables with optional binding.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If you wanted to manipulate the value of ",
              "type" : "text"
            },
            {
              "code" : "myNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "within the first branch of the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you could write ",
              "type" : "text"
            },
            {
              "code" : "if var myNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " instead,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the value contained within the optional",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "would be made available as a variable rather than a constant.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Changes you make to ",
              "type" : "text"
            },
            {
              "code" : "myNumber",
              "type" : "codeVoice"
            },
            {
              "text" : " inside the body of the ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "apply only to that local variable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "not",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " to the original, optional constant or variable that you unwrapped.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can include as many optional bindings and Boolean conditions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in a single ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement as you need to,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "separated by commas.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If any of the values in the optional bindings are ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or any Boolean condition evaluates to ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the whole ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement’s condition",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is considered to be ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The following ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statements are equivalent:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if let firstNumber = Int(\"4\"), let secondNumber = Int(\"42\"), firstNumber < secondNumber && secondNumber < 100 {",
            "    print(\"\\(firstNumber) < \\(secondNumber) < 100\")",
            "}",
            "\/\/ Prints \"4 < 42 < 100\"",
            "",
            "if let firstNumber = Int(\"4\") {",
            "    if let secondNumber = Int(\"42\") {",
            "        if firstNumber < secondNumber && secondNumber < 100 {",
            "            print(\"\\(firstNumber) < \\(secondNumber) < 100\")",
            "        }",
            "    }",
            "}",
            "\/\/ Prints \"4 < 42 < 100\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Constants and variables created with optional binding in an ",
                  "type" : "text"
                },
                {
                  "code" : "if",
                  "type" : "codeVoice"
                },
                {
                  "text" : " statement",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "are available only within the body of the ",
                  "type" : "text"
                },
                {
                  "code" : "if",
                  "type" : "codeVoice"
                },
                {
                  "text" : " statement.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "In contrast, the constants and variables created with a ",
                  "type" : "text"
                },
                {
                  "code" : "guard",
                  "type" : "codeVoice"
                },
                {
                  "text" : " statement",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "are available in the lines of code that follow the ",
                  "type" : "text"
                },
                {
                  "code" : "guard",
                  "type" : "codeVoice"
                },
                {
                  "text" : " statement,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "as described in ",
                  "type" : "text"
                },
                {
                  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Salida-temprana",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Opcionales-extra%C3%ADdos-impl%C3%ADcitamente",
          "level" : 3,
          "text" : "Opcionales extraídos implícitamente",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "As described above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "optionals indicate that a constant or variable is allowed to have “no value”.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Optionals can be checked with an ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " statement to see if a value exists,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and can be conditionally unwrapped with optional binding",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to access the optional’s value if it does exist.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Sometimes it’s clear from a program’s structure that an optional will ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "always",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " have a value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "after that value is first set.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In these cases, it’s useful to remove the need",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to check and unwrap the optional’s value every time it’s accessed,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because it can be safely assumed to have a value all of the time.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "These kinds of optionals are defined as ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "implicitly unwrapped optionals",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You write an implicitly unwrapped optional by placing an exclamation point (",
              "type" : "text"
            },
            {
              "code" : "String!",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "rather than a question mark (",
              "type" : "text"
            },
            {
              "code" : "String?",
              "type" : "codeVoice"
            },
            {
              "text" : ") after the type that you want to make optional.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Rather than placing an exclamation point after the optional’s name when you use it,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you place an exclamation point after the optional’s type when you declare it.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Implicitly unwrapped optionals are useful when",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an optional’s value is confirmed to exist immediately after the optional is first defined",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and can definitely be assumed to exist at every point thereafter.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The primary use of implicitly unwrapped optionals in Swift is during class initialization,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "as described in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Referencias-unowned-y-propiedades-opcionales-extra%C3%ADdas-de-forma-impl%C3%ADcita",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "An implicitly unwrapped optional is a normal optional behind the scenes,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but can also be used like a non-optional value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without the need to unwrap the optional value each time it’s accessed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The following example shows the difference in behavior between",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "an optional string and an implicitly unwrapped optional string",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "when accessing their wrapped value as an explicit ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let possibleString: String? = \"An optional string.\"",
            "let forcedString: String = possibleString! \/\/ requires an exclamation point",
            "",
            "let assumedString: String! = \"An implicitly unwrapped optional string.\"",
            "let implicitString: String = assumedString \/\/ no need for an exclamation point"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can think of an implicitly unwrapped optional as",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "giving permission for the optional to be force-unwrapped if needed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When you use an implicitly unwrapped optional value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Swift first tries to use it as an ordinary optional value;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if it can’t be used as an optional, Swift force-unwraps the value.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the code above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the optional value ",
              "type" : "text"
            },
            {
              "code" : "assumedString",
              "type" : "codeVoice"
            },
            {
              "text" : " is force-unwrapped",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "before assigning its value to ",
              "type" : "text"
            },
            {
              "code" : "implicitString",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "because ",
              "type" : "text"
            },
            {
              "code" : "implicitString",
              "type" : "codeVoice"
            },
            {
              "text" : " has an explicit, non-optional type of ",
              "type" : "text"
            },
            {
              "code" : "String",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In code below,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "optionalString",
              "type" : "codeVoice"
            },
            {
              "text" : " doesn’t have an explicit type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so it’s an ordinary optional.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let optionalString = assumedString",
            "\/\/ The type of optionalString is \"String?\" and assumedString isn't force-unwrapped."
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If an implicitly unwrapped optional is ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " and you try to access its wrapped value,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you’ll trigger a runtime error.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The result is exactly the same as if you place an exclamation point",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "after a normal optional that doesn’t contain a value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can check whether an implicitly unwrapped optional is ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the same way you check a normal optional:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if assumedString != nil {",
            "    print(assumedString!)",
            "}",
            "\/\/ Prints \"An implicitly unwrapped optional string.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can also use an implicitly unwrapped optional with optional binding,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to check and unwrap its value in a single statement:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if let definiteString = assumedString {",
            "    print(definiteString)",
            "}",
            "\/\/ Prints \"An implicitly unwrapped optional string.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Don’t use an implicitly unwrapped optional when there’s a possibility of",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "a variable becoming ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : " at a later point.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Always use a normal optional type if you need to check for a ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : " value",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "during the lifetime of a variable.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Manejo-de-errores",
          "level" : 2,
          "text" : "Manejo de errores",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You use ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "error handling",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " to respond to error conditions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "your program may encounter during execution.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In contrast to optionals,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which can use the presence or absence of a value",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to communicate success or failure of a function,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "error handling allows you to determine the underlying cause of failure,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and, if necessary, propagate the error to another part of your program.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "When a function encounters an error condition, it ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "throws",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " an error.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "That function’s caller can then ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "catch",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " the error and respond appropriately.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func canThrowAnError() throws {",
            "    \/\/ this function may or may not throw an error",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A function indicates that it can throw an error",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by including the ",
              "type" : "text"
            },
            {
              "code" : "throws",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword in its declaration.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When you call a function that can throw an error,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you prepend the ",
              "type" : "text"
            },
            {
              "code" : "try",
              "type" : "codeVoice"
            },
            {
              "text" : " keyword to the expression.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Swift automatically propagates errors out of their current scope",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "until they’re handled by a ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " clause.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "do {",
            "    try canThrowAnError()",
            "    \/\/ no error was thrown",
            "} catch {",
            "    \/\/ an error was thrown",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A ",
              "type" : "text"
            },
            {
              "code" : "do",
              "type" : "codeVoice"
            },
            {
              "text" : " statement creates a new containing scope,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which allows errors to be propagated to one or more ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " clauses.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Here’s an example of how error handling can be used",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to respond to different error conditions:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func makeASandwich() throws {",
            "    \/\/ ...",
            "}",
            "",
            "do {",
            "    try makeASandwich()",
            "    eatASandwich()",
            "} catch SandwichError.outOfCleanDishes {",
            "    washDishes()",
            "} catch SandwichError.missingIngredients(let ingredients) {",
            "    buyGroceries(ingredients)",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In this example, the ",
              "type" : "text"
            },
            {
              "code" : "makeASandwich()",
              "type" : "codeVoice"
            },
            {
              "text" : " function will throw an error",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if no clean dishes are available",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or if any ingredients are missing.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because ",
              "type" : "text"
            },
            {
              "code" : "makeASandwich()",
              "type" : "codeVoice"
            },
            {
              "text" : " can throw an error,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the function call is wrapped in a ",
              "type" : "text"
            },
            {
              "code" : "try",
              "type" : "codeVoice"
            },
            {
              "text" : " expression.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "By wrapping the function call in a ",
              "type" : "text"
            },
            {
              "code" : "do",
              "type" : "codeVoice"
            },
            {
              "text" : " statement,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "any errors that are thrown will be propagated",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to the provided ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " clauses.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "If no error is thrown, the ",
              "type" : "text"
            },
            {
              "code" : "eatASandwich()",
              "type" : "codeVoice"
            },
            {
              "text" : " function is called.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If an error is thrown and it matches the ",
              "type" : "text"
            },
            {
              "code" : "SandwichError.outOfCleanDishes",
              "type" : "codeVoice"
            },
            {
              "text" : " case,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "then the ",
              "type" : "text"
            },
            {
              "code" : "washDishes()",
              "type" : "codeVoice"
            },
            {
              "text" : " function will be called.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If an error is thrown and it matches the ",
              "type" : "text"
            },
            {
              "code" : "SandwichError.missingIngredients",
              "type" : "codeVoice"
            },
            {
              "text" : " case,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "then the ",
              "type" : "text"
            },
            {
              "code" : "buyGroceries(_:)",
              "type" : "codeVoice"
            },
            {
              "text" : " function is called",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "with the associated ",
              "type" : "text"
            },
            {
              "code" : "[String]",
              "type" : "codeVoice"
            },
            {
              "text" : " value captured by the ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " pattern.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Throwing, catching, and propagating errors is covered in greater detail in",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Aserciones-y-precondiciones",
          "level" : 2,
          "text" : "Aserciones y precondiciones",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "inlineContent" : [
                {
                  "text" : "Assertions",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "preconditions",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are checks that happen at runtime.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You use them to make sure an essential condition is satisfied",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "before executing any further code.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the Boolean condition in the assertion or precondition",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "evaluates to ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "code execution continues as usual.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the condition evaluates to ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the current state of the program is invalid;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "code execution ends, and your app is terminated.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You use assertions and preconditions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to express the assumptions you make",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the expectations you have",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "while coding,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so you can include them as part of your code.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Assertions help you find mistakes and incorrect assumptions during development,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and preconditions help you detect issues in production.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In addition to verifying your expectations at runtime,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "assertions and preconditions also become a useful form of documentation",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "within the code.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Unlike the error conditions discussed in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Manejo-de-errores",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "assertions and preconditions aren’t used",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for recoverable or expected errors.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Because a failed assertion or precondition",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "indicates an invalid program state,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "there’s no way to catch a failed assertion.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Using assertions and preconditions",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "isn’t a substitute for designing your code in such a way",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that invalid conditions are unlikely to arise.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using them to enforce valid data and state",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "causes your app to terminate more predictably",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if an invalid state occurs,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and helps make the problem easier to debug.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Stopping execution as soon as an invalid state is detected",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "also helps limit the damage caused by that invalid state.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The difference between assertions and preconditions is in when they’re checked:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Assertions are checked only in debug builds,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but preconditions are checked in both debug and production builds.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In production builds,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the condition inside an assertion isn’t evaluated.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This means you can use as many assertions as you want",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "during your development process,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without impacting performance in production.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Depuraci%C3%B3n-con-aserciones",
          "level" : 3,
          "text" : "Depuración con aserciones",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "You write an assertion by calling the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/1541112-assert",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "from the Swift standard library.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You pass this function an expression that evaluates to ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and a message to display if the result of the condition is ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let age = -3",
            "assert(age >= 0, \"A person's age can't be less than zero.\")",
            "\/\/ This assertion fails because -3 isn't >= 0."
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In this example, code execution continues if ",
              "type" : "text"
            },
            {
              "code" : "age >= 0",
              "type" : "codeVoice"
            },
            {
              "text" : " evaluates to ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that is, if the value of ",
              "type" : "text"
            },
            {
              "code" : "age",
              "type" : "codeVoice"
            },
            {
              "text" : " is nonnegative.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the value of ",
              "type" : "text"
            },
            {
              "code" : "age",
              "type" : "codeVoice"
            },
            {
              "text" : " is negative, as in the code above,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "then ",
              "type" : "text"
            },
            {
              "code" : "age >= 0",
              "type" : "codeVoice"
            },
            {
              "text" : " evaluates to ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and the assertion fails, terminating the application.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can omit the assertion message —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for example, when it would just repeat the condition as prose.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "assert(age >= 0)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "If the code already checks the condition,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "you use the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/1539616-assertionfailure",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to indicate that an assertion has failed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if age > 10 {",
            "    print(\"You can ride the roller-coaster or the ferris wheel.\")",
            "} else if age >= 0 {",
            "    print(\"You can ride the ferris wheel.\")",
            "} else {",
            "    assertionFailure(\"A person's age can't be less than zero.\")",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Imposici%C3%B3n-de-precondiciones",
          "level" : 3,
          "text" : "Imposición de precondiciones",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Use a precondition whenever a condition has the potential to be false,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but must ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "definitely",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " be true for your code to continue execution.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example, use a precondition to check that a subscript isn’t out of bounds,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "or to check that a function has been passed a valid value.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You write a precondition by calling the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/1540960-precondition",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " function.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "You pass this function an expression that evaluates to ",
              "type" : "text"
            },
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and a message to display if the result of the condition is ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/ In the implementation of a subscript...",
            "precondition(index > 0, \"Index must be greater than zero.\")"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can also call the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/1539374-preconditionfailure",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " function",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "to indicate that a failure has occurred —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "for example, if the default case of a switch was taken,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "but all valid input data should have been handled",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by one of the switch’s other cases.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "If you compile in unchecked mode (",
                  "type" : "text"
                },
                {
                  "code" : "-Ounchecked",
                  "type" : "codeVoice"
                },
                {
                  "text" : "),",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "preconditions aren’t checked.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "The compiler assumes that preconditions are always true,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "and it optimizes your code accordingly.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "However, the ",
                  "type" : "text"
                },
                {
                  "code" : "fatalError(_:file:line:)",
                  "type" : "codeVoice"
                },
                {
                  "text" : " function always halts execution,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "regardless of optimization settings.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "text" : "You can use the ",
                  "type" : "text"
                },
                {
                  "code" : "fatalError(_:file:line:)",
                  "type" : "codeVoice"
                },
                {
                  "text" : " function",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "during prototyping and early development",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "to create stubs for functionality that hasn’t been implemented yet,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "by writing ",
                  "type" : "text"
                },
                {
                  "code" : "fatalError(\"Unimplemented\")",
                  "type" : "codeVoice"
                },
                {
                  "text" : " as the stub implementation.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Because fatal errors are never optimized out,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "unlike assertions or preconditions,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "you can be sure that execution always halts",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "if it encounters a stub implementation.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "text" : "Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "text" : "Conoce más acerca del uso del ",
                  "type" : "text"
                },
                {
                  "identifier" : "https:\/\/developer.apple.com\/es\/support\/beta-software\/",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Software Beta",
          "style" : "note",
          "type" : "aside"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ]
, 
"references": {
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language",
  "kind" : "article",
  "role" : "collection",
  "title" : "The Swift Programming Language (6)",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting#Referencias-unowned-y-propiedades-opcionales-extra%C3%ADdas-de-forma-impl%C3%ADcita": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Referencias-unowned-y-propiedades-opcionales-extra%C3%ADdas-de-forma-impl%C3%ADcita",
  "kind" : "section",
  "title" : "Referencias unowned y propiedades opcionales extraídas de forma implícita",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/automaticreferencecounting#Referencias-unowned-y-propiedades-opcionales-extra%C3%ADdas-de-forma-impl%C3%ADcita"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators": {
  "abstract" : [
    {
      "text" : "Perform operations like assignment, arithmetic, and comparison.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators",
  "kind" : "article",
  "role" : "article",
  "title" : "Operadores básicos",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/basicoperators"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures": {
  "abstract" : [
    {
      "text" : "Model custom types that encapsulate data.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures",
  "kind" : "article",
  "role" : "article",
  "title" : "Estructuras y clases",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/classesandstructures"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes": {
  "abstract" : [
    {
      "text" : "Organize data using arrays, sets, and dictionaries.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes",
  "kind" : "article",
  "role" : "article",
  "title" : "Tipos de colecciones",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/collectiontypes"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow": {
  "abstract" : [
    {
      "text" : "Structure code with branches, loops, and early exits.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow",
  "kind" : "article",
  "role" : "article",
  "title" : "Flujo de control",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/controlflow"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Salida-temprana": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Salida-temprana",
  "kind" : "section",
  "title" : "Salida temprana",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/controlflow#Salida-temprana"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling": {
  "abstract" : [
    {
      "text" : "Respond to and recover from errors.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling",
  "kind" : "article",
  "role" : "article",
  "title" : "Manejo de errores",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/errorhandling"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions": {
  "abstract" : [
    {
      "text" : "Add functionality to an existing type.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions",
  "kind" : "article",
  "role" : "article",
  "title" : "Extensiones",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/extensions"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Funciones-que-devuelven-m%C3%BAltiples-valores": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Funciones-que-devuelven-m%C3%BAltiples-valores",
  "kind" : "section",
  "title" : "Funciones que devuelven múltiples valores",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/functions#Funciones-que-devuelven-m%C3%BAltiples-valores"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Par%C3%A1metros-con-valores-predeterminados": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Par%C3%A1metros-con-valores-predeterminados",
  "kind" : "section",
  "title" : "Parámetros con valores predeterminados",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/functions#Par%C3%A1metros-con-valores-predeterminados"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters#Interpolaci%C3%B3n-de-cadenas": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Interpolaci%C3%B3n-de-cadenas",
  "kind" : "section",
  "title" : "Interpolación de cadenas",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/stringsandcharacters#Interpolaci%C3%B3n-de-cadenas"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Manejo-de-errores": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Manejo-de-errores",
  "kind" : "section",
  "title" : "Manejo de errores",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/thebasics#Manejo-de-errores"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Opcionales": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Opcionales",
  "kind" : "section",
  "title" : "Opcionales",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/thebasics#Opcionales"
},
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Seguridad-de-tipos-e-inferencia-de-tipos": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Seguridad-de-tipos-e-inferencia-de-tipos",
  "kind" : "section",
  "title" : "Seguridad de tipos e inferencia de tipos",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language\/thebasics#Seguridad-de-tipos-e-inferencia-de-tipos"
},
"https://developer.apple.com/documentation/swift/1539374-preconditionfailure": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/1539374-preconditionfailure",
  "title" : "preconditionFailure(_:file:line:)",
  "titleInlineContent" : [
    {
      "code" : "preconditionFailure(_:file:line:)",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/1539374-preconditionfailure"
},
"https://developer.apple.com/documentation/swift/1539616-assertionfailure": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/1539616-assertionfailure",
  "title" : "assertionFailure(_:file:line:)",
  "titleInlineContent" : [
    {
      "code" : "assertionFailure(_:file:line:)",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/1539616-assertionfailure"
},
"https://developer.apple.com/documentation/swift/1540960-precondition": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/1540960-precondition",
  "title" : "precondition(_:_:file:line:)",
  "titleInlineContent" : [
    {
      "code" : "precondition(_:_:file:line:)",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/1540960-precondition"
},
"https://developer.apple.com/documentation/swift/1541112-assert": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swift\/1541112-assert",
  "title" : "assert(_:_:file:line:)",
  "titleInlineContent" : [
    {
      "code" : "assert(_:_:file:line:)",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swift\/1541112-assert"
},
"https://developer.apple.com/es/support/beta-software/": {
  "identifier" : "https:\/\/developer.apple.com\/es\/support\/beta-software\/",
  "title" : "software beta de Apple",
  "titleInlineContent" : [
    {
      "text" : "software beta de Apple",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/es\/support\/beta-software\/"
}
}
}