<<<<<<< HEAD
{"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"type":"text","text":" is a series of characters,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"\"hello, world\""},{"text":" or ","type":"text"},{"type":"codeVoice","code":"\"albatross\""},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Swift strings are represented by the ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The contents of a "},{"code":"String","type":"codeVoice"},{"text":" can be accessed in various ways,","type":"text"},{"text":" ","type":"text"},{"text":"including as a collection of ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":" values.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Swift’s ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Character"},{"text":" types provide","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a fast, Unicode-compliant way to work with text in your code."},{"text":" ","type":"text"},{"text":"The syntax for string creation and manipulation is lightweight and readable,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with a string literal syntax that’s similar to C."},{"text":" ","type":"text"},{"type":"text","text":"String concatenation is as simple as"},{"type":"text","text":" "},{"text":"combining two strings with the ","type":"text"},{"type":"codeVoice","code":"+"},{"type":"text","text":" operator,"},{"text":" ","type":"text"},{"type":"text","text":"and string mutability is managed by choosing between a constant or a variable,"},{"type":"text","text":" "},{"text":"just like any other value in Swift.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can also use strings to insert"},{"text":" ","type":"text"},{"type":"text","text":"constants, variables, literals, and expressions into longer strings,"},{"text":" ","type":"text"},{"type":"text","text":"in a process known as string interpolation."},{"type":"text","text":" "},{"text":"This makes it easy to create custom string values for display, storage, and printing.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Despite this simplicity of syntax,","type":"text"},{"type":"text","text":" "},{"text":"Swift’s ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" type is a fast, modern string implementation.","type":"text"},{"type":"text","text":" "},{"text":"Every string is composed of encoding-independent Unicode characters,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and provides support for accessing those characters in various Unicode representations."}],"type":"paragraph"},{"name":"Note","content":[{"inlineContent":[{"text":"Swift’s ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" type is bridged with Foundation’s ","type":"text"},{"code":"NSString","type":"codeVoice"},{"text":" class.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Foundation also extends "},{"type":"codeVoice","code":"String"},{"type":"text","text":" to expose methods defined by "},{"code":"NSString","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This means, if you import Foundation,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can access those "},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" methods on "},{"code":"String","type":"codeVoice"},{"type":"text","text":" without casting."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For more information about using "},{"type":"codeVoice","code":"String"},{"type":"text","text":" with Foundation and Cocoa,"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/string#2919514","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside","style":"note"},{"anchor":"Literales-de-cadena","type":"heading","level":2,"text":"Literales de cadena"},{"type":"paragraph","inlineContent":[{"text":"You can include predefined ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" values within your code as "},{"inlineContent":[{"type":"text","text":"string literals"}],"type":"emphasis"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"A string literal is a sequence of characters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"surrounded by double quotation marks ("},{"type":"codeVoice","code":"\""},{"text":").","type":"text"}]},{"inlineContent":[{"type":"text","text":"Use a string literal as an initial value for a constant or variable:"}],"type":"paragraph"},{"code":["let someString = \"Some string literal value\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Note that Swift infers a type of ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" for the "},{"code":"someString","type":"codeVoice"},{"type":"text","text":" constant"},{"type":"text","text":" "},{"type":"text","text":"because it’s initialized with a string literal value."}],"type":"paragraph"},{"text":"Literales de cadena de varias líneas","anchor":"Literales-de-cadena-de-varias-l%C3%ADneas","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"If you need a string that spans several lines,","type":"text"},{"text":" ","type":"text"},{"text":"use a multiline string literal —","type":"text"},{"text":" ","type":"text"},{"text":"a sequence of characters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"surrounded by three double quotation marks:"}]},{"syntax":"swift","type":"codeListing","code":["let quotation = \"\"\"","The White Rabbit put on his spectacles.  \"Where shall I begin,","please your Majesty?\" he asked.","","\"Begin at the beginning,\" the King said gravely, \"and go on","till you come to the end; then stop.\"","\"\"\""]},{"type":"paragraph","inlineContent":[{"text":"A multiline string literal includes all of the lines between","type":"text"},{"text":" ","type":"text"},{"text":"its opening and closing quotation marks.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The string begins on the first line after the opening quotation marks ("},{"code":"\"\"\"","type":"codeVoice"},{"text":")","type":"text"},{"type":"text","text":" "},{"text":"and ends on the line before the closing quotation marks,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which means that neither of the strings below"},{"text":" ","type":"text"},{"type":"text","text":"start or end with a line break:"}]},{"type":"codeListing","syntax":"swift","code":["let singleLineString = \"These are the same.\"","let multilineString = \"\"\"","These are the same.","\"\"\""]},{"inlineContent":[{"type":"text","text":"When your source code includes a line break"},{"text":" ","type":"text"},{"type":"text","text":"inside of a multiline string literal,"},{"type":"text","text":" "},{"text":"that line break also appears in the string’s value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you want to use line breaks"},{"type":"text","text":" "},{"type":"text","text":"to make your source code easier to read,"},{"text":" ","type":"text"},{"type":"text","text":"but you don’t want the line breaks to be part of the string’s value,"},{"text":" ","type":"text"},{"text":"write a backslash (","type":"text"},{"type":"codeVoice","code":"\\"},{"text":") at the end of those lines:","type":"text"}],"type":"paragraph"},{"code":["let softWrappedQuotation = \"\"\"","The White Rabbit put on his spectacles.  \"Where shall I begin, \\","please your Majesty?\" he asked.","","\"Begin at the beginning,\" the King said gravely, \"and go on \\","till you come to the end; then stop.\"","\"\"\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"To make a multiline string literal that begins or ends with a line feed,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"write a blank line as the first or last line."},{"type":"text","text":" "},{"type":"text","text":"For example:"}],"type":"paragraph"},{"code":["let lineBreaks = \"\"\"","","This string starts with a line break.","It also ends with a line break.","","\"\"\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A multiline string can be indented to match the surrounding code."},{"text":" ","type":"text"},{"type":"text","text":"The whitespace before the closing quotation marks ("},{"type":"codeVoice","code":"\"\"\""},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"tells Swift what whitespace to ignore before all of the other lines."},{"type":"text","text":" "},{"type":"text","text":"However, if you write whitespace at the beginning of a line"},{"type":"text","text":" "},{"text":"in addition to what’s before the closing quotation marks,","type":"text"},{"text":" ","type":"text"},{"text":"that whitespace ","type":"text"},{"inlineContent":[{"type":"text","text":"is"}],"type":"emphasis"},{"type":"text","text":" included."}]},{"inlineContent":[{"identifier":"multilineStringWhitespace","type":"image"}],"type":"paragraph"},{"inlineContent":[{"text":"In the example above,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"even though the entire multiline string literal is indented,"},{"text":" ","type":"text"},{"text":"the first and last lines in the string don’t begin with any whitespace.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The middle line has more indentation than the closing quotation marks,"},{"type":"text","text":" "},{"text":"so it starts with that extra four-space indentation.","type":"text"}],"type":"paragraph"},{"text":"Caracteres especiales en literales de cadena","level":3,"type":"heading","anchor":"Caracteres-especiales-en-literales-de-cadena"},{"inlineContent":[{"type":"text","text":"String literals can include the following special characters:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The escaped special characters "},{"code":"\\0","type":"codeVoice"},{"type":"text","text":" (null character), "},{"code":"\\\\","type":"codeVoice"},{"type":"text","text":" (backslash),"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\\t"},{"type":"text","text":" (horizontal tab), "},{"type":"codeVoice","code":"\\n"},{"type":"text","text":" (line feed), "},{"type":"codeVoice","code":"\\r"},{"type":"text","text":" (carriage return),"},{"text":" ","type":"text"},{"code":"\\\"","type":"codeVoice"},{"text":" (double quotation mark) and ","type":"text"},{"code":"\\'","type":"codeVoice"},{"type":"text","text":" (single quotation mark)"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"An arbitrary Unicode scalar value, written as "},{"type":"codeVoice","code":"\\u{"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"codeVoice","code":"}"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"where "},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":" is a 1–8 digit hexadecimal number"},{"text":" ","type":"text"},{"text":"(Unicode is discussed in ","type":"text"},{"type":"text","text":"doc:CadenasYCaracteres#Unicode"},{"type":"text","text":" below)"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"The code below shows four examples of these special characters.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"wiseWords"},{"text":" constant contains two escaped double quotation marks.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"dollarSign"},{"type":"text","text":", "},{"type":"codeVoice","code":"blackHeart"},{"type":"text","text":", and "},{"type":"codeVoice","code":"sparklingHeart"},{"type":"text","text":" constants"},{"text":" ","type":"text"},{"type":"text","text":"demonstrate the Unicode scalar format:"}]},{"type":"codeListing","syntax":"swift","code":["let wiseWords = \"\\\"Imagination is more important than knowledge\\\" - Einstein\"","\/\/ \"Imagination is more important than knowledge\" - Einstein","let dollarSign = \"\\u{24}\"        \/\/ $,  Unicode scalar U+0024","let blackHeart = \"\\u{2665}\"      \/\/ ♥,  Unicode scalar U+2665","let sparklingHeart = \"\\u{1F496}\" \/\/ 💖, Unicode scalar U+1F496"]},{"inlineContent":[{"text":"Because multiline string literals use three double quotation marks instead of just one,","type":"text"},{"type":"text","text":" "},{"text":"you can include a double quotation mark (","type":"text"},{"type":"codeVoice","code":"\""},{"type":"text","text":") inside of a multiline string literal"},{"text":" ","type":"text"},{"type":"text","text":"without escaping it."},{"type":"text","text":" "},{"text":"To include the text ","type":"text"},{"type":"codeVoice","code":"\"\"\""},{"type":"text","text":" in a multiline string,"},{"type":"text","text":" "},{"text":"escape at least one of the quotation marks.","type":"text"},{"text":" ","type":"text"},{"text":"For example:","type":"text"}],"type":"paragraph"},{"code":["let threeDoubleQuotationMarks = \"\"\"","Escaping the first quotation mark \\\"\"\"","Escaping all three quotation marks \\\"\\\"\\\"","\"\"\""],"type":"codeListing","syntax":"swift"},{"text":"Delimitadores de cadena extendidos","type":"heading","level":3,"anchor":"Delimitadores-de-cadena-extendidos"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can place a string literal within "},{"type":"emphasis","inlineContent":[{"text":"extended delimiters","type":"text"}]},{"text":" ","type":"text"},{"text":"to include special characters in a string","type":"text"},{"type":"text","text":" "},{"type":"text","text":"without invoking their effect."},{"type":"text","text":" "},{"text":"You place your string within quotation marks (","type":"text"},{"type":"codeVoice","code":"\""},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"and surround that with number signs (","type":"text"},{"type":"codeVoice","code":"#"},{"text":").","type":"text"},{"text":" ","type":"text"},{"text":"For example, printing the string literal ","type":"text"},{"type":"codeVoice","code":"#\"Line 1\\nLine 2\"#"},{"type":"text","text":" "},{"text":"prints the line feed escape sequence (","type":"text"},{"type":"codeVoice","code":"\\n"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"rather than printing the string across two lines."}]},{"inlineContent":[{"type":"text","text":"If you need the special effects of a character in a string literal,"},{"type":"text","text":" "},{"text":"match the number of number signs within the string","type":"text"},{"type":"text","text":" "},{"type":"text","text":"following the escape character ("},{"code":"\\","type":"codeVoice"},{"text":").","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, if your string is "},{"code":"#\"Line 1\\nLine 2\"#","type":"codeVoice"},{"type":"text","text":" "},{"text":"and you want to break the line,","type":"text"},{"type":"text","text":" "},{"text":"you can use ","type":"text"},{"type":"codeVoice","code":"#\"Line 1\\#nLine 2\"#"},{"text":" instead.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Similarly, "},{"code":"###\"Line1\\###nLine2\"###","type":"codeVoice"},{"type":"text","text":" also breaks the line."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"String literals created using extended delimiters can also be multiline string literals."},{"type":"text","text":" "},{"type":"text","text":"You can use extended delimiters to include the text "},{"type":"codeVoice","code":"\"\"\""},{"text":" in a multiline string,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"overriding the default behavior that ends the literal. For example:"}]},{"syntax":"swift","code":["let threeMoreDoubleQuotationMarks = #\"\"\"","Here are three more double quotes: \"\"\"","\"\"\"#"],"type":"codeListing"},{"anchor":"Inicializaci%C3%B3n-de-una-cadena-vac%C3%ADa","text":"Inicialización de una cadena vacía","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"To create an empty ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" value as the starting point","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for building a longer string,"},{"type":"text","text":" "},{"text":"either assign an empty string literal to a variable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or initialize a new "},{"type":"codeVoice","code":"String"},{"text":" instance with initializer syntax:","type":"text"}]},{"type":"codeListing","code":["var emptyString = \"\"               \/\/ empty string literal","var anotherEmptyString = String()  \/\/ initializer syntax","\/\/ these two strings are both empty, and are equivalent to each other"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Find out whether a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" value is empty","type":"text"},{"text":" ","type":"text"},{"text":"by checking its Boolean ","type":"text"},{"code":"isEmpty","type":"codeVoice"},{"text":" property:","type":"text"}]},{"code":["if emptyString.isEmpty {","    print(\"Nothing to see here\")","}","\/\/ Prints \"Nothing to see here\""],"syntax":"swift","type":"codeListing"},{"type":"heading","anchor":"Mutabilidad-de-una-cadena","text":"Mutabilidad de una cadena","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"You indicate whether a particular "},{"code":"String","type":"codeVoice"},{"type":"text","text":" can be modified (or "},{"type":"emphasis","inlineContent":[{"text":"mutated","type":"text"}]},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by assigning it to a variable (in which case it can be modified),"},{"type":"text","text":" "},{"text":"or to a constant (in which case it can’t be modified):","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var variableString = \"Horse\"","variableString += \" and carriage\"","\/\/ variableString is now \"Horse and carriage\"","","let constantString = \"Highlander\"","constantString += \" and another Highlander\"","\/\/ this reports a compile-time error - a constant string cannot be modified"]},{"content":[{"inlineContent":[{"type":"text","text":"This approach is different from string mutation in Objective-C and Cocoa,"},{"type":"text","text":" "},{"type":"text","text":"where you choose between two classes ("},{"code":"NSString","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"NSMutableString","type":"codeVoice"},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to indicate whether a string can be mutated."}],"type":"paragraph"}],"name":"Note","style":"note","type":"aside"},{"type":"heading","level":2,"anchor":"Las-cadenas-son-tipos-de-valor","text":"Las cadenas son tipos de valor"},{"inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type is a "},{"inlineContent":[{"type":"text","text":"value type"}],"type":"emphasis"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If you create a new "},{"code":"String","type":"codeVoice"},{"type":"text","text":" value,"},{"text":" ","type":"text"},{"text":"that ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" value is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"copied"}]},{"type":"text","text":" when it’s passed to a function or method,"},{"text":" ","type":"text"},{"text":"or when it’s assigned to a constant or variable.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In each case, a new copy of the existing "},{"code":"String","type":"codeVoice"},{"text":" value is created,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the new copy is passed or assigned, not the original version."},{"text":" ","type":"text"},{"type":"text","text":"Value types are described in "},{"text":"doc:ClasesYEstructuras#Las-estructuras-y-las-enumeraciones-son-tipos-de-valor","type":"text"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Swift’s copy-by-default ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" behavior ensures that","type":"text"},{"type":"text","text":" "},{"text":"when a function or method passes you a ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"type":"text","text":"it’s clear that you own that exact "},{"code":"String","type":"codeVoice"},{"text":" value,","type":"text"},{"text":" ","type":"text"},{"text":"regardless of where it came from.","type":"text"},{"text":" ","type":"text"},{"text":"You can be confident that the string you are passed won’t be modified","type":"text"},{"type":"text","text":" "},{"type":"text","text":"unless you modify it yourself."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Behind the scenes, Swift’s compiler optimizes string usage"},{"text":" ","type":"text"},{"type":"text","text":"so that actual copying takes place only when absolutely necessary."},{"text":" ","type":"text"},{"text":"This means you always get great performance","type":"text"},{"type":"text","text":" "},{"text":"when working with strings as value types.","type":"text"}]},{"text":"Trabajando con caracteres","type":"heading","anchor":"Trabajando-con-caracteres","level":2},{"type":"paragraph","inlineContent":[{"text":"You can access the individual ","type":"text"},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values for a "},{"type":"codeVoice","code":"String"},{"text":" ","type":"text"},{"type":"text","text":"by iterating over the string with a "},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop:"}]},{"type":"codeListing","syntax":"swift","code":["for character in \"Dog!🐶\" {","    print(character)","}","\/\/ D","\/\/ o","\/\/ g","\/\/ !","\/\/ 🐶"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"code":"in","type":"codeVoice"},{"type":"text","text":" loop is described in "},{"type":"text","text":"doc:FlujoDeControl#Ciclos-for-in"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, you can create a stand-alone "},{"type":"codeVoice","code":"Character"},{"text":" constant or variable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from a single-character string literal by providing a "},{"type":"codeVoice","code":"Character"},{"text":" type annotation:","type":"text"}]},{"type":"codeListing","code":["let exclamationMark: Character = \"!\""],"syntax":"swift"},{"inlineContent":[{"type":"codeVoice","code":"String"},{"type":"text","text":" values can be constructed by passing an array of "},{"type":"codeVoice","code":"Character"},{"text":" values","type":"text"},{"text":" ","type":"text"},{"text":"as an argument to its initializer:","type":"text"}],"type":"paragraph"},{"code":["let catCharacters: [Character] = [\"C\", \"a\", \"t\", \"!\", \"🐱\"]","let catString = String(catCharacters)","print(catString)","\/\/ Prints \"Cat!🐱\""],"type":"codeListing","syntax":"swift"},{"level":2,"type":"heading","text":"Concatenación de cadenas y caracteres","anchor":"Concatenaci%C3%B3n-de-cadenas-y-caracteres"},{"inlineContent":[{"code":"String","type":"codeVoice"},{"type":"text","text":" values can be added together (or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"concatenated"}]},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with the addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") to create a new "},{"type":"codeVoice","code":"String"},{"text":" value:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let string1 = \"hello\"","let string2 = \" there\"","var welcome = string1 + string2","\/\/ welcome now equals \"hello there\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can also append a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" value to an existing ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" variable"},{"text":" ","type":"text"},{"type":"text","text":"with the addition assignment operator ("},{"type":"codeVoice","code":"+="},{"type":"text","text":"):"}]},{"syntax":"swift","type":"codeListing","code":["var instruction = \"look over\"","instruction += string2","\/\/ instruction now equals \"look over there\""]},{"inlineContent":[{"type":"text","text":"You can append a "},{"type":"codeVoice","code":"Character"},{"text":" value to a ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" variable","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with the "},{"type":"codeVoice","code":"String"},{"text":" type’s ","type":"text"},{"code":"append()","type":"codeVoice"},{"type":"text","text":" method:"}],"type":"paragraph"},{"code":["let exclamationMark: Character = \"!\"","welcome.append(exclamationMark)","\/\/ welcome now equals \"hello there!\""],"type":"codeListing","syntax":"swift"},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"You can’t append a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" or "},{"code":"Character","type":"codeVoice"},{"type":"text","text":" to an existing "},{"type":"codeVoice","code":"Character"},{"text":" variable,","type":"text"},{"type":"text","text":" "},{"text":"because a ","type":"text"},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value must contain a single character only."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"text":"If you’re using multiline string literals","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to build up the lines of a longer string,"},{"text":" ","type":"text"},{"text":"you want every line in the string to end with a line break,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"including the last line."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["let badStart = \"\"\"","    one","    two","    \"\"\"","let end = \"\"\"","    three","    \"\"\"","print(badStart + end)","\/\/ Prints two lines:","\/\/ one","\/\/ twothree","","let goodStart = \"\"\"","    one","    two","","    \"\"\"","print(goodStart + end)","\/\/ Prints three lines:","\/\/ one","\/\/ two","\/\/ three"]},{"inlineContent":[{"type":"text","text":"In the code above,"},{"type":"text","text":" "},{"text":"concatenating ","type":"text"},{"type":"codeVoice","code":"badStart"},{"text":" with ","type":"text"},{"code":"end","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"produces a two-line string,"},{"text":" ","type":"text"},{"text":"which isn’t the desired result.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because the last line of "},{"type":"codeVoice","code":"badStart"},{"type":"text","text":" "},{"type":"text","text":"doesn’t end with a line break,"},{"type":"text","text":" "},{"text":"that line gets combined with the first line of ","type":"text"},{"type":"codeVoice","code":"end"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"In contrast,"},{"type":"text","text":" "},{"text":"both lines of ","type":"text"},{"type":"codeVoice","code":"goodStart"},{"text":" end with a line break,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so when it’s combined with "},{"type":"codeVoice","code":"end"},{"type":"text","text":" "},{"type":"text","text":"the result has three lines,"},{"type":"text","text":" "},{"type":"text","text":"as expected."}],"type":"paragraph"},{"level":2,"text":"Interpolación de cadenas","anchor":"Interpolaci%C3%B3n-de-cadenas","type":"heading"},{"inlineContent":[{"inlineContent":[{"text":"String interpolation","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a way to construct a new "},{"code":"String","type":"codeVoice"},{"type":"text","text":" value"},{"text":" ","type":"text"},{"type":"text","text":"from a mix of constants, variables, literals, and expressions"},{"type":"text","text":" "},{"type":"text","text":"by including their values inside a string literal."},{"text":" ","type":"text"},{"text":"You can use string interpolation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in both single-line and multiline string literals."},{"type":"text","text":" "},{"type":"text","text":"Each item that you insert into the string literal is wrapped in"},{"type":"text","text":" "},{"type":"text","text":"a pair of parentheses, prefixed by a backslash ("},{"type":"codeVoice","code":"\\"},{"type":"text","text":"):"}],"type":"paragraph"},{"syntax":"swift","code":["let multiplier = 3","let message = \"\\(multiplier) times 2.5 is \\(Double(multiplier) * 2.5)\"","\/\/ message is \"3 times 2.5 is 7.5\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"type":"text","text":" "},{"type":"text","text":"the value of "},{"type":"codeVoice","code":"multiplier"},{"type":"text","text":" is inserted into a string literal as "},{"type":"codeVoice","code":"\\(multiplier)"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"This placeholder is replaced with the actual value of ","type":"text"},{"type":"codeVoice","code":"multiplier"},{"text":" ","type":"text"},{"text":"when the string interpolation is evaluated to create an actual string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value of "},{"code":"multiplier","type":"codeVoice"},{"text":" is also part of a larger expression later in the string.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This expression calculates the value of "},{"code":"Double(multiplier) * 2.5","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and inserts the result (","type":"text"},{"type":"codeVoice","code":"7.5"},{"text":") into the string.","type":"text"},{"text":" ","type":"text"},{"text":"In this case, the expression is written as ","type":"text"},{"type":"codeVoice","code":"\\(Double(multiplier) * 2.5)"},{"type":"text","text":" "},{"type":"text","text":"when it’s included inside the string literal."}]},{"inlineContent":[{"text":"You can use extended string delimiters to create strings containing","type":"text"},{"type":"text","text":" "},{"text":"characters that would otherwise be treated as a string interpolation.","type":"text"},{"type":"text","text":" "},{"text":"For example:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["print(#\"Write an interpolated string in Swift using \\(multiplier).\"#)","\/\/ Prints \"Write an interpolated string in Swift using \\(multiplier).\""]},{"type":"paragraph","inlineContent":[{"text":"To use string interpolation","type":"text"},{"text":" ","type":"text"},{"text":"inside a string that uses extended delimiters,","type":"text"},{"text":" ","type":"text"},{"text":"match the number of number signs after the backslash","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the number of number signs at the beginning and end of the string."},{"text":" ","type":"text"},{"type":"text","text":"For example:"}]},{"code":["print(#\"6 times 7 is \\#(6 * 7).\"#)","\/\/ Prints \"6 times 7 is 42.\""],"syntax":"swift","type":"codeListing"},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"The expressions you write inside parentheses within an interpolated string","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can’t contain an unescaped backslash ("},{"type":"codeVoice","code":"\\"},{"text":"), a carriage return, or a line feed.","type":"text"},{"text":" ","type":"text"},{"text":"However, they can contain other string literals.","type":"text"}]}]},{"type":"heading","level":2,"text":"Unicode","anchor":"Unicode"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Unicode","type":"text"}],"type":"emphasis"},{"type":"text","text":" is an international standard for"},{"text":" ","type":"text"},{"text":"encoding, representing, and processing text in different writing systems.","type":"text"},{"type":"text","text":" "},{"text":"It enables you to represent almost any character from any language in a standardized form,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and to read and write those characters to and from an external source"},{"type":"text","text":" "},{"text":"such as a text file or web page.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift’s "},{"code":"String","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":" types are fully Unicode-compliant,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as described in this section."}]},{"type":"heading","anchor":"Valores-escalares-Unicode","text":"Valores escalares Unicode","level":3},{"inlineContent":[{"text":"Behind the scenes,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift’s native "},{"type":"codeVoice","code":"String"},{"text":" type is built from ","type":"text"},{"inlineContent":[{"text":"Unicode scalar values","type":"text"}],"type":"emphasis"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"A Unicode scalar value is a unique 21-bit number for a character or modifier,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"such as "},{"type":"codeVoice","code":"U+0061"},{"type":"text","text":" for "},{"type":"codeVoice","code":"LATIN SMALL LETTER A"},{"type":"text","text":" ("},{"type":"codeVoice","code":"\"a\""},{"text":"),","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or "},{"type":"codeVoice","code":"U+1F425"},{"text":" for ","type":"text"},{"code":"FRONT-FACING BABY CHICK","type":"codeVoice"},{"text":" (","type":"text"},{"code":"\"🐥\"","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that not all 21-bit Unicode scalar values are assigned to a character —"},{"type":"text","text":" "},{"text":"some scalars are reserved for future assignment or for use in UTF-16 encoding.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Scalar values that have been assigned to a character typically also have a name,"},{"text":" ","type":"text"},{"text":"such as ","type":"text"},{"code":"LATIN SMALL LETTER A","type":"codeVoice"},{"type":"text","text":" and "},{"code":"FRONT-FACING BABY CHICK","type":"codeVoice"},{"type":"text","text":" in the examples above."}]},{"type":"heading","level":3,"anchor":"Grupos-de-grafemas-extendidos","text":"Grupos de grafemas extendidos"},{"inlineContent":[{"type":"text","text":"Every instance of Swift’s "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" type represents"},{"type":"text","text":" "},{"text":"a single ","type":"text"},{"inlineContent":[{"type":"text","text":"extended grapheme cluster"}],"type":"emphasis"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"An extended grapheme cluster is a sequence of one or more Unicode scalars","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that (when combined) produce a single human-readable character."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example."},{"text":" ","type":"text"},{"text":"The letter ","type":"text"},{"code":"é","type":"codeVoice"},{"text":" can be represented as the single Unicode scalar ","type":"text"},{"code":"é","type":"codeVoice"},{"type":"text","text":" "},{"text":"(","type":"text"},{"code":"LATIN SMALL LETTER E WITH ACUTE","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"U+00E9","type":"codeVoice"},{"text":").","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"However, the same letter can also be represented as a "},{"inlineContent":[{"text":"pair","type":"text"}],"type":"emphasis"},{"text":" of scalars —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a standard letter "},{"code":"e","type":"codeVoice"},{"type":"text","text":" ("},{"code":"LATIN SMALL LETTER E","type":"codeVoice"},{"type":"text","text":", or "},{"type":"codeVoice","code":"U+0065"},{"type":"text","text":"),"},{"text":" ","type":"text"},{"type":"text","text":"followed by the "},{"code":"COMBINING ACUTE ACCENT","type":"codeVoice"},{"type":"text","text":" scalar ("},{"type":"codeVoice","code":"U+0301"},{"text":").","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"COMBINING ACUTE ACCENT","type":"codeVoice"},{"type":"text","text":" scalar is graphically applied to the scalar that precedes it,"},{"text":" ","type":"text"},{"text":"turning an ","type":"text"},{"code":"e","type":"codeVoice"},{"type":"text","text":" into an "},{"type":"codeVoice","code":"é"},{"text":" when it’s rendered by","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a Unicode-aware text-rendering system."}]},{"inlineContent":[{"text":"In both cases, the letter ","type":"text"},{"type":"codeVoice","code":"é"},{"type":"text","text":" is represented as a single Swift "},{"code":"Character","type":"codeVoice"},{"text":" value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that represents an extended grapheme cluster."},{"type":"text","text":" "},{"type":"text","text":"In the first case, the cluster contains a single scalar;"},{"type":"text","text":" "},{"type":"text","text":"in the second case, it’s a cluster of two scalars:"}],"type":"paragraph"},{"type":"codeListing","code":["let eAcute: Character = \"\\u{E9}\"                         \/\/ é","let combinedEAcute: Character = \"\\u{65}\\u{301}\"          \/\/ e followed by ́","\/\/ eAcute is é, combinedEAcute is é"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Extended grapheme clusters are a flexible way to represent"},{"type":"text","text":" "},{"text":"many complex script characters as a single ","type":"text"},{"type":"codeVoice","code":"Character"},{"text":" value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, Hangul syllables from the Korean alphabet"},{"text":" ","type":"text"},{"type":"text","text":"can be represented as either a precomposed or decomposed sequence."},{"type":"text","text":" "},{"text":"Both of these representations qualify as a single ","type":"text"},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value in Swift:"}],"type":"paragraph"},{"code":["let precomposed: Character = \"\\u{D55C}\"                  \/\/ 한","let decomposed: Character = \"\\u{1112}\\u{1161}\\u{11AB}\"   \/\/ ᄒ, ᅡ, ᆫ","\/\/ precomposed is 한, decomposed is 한"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Extended grapheme clusters enable"},{"type":"text","text":" "},{"text":"scalars for enclosing marks (such as ","type":"text"},{"code":"COMBINING ENCLOSING CIRCLE","type":"codeVoice"},{"type":"text","text":", or "},{"type":"codeVoice","code":"U+20DD"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"to enclose other Unicode scalars as part of a single ","type":"text"},{"type":"codeVoice","code":"Character"},{"text":" value:","type":"text"}]},{"type":"codeListing","code":["let enclosedEAcute: Character = \"\\u{E9}\\u{20DD}\"","\/\/ enclosedEAcute is é⃝"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unicode scalars for regional indicator symbols"},{"type":"text","text":" "},{"type":"text","text":"can be combined in pairs to make a single "},{"code":"Character","type":"codeVoice"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"text":"such as this combination of ","type":"text"},{"type":"codeVoice","code":"REGIONAL INDICATOR SYMBOL LETTER U"},{"type":"text","text":" ("},{"type":"codeVoice","code":"U+1F1FA"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"codeVoice","code":"REGIONAL INDICATOR SYMBOL LETTER S"},{"text":" (","type":"text"},{"type":"codeVoice","code":"U+1F1F8"},{"text":"):","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let regionalIndicatorForUS: Character = \"\\u{1F1FA}\\u{1F1F8}\"","\/\/ regionalIndicatorForUS is 🇺🇸"]},{"text":"Conteo de caracteres","level":2,"type":"heading","anchor":"Conteo-de-caracteres"},{"inlineContent":[{"type":"text","text":"To retrieve a count of the "},{"type":"codeVoice","code":"Character"},{"text":" values in a string,","type":"text"},{"text":" ","type":"text"},{"text":"use the ","type":"text"},{"type":"codeVoice","code":"count"},{"text":" property of the string:","type":"text"}],"type":"paragraph"},{"code":["let unusualMenagerie = \"Koala 🐨, Snail 🐌, Penguin 🐧, Dromedary 🐪\"","print(\"unusualMenagerie has \\(unusualMenagerie.count) characters\")","\/\/ Prints \"unusualMenagerie has 40 characters\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Note that Swift’s use of extended grapheme clusters for ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":" values","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"means that string concatenation and modification may not always affect"},{"text":" ","type":"text"},{"type":"text","text":"a string’s character count."}]},{"type":"paragraph","inlineContent":[{"text":"For example, if you initialize a new string with the four-character word ","type":"text"},{"type":"codeVoice","code":"cafe"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and then append a ","type":"text"},{"type":"codeVoice","code":"COMBINING ACUTE ACCENT"},{"type":"text","text":" ("},{"type":"codeVoice","code":"U+0301"},{"text":") to the end of the string,","type":"text"},{"type":"text","text":" "},{"text":"the resulting string will still have a character count of ","type":"text"},{"type":"codeVoice","code":"4"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"with a fourth character of ","type":"text"},{"code":"é","type":"codeVoice"},{"text":", not ","type":"text"},{"code":"e","type":"codeVoice"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["var word = \"cafe\"","print(\"the number of characters in \\(word) is \\(word.count)\")","\/\/ Prints \"the number of characters in cafe is 4\"","","word += \"\\u{301}\"    \/\/ COMBINING ACUTE ACCENT, U+0301","","print(\"the number of characters in \\(word) is \\(word.count)\")","\/\/ Prints \"the number of characters in café is 4\""]},{"content":[{"inlineContent":[{"text":"Extended grapheme clusters can be composed of multiple Unicode scalars.","type":"text"},{"type":"text","text":" "},{"text":"This means that different characters—","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and different representations of the same character—"},{"type":"text","text":" "},{"type":"text","text":"can require different amounts of memory to store."},{"text":" ","type":"text"},{"type":"text","text":"Because of this, characters in Swift don’t each take up"},{"text":" ","type":"text"},{"type":"text","text":"the same amount of memory within a string’s representation."},{"text":" ","type":"text"},{"type":"text","text":"As a result, the number of characters in a string can’t be calculated"},{"type":"text","text":" "},{"type":"text","text":"without iterating through the string to determine"},{"type":"text","text":" "},{"text":"its extended grapheme cluster boundaries.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If you are working with particularly long string values,"},{"type":"text","text":" "},{"text":"be aware that the ","type":"text"},{"type":"codeVoice","code":"count"},{"text":" property","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"must iterate over the Unicode scalars in the entire string"},{"text":" ","type":"text"},{"text":"in order to determine the characters for that string.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The count of the characters returned by the "},{"type":"codeVoice","code":"count"},{"text":" property","type":"text"},{"type":"text","text":" "},{"type":"text","text":"isn’t always the same as the "},{"code":"length","type":"codeVoice"},{"text":" property of","type":"text"},{"text":" ","type":"text"},{"text":"an ","type":"text"},{"type":"codeVoice","code":"NSString"},{"text":" that contains the same characters.","type":"text"},{"text":" ","type":"text"},{"text":"The length of an ","type":"text"},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" is based on"},{"type":"text","text":" "},{"type":"text","text":"the number of 16-bit code units within the string’s UTF-16 representation"},{"type":"text","text":" "},{"type":"text","text":"and not the number of Unicode extended grapheme clusters within the string."}]}],"type":"aside","style":"note","name":"Note"},{"type":"heading","level":2,"text":"Acceso y modificación de una cadena","anchor":"Acceso-y-modificaci%C3%B3n-de-una-cadena"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You access and modify a string through its methods and properties,"},{"type":"text","text":" "},{"text":"or by using subscript syntax.","type":"text"}]},{"anchor":"%C3%8Dndices-de-una-cadena","type":"heading","level":3,"text":"Índices de una cadena"},{"inlineContent":[{"type":"text","text":"Each "},{"code":"String","type":"codeVoice"},{"text":" value has an associated ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"index type","type":"text"}]},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"String.Index"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which corresponds to the position of each "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" in the string."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"As mentioned above,","type":"text"},{"text":" ","type":"text"},{"text":"different characters can require different amounts of memory to store,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so in order to determine which "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" is at a particular position,"},{"type":"text","text":" "},{"type":"text","text":"you must iterate over each Unicode scalar from the start or end of that "},{"code":"String","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"For this reason, Swift strings can’t be indexed by integer values."}]},{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"startIndex"},{"type":"text","text":" property to access"},{"text":" ","type":"text"},{"text":"the position of the first ","type":"text"},{"type":"codeVoice","code":"Character"},{"type":"text","text":" of a "},{"code":"String","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"endIndex"},{"type":"text","text":" property is the position after the last character in a "},{"type":"codeVoice","code":"String"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"As a result,"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"endIndex"},{"text":" property isn’t a valid argument to a string’s subscript.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If a "},{"code":"String","type":"codeVoice"},{"type":"text","text":" is empty, "},{"code":"startIndex","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"endIndex"},{"text":" are equal.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You access the indices before and after a given index"},{"type":"text","text":" "},{"type":"text","text":"using the "},{"code":"index(before:)","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"index(after:)","type":"codeVoice"},{"type":"text","text":" methods of "},{"type":"codeVoice","code":"String"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"To access an index farther away from the given index,"},{"type":"text","text":" "},{"type":"text","text":"you can use the "},{"type":"codeVoice","code":"index(_:offsetBy:)"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"instead of calling one of these methods multiple times."}]},{"inlineContent":[{"text":"You can use subscript syntax to access","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"Character","type":"codeVoice"},{"text":" at a particular ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" index."}],"type":"paragraph"},{"code":["let greeting = \"Guten Tag!\"","greeting[greeting.startIndex]","\/\/ G","greeting[greeting.index(before: greeting.endIndex)]","\/\/ !","greeting[greeting.index(after: greeting.startIndex)]","\/\/ u","let index = greeting.index(greeting.startIndex, offsetBy: 7)","greeting[index]","\/\/ a"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Attempting to access an index outside of a string’s range"},{"type":"text","text":" "},{"type":"text","text":"or a "},{"code":"Character","type":"codeVoice"},{"type":"text","text":" at an index outside of a string’s range"},{"type":"text","text":" "},{"text":"will trigger a runtime error.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["greeting[greeting.endIndex] \/\/ Error","greeting.index(after: greeting.endIndex) \/\/ Error"]},{"inlineContent":[{"type":"text","text":"Use the "},{"code":"indices","type":"codeVoice"},{"text":" property to access all of the","type":"text"},{"type":"text","text":" "},{"text":"indices of individual characters in a string.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["for index in greeting.indices {","    print(\"\\(greeting[index]) \", terminator: \"\")","}","\/\/ Prints \"G u t e n   T a g ! \""]},{"style":"note","type":"aside","name":"Note","content":[{"inlineContent":[{"type":"text","text":"You can use the "},{"type":"codeVoice","code":"startIndex"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"endIndex"},{"text":" properties","type":"text"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"type":"codeVoice","code":"index(before:)"},{"text":", ","type":"text"},{"type":"codeVoice","code":"index(after:)"},{"type":"text","text":", and "},{"code":"index(_:offsetBy:)","type":"codeVoice"},{"type":"text","text":" methods"},{"type":"text","text":" "},{"type":"text","text":"on any type that conforms to the "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":" protocol."},{"text":" ","type":"text"},{"type":"text","text":"This includes "},{"code":"String","type":"codeVoice"},{"text":", as shown here,","type":"text"},{"text":" ","type":"text"},{"text":"as well as collection types such as ","type":"text"},{"type":"codeVoice","code":"Array"},{"type":"text","text":", "},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Set","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"level":3,"type":"heading","text":"Insertar y remover","anchor":"Insertar-y-remover"},{"inlineContent":[{"type":"text","text":"To insert a single character into a string at a specified index,"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"insert(_:at:)"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"and to insert the contents of another string at a specified index,"},{"type":"text","text":" "},{"text":"use the ","type":"text"},{"code":"insert(contentsOf:at:)","type":"codeVoice"},{"text":" method.","type":"text"}],"type":"paragraph"},{"code":["var welcome = \"hello\"","welcome.insert(\"!\", at: welcome.endIndex)","\/\/ welcome now equals \"hello!\"","","welcome.insert(contentsOf: \" there\", at: welcome.index(before: welcome.endIndex))","\/\/ welcome now equals \"hello there!\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To remove a single character from a string at a specified index,"},{"text":" ","type":"text"},{"text":"use the ","type":"text"},{"code":"remove(at:)","type":"codeVoice"},{"text":" method,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and to remove a substring at a specified range,"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"code":"removeSubrange(_:)","type":"codeVoice"},{"type":"text","text":" method:"}]},{"syntax":"swift","type":"codeListing","code":["welcome.remove(at: welcome.index(before: welcome.endIndex))","\/\/ welcome now equals \"hello there\"","","let range = welcome.index(welcome.endIndex, offsetBy: -6)..<welcome.endIndex","welcome.removeSubrange(range)","\/\/ welcome now equals \"hello\""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"You can use the ","type":"text"},{"type":"codeVoice","code":"insert(_:at:)"},{"type":"text","text":", "},{"code":"insert(contentsOf:at:)","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"remove(at:)","type":"codeVoice"},{"type":"text","text":", and "},{"code":"removeSubrange(_:)","type":"codeVoice"},{"text":" methods","type":"text"},{"type":"text","text":" "},{"type":"text","text":"on any type that conforms to the "},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"text":" protocol.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This includes "},{"code":"String","type":"codeVoice"},{"type":"text","text":", as shown here,"},{"type":"text","text":" "},{"type":"text","text":"as well as collection types such as "},{"type":"codeVoice","code":"Array"},{"text":", ","type":"text"},{"code":"Dictionary","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Set"},{"text":".","type":"text"}]}],"name":"Note","type":"aside"},{"level":2,"text":"Subcadenas","anchor":"Subcadenas","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you get a substring from a string —"},{"type":"text","text":" "},{"type":"text","text":"for example, using a subscript or a method like "},{"code":"prefix(_:)","type":"codeVoice"},{"text":" —","type":"text"},{"text":" ","type":"text"},{"text":"the result is an instance","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/substring"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"not another string."},{"text":" ","type":"text"},{"type":"text","text":"Substrings in Swift have most of the same methods as strings,"},{"type":"text","text":" "},{"text":"which means you can work with substrings","type":"text"},{"text":" ","type":"text"},{"text":"the same way you work with strings.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, unlike strings,"},{"type":"text","text":" "},{"text":"you use substrings for only a short amount of time","type":"text"},{"type":"text","text":" "},{"type":"text","text":"while performing actions on a string."},{"text":" ","type":"text"},{"text":"When you’re ready to store the result for a longer time,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you convert the substring to an instance of "},{"type":"codeVoice","code":"String"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"code":["let greeting = \"Hello, world!\"","let index = greeting.firstIndex(of: \",\") ?? greeting.endIndex","let beginning = greeting[..<index]","\/\/ beginning is \"Hello\"","","\/\/ Convert the result to a String for long-term storage.","let newString = String(beginning)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Like strings, each substring has a region of memory","type":"text"},{"text":" ","type":"text"},{"text":"where the characters that make up the substring are stored.","type":"text"},{"type":"text","text":" "},{"text":"The difference between strings and substrings","type":"text"},{"text":" ","type":"text"},{"text":"is that, as a performance optimization,","type":"text"},{"text":" ","type":"text"},{"text":"a substring can reuse part of the memory","type":"text"},{"type":"text","text":" "},{"text":"that’s used to store the original string,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or part of the memory that’s used to store another substring."},{"type":"text","text":" "},{"type":"text","text":"(Strings have a similar optimization,"},{"text":" ","type":"text"},{"text":"but if two strings share memory, they’re equal.)","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This performance optimization means"},{"type":"text","text":" "},{"type":"text","text":"you don’t have to pay the performance cost of copying memory"},{"type":"text","text":" "},{"type":"text","text":"until you modify either the string or substring."},{"type":"text","text":" "},{"type":"text","text":"As mentioned above,"},{"text":" ","type":"text"},{"type":"text","text":"substrings aren’t suitable for long-term storage —"},{"type":"text","text":" "},{"type":"text","text":"because they reuse the storage of the original string,"},{"text":" ","type":"text"},{"type":"text","text":"the entire original string must be kept in memory"},{"type":"text","text":" "},{"type":"text","text":"as long as any of its substrings are being used."}],"type":"paragraph"},{"inlineContent":[{"text":"In the example above,","type":"text"},{"type":"text","text":" "},{"code":"greeting","type":"codeVoice"},{"text":" is a string,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which means it has a region of memory"},{"type":"text","text":" "},{"type":"text","text":"where the characters that make up the string are stored."},{"text":" ","type":"text"},{"type":"text","text":"Because"},{"text":" ","type":"text"},{"code":"beginning","type":"codeVoice"},{"type":"text","text":" is a substring of "},{"code":"greeting","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"it reuses the memory that ","type":"text"},{"type":"codeVoice","code":"greeting"},{"text":" uses.","type":"text"},{"type":"text","text":" "},{"text":"In contrast,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"newString"},{"type":"text","text":" is a string —"},{"type":"text","text":" "},{"type":"text","text":"when it’s created from the substring,"},{"text":" ","type":"text"},{"text":"it has its own storage.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The figure below shows these relationships:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"identifier":"stringSubstring","type":"image"}]},{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"Both ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" and ","type":"text"},{"code":"Substring","type":"codeVoice"},{"type":"text","text":" conform to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/stringprotocol","isActive":true},{"type":"text","text":" protocol,"},{"type":"text","text":" "},{"type":"text","text":"which means it’s often convenient for string-manipulation functions"},{"text":" ","type":"text"},{"type":"text","text":"to accept a "},{"type":"codeVoice","code":"StringProtocol"},{"type":"text","text":" value."},{"text":" ","type":"text"},{"type":"text","text":"You can call such functions with either a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":" value."}]}],"style":"note"},{"type":"heading","level":2,"text":"Comparación de cadenas","anchor":"Comparaci%C3%B3n-de-cadenas"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift provides three ways to compare textual values:"},{"type":"text","text":" "},{"type":"text","text":"string and character equality, prefix equality, and suffix equality."}]},{"text":"Igualdad de cadenas y caracteres","type":"heading","anchor":"Igualdad-de-cadenas-y-caracteres","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"String and character equality is checked with the “equal to” operator ("},{"code":"==","type":"codeVoice"},{"text":")","type":"text"},{"type":"text","text":" "},{"text":"and the “not equal to” operator (","type":"text"},{"type":"codeVoice","code":"!="},{"text":"),","type":"text"},{"type":"text","text":" "},{"text":"as described in ","type":"text"},{"type":"text","text":"doc:OperadoresBasicos#Operadores-de-comparación"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let quotation = \"We're a lot alike, you and I.\"","let sameQuotation = \"We're a lot alike, you and I.\"","if quotation == sameQuotation {","    print(\"These two strings are considered equal\")","}","\/\/ Prints \"These two strings are considered equal\""]},{"inlineContent":[{"type":"text","text":"Two "},{"code":"String","type":"codeVoice"},{"text":" values (or two ","type":"text"},{"code":"Character","type":"codeVoice"},{"type":"text","text":" values) are considered equal if"},{"type":"text","text":" "},{"text":"their extended grapheme clusters are ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"canonically equivalent","type":"text"}]},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Extended grapheme clusters are canonically equivalent if they have"},{"text":" ","type":"text"},{"text":"the same linguistic meaning and appearance,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"even if they’re composed from different Unicode scalars behind the scenes."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, "},{"type":"codeVoice","code":"LATIN SMALL LETTER E WITH ACUTE"},{"text":" (","type":"text"},{"code":"U+00E9","type":"codeVoice"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is canonically equivalent to "},{"type":"codeVoice","code":"LATIN SMALL LETTER E"},{"text":" (","type":"text"},{"type":"codeVoice","code":"U+0065"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"followed by "},{"type":"codeVoice","code":"COMBINING ACUTE ACCENT"},{"type":"text","text":" ("},{"code":"U+0301","type":"codeVoice"},{"text":").","type":"text"},{"text":" ","type":"text"},{"text":"Both of these extended grapheme clusters are valid ways to represent the character ","type":"text"},{"code":"é","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and so they’re considered to be canonically equivalent:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ \"Voulez-vous un café?\" using LATIN SMALL LETTER E WITH ACUTE","let eAcuteQuestion = \"Voulez-vous un caf\\u{E9}?\"","","\/\/ \"Voulez-vous un café?\" using LATIN SMALL LETTER E and COMBINING ACUTE ACCENT","let combinedEAcuteQuestion = \"Voulez-vous un caf\\u{65}\\u{301}?\"","","if eAcuteQuestion == combinedEAcuteQuestion {","    print(\"These two strings are considered equal\")","}","\/\/ Prints \"These two strings are considered equal\""]},{"inlineContent":[{"type":"text","text":"Conversely, "},{"code":"LATIN CAPITAL LETTER A","type":"codeVoice"},{"text":" (","type":"text"},{"code":"U+0041","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"\"A\"","type":"codeVoice"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"as used in English, is "},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"type":"text","text":" equivalent to"},{"type":"text","text":" "},{"type":"codeVoice","code":"CYRILLIC CAPITAL LETTER A"},{"text":" (","type":"text"},{"code":"U+0410","type":"codeVoice"},{"type":"text","text":", or "},{"type":"codeVoice","code":"\"А\""},{"type":"text","text":"),"},{"type":"text","text":" "},{"text":"as used in Russian.","type":"text"},{"type":"text","text":" "},{"text":"The characters are visually similar,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but don’t have the same linguistic meaning:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let latinCapitalLetterA: Character = \"\\u{41}\"","","let cyrillicCapitalLetterA: Character = \"\\u{0410}\"","","if latinCapitalLetterA != cyrillicCapitalLetterA {","    print(\"These two characters aren't equivalent.\")","}","\/\/ Prints \"These two characters aren't equivalent.\""]},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"String and character comparisons in Swift aren’t locale-sensitive."}]}]},{"level":3,"text":"Igualdad de prefijo y sufijo","type":"heading","anchor":"Igualdad-de-prefijo-y-sufijo"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To check whether a string has a particular string prefix or suffix,"},{"text":" ","type":"text"},{"type":"text","text":"call the string’s "},{"code":"hasPrefix(_:)","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"hasSuffix(_:)","type":"codeVoice"},{"type":"text","text":" methods,"},{"type":"text","text":" "},{"type":"text","text":"both of which take a single argument of type "},{"code":"String","type":"codeVoice"},{"type":"text","text":" and return a Boolean value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The examples below consider an array of strings representing"},{"type":"text","text":" "},{"type":"text","text":"the scene locations from the first two acts of Shakespeare’s "},{"type":"emphasis","inlineContent":[{"text":"Romeo and Juliet","type":"text"}]},{"type":"text","text":":"}]},{"syntax":"swift","code":["let romeoAndJuliet = [","    \"Act 1 Scene 1: Verona, A public place\",","    \"Act 1 Scene 2: Capulet's mansion\",","    \"Act 1 Scene 3: A room in Capulet's mansion\",","    \"Act 1 Scene 4: A street outside Capulet's mansion\",","    \"Act 1 Scene 5: The Great Hall in Capulet's mansion\",","    \"Act 2 Scene 1: Outside Capulet's mansion\",","    \"Act 2 Scene 2: Capulet's orchard\",","    \"Act 2 Scene 3: Outside Friar Lawrence's cell\",","    \"Act 2 Scene 4: A street in Verona\",","    \"Act 2 Scene 5: Capulet's mansion\",","    \"Act 2 Scene 6: Friar Lawrence's cell\"","]"],"type":"codeListing"},{"inlineContent":[{"text":"You can use the ","type":"text"},{"code":"hasPrefix(_:)","type":"codeVoice"},{"type":"text","text":" method with the "},{"type":"codeVoice","code":"romeoAndJuliet"},{"type":"text","text":" array"},{"text":" ","type":"text"},{"text":"to count the number of scenes in Act 1 of the play:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["var act1SceneCount = 0","for scene in romeoAndJuliet {","    if scene.hasPrefix(\"Act 1 \") {","        act1SceneCount += 1","    }","}","print(\"There are \\(act1SceneCount) scenes in Act 1\")","\/\/ Prints \"There are 5 scenes in Act 1\""],"syntax":"swift"},{"inlineContent":[{"text":"Similarly, use the ","type":"text"},{"code":"hasSuffix(_:)","type":"codeVoice"},{"text":" method to count the number of scenes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that take place in or around Capulet’s mansion and Friar Lawrence’s cell:"}],"type":"paragraph"},{"code":["var mansionCount = 0","var cellCount = 0","for scene in romeoAndJuliet {","    if scene.hasSuffix(\"Capulet's mansion\") {","        mansionCount += 1","    } else if scene.hasSuffix(\"Friar Lawrence's cell\") {","        cellCount += 1","    }","}","print(\"\\(mansionCount) mansion scenes; \\(cellCount) cell scenes\")","\/\/ Prints \"6 mansion scenes; 2 cell scenes\""],"type":"codeListing","syntax":"swift"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"hasPrefix(_:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"hasSuffix(_:)"},{"text":" methods","type":"text"},{"type":"text","text":" "},{"text":"perform a character-by-character canonical equivalence comparison between","type":"text"},{"type":"text","text":" "},{"text":"the extended grapheme clusters in each string,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"text":"doc:CadenasYCaracteres#Igualdad-de-cadenas-y-caracteres","type":"text"},{"type":"text","text":"."}]}],"style":"note","type":"aside","name":"Note"},{"anchor":"Representaci%C3%B3n-Unicode-de-cadenas","text":"Representación Unicode de cadenas","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"When a Unicode string is written to a text file or some other storage,"},{"type":"text","text":" "},{"type":"text","text":"the Unicode scalars in that string are encoded in one of"},{"type":"text","text":" "},{"text":"several Unicode-defined ","type":"text"},{"inlineContent":[{"type":"text","text":"encoding forms"}],"type":"emphasis"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Each form encodes the string in small chunks known as "},{"inlineContent":[{"type":"text","text":"code units"}],"type":"emphasis"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"These include the UTF-8 encoding form (which encodes a string as 8-bit code units),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the UTF-16 encoding form (which encodes a string as 16-bit code units),"},{"type":"text","text":" "},{"text":"and the UTF-32 encoding form (which encodes a string as 32-bit code units).","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift provides several different ways to access Unicode representations of strings."},{"text":" ","type":"text"},{"type":"text","text":"You can iterate over the string with a "},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"text":"to access its individual ","type":"text"},{"type":"codeVoice","code":"Character"},{"text":" values as Unicode extended grapheme clusters.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This process is described in "},{"type":"text","text":"doc:CadenasYCaracteres#Trabajando-con-caracteres"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"Alternatively, access a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value"},{"text":" ","type":"text"},{"type":"text","text":"in one of three other Unicode-compliant representations:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"A collection of UTF-8 code units (accessed with the string’s ","type":"text"},{"code":"utf8","type":"codeVoice"},{"type":"text","text":" property)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A collection of UTF-16 code units (accessed with the string’s "},{"type":"codeVoice","code":"utf16"},{"text":" property)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A collection of 21-bit Unicode scalar values,","type":"text"},{"type":"text","text":" "},{"text":"equivalent to the string’s UTF-32 encoding form","type":"text"},{"type":"text","text":" "},{"text":"(accessed with the string’s ","type":"text"},{"code":"unicodeScalars","type":"codeVoice"},{"text":" property)","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each example below shows a different representation of the following string,"},{"type":"text","text":" "},{"text":"which is made up of the characters ","type":"text"},{"type":"codeVoice","code":"D"},{"type":"text","text":", "},{"type":"codeVoice","code":"o"},{"type":"text","text":", "},{"type":"codeVoice","code":"g"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"‼","type":"codeVoice"},{"text":" (","type":"text"},{"type":"codeVoice","code":"DOUBLE EXCLAMATION MARK"},{"type":"text","text":", or Unicode scalar "},{"code":"U+203C","type":"codeVoice"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"and the 🐶 character ("},{"code":"DOG FACE","type":"codeVoice"},{"text":", or Unicode scalar ","type":"text"},{"type":"codeVoice","code":"U+1F436"},{"type":"text","text":"):"}]},{"syntax":"swift","code":["let dogString = \"Dog‼🐶\""],"type":"codeListing"},{"level":3,"type":"heading","text":"Representación UTF-8","anchor":"Representaci%C3%B3n-UTF-8"},{"type":"paragraph","inlineContent":[{"text":"You can access a UTF-8 representation of a ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" "},{"type":"text","text":"by iterating over its "},{"code":"utf8","type":"codeVoice"},{"type":"text","text":" property."},{"text":" ","type":"text"},{"type":"text","text":"This property is of type "},{"type":"codeVoice","code":"String.UTF8View"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which is a collection of unsigned 8-bit (","type":"text"},{"code":"UInt8","type":"codeVoice"},{"type":"text","text":") values,"},{"text":" ","type":"text"},{"type":"text","text":"one for each byte in the string’s UTF-8 representation:"}]},{"inlineContent":[{"type":"image","identifier":"UTF8"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["for codeUnit in dogString.utf8 {","    print(\"\\(codeUnit) \", terminator: \"\")","}","print(\"\")","\/\/ Prints \"68 111 103 226 128 188 240 159 144 182 \""]},{"inlineContent":[{"text":"In the example above, the first three decimal ","type":"text"},{"type":"codeVoice","code":"codeUnit"},{"type":"text","text":" values"},{"text":" ","type":"text"},{"text":"(","type":"text"},{"type":"codeVoice","code":"68"},{"text":", ","type":"text"},{"type":"codeVoice","code":"111"},{"type":"text","text":", "},{"type":"codeVoice","code":"103"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"represent the characters "},{"type":"codeVoice","code":"D"},{"text":", ","type":"text"},{"type":"codeVoice","code":"o"},{"text":", and ","type":"text"},{"code":"g","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"whose UTF-8 representation is the same as their ASCII representation.","type":"text"},{"type":"text","text":" "},{"text":"The next three decimal ","type":"text"},{"type":"codeVoice","code":"codeUnit"},{"type":"text","text":" values"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"226"},{"text":", ","type":"text"},{"type":"codeVoice","code":"128"},{"text":", ","type":"text"},{"code":"188","type":"codeVoice"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"are a three-byte UTF-8 representation of the ","type":"text"},{"type":"codeVoice","code":"DOUBLE EXCLAMATION MARK"},{"type":"text","text":" character."},{"type":"text","text":" "},{"type":"text","text":"The last four "},{"type":"codeVoice","code":"codeUnit"},{"text":" values (","type":"text"},{"code":"240","type":"codeVoice"},{"type":"text","text":", "},{"code":"159","type":"codeVoice"},{"type":"text","text":", "},{"code":"144","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"182"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"are a four-byte UTF-8 representation of the "},{"code":"DOG FACE","type":"codeVoice"},{"text":" character.","type":"text"}],"type":"paragraph"},{"anchor":"Representaci%C3%B3n-UTF-16","text":"Representación UTF-16","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"You can access a UTF-16 representation of a "},{"code":"String","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"by iterating over its "},{"type":"codeVoice","code":"utf16"},{"text":" property.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This property is of type "},{"code":"String.UTF16View","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which is a collection of unsigned 16-bit (","type":"text"},{"type":"codeVoice","code":"UInt16"},{"text":") values,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"one for each 16-bit code unit in the string’s UTF-16 representation:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"identifier":"UTF16","type":"image"}]},{"code":["for codeUnit in dogString.utf16 {","    print(\"\\(codeUnit) \", terminator: \"\")","}","print(\"\")","\/\/ Prints \"68 111 103 8252 55357 56374 \""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Again, the first three ","type":"text"},{"type":"codeVoice","code":"codeUnit"},{"text":" values","type":"text"},{"type":"text","text":" "},{"text":"(","type":"text"},{"code":"68","type":"codeVoice"},{"type":"text","text":", "},{"code":"111","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"103"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"represent the characters "},{"type":"codeVoice","code":"D"},{"text":", ","type":"text"},{"code":"o","type":"codeVoice"},{"type":"text","text":", and "},{"code":"g","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"whose UTF-16 code units have the same values as in the string’s UTF-8 representation","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(because these Unicode scalars represent ASCII characters)."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The fourth "},{"code":"codeUnit","type":"codeVoice"},{"text":" value (","type":"text"},{"code":"8252","type":"codeVoice"},{"type":"text","text":") is a decimal equivalent of"},{"text":" ","type":"text"},{"type":"text","text":"the hexadecimal value "},{"type":"codeVoice","code":"203C"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which represents the Unicode scalar "},{"code":"U+203C","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"for the "},{"code":"DOUBLE EXCLAMATION MARK","type":"codeVoice"},{"text":" character.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This character can be represented as a single code unit in UTF-16."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The fifth and sixth "},{"code":"codeUnit","type":"codeVoice"},{"text":" values (","type":"text"},{"code":"55357","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"56374"},{"text":")","type":"text"},{"text":" ","type":"text"},{"text":"are a UTF-16 surrogate pair representation of the ","type":"text"},{"code":"DOG FACE","type":"codeVoice"},{"type":"text","text":" character."},{"type":"text","text":" "},{"type":"text","text":"These values are a high-surrogate value of "},{"code":"U+D83D","type":"codeVoice"},{"text":" (decimal value ","type":"text"},{"type":"codeVoice","code":"55357"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"and a low-surrogate value of "},{"code":"U+DC36","type":"codeVoice"},{"text":" (decimal value ","type":"text"},{"code":"56374","type":"codeVoice"},{"type":"text","text":")."}]},{"type":"heading","level":3,"anchor":"Representaci%C3%B3n-escalar-Unicode","text":"Representación escalar Unicode"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can access a Unicode scalar representation of a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value"},{"type":"text","text":" "},{"text":"by iterating over its ","type":"text"},{"type":"codeVoice","code":"unicodeScalars"},{"text":" property.","type":"text"},{"type":"text","text":" "},{"text":"This property is of type ","type":"text"},{"code":"UnicodeScalarView","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which is a collection of values of type "},{"type":"codeVoice","code":"UnicodeScalar"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each "},{"code":"UnicodeScalar","type":"codeVoice"},{"type":"text","text":" has a "},{"code":"value","type":"codeVoice"},{"type":"text","text":" property that returns"},{"text":" ","type":"text"},{"type":"text","text":"the scalar’s 21-bit value, represented within a "},{"code":"UInt32","type":"codeVoice"},{"text":" value:","type":"text"}]},{"inlineContent":[{"type":"image","identifier":"UnicodeScalar"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["for scalar in dogString.unicodeScalars {","    print(\"\\(scalar.value) \", terminator: \"\")","}","print(\"\")","\/\/ Prints \"68 111 103 8252 128054 \""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"value","type":"codeVoice"},{"text":" properties for the first three ","type":"text"},{"type":"codeVoice","code":"UnicodeScalar"},{"type":"text","text":" values"},{"text":" ","type":"text"},{"type":"text","text":"("},{"code":"68","type":"codeVoice"},{"type":"text","text":", "},{"code":"111","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"103"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"once again represent the characters ","type":"text"},{"type":"codeVoice","code":"D"},{"text":", ","type":"text"},{"type":"codeVoice","code":"o"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"g"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"The fourth "},{"type":"codeVoice","code":"codeUnit"},{"type":"text","text":" value ("},{"code":"8252","type":"codeVoice"},{"type":"text","text":") is again a decimal equivalent of"},{"text":" ","type":"text"},{"type":"text","text":"the hexadecimal value "},{"type":"codeVoice","code":"203C"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which represents the Unicode scalar "},{"type":"codeVoice","code":"U+203C"},{"type":"text","text":" "},{"type":"text","text":"for the "},{"type":"codeVoice","code":"DOUBLE EXCLAMATION MARK"},{"text":" character.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"code":"value","type":"codeVoice"},{"type":"text","text":" property of the fifth and final "},{"type":"codeVoice","code":"UnicodeScalar"},{"text":", ","type":"text"},{"type":"codeVoice","code":"128054"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"is a decimal equivalent of the hexadecimal value ","type":"text"},{"code":"1F436","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which represents the Unicode scalar "},{"code":"U+1F436","type":"codeVoice"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"DOG FACE"},{"type":"text","text":" character."}],"type":"paragraph"},{"inlineContent":[{"text":"As an alternative to querying their ","type":"text"},{"type":"codeVoice","code":"value"},{"type":"text","text":" properties,"},{"type":"text","text":" "},{"type":"text","text":"each "},{"code":"UnicodeScalar","type":"codeVoice"},{"text":" value can also be used to construct a new ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"such as with string interpolation:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["for scalar in dogString.unicodeScalars {","    print(\"\\(scalar) \")","}","\/\/ D","\/\/ o","\/\/ g","\/\/ ‼","\/\/ 🐶"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo."}]},{"type":"paragraph","inlineContent":[{"text":"Conoce más acerca del uso del ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","isActive":true},{"type":"text","text":"."}]}],"type":"aside","name":"Software Beta"}]}],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","metadata":{"title":"Cadenas y caracteres"},"abstract":[{"type":"text","text":"Store and manipulate text."}],"sections":[],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","interfaceLanguage":"swift"},"references":{"https://developer.apple.com/es/support/beta-software/":{"titleInlineContent":[{"type":"text","text":"software beta de Apple"}],"url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"link","title":"software beta de Apple","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/"},"https://developer.apple.com/documentation/swift/string#2919514":{"titleInlineContent":[{"type":"text","text":"Bridging Between String and NSString"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/string#2919514","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/string#2919514","title":"Bridging Between String and NSString"},"multilineStringWhitespace":{"variants":[{"url":"\/images\/org.swift.tspl\/multilineStringWhitespace@2x.png","traits":["2x","light"]},{"traits":["2x","dark"],"url":"\/images\/org.swift.tspl\/multilineStringWhitespace~dark@2x.png"}],"type":"image","identifier":"multilineStringWhitespace","alt":null},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"role":"collection","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","url":"\/documentation\/the-swift-programming-language","title":"The Swift Programming Language (6)","abstract":[],"type":"topic"},"https://developer.apple.com/documentation/swift/substring":{"titleInlineContent":[{"code":"Substring","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/substring","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/substring","title":"Substring"},"UTF8":{"variants":[{"traits":["2x","light"],"url":"\/images\/org.swift.tspl\/UTF8@2x.png"},{"traits":["2x","dark"],"url":"\/images\/org.swift.tspl\/UTF8~dark@2x.png"}],"type":"image","identifier":"UTF8","alt":null},"UnicodeScalar":{"variants":[{"traits":["2x","light"],"url":"\/images\/org.swift.tspl\/UnicodeScalar@2x.png"},{"url":"\/images\/org.swift.tspl\/UnicodeScalar~dark@2x.png","traits":["2x","dark"]}],"type":"image","identifier":"UnicodeScalar","alt":null},"stringSubstring":{"variants":[{"traits":["2x","light"],"url":"\/images\/org.swift.tspl\/stringSubstring@2x.png"},{"traits":["2x","dark"],"url":"\/images\/org.swift.tspl\/stringSubstring~dark@2x.png"}],"type":"image","identifier":"stringSubstring","alt":null},"UTF16":{"variants":[{"traits":["2x","light"],"url":"\/images\/org.swift.tspl\/UTF16@2x.png"},{"url":"\/images\/org.swift.tspl\/UTF16~dark@2x.png","traits":["2x","dark"]}],"type":"image","identifier":"UTF16","alt":null},"https://developer.apple.com/documentation/swift/stringprotocol":{"titleInlineContent":[{"code":"StringProtocol","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/stringprotocol","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/stringprotocol","title":"StringProtocol"}}}
||||||| parent of 2fa5d86d (yet one more fix attempt)
{"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"text":"Store and manipulate text.","type":"text"}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"string","type":"text"}]},{"type":"text","text":" is a series of characters,"},{"text":" ","type":"text"},{"type":"text","text":"such as "},{"code":"\"hello, world\"","type":"codeVoice"},{"type":"text","text":" or "},{"code":"\"albatross\"","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Swift strings are represented by the ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The contents of a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" can be accessed in various ways,"},{"text":" ","type":"text"},{"type":"text","text":"including as a collection of "},{"code":"Character","type":"codeVoice"},{"type":"text","text":" values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"String"},{"type":"text","text":" and "},{"code":"Character","type":"codeVoice"},{"text":" types provide","type":"text"},{"text":" ","type":"text"},{"text":"a fast, Unicode-compliant way to work with text in your code.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The syntax for string creation and manipulation is lightweight and readable,"},{"type":"text","text":" "},{"text":"with a string literal syntax that’s similar to C.","type":"text"},{"text":" ","type":"text"},{"text":"String concatenation is as simple as","type":"text"},{"type":"text","text":" "},{"text":"combining two strings with the ","type":"text"},{"type":"codeVoice","code":"+"},{"type":"text","text":" operator,"},{"text":" ","type":"text"},{"type":"text","text":"and string mutability is managed by choosing between a constant or a variable,"},{"type":"text","text":" "},{"type":"text","text":"just like any other value in Swift."},{"text":" ","type":"text"},{"text":"You can also use strings to insert","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"constants, variables, literals, and expressions into longer strings,"},{"text":" ","type":"text"},{"text":"in a process known as string interpolation.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This makes it easy to create custom string values for display, storage, and printing."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Despite this simplicity of syntax,"},{"type":"text","text":" "},{"type":"text","text":"Swift’s "},{"code":"String","type":"codeVoice"},{"type":"text","text":" type is a fast, modern string implementation."},{"text":" ","type":"text"},{"type":"text","text":"Every string is composed of encoding-independent Unicode characters,"},{"type":"text","text":" "},{"text":"and provides support for accessing those characters in various Unicode representations.","type":"text"}]},{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"String"},{"text":" type is bridged with Foundation’s ","type":"text"},{"type":"codeVoice","code":"NSString"},{"text":" class.","type":"text"},{"text":" ","type":"text"},{"text":"Foundation also extends ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" to expose methods defined by "},{"code":"NSString","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This means, if you import Foundation,"},{"type":"text","text":" "},{"type":"text","text":"you can access those "},{"type":"codeVoice","code":"NSString"},{"text":" methods on ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" without casting.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information about using "},{"type":"codeVoice","code":"String"},{"type":"text","text":" with Foundation and Cocoa,"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/string#2919514","isActive":true,"type":"reference"},{"text":".","type":"text"}]}],"style":"note","type":"aside"},{"level":2,"text":"Literales de cadena","type":"heading","anchor":"Literales-de-cadena"},{"inlineContent":[{"type":"text","text":"You can include predefined "},{"code":"String","type":"codeVoice"},{"type":"text","text":" values within your code as "},{"type":"emphasis","inlineContent":[{"text":"string literals","type":"text"}]},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A string literal is a sequence of characters"},{"type":"text","text":" "},{"type":"text","text":"surrounded by double quotation marks ("},{"type":"codeVoice","code":"\""},{"type":"text","text":")."}],"type":"paragraph"},{"inlineContent":[{"text":"Use a string literal as an initial value for a constant or variable:","type":"text"}],"type":"paragraph"},{"code":["let someString = \"Some string literal value\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Note that Swift infers a type of "},{"code":"String","type":"codeVoice"},{"text":" for the ","type":"text"},{"code":"someString","type":"codeVoice"},{"type":"text","text":" constant"},{"text":" ","type":"text"},{"type":"text","text":"because it’s initialized with a string literal value."}],"type":"paragraph"},{"anchor":"Literales-de-cadena-de-varias-l%C3%ADneas","level":3,"type":"heading","text":"Literales de cadena de varias líneas"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need a string that spans several lines,"},{"text":" ","type":"text"},{"type":"text","text":"use a multiline string literal —"},{"text":" ","type":"text"},{"type":"text","text":"a sequence of characters"},{"type":"text","text":" "},{"type":"text","text":"surrounded by three double quotation marks:"}]},{"type":"codeListing","syntax":"swift","code":["let quotation = \"\"\"","The White Rabbit put on his spectacles.  \"Where shall I begin,","please your Majesty?\" he asked.","","\"Begin at the beginning,\" the King said gravely, \"and go on","till you come to the end; then stop.\"","\"\"\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A multiline string literal includes all of the lines between"},{"text":" ","type":"text"},{"type":"text","text":"its opening and closing quotation marks."},{"type":"text","text":" "},{"text":"The string begins on the first line after the opening quotation marks (","type":"text"},{"type":"codeVoice","code":"\"\"\""},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"and ends on the line before the closing quotation marks,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which means that neither of the strings below"},{"type":"text","text":" "},{"type":"text","text":"start or end with a line break:"}]},{"syntax":"swift","type":"codeListing","code":["let singleLineString = \"These are the same.\"","let multilineString = \"\"\"","These are the same.","\"\"\""]},{"inlineContent":[{"text":"When your source code includes a line break","type":"text"},{"type":"text","text":" "},{"type":"text","text":"inside of a multiline string literal,"},{"text":" ","type":"text"},{"text":"that line break also appears in the string’s value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If you want to use line breaks"},{"type":"text","text":" "},{"text":"to make your source code easier to read,","type":"text"},{"text":" ","type":"text"},{"text":"but you don’t want the line breaks to be part of the string’s value,","type":"text"},{"type":"text","text":" "},{"text":"write a backslash (","type":"text"},{"code":"\\","type":"codeVoice"},{"text":") at the end of those lines:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let softWrappedQuotation = \"\"\"","The White Rabbit put on his spectacles.  \"Where shall I begin, \\","please your Majesty?\" he asked.","","\"Begin at the beginning,\" the King said gravely, \"and go on \\","till you come to the end; then stop.\"","\"\"\""]},{"type":"paragraph","inlineContent":[{"text":"To make a multiline string literal that begins or ends with a line feed,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"write a blank line as the first or last line."},{"type":"text","text":" "},{"text":"For example:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let lineBreaks = \"\"\"","","This string starts with a line break.","It also ends with a line break.","","\"\"\""]},{"type":"paragraph","inlineContent":[{"text":"A multiline string can be indented to match the surrounding code.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The whitespace before the closing quotation marks ("},{"code":"\"\"\"","type":"codeVoice"},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"tells Swift what whitespace to ignore before all of the other lines."},{"text":" ","type":"text"},{"type":"text","text":"However, if you write whitespace at the beginning of a line"},{"type":"text","text":" "},{"type":"text","text":"in addition to what’s before the closing quotation marks,"},{"type":"text","text":" "},{"text":"that whitespace ","type":"text"},{"inlineContent":[{"type":"text","text":"is"}],"type":"emphasis"},{"type":"text","text":" included."}]},{"type":"paragraph","inlineContent":[{"identifier":"multilineStringWhitespace","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"type":"text","text":" "},{"text":"even though the entire multiline string literal is indented,","type":"text"},{"type":"text","text":" "},{"text":"the first and last lines in the string don’t begin with any whitespace.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The middle line has more indentation than the closing quotation marks,"},{"type":"text","text":" "},{"type":"text","text":"so it starts with that extra four-space indentation."}]},{"level":3,"text":"Caracteres especiales en literales de cadena","type":"heading","anchor":"Caracteres-especiales-en-literales-de-cadena"},{"inlineContent":[{"type":"text","text":"String literals can include the following special characters:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The escaped special characters ","type":"text"},{"code":"\\0","type":"codeVoice"},{"type":"text","text":" (null character), "},{"code":"\\\\","type":"codeVoice"},{"text":" (backslash),","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"\\t"},{"type":"text","text":" (horizontal tab), "},{"code":"\\n","type":"codeVoice"},{"text":" (line feed), ","type":"text"},{"code":"\\r","type":"codeVoice"},{"type":"text","text":" (carriage return),"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\\\""},{"text":" (double quotation mark) and ","type":"text"},{"code":"\\'","type":"codeVoice"},{"type":"text","text":" (single quotation mark)"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"An arbitrary Unicode scalar value, written as "},{"type":"codeVoice","code":"\\u{"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"codeVoice","code":"}"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"where "},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a 1–8 digit hexadecimal number"},{"text":" ","type":"text"},{"text":"(Unicode is discussed in ","type":"text"},{"type":"text","text":"doc:CadenasYCaracteres#Unicode"},{"type":"text","text":" below)"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"The code below shows four examples of these special characters."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"wiseWords"},{"text":" constant contains two escaped double quotation marks.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"dollarSign","type":"codeVoice"},{"text":", ","type":"text"},{"code":"blackHeart","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"sparklingHeart"},{"type":"text","text":" constants"},{"text":" ","type":"text"},{"type":"text","text":"demonstrate the Unicode scalar format:"}],"type":"paragraph"},{"syntax":"swift","code":["let wiseWords = \"\\\"Imagination is more important than knowledge\\\" - Einstein\"","\/\/ \"Imagination is more important than knowledge\" - Einstein","let dollarSign = \"\\u{24}\"        \/\/ $,  Unicode scalar U+0024","let blackHeart = \"\\u{2665}\"      \/\/ ♥,  Unicode scalar U+2665","let sparklingHeart = \"\\u{1F496}\" \/\/ 💖, Unicode scalar U+1F496"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because multiline string literals use three double quotation marks instead of just one,"},{"type":"text","text":" "},{"text":"you can include a double quotation mark (","type":"text"},{"type":"codeVoice","code":"\""},{"type":"text","text":") inside of a multiline string literal"},{"type":"text","text":" "},{"type":"text","text":"without escaping it."},{"text":" ","type":"text"},{"type":"text","text":"To include the text "},{"type":"codeVoice","code":"\"\"\""},{"text":" in a multiline string,","type":"text"},{"text":" ","type":"text"},{"text":"escape at least one of the quotation marks.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"syntax":"swift","type":"codeListing","code":["let threeDoubleQuotationMarks = \"\"\"","Escaping the first quotation mark \\\"\"\"","Escaping all three quotation marks \\\"\\\"\\\"","\"\"\""]},{"type":"heading","text":"Delimitadores de cadena extendidos","anchor":"Delimitadores-de-cadena-extendidos","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can place a string literal within "},{"type":"emphasis","inlineContent":[{"type":"text","text":"extended delimiters"}]},{"text":" ","type":"text"},{"type":"text","text":"to include special characters in a string"},{"type":"text","text":" "},{"text":"without invoking their effect.","type":"text"},{"text":" ","type":"text"},{"text":"You place your string within quotation marks (","type":"text"},{"type":"codeVoice","code":"\""},{"text":")","type":"text"},{"type":"text","text":" "},{"text":"and surround that with number signs (","type":"text"},{"code":"#","type":"codeVoice"},{"text":").","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, printing the string literal "},{"code":"#\"Line 1\\nLine 2\"#","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"prints the line feed escape sequence ("},{"type":"codeVoice","code":"\\n"},{"text":")","type":"text"},{"type":"text","text":" "},{"text":"rather than printing the string across two lines.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If you need the special effects of a character in a string literal,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"match the number of number signs within the string"},{"type":"text","text":" "},{"text":"following the escape character (","type":"text"},{"type":"codeVoice","code":"\\"},{"type":"text","text":")."},{"text":" ","type":"text"},{"text":"For example, if your string is ","type":"text"},{"type":"codeVoice","code":"#\"Line 1\\nLine 2\"#"},{"type":"text","text":" "},{"text":"and you want to break the line,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can use "},{"code":"#\"Line 1\\#nLine 2\"#","type":"codeVoice"},{"type":"text","text":" instead."},{"text":" ","type":"text"},{"type":"text","text":"Similarly, "},{"type":"codeVoice","code":"###\"Line1\\###nLine2\"###"},{"text":" also breaks the line.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"String literals created using extended delimiters can also be multiline string literals.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You can use extended delimiters to include the text "},{"type":"codeVoice","code":"\"\"\""},{"type":"text","text":" in a multiline string,"},{"type":"text","text":" "},{"text":"overriding the default behavior that ends the literal. For example:","type":"text"}]},{"code":["let threeMoreDoubleQuotationMarks = #\"\"\"","Here are three more double quotes: \"\"\"","\"\"\"#"],"syntax":"swift","type":"codeListing"},{"level":2,"type":"heading","text":"Inicialización de una cadena vacía","anchor":"Inicializaci%C3%B3n-de-una-cadena-vac%C3%ADa"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To create an empty "},{"code":"String","type":"codeVoice"},{"text":" value as the starting point","type":"text"},{"text":" ","type":"text"},{"text":"for building a longer string,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"either assign an empty string literal to a variable"},{"text":" ","type":"text"},{"text":"or initialize a new ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" instance with initializer syntax:","type":"text"}]},{"code":["var emptyString = \"\"               \/\/ empty string literal","var anotherEmptyString = String()  \/\/ initializer syntax","\/\/ these two strings are both empty, and are equivalent to each other"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Find out whether a "},{"type":"codeVoice","code":"String"},{"text":" value is empty","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by checking its Boolean "},{"type":"codeVoice","code":"isEmpty"},{"type":"text","text":" property:"}],"type":"paragraph"},{"code":["if emptyString.isEmpty {","    print(\"Nothing to see here\")","}","\/\/ Prints \"Nothing to see here\""],"type":"codeListing","syntax":"swift"},{"type":"heading","anchor":"Mutabilidad-de-una-cadena","level":2,"text":"Mutabilidad de una cadena"},{"type":"paragraph","inlineContent":[{"text":"You indicate whether a particular ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" can be modified (or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"mutated"}]},{"text":")","type":"text"},{"type":"text","text":" "},{"text":"by assigning it to a variable (in which case it can be modified),","type":"text"},{"type":"text","text":" "},{"text":"or to a constant (in which case it can’t be modified):","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var variableString = \"Horse\"","variableString += \" and carriage\"","\/\/ variableString is now \"Horse and carriage\"","","let constantString = \"Highlander\"","constantString += \" and another Highlander\"","\/\/ this reports a compile-time error - a constant string cannot be modified"]},{"name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"This approach is different from string mutation in Objective-C and Cocoa,","type":"text"},{"type":"text","text":" "},{"text":"where you choose between two classes (","type":"text"},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" and "},{"type":"codeVoice","code":"NSMutableString"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"to indicate whether a string can be mutated.","type":"text"}]}],"type":"aside"},{"anchor":"Las-cadenas-son-tipos-de-valor","level":2,"text":"Las cadenas son tipos de valor","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Swift’s ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" type is a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"value type","type":"text"}]},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If you create a new "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value,"},{"text":" ","type":"text"},{"text":"that ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" value is "},{"type":"emphasis","inlineContent":[{"text":"copied","type":"text"}]},{"text":" when it’s passed to a function or method,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or when it’s assigned to a constant or variable."},{"text":" ","type":"text"},{"type":"text","text":"In each case, a new copy of the existing "},{"code":"String","type":"codeVoice"},{"text":" value is created,","type":"text"},{"type":"text","text":" "},{"text":"and the new copy is passed or assigned, not the original version.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Value types are described in "},{"type":"text","text":"doc:ClasesYEstructuras#Las-estructuras-y-las-enumeraciones-son-tipos-de-valor"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s copy-by-default "},{"type":"codeVoice","code":"String"},{"type":"text","text":" behavior ensures that"},{"text":" ","type":"text"},{"text":"when a function or method passes you a ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" value,"},{"text":" ","type":"text"},{"type":"text","text":"it’s clear that you own that exact "},{"type":"codeVoice","code":"String"},{"text":" value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"regardless of where it came from."},{"type":"text","text":" "},{"type":"text","text":"You can be confident that the string you are passed won’t be modified"},{"type":"text","text":" "},{"type":"text","text":"unless you modify it yourself."}]},{"inlineContent":[{"type":"text","text":"Behind the scenes, Swift’s compiler optimizes string usage"},{"type":"text","text":" "},{"type":"text","text":"so that actual copying takes place only when absolutely necessary."},{"text":" ","type":"text"},{"type":"text","text":"This means you always get great performance"},{"type":"text","text":" "},{"text":"when working with strings as value types.","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","anchor":"Trabajando-con-caracteres","text":"Trabajando con caracteres"},{"type":"paragraph","inlineContent":[{"text":"You can access the individual ","type":"text"},{"type":"codeVoice","code":"Character"},{"text":" values for a ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" "},{"text":"by iterating over the string with a ","type":"text"},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"code":"in","type":"codeVoice"},{"text":" loop:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["for character in \"Dog!🐶\" {","    print(character)","}","\/\/ D","\/\/ o","\/\/ g","\/\/ !","\/\/ 🐶"]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"code":"in","type":"codeVoice"},{"type":"text","text":" loop is described in "},{"text":"doc:FlujoDeControl#Ciclos-for-in","type":"text"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Alternatively, you can create a stand-alone ","type":"text"},{"type":"codeVoice","code":"Character"},{"type":"text","text":" constant or variable"},{"type":"text","text":" "},{"text":"from a single-character string literal by providing a ","type":"text"},{"type":"codeVoice","code":"Character"},{"type":"text","text":" type annotation:"}]},{"syntax":"swift","type":"codeListing","code":["let exclamationMark: Character = \"!\""]},{"type":"paragraph","inlineContent":[{"code":"String","type":"codeVoice"},{"text":" values can be constructed by passing an array of ","type":"text"},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values"},{"type":"text","text":" "},{"type":"text","text":"as an argument to its initializer:"}]},{"type":"codeListing","syntax":"swift","code":["let catCharacters: [Character] = [\"C\", \"a\", \"t\", \"!\", \"🐱\"]","let catString = String(catCharacters)","print(catString)","\/\/ Prints \"Cat!🐱\""]},{"level":2,"anchor":"Concatenaci%C3%B3n-de-cadenas-y-caracteres","text":"Concatenación de cadenas y caracteres","type":"heading"},{"inlineContent":[{"type":"codeVoice","code":"String"},{"text":" values can be added together (or ","type":"text"},{"inlineContent":[{"type":"text","text":"concatenated"}],"type":"emphasis"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"with the addition operator ("},{"type":"codeVoice","code":"+"},{"text":") to create a new ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" value:","type":"text"}],"type":"paragraph"},{"code":["let string1 = \"hello\"","let string2 = \" there\"","var welcome = string1 + string2","\/\/ welcome now equals \"hello there\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also append a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value to an existing "},{"code":"String","type":"codeVoice"},{"type":"text","text":" variable"},{"type":"text","text":" "},{"type":"text","text":"with the addition assignment operator ("},{"type":"codeVoice","code":"+="},{"type":"text","text":"):"}]},{"syntax":"swift","code":["var instruction = \"look over\"","instruction += string2","\/\/ instruction now equals \"look over there\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can append a ","type":"text"},{"code":"Character","type":"codeVoice"},{"type":"text","text":" value to a "},{"type":"codeVoice","code":"String"},{"text":" variable","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with the "},{"code":"String","type":"codeVoice"},{"type":"text","text":" type’s "},{"code":"append()","type":"codeVoice"},{"type":"text","text":" method:"}]},{"syntax":"swift","type":"codeListing","code":["let exclamationMark: Character = \"!\"","welcome.append(exclamationMark)","\/\/ welcome now equals \"hello there!\""]},{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"You can’t append a "},{"type":"codeVoice","code":"String"},{"text":" or ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":" to an existing ","type":"text"},{"type":"codeVoice","code":"Character"},{"type":"text","text":" variable,"},{"text":" ","type":"text"},{"type":"text","text":"because a "},{"type":"codeVoice","code":"Character"},{"text":" value must contain a single character only.","type":"text"}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you’re using multiline string literals"},{"text":" ","type":"text"},{"type":"text","text":"to build up the lines of a longer string,"},{"text":" ","type":"text"},{"type":"text","text":"you want every line in the string to end with a line break,"},{"type":"text","text":" "},{"text":"including the last line.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"code":["let badStart = \"\"\"","    one","    two","    \"\"\"","let end = \"\"\"","    three","    \"\"\"","print(badStart + end)","\/\/ Prints two lines:","\/\/ one","\/\/ twothree","","let goodStart = \"\"\"","    one","    two","","    \"\"\"","print(goodStart + end)","\/\/ Prints three lines:","\/\/ one","\/\/ two","\/\/ three"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"In the code above,"},{"text":" ","type":"text"},{"type":"text","text":"concatenating "},{"type":"codeVoice","code":"badStart"},{"type":"text","text":" with "},{"type":"codeVoice","code":"end"},{"type":"text","text":" "},{"text":"produces a two-line string,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which isn’t the desired result."},{"text":" ","type":"text"},{"text":"Because the last line of ","type":"text"},{"code":"badStart","type":"codeVoice"},{"type":"text","text":" "},{"text":"doesn’t end with a line break,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that line gets combined with the first line of "},{"code":"end","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"In contrast,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"both lines of "},{"type":"codeVoice","code":"goodStart"},{"type":"text","text":" end with a line break,"},{"text":" ","type":"text"},{"text":"so when it’s combined with ","type":"text"},{"code":"end","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"the result has three lines,"},{"type":"text","text":" "},{"type":"text","text":"as expected."}],"type":"paragraph"},{"text":"Interpolación de cadenas","anchor":"Interpolaci%C3%B3n-de-cadenas","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"String interpolation"}]},{"text":" is a way to construct a new ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" value","type":"text"},{"text":" ","type":"text"},{"text":"from a mix of constants, variables, literals, and expressions","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by including their values inside a string literal."},{"type":"text","text":" "},{"type":"text","text":"You can use string interpolation"},{"type":"text","text":" "},{"text":"in both single-line and multiline string literals.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Each item that you insert into the string literal is wrapped in"},{"type":"text","text":" "},{"text":"a pair of parentheses, prefixed by a backslash (","type":"text"},{"type":"codeVoice","code":"\\"},{"type":"text","text":"):"}]},{"type":"codeListing","syntax":"swift","code":["let multiplier = 3","let message = \"\\(multiplier) times 2.5 is \\(Double(multiplier) * 2.5)\"","\/\/ message is \"3 times 2.5 is 7.5\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"text":" ","type":"text"},{"text":"the value of ","type":"text"},{"code":"multiplier","type":"codeVoice"},{"type":"text","text":" is inserted into a string literal as "},{"code":"\\(multiplier)","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"This placeholder is replaced with the actual value of ","type":"text"},{"code":"multiplier","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"when the string interpolation is evaluated to create an actual string."}]},{"inlineContent":[{"text":"The value of ","type":"text"},{"type":"codeVoice","code":"multiplier"},{"type":"text","text":" is also part of a larger expression later in the string."},{"type":"text","text":" "},{"text":"This expression calculates the value of ","type":"text"},{"type":"codeVoice","code":"Double(multiplier) * 2.5"},{"type":"text","text":" "},{"text":"and inserts the result (","type":"text"},{"code":"7.5","type":"codeVoice"},{"type":"text","text":") into the string."},{"text":" ","type":"text"},{"text":"In this case, the expression is written as ","type":"text"},{"type":"codeVoice","code":"\\(Double(multiplier) * 2.5)"},{"text":" ","type":"text"},{"type":"text","text":"when it’s included inside the string literal."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can use extended string delimiters to create strings containing"},{"text":" ","type":"text"},{"type":"text","text":"characters that would otherwise be treated as a string interpolation."},{"type":"text","text":" "},{"type":"text","text":"For example:"}],"type":"paragraph"},{"type":"codeListing","code":["print(#\"Write an interpolated string in Swift using \\(multiplier).\"#)","\/\/ Prints \"Write an interpolated string in Swift using \\(multiplier).\""],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"To use string interpolation"},{"text":" ","type":"text"},{"type":"text","text":"inside a string that uses extended delimiters,"},{"type":"text","text":" "},{"text":"match the number of number signs after the backslash","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the number of number signs at the beginning and end of the string."},{"type":"text","text":" "},{"type":"text","text":"For example:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["print(#\"6 times 7 is \\#(6 * 7).\"#)","\/\/ Prints \"6 times 7 is 42.\""]},{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"text":"The expressions you write inside parentheses within an interpolated string","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can’t contain an unescaped backslash ("},{"type":"codeVoice","code":"\\"},{"type":"text","text":"), a carriage return, or a line feed."},{"text":" ","type":"text"},{"type":"text","text":"However, they can contain other string literals."}],"type":"paragraph"}]},{"text":"Unicode","level":2,"anchor":"Unicode","type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Unicode","type":"text"}],"type":"emphasis"},{"text":" is an international standard for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"encoding, representing, and processing text in different writing systems."},{"type":"text","text":" "},{"text":"It enables you to represent almost any character from any language in a standardized form,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and to read and write those characters to and from an external source"},{"text":" ","type":"text"},{"type":"text","text":"such as a text file or web page."},{"type":"text","text":" "},{"text":"Swift’s ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Character","type":"codeVoice"},{"type":"text","text":" types are fully Unicode-compliant,"},{"type":"text","text":" "},{"type":"text","text":"as described in this section."}]},{"type":"heading","anchor":"Valores-escalares-Unicode","text":"Valores escalares Unicode","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Behind the scenes,"},{"type":"text","text":" "},{"type":"text","text":"Swift’s native "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type is built from "},{"inlineContent":[{"type":"text","text":"Unicode scalar values"}],"type":"emphasis"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"A Unicode scalar value is a unique 21-bit number for a character or modifier,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"such as "},{"code":"U+0061","type":"codeVoice"},{"text":" for ","type":"text"},{"code":"LATIN SMALL LETTER A","type":"codeVoice"},{"type":"text","text":" ("},{"code":"\"a\"","type":"codeVoice"},{"type":"text","text":"),"},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"type":"codeVoice","code":"U+1F425"},{"text":" for ","type":"text"},{"code":"FRONT-FACING BABY CHICK","type":"codeVoice"},{"text":" (","type":"text"},{"type":"codeVoice","code":"\"🐥\""},{"text":").","type":"text"}]},{"inlineContent":[{"type":"text","text":"Note that not all 21-bit Unicode scalar values are assigned to a character —"},{"text":" ","type":"text"},{"text":"some scalars are reserved for future assignment or for use in UTF-16 encoding.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Scalar values that have been assigned to a character typically also have a name,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"LATIN SMALL LETTER A"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"FRONT-FACING BABY CHICK"},{"type":"text","text":" in the examples above."}],"type":"paragraph"},{"anchor":"Grupos-de-grafemas-extendidos","text":"Grupos de grafemas extendidos","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"Every instance of Swift’s "},{"code":"Character","type":"codeVoice"},{"text":" type represents","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a single "},{"type":"emphasis","inlineContent":[{"text":"extended grapheme cluster","type":"text"}]},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"An extended grapheme cluster is a sequence of one or more Unicode scalars"},{"type":"text","text":" "},{"text":"that (when combined) produce a single human-readable character.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example."},{"type":"text","text":" "},{"type":"text","text":"The letter "},{"code":"é","type":"codeVoice"},{"text":" can be represented as the single Unicode scalar ","type":"text"},{"type":"codeVoice","code":"é"},{"type":"text","text":" "},{"type":"text","text":"("},{"code":"LATIN SMALL LETTER E WITH ACUTE","type":"codeVoice"},{"type":"text","text":", or "},{"code":"U+00E9","type":"codeVoice"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"However, the same letter can also be represented as a "},{"inlineContent":[{"type":"text","text":"pair"}],"type":"emphasis"},{"text":" of scalars —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a standard letter "},{"type":"codeVoice","code":"e"},{"type":"text","text":" ("},{"type":"codeVoice","code":"LATIN SMALL LETTER E"},{"type":"text","text":", or "},{"type":"codeVoice","code":"U+0065"},{"type":"text","text":"),"},{"text":" ","type":"text"},{"text":"followed by the ","type":"text"},{"code":"COMBINING ACUTE ACCENT","type":"codeVoice"},{"text":" scalar (","type":"text"},{"code":"U+0301","type":"codeVoice"},{"text":").","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"COMBINING ACUTE ACCENT"},{"type":"text","text":" scalar is graphically applied to the scalar that precedes it,"},{"text":" ","type":"text"},{"type":"text","text":"turning an "},{"code":"e","type":"codeVoice"},{"text":" into an ","type":"text"},{"type":"codeVoice","code":"é"},{"text":" when it’s rendered by","type":"text"},{"text":" ","type":"text"},{"text":"a Unicode-aware text-rendering system.","type":"text"}]},{"inlineContent":[{"type":"text","text":"In both cases, the letter "},{"code":"é","type":"codeVoice"},{"text":" is represented as a single Swift ","type":"text"},{"type":"codeVoice","code":"Character"},{"text":" value","type":"text"},{"text":" ","type":"text"},{"text":"that represents an extended grapheme cluster.","type":"text"},{"text":" ","type":"text"},{"text":"In the first case, the cluster contains a single scalar;","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the second case, it’s a cluster of two scalars:"}],"type":"paragraph"},{"syntax":"swift","code":["let eAcute: Character = \"\\u{E9}\"                         \/\/ é","let combinedEAcute: Character = \"\\u{65}\\u{301}\"          \/\/ e followed by ́","\/\/ eAcute is é, combinedEAcute is é"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Extended grapheme clusters are a flexible way to represent","type":"text"},{"text":" ","type":"text"},{"text":"many complex script characters as a single ","type":"text"},{"code":"Character","type":"codeVoice"},{"type":"text","text":" value."},{"text":" ","type":"text"},{"type":"text","text":"For example, Hangul syllables from the Korean alphabet"},{"type":"text","text":" "},{"text":"can be represented as either a precomposed or decomposed sequence.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Both of these representations qualify as a single "},{"type":"codeVoice","code":"Character"},{"text":" value in Swift:","type":"text"}]},{"code":["let precomposed: Character = \"\\u{D55C}\"                  \/\/ 한","let decomposed: Character = \"\\u{1112}\\u{1161}\\u{11AB}\"   \/\/ ᄒ, ᅡ, ᆫ","\/\/ precomposed is 한, decomposed is 한"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Extended grapheme clusters enable"},{"type":"text","text":" "},{"text":"scalars for enclosing marks (such as ","type":"text"},{"type":"codeVoice","code":"COMBINING ENCLOSING CIRCLE"},{"text":", or ","type":"text"},{"code":"U+20DD","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to enclose other Unicode scalars as part of a single "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value:"}],"type":"paragraph"},{"code":["let enclosedEAcute: Character = \"\\u{E9}\\u{20DD}\"","\/\/ enclosedEAcute is é⃝"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Unicode scalars for regional indicator symbols"},{"type":"text","text":" "},{"type":"text","text":"can be combined in pairs to make a single "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"text":"such as this combination of ","type":"text"},{"code":"REGIONAL INDICATOR SYMBOL LETTER U","type":"codeVoice"},{"text":" (","type":"text"},{"code":"U+1F1FA","type":"codeVoice"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"codeVoice","code":"REGIONAL INDICATOR SYMBOL LETTER S"},{"text":" (","type":"text"},{"code":"U+1F1F8","type":"codeVoice"},{"text":"):","type":"text"}],"type":"paragraph"},{"code":["let regionalIndicatorForUS: Character = \"\\u{1F1FA}\\u{1F1F8}\"","\/\/ regionalIndicatorForUS is 🇺🇸"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"Conteo de caracteres","type":"heading","anchor":"Conteo-de-caracteres"},{"inlineContent":[{"type":"text","text":"To retrieve a count of the "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values in a string,"},{"text":" ","type":"text"},{"type":"text","text":"use the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property of the string:"}],"type":"paragraph"},{"syntax":"swift","code":["let unusualMenagerie = \"Koala 🐨, Snail 🐌, Penguin 🐧, Dromedary 🐪\"","print(\"unusualMenagerie has \\(unusualMenagerie.count) characters\")","\/\/ Prints \"unusualMenagerie has 40 characters\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Note that Swift’s use of extended grapheme clusters for ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":" values","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"means that string concatenation and modification may not always affect"},{"text":" ","type":"text"},{"text":"a string’s character count.","type":"text"}]},{"inlineContent":[{"text":"For example, if you initialize a new string with the four-character word ","type":"text"},{"type":"codeVoice","code":"cafe"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and then append a "},{"type":"codeVoice","code":"COMBINING ACUTE ACCENT"},{"type":"text","text":" ("},{"code":"U+0301","type":"codeVoice"},{"type":"text","text":") to the end of the string,"},{"text":" ","type":"text"},{"type":"text","text":"the resulting string will still have a character count of "},{"type":"codeVoice","code":"4"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"with a fourth character of ","type":"text"},{"type":"codeVoice","code":"é"},{"type":"text","text":", not "},{"code":"e","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var word = \"cafe\"","print(\"the number of characters in \\(word) is \\(word.count)\")","\/\/ Prints \"the number of characters in cafe is 4\"","","word += \"\\u{301}\"    \/\/ COMBINING ACUTE ACCENT, U+0301","","print(\"the number of characters in \\(word) is \\(word.count)\")","\/\/ Prints \"the number of characters in café is 4\""]},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Extended grapheme clusters can be composed of multiple Unicode scalars."},{"type":"text","text":" "},{"type":"text","text":"This means that different characters—"},{"text":" ","type":"text"},{"type":"text","text":"and different representations of the same character—"},{"text":" ","type":"text"},{"type":"text","text":"can require different amounts of memory to store."},{"text":" ","type":"text"},{"type":"text","text":"Because of this, characters in Swift don’t each take up"},{"type":"text","text":" "},{"text":"the same amount of memory within a string’s representation.","type":"text"},{"type":"text","text":" "},{"text":"As a result, the number of characters in a string can’t be calculated","type":"text"},{"type":"text","text":" "},{"type":"text","text":"without iterating through the string to determine"},{"type":"text","text":" "},{"type":"text","text":"its extended grapheme cluster boundaries."},{"type":"text","text":" "},{"type":"text","text":"If you are working with particularly long string values,"},{"type":"text","text":" "},{"type":"text","text":"be aware that the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property"},{"text":" ","type":"text"},{"type":"text","text":"must iterate over the Unicode scalars in the entire string"},{"text":" ","type":"text"},{"type":"text","text":"in order to determine the characters for that string."}]},{"inlineContent":[{"type":"text","text":"The count of the characters returned by the "},{"type":"codeVoice","code":"count"},{"text":" property","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"isn’t always the same as the "},{"type":"codeVoice","code":"length"},{"type":"text","text":" property of"},{"text":" ","type":"text"},{"type":"text","text":"an "},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" that contains the same characters."},{"type":"text","text":" "},{"text":"The length of an ","type":"text"},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" is based on"},{"type":"text","text":" "},{"text":"the number of 16-bit code units within the string’s UTF-16 representation","type":"text"},{"text":" ","type":"text"},{"text":"and not the number of Unicode extended grapheme clusters within the string.","type":"text"}],"type":"paragraph"}]},{"type":"heading","level":2,"anchor":"Acceso-y-modificaci%C3%B3n-de-una-cadena","text":"Acceso y modificación de una cadena"},{"inlineContent":[{"type":"text","text":"You access and modify a string through its methods and properties,"},{"text":" ","type":"text"},{"text":"or by using subscript syntax.","type":"text"}],"type":"paragraph"},{"level":3,"text":"Índices de una cadena","type":"heading","anchor":"%C3%8Dndices-de-una-cadena"},{"inlineContent":[{"type":"text","text":"Each "},{"type":"codeVoice","code":"String"},{"text":" value has an associated ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"index type","type":"text"}]},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"String.Index","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which corresponds to the position of each ","type":"text"},{"type":"codeVoice","code":"Character"},{"type":"text","text":" in the string."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"As mentioned above,"},{"type":"text","text":" "},{"text":"different characters can require different amounts of memory to store,","type":"text"},{"type":"text","text":" "},{"text":"so in order to determine which ","type":"text"},{"type":"codeVoice","code":"Character"},{"text":" is at a particular position,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you must iterate over each Unicode scalar from the start or end of that "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"For this reason, Swift strings can’t be indexed by integer values."}],"type":"paragraph"},{"inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"startIndex"},{"type":"text","text":" property to access"},{"type":"text","text":" "},{"text":"the position of the first ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":" of a ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"endIndex","type":"codeVoice"},{"text":" property is the position after the last character in a ","type":"text"},{"code":"String","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"As a result,"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"endIndex","type":"codeVoice"},{"type":"text","text":" property isn’t a valid argument to a string’s subscript."},{"text":" ","type":"text"},{"type":"text","text":"If a "},{"type":"codeVoice","code":"String"},{"text":" is empty, ","type":"text"},{"type":"codeVoice","code":"startIndex"},{"type":"text","text":" and "},{"code":"endIndex","type":"codeVoice"},{"text":" are equal.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You access the indices before and after a given index","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"using the "},{"code":"index(before:)","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"index(after:)"},{"text":" methods of ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"To access an index farther away from the given index,"},{"text":" ","type":"text"},{"text":"you can use the ","type":"text"},{"code":"index(_:offsetBy:)","type":"codeVoice"},{"text":" method","type":"text"},{"text":" ","type":"text"},{"text":"instead of calling one of these methods multiple times.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use subscript syntax to access"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"Character"},{"text":" at a particular ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" index.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let greeting = \"Guten Tag!\"","greeting[greeting.startIndex]","\/\/ G","greeting[greeting.index(before: greeting.endIndex)]","\/\/ !","greeting[greeting.index(after: greeting.startIndex)]","\/\/ u","let index = greeting.index(greeting.startIndex, offsetBy: 7)","greeting[index]","\/\/ a"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Attempting to access an index outside of a string’s range"},{"text":" ","type":"text"},{"type":"text","text":"or a "},{"code":"Character","type":"codeVoice"},{"type":"text","text":" at an index outside of a string’s range"},{"type":"text","text":" "},{"text":"will trigger a runtime error.","type":"text"}]},{"syntax":"swift","code":["greeting[greeting.endIndex] \/\/ Error","greeting.index(after: greeting.endIndex) \/\/ Error"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"indices"},{"type":"text","text":" property to access all of the"},{"text":" ","type":"text"},{"type":"text","text":"indices of individual characters in a string."}]},{"code":["for index in greeting.indices {","    print(\"\\(greeting[index]) \", terminator: \"\")","}","\/\/ Prints \"G u t e n   T a g ! \""],"type":"codeListing","syntax":"swift"},{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"You can use the "},{"type":"codeVoice","code":"startIndex"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"endIndex"},{"text":" properties","type":"text"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"code":"index(before:)","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"index(after:)"},{"type":"text","text":", and "},{"type":"codeVoice","code":"index(_:offsetBy:)"},{"text":" methods","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"on any type that conforms to the "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":" protocol."},{"text":" ","type":"text"},{"type":"text","text":"This includes "},{"code":"String","type":"codeVoice"},{"text":", as shown here,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as well as collection types such as "},{"code":"Array","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Dictionary"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Set"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside","style":"note"},{"level":3,"text":"Insertar y remover","anchor":"Insertar-y-remover","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"To insert a single character into a string at a specified index,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"use the "},{"code":"insert(_:at:)","type":"codeVoice"},{"type":"text","text":" method,"},{"text":" ","type":"text"},{"type":"text","text":"and to insert the contents of another string at a specified index,"},{"type":"text","text":" "},{"text":"use the ","type":"text"},{"type":"codeVoice","code":"insert(contentsOf:at:)"},{"type":"text","text":" method."}]},{"type":"codeListing","code":["var welcome = \"hello\"","welcome.insert(\"!\", at: welcome.endIndex)","\/\/ welcome now equals \"hello!\"","","welcome.insert(contentsOf: \" there\", at: welcome.index(before: welcome.endIndex))","\/\/ welcome now equals \"hello there!\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To remove a single character from a string at a specified index,"},{"text":" ","type":"text"},{"type":"text","text":"use the "},{"code":"remove(at:)","type":"codeVoice"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"and to remove a substring at a specified range,"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"removeSubrange(_:)"},{"text":" method:","type":"text"}]},{"code":["welcome.remove(at: welcome.index(before: welcome.endIndex))","\/\/ welcome now equals \"hello there\"","","let range = welcome.index(welcome.endIndex, offsetBy: -6)..<welcome.endIndex","welcome.removeSubrange(range)","\/\/ welcome now equals \"hello\""],"type":"codeListing","syntax":"swift"},{"content":[{"type":"paragraph","inlineContent":[{"text":"You can use the ","type":"text"},{"type":"codeVoice","code":"insert(_:at:)"},{"type":"text","text":", "},{"type":"codeVoice","code":"insert(contentsOf:at:)"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"remove(at:)","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"removeSubrange(_:)"},{"type":"text","text":" methods"},{"text":" ","type":"text"},{"type":"text","text":"on any type that conforms to the "},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"type":"text","text":" protocol."},{"text":" ","type":"text"},{"type":"text","text":"This includes "},{"code":"String","type":"codeVoice"},{"type":"text","text":", as shown here,"},{"text":" ","type":"text"},{"text":"as well as collection types such as ","type":"text"},{"type":"codeVoice","code":"Array"},{"text":", ","type":"text"},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Set","type":"codeVoice"},{"type":"text","text":"."}]}],"type":"aside","style":"note","name":"Note"},{"anchor":"Subcadenas","level":2,"text":"Subcadenas","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you get a substring from a string —"},{"type":"text","text":" "},{"text":"for example, using a subscript or a method like ","type":"text"},{"type":"codeVoice","code":"prefix(_:)"},{"text":" —","type":"text"},{"text":" ","type":"text"},{"text":"the result is an instance","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/substring","type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"not another string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Substrings in Swift have most of the same methods as strings,"},{"type":"text","text":" "},{"type":"text","text":"which means you can work with substrings"},{"type":"text","text":" "},{"text":"the same way you work with strings.","type":"text"},{"text":" ","type":"text"},{"text":"However, unlike strings,","type":"text"},{"text":" ","type":"text"},{"text":"you use substrings for only a short amount of time","type":"text"},{"type":"text","text":" "},{"text":"while performing actions on a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When you’re ready to store the result for a longer time,"},{"type":"text","text":" "},{"text":"you convert the substring to an instance of ","type":"text"},{"type":"codeVoice","code":"String"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"For example:","type":"text"}]},{"code":["let greeting = \"Hello, world!\"","let index = greeting.firstIndex(of: \",\") ?? greeting.endIndex","let beginning = greeting[..<index]","\/\/ beginning is \"Hello\"","","\/\/ Convert the result to a String for long-term storage.","let newString = String(beginning)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like strings, each substring has a region of memory"},{"text":" ","type":"text"},{"text":"where the characters that make up the substring are stored.","type":"text"},{"text":" ","type":"text"},{"text":"The difference between strings and substrings","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is that, as a performance optimization,"},{"text":" ","type":"text"},{"type":"text","text":"a substring can reuse part of the memory"},{"text":" ","type":"text"},{"type":"text","text":"that’s used to store the original string,"},{"text":" ","type":"text"},{"text":"or part of the memory that’s used to store another substring.","type":"text"},{"type":"text","text":" "},{"text":"(Strings have a similar optimization,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but if two strings share memory, they’re equal.)"},{"text":" ","type":"text"},{"text":"This performance optimization means","type":"text"},{"type":"text","text":" "},{"text":"you don’t have to pay the performance cost of copying memory","type":"text"},{"type":"text","text":" "},{"type":"text","text":"until you modify either the string or substring."},{"type":"text","text":" "},{"type":"text","text":"As mentioned above,"},{"text":" ","type":"text"},{"text":"substrings aren’t suitable for long-term storage —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because they reuse the storage of the original string,"},{"type":"text","text":" "},{"text":"the entire original string must be kept in memory","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as long as any of its substrings are being used."}]},{"type":"paragraph","inlineContent":[{"text":"In the example above,","type":"text"},{"text":" ","type":"text"},{"code":"greeting","type":"codeVoice"},{"type":"text","text":" is a string,"},{"type":"text","text":" "},{"text":"which means it has a region of memory","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"where the characters that make up the string are stored."},{"type":"text","text":" "},{"type":"text","text":"Because"},{"text":" ","type":"text"},{"code":"beginning","type":"codeVoice"},{"type":"text","text":" is a substring of "},{"type":"codeVoice","code":"greeting"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"it reuses the memory that "},{"type":"codeVoice","code":"greeting"},{"text":" uses.","type":"text"},{"type":"text","text":" "},{"text":"In contrast,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"newString"},{"text":" is a string —","type":"text"},{"type":"text","text":" "},{"text":"when it’s created from the substring,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it has its own storage."},{"text":" ","type":"text"},{"type":"text","text":"The figure below shows these relationships:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"stringSubstring"}]},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"Both ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Substring"},{"type":"text","text":" conform to the"},{"text":" ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/stringprotocol","isActive":true,"type":"reference"},{"type":"text","text":" protocol,"},{"type":"text","text":" "},{"type":"text","text":"which means it’s often convenient for string-manipulation functions"},{"type":"text","text":" "},{"type":"text","text":"to accept a "},{"code":"StringProtocol","type":"codeVoice"},{"type":"text","text":" value."},{"text":" ","type":"text"},{"text":"You can call such functions with either a ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" or "},{"code":"Substring","type":"codeVoice"},{"text":" value.","type":"text"}]}]},{"level":2,"type":"heading","text":"Comparación de cadenas","anchor":"Comparaci%C3%B3n-de-cadenas"},{"type":"paragraph","inlineContent":[{"text":"Swift provides three ways to compare textual values:","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"string and character equality, prefix equality, and suffix equality."}]},{"type":"heading","level":3,"anchor":"Igualdad-de-cadenas-y-caracteres","text":"Igualdad de cadenas y caracteres"},{"type":"paragraph","inlineContent":[{"text":"String and character equality is checked with the “equal to” operator (","type":"text"},{"type":"codeVoice","code":"=="},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"and the “not equal to” operator (","type":"text"},{"type":"codeVoice","code":"!="},{"text":"),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"text","text":"doc:OperadoresBasicos#Operadores-de-comparación"},{"type":"text","text":":"}]},{"type":"codeListing","code":["let quotation = \"We're a lot alike, you and I.\"","let sameQuotation = \"We're a lot alike, you and I.\"","if quotation == sameQuotation {","    print(\"These two strings are considered equal\")","}","\/\/ Prints \"These two strings are considered equal\""],"syntax":"swift"},{"inlineContent":[{"text":"Two ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" values (or two "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values) are considered equal if"},{"text":" ","type":"text"},{"type":"text","text":"their extended grapheme clusters are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"canonically equivalent"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Extended grapheme clusters are canonically equivalent if they have"},{"type":"text","text":" "},{"text":"the same linguistic meaning and appearance,","type":"text"},{"type":"text","text":" "},{"text":"even if they’re composed from different Unicode scalars behind the scenes.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, "},{"type":"codeVoice","code":"LATIN SMALL LETTER E WITH ACUTE"},{"text":" (","type":"text"},{"type":"codeVoice","code":"U+00E9"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"is canonically equivalent to ","type":"text"},{"type":"codeVoice","code":"LATIN SMALL LETTER E"},{"type":"text","text":" ("},{"code":"U+0065","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"followed by "},{"type":"codeVoice","code":"COMBINING ACUTE ACCENT"},{"text":" (","type":"text"},{"type":"codeVoice","code":"U+0301"},{"type":"text","text":")."},{"text":" ","type":"text"},{"text":"Both of these extended grapheme clusters are valid ways to represent the character ","type":"text"},{"type":"codeVoice","code":"é"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and so they’re considered to be canonically equivalent:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ \"Voulez-vous un café?\" using LATIN SMALL LETTER E WITH ACUTE","let eAcuteQuestion = \"Voulez-vous un caf\\u{E9}?\"","","\/\/ \"Voulez-vous un café?\" using LATIN SMALL LETTER E and COMBINING ACUTE ACCENT","let combinedEAcuteQuestion = \"Voulez-vous un caf\\u{65}\\u{301}?\"","","if eAcuteQuestion == combinedEAcuteQuestion {","    print(\"These two strings are considered equal\")","}","\/\/ Prints \"These two strings are considered equal\""]},{"type":"paragraph","inlineContent":[{"text":"Conversely, ","type":"text"},{"code":"LATIN CAPITAL LETTER A","type":"codeVoice"},{"text":" (","type":"text"},{"type":"codeVoice","code":"U+0041"},{"text":", or ","type":"text"},{"code":"\"A\"","type":"codeVoice"},{"type":"text","text":"),"},{"type":"text","text":" "},{"text":"as used in English, is ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" equivalent to"},{"type":"text","text":" "},{"type":"codeVoice","code":"CYRILLIC CAPITAL LETTER A"},{"type":"text","text":" ("},{"code":"U+0410","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"\"А\"","type":"codeVoice"},{"text":"),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as used in Russian."},{"text":" ","type":"text"},{"text":"The characters are visually similar,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but don’t have the same linguistic meaning:"}]},{"code":["let latinCapitalLetterA: Character = \"\\u{41}\"","","let cyrillicCapitalLetterA: Character = \"\\u{0410}\"","","if latinCapitalLetterA != cyrillicCapitalLetterA {","    print(\"These two characters aren't equivalent.\")","}","\/\/ Prints \"These two characters aren't equivalent.\""],"syntax":"swift","type":"codeListing"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"String and character comparisons in Swift aren’t locale-sensitive.","type":"text"}]}],"name":"Note","type":"aside"},{"text":"Igualdad de prefijo y sufijo","type":"heading","anchor":"Igualdad-de-prefijo-y-sufijo","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"To check whether a string has a particular string prefix or suffix,"},{"type":"text","text":" "},{"type":"text","text":"call the string’s "},{"type":"codeVoice","code":"hasPrefix(_:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"hasSuffix(_:)"},{"type":"text","text":" methods,"},{"text":" ","type":"text"},{"type":"text","text":"both of which take a single argument of type "},{"code":"String","type":"codeVoice"},{"type":"text","text":" and return a Boolean value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The examples below consider an array of strings representing"},{"text":" ","type":"text"},{"text":"the scene locations from the first two acts of Shakespeare’s ","type":"text"},{"inlineContent":[{"text":"Romeo and Juliet","type":"text"}],"type":"emphasis"},{"text":":","type":"text"}]},{"code":["let romeoAndJuliet = [","    \"Act 1 Scene 1: Verona, A public place\",","    \"Act 1 Scene 2: Capulet's mansion\",","    \"Act 1 Scene 3: A room in Capulet's mansion\",","    \"Act 1 Scene 4: A street outside Capulet's mansion\",","    \"Act 1 Scene 5: The Great Hall in Capulet's mansion\",","    \"Act 2 Scene 1: Outside Capulet's mansion\",","    \"Act 2 Scene 2: Capulet's orchard\",","    \"Act 2 Scene 3: Outside Friar Lawrence's cell\",","    \"Act 2 Scene 4: A street in Verona\",","    \"Act 2 Scene 5: Capulet's mansion\",","    \"Act 2 Scene 6: Friar Lawrence's cell\"","]"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"You can use the ","type":"text"},{"type":"codeVoice","code":"hasPrefix(_:)"},{"type":"text","text":" method with the "},{"type":"codeVoice","code":"romeoAndJuliet"},{"text":" array","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to count the number of scenes in Act 1 of the play:"}]},{"code":["var act1SceneCount = 0","for scene in romeoAndJuliet {","    if scene.hasPrefix(\"Act 1 \") {","        act1SceneCount += 1","    }","}","print(\"There are \\(act1SceneCount) scenes in Act 1\")","\/\/ Prints \"There are 5 scenes in Act 1\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Similarly, use the ","type":"text"},{"type":"codeVoice","code":"hasSuffix(_:)"},{"type":"text","text":" method to count the number of scenes"},{"text":" ","type":"text"},{"type":"text","text":"that take place in or around Capulet’s mansion and Friar Lawrence’s cell:"}]},{"syntax":"swift","code":["var mansionCount = 0","var cellCount = 0","for scene in romeoAndJuliet {","    if scene.hasSuffix(\"Capulet's mansion\") {","        mansionCount += 1","    } else if scene.hasSuffix(\"Friar Lawrence's cell\") {","        cellCount += 1","    }","}","print(\"\\(mansionCount) mansion scenes; \\(cellCount) cell scenes\")","\/\/ Prints \"6 mansion scenes; 2 cell scenes\""],"type":"codeListing"},{"name":"Note","content":[{"inlineContent":[{"text":"The ","type":"text"},{"code":"hasPrefix(_:)","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"hasSuffix(_:)","type":"codeVoice"},{"text":" methods","type":"text"},{"type":"text","text":" "},{"type":"text","text":"perform a character-by-character canonical equivalence comparison between"},{"type":"text","text":" "},{"type":"text","text":"the extended grapheme clusters in each string,"},{"type":"text","text":" "},{"text":"as described in ","type":"text"},{"type":"text","text":"doc:CadenasYCaracteres#Igualdad-de-cadenas-y-caracteres"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"},{"level":2,"text":"Representación Unicode de cadenas","anchor":"Representaci%C3%B3n-Unicode-de-cadenas","type":"heading"},{"inlineContent":[{"type":"text","text":"When a Unicode string is written to a text file or some other storage,"},{"text":" ","type":"text"},{"text":"the Unicode scalars in that string are encoded in one of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"several Unicode-defined "},{"type":"emphasis","inlineContent":[{"text":"encoding forms","type":"text"}]},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Each form encodes the string in small chunks known as ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"code units"}]},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"These include the UTF-8 encoding form (which encodes a string as 8-bit code units),"},{"type":"text","text":" "},{"type":"text","text":"the UTF-16 encoding form (which encodes a string as 16-bit code units),"},{"type":"text","text":" "},{"type":"text","text":"and the UTF-32 encoding form (which encodes a string as 32-bit code units)."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Swift provides several different ways to access Unicode representations of strings.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You can iterate over the string with a "},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"code":"in","type":"codeVoice"},{"text":" statement,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to access its individual "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values as Unicode extended grapheme clusters."},{"type":"text","text":" "},{"text":"This process is described in ","type":"text"},{"type":"text","text":"doc:CadenasYCaracteres#Trabajando-con-caracteres"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"Alternatively, access a "},{"type":"codeVoice","code":"String"},{"text":" value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in one of three other Unicode-compliant representations:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A collection of UTF-8 code units (accessed with the string’s "},{"type":"codeVoice","code":"utf8"},{"text":" property)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A collection of UTF-16 code units (accessed with the string’s "},{"code":"utf16","type":"codeVoice"},{"type":"text","text":" property)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A collection of 21-bit Unicode scalar values,"},{"type":"text","text":" "},{"type":"text","text":"equivalent to the string’s UTF-32 encoding form"},{"text":" ","type":"text"},{"type":"text","text":"(accessed with the string’s "},{"code":"unicodeScalars","type":"codeVoice"},{"type":"text","text":" property)"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each example below shows a different representation of the following string,"},{"text":" ","type":"text"},{"type":"text","text":"which is made up of the characters "},{"type":"codeVoice","code":"D"},{"type":"text","text":", "},{"type":"codeVoice","code":"o"},{"type":"text","text":", "},{"type":"codeVoice","code":"g"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"‼"},{"type":"text","text":" ("},{"type":"codeVoice","code":"DOUBLE EXCLAMATION MARK"},{"type":"text","text":", or Unicode scalar "},{"type":"codeVoice","code":"U+203C"},{"text":"),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the 🐶 character ("},{"type":"codeVoice","code":"DOG FACE"},{"type":"text","text":", or Unicode scalar "},{"code":"U+1F436","type":"codeVoice"},{"type":"text","text":"):"}]},{"syntax":"swift","code":["let dogString = \"Dog‼🐶\""],"type":"codeListing"},{"text":"Representación UTF-8","anchor":"Representaci%C3%B3n-UTF-8","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"You can access a UTF-8 representation of a ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" "},{"type":"text","text":"by iterating over its "},{"type":"codeVoice","code":"utf8"},{"text":" property.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This property is of type "},{"code":"String.UTF8View","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which is a collection of unsigned 8-bit (","type":"text"},{"code":"UInt8","type":"codeVoice"},{"text":") values,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"one for each byte in the string’s UTF-8 representation:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"UTF8"}]},{"type":"codeListing","code":["for codeUnit in dogString.utf8 {","    print(\"\\(codeUnit) \", terminator: \"\")","}","print(\"\")","\/\/ Prints \"68 111 103 226 128 188 240 159 144 182 \""],"syntax":"swift"},{"inlineContent":[{"text":"In the example above, the first three decimal ","type":"text"},{"type":"codeVoice","code":"codeUnit"},{"text":" values","type":"text"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"68"},{"type":"text","text":", "},{"code":"111","type":"codeVoice"},{"type":"text","text":", "},{"code":"103","type":"codeVoice"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"represent the characters "},{"code":"D","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"o"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"g"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"whose UTF-8 representation is the same as their ASCII representation."},{"type":"text","text":" "},{"text":"The next three decimal ","type":"text"},{"code":"codeUnit","type":"codeVoice"},{"text":" values","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"("},{"code":"226","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"128"},{"type":"text","text":", "},{"type":"codeVoice","code":"188"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"are a three-byte UTF-8 representation of the ","type":"text"},{"code":"DOUBLE EXCLAMATION MARK","type":"codeVoice"},{"type":"text","text":" character."},{"type":"text","text":" "},{"type":"text","text":"The last four "},{"type":"codeVoice","code":"codeUnit"},{"text":" values (","type":"text"},{"type":"codeVoice","code":"240"},{"type":"text","text":", "},{"code":"159","type":"codeVoice"},{"text":", ","type":"text"},{"code":"144","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"182"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"are a four-byte UTF-8 representation of the "},{"code":"DOG FACE","type":"codeVoice"},{"text":" character.","type":"text"}],"type":"paragraph"},{"anchor":"Representaci%C3%B3n-UTF-16","type":"heading","level":3,"text":"Representación UTF-16"},{"type":"paragraph","inlineContent":[{"text":"You can access a UTF-16 representation of a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" ","type":"text"},{"type":"text","text":"by iterating over its "},{"type":"codeVoice","code":"utf16"},{"type":"text","text":" property."},{"text":" ","type":"text"},{"type":"text","text":"This property is of type "},{"code":"String.UTF16View","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which is a collection of unsigned 16-bit (","type":"text"},{"type":"codeVoice","code":"UInt16"},{"type":"text","text":") values,"},{"text":" ","type":"text"},{"type":"text","text":"one for each 16-bit code unit in the string’s UTF-16 representation:"}]},{"type":"paragraph","inlineContent":[{"identifier":"UTF16","type":"image"}]},{"type":"codeListing","code":["for codeUnit in dogString.utf16 {","    print(\"\\(codeUnit) \", terminator: \"\")","}","print(\"\")","\/\/ Prints \"68 111 103 8252 55357 56374 \""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Again, the first three "},{"type":"codeVoice","code":"codeUnit"},{"text":" values","type":"text"},{"type":"text","text":" "},{"type":"text","text":"("},{"code":"68","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"111"},{"type":"text","text":", "},{"type":"codeVoice","code":"103"},{"text":")","type":"text"},{"type":"text","text":" "},{"text":"represent the characters ","type":"text"},{"type":"codeVoice","code":"D"},{"text":", ","type":"text"},{"type":"codeVoice","code":"o"},{"type":"text","text":", and "},{"type":"codeVoice","code":"g"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"whose UTF-16 code units have the same values as in the string’s UTF-8 representation"},{"text":" ","type":"text"},{"text":"(because these Unicode scalars represent ASCII characters).","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The fourth "},{"code":"codeUnit","type":"codeVoice"},{"text":" value (","type":"text"},{"code":"8252","type":"codeVoice"},{"type":"text","text":") is a decimal equivalent of"},{"text":" ","type":"text"},{"text":"the hexadecimal value ","type":"text"},{"type":"codeVoice","code":"203C"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which represents the Unicode scalar "},{"type":"codeVoice","code":"U+203C"},{"text":" ","type":"text"},{"text":"for the ","type":"text"},{"type":"codeVoice","code":"DOUBLE EXCLAMATION MARK"},{"text":" character.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This character can be represented as a single code unit in UTF-16."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The fifth and sixth "},{"code":"codeUnit","type":"codeVoice"},{"type":"text","text":" values ("},{"code":"55357","type":"codeVoice"},{"type":"text","text":" and "},{"code":"56374","type":"codeVoice"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"are a UTF-16 surrogate pair representation of the "},{"type":"codeVoice","code":"DOG FACE"},{"type":"text","text":" character."},{"text":" ","type":"text"},{"text":"These values are a high-surrogate value of ","type":"text"},{"code":"U+D83D","type":"codeVoice"},{"text":" (decimal value ","type":"text"},{"type":"codeVoice","code":"55357"},{"text":")","type":"text"},{"text":" ","type":"text"},{"text":"and a low-surrogate value of ","type":"text"},{"type":"codeVoice","code":"U+DC36"},{"type":"text","text":" (decimal value "},{"code":"56374","type":"codeVoice"},{"text":").","type":"text"}]},{"anchor":"Representaci%C3%B3n-escalar-Unicode","level":3,"type":"heading","text":"Representación escalar Unicode"},{"inlineContent":[{"type":"text","text":"You can access a Unicode scalar representation of a "},{"type":"codeVoice","code":"String"},{"text":" value","type":"text"},{"type":"text","text":" "},{"text":"by iterating over its ","type":"text"},{"code":"unicodeScalars","type":"codeVoice"},{"type":"text","text":" property."},{"text":" ","type":"text"},{"text":"This property is of type ","type":"text"},{"code":"UnicodeScalarView","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which is a collection of values of type "},{"code":"UnicodeScalar","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Each ","type":"text"},{"code":"UnicodeScalar","type":"codeVoice"},{"text":" has a ","type":"text"},{"code":"value","type":"codeVoice"},{"type":"text","text":" property that returns"},{"type":"text","text":" "},{"text":"the scalar’s 21-bit value, represented within a ","type":"text"},{"code":"UInt32","type":"codeVoice"},{"type":"text","text":" value:"}]},{"inlineContent":[{"identifier":"UnicodeScalar","type":"image"}],"type":"paragraph"},{"code":["for scalar in dogString.unicodeScalars {","    print(\"\\(scalar.value) \", terminator: \"\")","}","print(\"\")","\/\/ Prints \"68 111 103 8252 128054 \""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"value"},{"text":" properties for the first three ","type":"text"},{"type":"codeVoice","code":"UnicodeScalar"},{"text":" values","type":"text"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"68"},{"type":"text","text":", "},{"code":"111","type":"codeVoice"},{"text":", ","type":"text"},{"code":"103","type":"codeVoice"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"once again represent the characters "},{"type":"codeVoice","code":"D"},{"type":"text","text":", "},{"code":"o","type":"codeVoice"},{"type":"text","text":", and "},{"code":"g","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"The fourth ","type":"text"},{"type":"codeVoice","code":"codeUnit"},{"type":"text","text":" value ("},{"code":"8252","type":"codeVoice"},{"type":"text","text":") is again a decimal equivalent of"},{"type":"text","text":" "},{"text":"the hexadecimal value ","type":"text"},{"code":"203C","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which represents the Unicode scalar ","type":"text"},{"code":"U+203C","type":"codeVoice"},{"type":"text","text":" "},{"text":"for the ","type":"text"},{"type":"codeVoice","code":"DOUBLE EXCLAMATION MARK"},{"type":"text","text":" character."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"value"},{"type":"text","text":" property of the fifth and final "},{"code":"UnicodeScalar","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"128054"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"is a decimal equivalent of the hexadecimal value ","type":"text"},{"type":"codeVoice","code":"1F436"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which represents the Unicode scalar ","type":"text"},{"code":"U+1F436","type":"codeVoice"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"DOG FACE"},{"text":" character.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"As an alternative to querying their "},{"type":"codeVoice","code":"value"},{"type":"text","text":" properties,"},{"type":"text","text":" "},{"text":"each ","type":"text"},{"code":"UnicodeScalar","type":"codeVoice"},{"text":" value can also be used to construct a new ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"text":"such as with string interpolation:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["for scalar in dogString.unicodeScalars {","    print(\"\\(scalar) \")","}","\/\/ D","\/\/ o","\/\/ g","\/\/ ‼","\/\/ 🐶"]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Conoce más acerca del uso del ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","isActive":true,"type":"reference"},{"text":".","type":"text"}]}],"name":"Software Beta","style":"note","type":"aside"}]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"metadata":{"title":"Cadenas y caracteres"},"references":{"https://developer.apple.com/es/support/beta-software/":{"title":"software beta de Apple","titleInlineContent":[{"text":"software beta de Apple","type":"text"}],"url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"link","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/"},"multilineStringWhitespace":{"variants":[{"url":"\/images\/org.swift.tspl\/multilineStringWhitespace@2x.png","traits":["2x","light"]},{"traits":["2x","dark"],"url":"\/images\/org.swift.tspl\/multilineStringWhitespace~dark@2x.png"}],"alt":null,"type":"image","identifier":"multilineStringWhitespace"},"UnicodeScalar":{"variants":[{"url":"\/images\/org.swift.tspl\/UnicodeScalar@2x.png","traits":["2x","light"]},{"traits":["2x","dark"],"url":"\/images\/org.swift.tspl\/UnicodeScalar~dark@2x.png"}],"alt":null,"type":"image","identifier":"UnicodeScalar"},"https://developer.apple.com/documentation/swift/stringprotocol":{"title":"StringProtocol","titleInlineContent":[{"code":"StringProtocol","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/stringprotocol","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/stringprotocol"},"https://developer.apple.com/documentation/swift/substring":{"title":"Substring","titleInlineContent":[{"code":"Substring","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/substring","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/substring"},"https://developer.apple.com/documentation/swift/string#2919514":{"title":"Bridging Between String and NSString","titleInlineContent":[{"text":"Bridging Between String and NSString","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/string#2919514","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/string#2919514"},"stringSubstring":{"variants":[{"url":"\/images\/org.swift.tspl\/stringSubstring@2x.png","traits":["2x","light"]},{"traits":["2x","dark"],"url":"\/images\/org.swift.tspl\/stringSubstring~dark@2x.png"}],"alt":null,"type":"image","identifier":"stringSubstring"},"UTF8":{"variants":[{"url":"\/images\/org.swift.tspl\/UTF8@2x.png","traits":["2x","light"]},{"traits":["2x","dark"],"url":"\/images\/org.swift.tspl\/UTF8~dark@2x.png"}],"alt":null,"type":"image","identifier":"UTF8"},"UTF16":{"variants":[{"url":"\/images\/org.swift.tspl\/UTF16@2x.png","traits":["2x","light"]},{"traits":["2x","dark"],"url":"\/images\/org.swift.tspl\/UTF16~dark@2x.png"}],"alt":null,"type":"image","identifier":"UTF16"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","role":"collection","url":"\/documentation\/the-swift-programming-language","abstract":[],"title":"The Swift Programming Language (6)","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"}}}
=======
{"sections":[],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","interfaceLanguage":"swift"},"kind":"article","abstract":[{"text":"Store and manipulate text.","type":"text"}],"metadata":{"title":"Cadenas y caracteres"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string"}]},{"text":" is a series of characters,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"such as "},{"type":"codeVoice","code":"\"hello, world\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"albatross\""},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Swift strings are represented by the ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The contents of a "},{"type":"codeVoice","code":"String"},{"text":" can be accessed in various ways,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"including as a collection of "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values."}]},{"inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"String"},{"text":" and ","type":"text"},{"code":"Character","type":"codeVoice"},{"type":"text","text":" types provide"},{"text":" ","type":"text"},{"type":"text","text":"a fast, Unicode-compliant way to work with text in your code."},{"type":"text","text":" "},{"type":"text","text":"The syntax for string creation and manipulation is lightweight and readable,"},{"type":"text","text":" "},{"text":"with a string literal syntax that’s similar to C.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"String concatenation is as simple as"},{"text":" ","type":"text"},{"type":"text","text":"combining two strings with the "},{"code":"+","type":"codeVoice"},{"type":"text","text":" operator,"},{"type":"text","text":" "},{"text":"and string mutability is managed by choosing between a constant or a variable,","type":"text"},{"text":" ","type":"text"},{"text":"just like any other value in Swift.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can also use strings to insert"},{"text":" ","type":"text"},{"type":"text","text":"constants, variables, literals, and expressions into longer strings,"},{"text":" ","type":"text"},{"type":"text","text":"in a process known as string interpolation."},{"text":" ","type":"text"},{"type":"text","text":"This makes it easy to create custom string values for display, storage, and printing."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Despite this simplicity of syntax,"},{"type":"text","text":" "},{"text":"Swift’s ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" type is a fast, modern string implementation."},{"text":" ","type":"text"},{"type":"text","text":"Every string is composed of encoding-independent Unicode characters,"},{"text":" ","type":"text"},{"text":"and provides support for accessing those characters in various Unicode representations.","type":"text"}],"type":"paragraph"},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type is bridged with Foundation’s "},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" class."},{"text":" ","type":"text"},{"text":"Foundation also extends ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" to expose methods defined by "},{"code":"NSString","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"This means, if you import Foundation,"},{"text":" ","type":"text"},{"text":"you can access those ","type":"text"},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" methods on "},{"type":"codeVoice","code":"String"},{"text":" without casting.","type":"text"}]},{"inlineContent":[{"type":"text","text":"For more information about using "},{"code":"String","type":"codeVoice"},{"type":"text","text":" with Foundation and Cocoa,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/string#2919514","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}],"style":"note","type":"aside"},{"text":"Literales de cadena","level":2,"anchor":"Literales-de-cadena","type":"heading"},{"inlineContent":[{"text":"You can include predefined ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" values within your code as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"string literals"}]},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"A string literal is a sequence of characters"},{"type":"text","text":" "},{"type":"text","text":"surrounded by double quotation marks ("},{"type":"codeVoice","code":"\""},{"type":"text","text":")."}],"type":"paragraph"},{"inlineContent":[{"text":"Use a string literal as an initial value for a constant or variable:","type":"text"}],"type":"paragraph"},{"code":["let someString = \"Some string literal value\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that Swift infers a type of "},{"code":"String","type":"codeVoice"},{"type":"text","text":" for the "},{"code":"someString","type":"codeVoice"},{"type":"text","text":" constant"},{"type":"text","text":" "},{"type":"text","text":"because it’s initialized with a string literal value."}]},{"text":"Literales de cadena de varias líneas","anchor":"Literales-de-cadena-de-varias-l%C3%ADneas","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need a string that spans several lines,"},{"type":"text","text":" "},{"type":"text","text":"use a multiline string literal —"},{"text":" ","type":"text"},{"text":"a sequence of characters","type":"text"},{"text":" ","type":"text"},{"text":"surrounded by three double quotation marks:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let quotation = \"\"\"","The White Rabbit put on his spectacles.  \"Where shall I begin,","please your Majesty?\" he asked.","","\"Begin at the beginning,\" the King said gravely, \"and go on","till you come to the end; then stop.\"","\"\"\""]},{"inlineContent":[{"type":"text","text":"A multiline string literal includes all of the lines between"},{"type":"text","text":" "},{"text":"its opening and closing quotation marks.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The string begins on the first line after the opening quotation marks ("},{"code":"\"\"\"","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"and ends on the line before the closing quotation marks,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which means that neither of the strings below"},{"text":" ","type":"text"},{"type":"text","text":"start or end with a line break:"}],"type":"paragraph"},{"syntax":"swift","code":["let singleLineString = \"These are the same.\"","let multilineString = \"\"\"","These are the same.","\"\"\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When your source code includes a line break"},{"type":"text","text":" "},{"type":"text","text":"inside of a multiline string literal,"},{"text":" ","type":"text"},{"type":"text","text":"that line break also appears in the string’s value."},{"text":" ","type":"text"},{"type":"text","text":"If you want to use line breaks"},{"type":"text","text":" "},{"type":"text","text":"to make your source code easier to read,"},{"type":"text","text":" "},{"text":"but you don’t want the line breaks to be part of the string’s value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"write a backslash ("},{"code":"\\","type":"codeVoice"},{"type":"text","text":") at the end of those lines:"}]},{"type":"codeListing","syntax":"swift","code":["let softWrappedQuotation = \"\"\"","The White Rabbit put on his spectacles.  \"Where shall I begin, \\","please your Majesty?\" he asked.","","\"Begin at the beginning,\" the King said gravely, \"and go on \\","till you come to the end; then stop.\"","\"\"\""]},{"inlineContent":[{"type":"text","text":"To make a multiline string literal that begins or ends with a line feed,"},{"type":"text","text":" "},{"type":"text","text":"write a blank line as the first or last line."},{"type":"text","text":" "},{"text":"For example:","type":"text"}],"type":"paragraph"},{"code":["let lineBreaks = \"\"\"","","This string starts with a line break.","It also ends with a line break.","","\"\"\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A multiline string can be indented to match the surrounding code."},{"text":" ","type":"text"},{"type":"text","text":"The whitespace before the closing quotation marks ("},{"type":"codeVoice","code":"\"\"\""},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"tells Swift what whitespace to ignore before all of the other lines."},{"text":" ","type":"text"},{"type":"text","text":"However, if you write whitespace at the beginning of a line"},{"type":"text","text":" "},{"text":"in addition to what’s before the closing quotation marks,","type":"text"},{"type":"text","text":" "},{"text":"that whitespace ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"is"}]},{"text":" included.","type":"text"}]},{"inlineContent":[{"identifier":"multilineStringWhitespace","type":"image"}],"type":"paragraph"},{"inlineContent":[{"text":"In the example above,","type":"text"},{"text":" ","type":"text"},{"text":"even though the entire multiline string literal is indented,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the first and last lines in the string don’t begin with any whitespace."},{"type":"text","text":" "},{"type":"text","text":"The middle line has more indentation than the closing quotation marks,"},{"text":" ","type":"text"},{"type":"text","text":"so it starts with that extra four-space indentation."}],"type":"paragraph"},{"text":"Caracteres especiales en literales de cadena","anchor":"Caracteres-especiales-en-literales-de-cadena","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"String literals can include the following special characters:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The escaped special characters "},{"type":"codeVoice","code":"\\0"},{"type":"text","text":" (null character), "},{"type":"codeVoice","code":"\\\\"},{"text":" (backslash),","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\\t"},{"type":"text","text":" (horizontal tab), "},{"code":"\\n","type":"codeVoice"},{"text":" (line feed), ","type":"text"},{"code":"\\r","type":"codeVoice"},{"type":"text","text":" (carriage return),"},{"text":" ","type":"text"},{"code":"\\\"","type":"codeVoice"},{"type":"text","text":" (double quotation mark) and "},{"type":"codeVoice","code":"\\'"},{"type":"text","text":" (single quotation mark)"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"An arbitrary Unicode scalar value, written as "},{"type":"codeVoice","code":"\\u{"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"codeVoice","code":"}"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"where ","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"text":" is a 1–8 digit hexadecimal number","type":"text"},{"text":" ","type":"text"},{"text":"(Unicode is discussed in ","type":"text"},{"type":"text","text":"doc:CadenasYCaracteres#Unicode"},{"text":" below)","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"The code below shows four examples of these special characters.","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"wiseWords"},{"type":"text","text":" constant contains two escaped double quotation marks."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"dollarSign"},{"type":"text","text":", "},{"code":"blackHeart","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"sparklingHeart"},{"text":" constants","type":"text"},{"type":"text","text":" "},{"text":"demonstrate the Unicode scalar format:","type":"text"}],"type":"paragraph"},{"code":["let wiseWords = \"\\\"Imagination is more important than knowledge\\\" - Einstein\"","\/\/ \"Imagination is more important than knowledge\" - Einstein","let dollarSign = \"\\u{24}\"        \/\/ $,  Unicode scalar U+0024","let blackHeart = \"\\u{2665}\"      \/\/ ♥,  Unicode scalar U+2665","let sparklingHeart = \"\\u{1F496}\" \/\/ 💖, Unicode scalar U+1F496"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Because multiline string literals use three double quotation marks instead of just one,","type":"text"},{"text":" ","type":"text"},{"text":"you can include a double quotation mark (","type":"text"},{"type":"codeVoice","code":"\""},{"type":"text","text":") inside of a multiline string literal"},{"text":" ","type":"text"},{"type":"text","text":"without escaping it."},{"type":"text","text":" "},{"type":"text","text":"To include the text "},{"type":"codeVoice","code":"\"\"\""},{"text":" in a multiline string,","type":"text"},{"text":" ","type":"text"},{"text":"escape at least one of the quotation marks.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example:"}]},{"syntax":"swift","code":["let threeDoubleQuotationMarks = \"\"\"","Escaping the first quotation mark \\\"\"\"","Escaping all three quotation marks \\\"\\\"\\\"","\"\"\""],"type":"codeListing"},{"type":"heading","text":"Delimitadores de cadena extendidos","level":3,"anchor":"Delimitadores-de-cadena-extendidos"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can place a string literal within "},{"type":"emphasis","inlineContent":[{"type":"text","text":"extended delimiters"}]},{"text":" ","type":"text"},{"type":"text","text":"to include special characters in a string"},{"text":" ","type":"text"},{"type":"text","text":"without invoking their effect."},{"type":"text","text":" "},{"type":"text","text":"You place your string within quotation marks ("},{"code":"\"","type":"codeVoice"},{"text":")","type":"text"},{"text":" ","type":"text"},{"text":"and surround that with number signs (","type":"text"},{"type":"codeVoice","code":"#"},{"text":").","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, printing the string literal "},{"code":"#\"Line 1\\nLine 2\"#","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"prints the line feed escape sequence ("},{"type":"codeVoice","code":"\\n"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"rather than printing the string across two lines."}]},{"inlineContent":[{"type":"text","text":"If you need the special effects of a character in a string literal,"},{"type":"text","text":" "},{"text":"match the number of number signs within the string","type":"text"},{"type":"text","text":" "},{"text":"following the escape character (","type":"text"},{"code":"\\","type":"codeVoice"},{"text":").","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, if your string is "},{"code":"#\"Line 1\\nLine 2\"#","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"and you want to break the line,"},{"type":"text","text":" "},{"text":"you can use ","type":"text"},{"code":"#\"Line 1\\#nLine 2\"#","type":"codeVoice"},{"text":" instead.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Similarly, "},{"type":"codeVoice","code":"###\"Line1\\###nLine2\"###"},{"type":"text","text":" also breaks the line."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"String literals created using extended delimiters can also be multiline string literals.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can use extended delimiters to include the text "},{"type":"codeVoice","code":"\"\"\""},{"text":" in a multiline string,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"overriding the default behavior that ends the literal. For example:"}]},{"type":"codeListing","syntax":"swift","code":["let threeMoreDoubleQuotationMarks = #\"\"\"","Here are three more double quotes: \"\"\"","\"\"\"#"]},{"level":2,"type":"heading","text":"Inicialización de una cadena vacía","anchor":"Inicializaci%C3%B3n-de-una-cadena-vac%C3%ADa"},{"type":"paragraph","inlineContent":[{"text":"To create an empty ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" value as the starting point","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for building a longer string,"},{"type":"text","text":" "},{"type":"text","text":"either assign an empty string literal to a variable"},{"type":"text","text":" "},{"type":"text","text":"or initialize a new "},{"type":"codeVoice","code":"String"},{"type":"text","text":" instance with initializer syntax:"}]},{"type":"codeListing","syntax":"swift","code":["var emptyString = \"\"               \/\/ empty string literal","var anotherEmptyString = String()  \/\/ initializer syntax","\/\/ these two strings are both empty, and are equivalent to each other"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Find out whether a "},{"type":"codeVoice","code":"String"},{"text":" value is empty","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by checking its Boolean "},{"type":"codeVoice","code":"isEmpty"},{"type":"text","text":" property:"}]},{"syntax":"swift","code":["if emptyString.isEmpty {","    print(\"Nothing to see here\")","}","\/\/ Prints \"Nothing to see here\""],"type":"codeListing"},{"text":"Mutabilidad de una cadena","type":"heading","level":2,"anchor":"Mutabilidad-de-una-cadena"},{"inlineContent":[{"type":"text","text":"You indicate whether a particular "},{"type":"codeVoice","code":"String"},{"type":"text","text":" can be modified (or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"mutated"}]},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"by assigning it to a variable (in which case it can be modified),","type":"text"},{"text":" ","type":"text"},{"text":"or to a constant (in which case it can’t be modified):","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var variableString = \"Horse\"","variableString += \" and carriage\"","\/\/ variableString is now \"Horse and carriage\"","","let constantString = \"Highlander\"","constantString += \" and another Highlander\"","\/\/ this reports a compile-time error - a constant string cannot be modified"]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This approach is different from string mutation in Objective-C and Cocoa,"},{"type":"text","text":" "},{"text":"where you choose between two classes (","type":"text"},{"code":"NSString","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"NSMutableString"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to indicate whether a string can be mutated."}]}],"type":"aside","style":"note","name":"Note"},{"anchor":"Las-cadenas-son-tipos-de-valor","level":2,"type":"heading","text":"Las cadenas son tipos de valor"},{"inlineContent":[{"text":"Swift’s ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" type is a "},{"inlineContent":[{"text":"value type","type":"text"}],"type":"emphasis"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you create a new "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"type":"text","text":"that "},{"code":"String","type":"codeVoice"},{"type":"text","text":" value is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"copied"}]},{"text":" when it’s passed to a function or method,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or when it’s assigned to a constant or variable."},{"type":"text","text":" "},{"type":"text","text":"In each case, a new copy of the existing "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value is created,"},{"text":" ","type":"text"},{"text":"and the new copy is passed or assigned, not the original version.","type":"text"},{"text":" ","type":"text"},{"text":"Value types are described in ","type":"text"},{"type":"text","text":"doc:ClasesYEstructuras#Las-estructuras-y-las-enumeraciones-son-tipos-de-valor"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s copy-by-default "},{"code":"String","type":"codeVoice"},{"type":"text","text":" behavior ensures that"},{"text":" ","type":"text"},{"type":"text","text":"when a function or method passes you a "},{"code":"String","type":"codeVoice"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"type":"text","text":"it’s clear that you own that exact "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"text":"regardless of where it came from.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can be confident that the string you are passed won’t be modified"},{"type":"text","text":" "},{"type":"text","text":"unless you modify it yourself."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Behind the scenes, Swift’s compiler optimizes string usage"},{"type":"text","text":" "},{"type":"text","text":"so that actual copying takes place only when absolutely necessary."},{"text":" ","type":"text"},{"text":"This means you always get great performance","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when working with strings as value types."}]},{"level":2,"anchor":"Trabajando-con-caracteres","type":"heading","text":"Trabajando con caracteres"},{"inlineContent":[{"type":"text","text":"You can access the individual "},{"type":"codeVoice","code":"Character"},{"text":" values for a ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" "},{"type":"text","text":"by iterating over the string with a "},{"code":"for","type":"codeVoice"},{"text":"-","type":"text"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop:"}],"type":"paragraph"},{"type":"codeListing","code":["for character in \"Dog!🐶\" {","    print(character)","}","\/\/ D","\/\/ o","\/\/ g","\/\/ !","\/\/ 🐶"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"code":"in","type":"codeVoice"},{"type":"text","text":" loop is described in "},{"text":"doc:FlujoDeControl#Ciclos-for-in","type":"text"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"Alternatively, you can create a stand-alone "},{"code":"Character","type":"codeVoice"},{"type":"text","text":" constant or variable"},{"text":" ","type":"text"},{"type":"text","text":"from a single-character string literal by providing a "},{"code":"Character","type":"codeVoice"},{"type":"text","text":" type annotation:"}],"type":"paragraph"},{"code":["let exclamationMark: Character = \"!\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"code":"String","type":"codeVoice"},{"type":"text","text":" values can be constructed by passing an array of "},{"type":"codeVoice","code":"Character"},{"text":" values","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as an argument to its initializer:"}],"type":"paragraph"},{"syntax":"swift","code":["let catCharacters: [Character] = [\"C\", \"a\", \"t\", \"!\", \"🐱\"]","let catString = String(catCharacters)","print(catString)","\/\/ Prints \"Cat!🐱\""],"type":"codeListing"},{"text":"Concatenación de cadenas y caracteres","type":"heading","anchor":"Concatenaci%C3%B3n-de-cadenas-y-caracteres","level":2},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"},{"type":"text","text":" values can be added together (or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"concatenated"}]},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"with the addition operator ("},{"code":"+","type":"codeVoice"},{"type":"text","text":") to create a new "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value:"}]},{"syntax":"swift","type":"codeListing","code":["let string1 = \"hello\"","let string2 = \" there\"","var welcome = string1 + string2","\/\/ welcome now equals \"hello there\""]},{"inlineContent":[{"text":"You can also append a ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" value to an existing "},{"type":"codeVoice","code":"String"},{"type":"text","text":" variable"},{"text":" ","type":"text"},{"type":"text","text":"with the addition assignment operator ("},{"type":"codeVoice","code":"+="},{"type":"text","text":"):"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var instruction = \"look over\"","instruction += string2","\/\/ instruction now equals \"look over there\""]},{"inlineContent":[{"text":"You can append a ","type":"text"},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value to a "},{"code":"String","type":"codeVoice"},{"text":" variable","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with the "},{"type":"codeVoice","code":"String"},{"text":" type’s ","type":"text"},{"type":"codeVoice","code":"append()"},{"text":" method:","type":"text"}],"type":"paragraph"},{"code":["let exclamationMark: Character = \"!\"","welcome.append(exclamationMark)","\/\/ welcome now equals \"hello there!\""],"syntax":"swift","type":"codeListing"},{"name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"You can’t append a ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" or "},{"code":"Character","type":"codeVoice"},{"text":" to an existing ","type":"text"},{"type":"codeVoice","code":"Character"},{"type":"text","text":" variable,"},{"type":"text","text":" "},{"type":"text","text":"because a "},{"code":"Character","type":"codeVoice"},{"text":" value must contain a single character only.","type":"text"}]}],"type":"aside"},{"inlineContent":[{"type":"text","text":"If you’re using multiline string literals"},{"type":"text","text":" "},{"type":"text","text":"to build up the lines of a longer string,"},{"text":" ","type":"text"},{"type":"text","text":"you want every line in the string to end with a line break,"},{"text":" ","type":"text"},{"text":"including the last line.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let badStart = \"\"\"","    one","    two","    \"\"\"","let end = \"\"\"","    three","    \"\"\"","print(badStart + end)","\/\/ Prints two lines:","\/\/ one","\/\/ twothree","","let goodStart = \"\"\"","    one","    two","","    \"\"\"","print(goodStart + end)","\/\/ Prints three lines:","\/\/ one","\/\/ two","\/\/ three"]},{"type":"paragraph","inlineContent":[{"text":"In the code above,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"concatenating "},{"code":"badStart","type":"codeVoice"},{"type":"text","text":" with "},{"type":"codeVoice","code":"end"},{"type":"text","text":" "},{"type":"text","text":"produces a two-line string,"},{"type":"text","text":" "},{"text":"which isn’t the desired result.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because the last line of "},{"type":"codeVoice","code":"badStart"},{"text":" ","type":"text"},{"type":"text","text":"doesn’t end with a line break,"},{"type":"text","text":" "},{"text":"that line gets combined with the first line of ","type":"text"},{"code":"end","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In contrast,"},{"type":"text","text":" "},{"type":"text","text":"both lines of "},{"type":"codeVoice","code":"goodStart"},{"type":"text","text":" end with a line break,"},{"type":"text","text":" "},{"type":"text","text":"so when it’s combined with "},{"code":"end","type":"codeVoice"},{"text":" ","type":"text"},{"text":"the result has three lines,","type":"text"},{"text":" ","type":"text"},{"text":"as expected.","type":"text"}]},{"level":2,"anchor":"Interpolaci%C3%B3n-de-cadenas","text":"Interpolación de cadenas","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"String interpolation","type":"text"}]},{"type":"text","text":" is a way to construct a new "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value"},{"type":"text","text":" "},{"type":"text","text":"from a mix of constants, variables, literals, and expressions"},{"text":" ","type":"text"},{"type":"text","text":"by including their values inside a string literal."},{"type":"text","text":" "},{"text":"You can use string interpolation","type":"text"},{"type":"text","text":" "},{"text":"in both single-line and multiline string literals.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Each item that you insert into the string literal is wrapped in"},{"type":"text","text":" "},{"text":"a pair of parentheses, prefixed by a backslash (","type":"text"},{"type":"codeVoice","code":"\\"},{"type":"text","text":"):"}]},{"type":"codeListing","syntax":"swift","code":["let multiplier = 3","let message = \"\\(multiplier) times 2.5 is \\(Double(multiplier) * 2.5)\"","\/\/ message is \"3 times 2.5 is 7.5\""]},{"type":"paragraph","inlineContent":[{"text":"In the example above,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the value of "},{"code":"multiplier","type":"codeVoice"},{"type":"text","text":" is inserted into a string literal as "},{"type":"codeVoice","code":"\\(multiplier)"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This placeholder is replaced with the actual value of "},{"type":"codeVoice","code":"multiplier"},{"type":"text","text":" "},{"text":"when the string interpolation is evaluated to create an actual string.","type":"text"}]},{"inlineContent":[{"text":"The value of ","type":"text"},{"code":"multiplier","type":"codeVoice"},{"type":"text","text":" is also part of a larger expression later in the string."},{"type":"text","text":" "},{"type":"text","text":"This expression calculates the value of "},{"type":"codeVoice","code":"Double(multiplier) * 2.5"},{"type":"text","text":" "},{"type":"text","text":"and inserts the result ("},{"code":"7.5","type":"codeVoice"},{"type":"text","text":") into the string."},{"type":"text","text":" "},{"type":"text","text":"In this case, the expression is written as "},{"type":"codeVoice","code":"\\(Double(multiplier) * 2.5)"},{"type":"text","text":" "},{"text":"when it’s included inside the string literal.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can use extended string delimiters to create strings containing"},{"type":"text","text":" "},{"type":"text","text":"characters that would otherwise be treated as a string interpolation."},{"type":"text","text":" "},{"text":"For example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["print(#\"Write an interpolated string in Swift using \\(multiplier).\"#)","\/\/ Prints \"Write an interpolated string in Swift using \\(multiplier).\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To use string interpolation"},{"type":"text","text":" "},{"type":"text","text":"inside a string that uses extended delimiters,"},{"type":"text","text":" "},{"text":"match the number of number signs after the backslash","type":"text"},{"type":"text","text":" "},{"text":"to the number of number signs at the beginning and end of the string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["print(#\"6 times 7 is \\#(6 * 7).\"#)","\/\/ Prints \"6 times 7 is 42.\""]},{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The expressions you write inside parentheses within an interpolated string"},{"type":"text","text":" "},{"type":"text","text":"can’t contain an unescaped backslash ("},{"type":"codeVoice","code":"\\"},{"type":"text","text":"), a carriage return, or a line feed."},{"text":" ","type":"text"},{"text":"However, they can contain other string literals.","type":"text"}]}]},{"level":2,"anchor":"Unicode","text":"Unicode","type":"heading"},{"inlineContent":[{"inlineContent":[{"text":"Unicode","type":"text"}],"type":"emphasis"},{"type":"text","text":" is an international standard for"},{"type":"text","text":" "},{"type":"text","text":"encoding, representing, and processing text in different writing systems."},{"type":"text","text":" "},{"text":"It enables you to represent almost any character from any language in a standardized form,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and to read and write those characters to and from an external source"},{"type":"text","text":" "},{"type":"text","text":"such as a text file or web page."},{"type":"text","text":" "},{"type":"text","text":"Swift’s "},{"code":"String","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Character"},{"type":"text","text":" types are fully Unicode-compliant,"},{"text":" ","type":"text"},{"type":"text","text":"as described in this section."}],"type":"paragraph"},{"level":3,"anchor":"Valores-escalares-Unicode","text":"Valores escalares Unicode","type":"heading"},{"inlineContent":[{"text":"Behind the scenes,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift’s native "},{"code":"String","type":"codeVoice"},{"type":"text","text":" type is built from "},{"type":"emphasis","inlineContent":[{"text":"Unicode scalar values","type":"text"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"A Unicode scalar value is a unique 21-bit number for a character or modifier,"},{"text":" ","type":"text"},{"type":"text","text":"such as "},{"code":"U+0061","type":"codeVoice"},{"type":"text","text":" for "},{"type":"codeVoice","code":"LATIN SMALL LETTER A"},{"type":"text","text":" ("},{"type":"codeVoice","code":"\"a\""},{"type":"text","text":"),"},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"type":"codeVoice","code":"U+1F425"},{"type":"text","text":" for "},{"type":"codeVoice","code":"FRONT-FACING BABY CHICK"},{"type":"text","text":" ("},{"type":"codeVoice","code":"\"🐥\""},{"type":"text","text":")."}],"type":"paragraph"},{"inlineContent":[{"text":"Note that not all 21-bit Unicode scalar values are assigned to a character —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"some scalars are reserved for future assignment or for use in UTF-16 encoding."},{"type":"text","text":" "},{"type":"text","text":"Scalar values that have been assigned to a character typically also have a name,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"code":"LATIN SMALL LETTER A","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"FRONT-FACING BABY CHICK"},{"type":"text","text":" in the examples above."}],"type":"paragraph"},{"anchor":"Grupos-de-grafemas-extendidos","type":"heading","text":"Grupos de grafemas extendidos","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every instance of Swift’s "},{"code":"Character","type":"codeVoice"},{"type":"text","text":" type represents"},{"text":" ","type":"text"},{"type":"text","text":"a single "},{"type":"emphasis","inlineContent":[{"type":"text","text":"extended grapheme cluster"}]},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"An extended grapheme cluster is a sequence of one or more Unicode scalars"},{"type":"text","text":" "},{"text":"that (when combined) produce a single human-readable character.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Here’s an example.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The letter "},{"code":"é","type":"codeVoice"},{"type":"text","text":" can be represented as the single Unicode scalar "},{"type":"codeVoice","code":"é"},{"text":" ","type":"text"},{"text":"(","type":"text"},{"type":"codeVoice","code":"LATIN SMALL LETTER E WITH ACUTE"},{"type":"text","text":", or "},{"type":"codeVoice","code":"U+00E9"},{"text":").","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, the same letter can also be represented as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"pair"}]},{"type":"text","text":" of scalars —"},{"text":" ","type":"text"},{"text":"a standard letter ","type":"text"},{"type":"codeVoice","code":"e"},{"text":" (","type":"text"},{"type":"codeVoice","code":"LATIN SMALL LETTER E"},{"text":", or ","type":"text"},{"code":"U+0065","type":"codeVoice"},{"text":"),","type":"text"},{"type":"text","text":" "},{"text":"followed by the ","type":"text"},{"code":"COMBINING ACUTE ACCENT","type":"codeVoice"},{"text":" scalar (","type":"text"},{"code":"U+0301","type":"codeVoice"},{"text":").","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"COMBINING ACUTE ACCENT"},{"text":" scalar is graphically applied to the scalar that precedes it,","type":"text"},{"type":"text","text":" "},{"text":"turning an ","type":"text"},{"type":"codeVoice","code":"e"},{"text":" into an ","type":"text"},{"type":"codeVoice","code":"é"},{"type":"text","text":" when it’s rendered by"},{"text":" ","type":"text"},{"type":"text","text":"a Unicode-aware text-rendering system."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In both cases, the letter "},{"type":"codeVoice","code":"é"},{"text":" is represented as a single Swift ","type":"text"},{"code":"Character","type":"codeVoice"},{"type":"text","text":" value"},{"text":" ","type":"text"},{"type":"text","text":"that represents an extended grapheme cluster."},{"type":"text","text":" "},{"type":"text","text":"In the first case, the cluster contains a single scalar;"},{"text":" ","type":"text"},{"type":"text","text":"in the second case, it’s a cluster of two scalars:"}]},{"code":["let eAcute: Character = \"\\u{E9}\"                         \/\/ é","let combinedEAcute: Character = \"\\u{65}\\u{301}\"          \/\/ e followed by ́","\/\/ eAcute is é, combinedEAcute is é"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Extended grapheme clusters are a flexible way to represent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"many complex script characters as a single "},{"code":"Character","type":"codeVoice"},{"type":"text","text":" value."},{"type":"text","text":" "},{"type":"text","text":"For example, Hangul syllables from the Korean alphabet"},{"type":"text","text":" "},{"type":"text","text":"can be represented as either a precomposed or decomposed sequence."},{"type":"text","text":" "},{"type":"text","text":"Both of these representations qualify as a single "},{"type":"codeVoice","code":"Character"},{"text":" value in Swift:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let precomposed: Character = \"\\u{D55C}\"                  \/\/ 한","let decomposed: Character = \"\\u{1112}\\u{1161}\\u{11AB}\"   \/\/ ᄒ, ᅡ, ᆫ","\/\/ precomposed is 한, decomposed is 한"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Extended grapheme clusters enable","type":"text"},{"text":" ","type":"text"},{"text":"scalars for enclosing marks (such as ","type":"text"},{"type":"codeVoice","code":"COMBINING ENCLOSING CIRCLE"},{"type":"text","text":", or "},{"type":"codeVoice","code":"U+20DD"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"to enclose other Unicode scalars as part of a single ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":" value:","type":"text"}]},{"type":"codeListing","code":["let enclosedEAcute: Character = \"\\u{E9}\\u{20DD}\"","\/\/ enclosedEAcute is é⃝"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unicode scalars for regional indicator symbols"},{"type":"text","text":" "},{"text":"can be combined in pairs to make a single ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":" value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"such as this combination of "},{"code":"REGIONAL INDICATOR SYMBOL LETTER U","type":"codeVoice"},{"text":" (","type":"text"},{"code":"U+1F1FA","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"REGIONAL INDICATOR SYMBOL LETTER S","type":"codeVoice"},{"type":"text","text":" ("},{"code":"U+1F1F8","type":"codeVoice"},{"type":"text","text":"):"}]},{"syntax":"swift","code":["let regionalIndicatorForUS: Character = \"\\u{1F1FA}\\u{1F1F8}\"","\/\/ regionalIndicatorForUS is 🇺🇸"],"type":"codeListing"},{"type":"heading","level":2,"anchor":"Conteo-de-caracteres","text":"Conteo de caracteres"},{"inlineContent":[{"type":"text","text":"To retrieve a count of the "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values in a string,"},{"type":"text","text":" "},{"text":"use the ","type":"text"},{"code":"count","type":"codeVoice"},{"text":" property of the string:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let unusualMenagerie = \"Koala 🐨, Snail 🐌, Penguin 🐧, Dromedary 🐪\"","print(\"unusualMenagerie has \\(unusualMenagerie.count) characters\")","\/\/ Prints \"unusualMenagerie has 40 characters\""]},{"inlineContent":[{"type":"text","text":"Note that Swift’s use of extended grapheme clusters for "},{"code":"Character","type":"codeVoice"},{"type":"text","text":" values"},{"text":" ","type":"text"},{"text":"means that string concatenation and modification may not always affect","type":"text"},{"text":" ","type":"text"},{"text":"a string’s character count.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example, if you initialize a new string with the four-character word ","type":"text"},{"code":"cafe","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and then append a "},{"type":"codeVoice","code":"COMBINING ACUTE ACCENT"},{"text":" (","type":"text"},{"type":"codeVoice","code":"U+0301"},{"text":") to the end of the string,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the resulting string will still have a character count of "},{"code":"4","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"with a fourth character of ","type":"text"},{"type":"codeVoice","code":"é"},{"text":", not ","type":"text"},{"type":"codeVoice","code":"e"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["var word = \"cafe\"","print(\"the number of characters in \\(word) is \\(word.count)\")","\/\/ Prints \"the number of characters in cafe is 4\"","","word += \"\\u{301}\"    \/\/ COMBINING ACUTE ACCENT, U+0301","","print(\"the number of characters in \\(word) is \\(word.count)\")","\/\/ Prints \"the number of characters in café is 4\""]},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Extended grapheme clusters can be composed of multiple Unicode scalars.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This means that different characters—"},{"text":" ","type":"text"},{"type":"text","text":"and different representations of the same character—"},{"text":" ","type":"text"},{"type":"text","text":"can require different amounts of memory to store."},{"text":" ","type":"text"},{"text":"Because of this, characters in Swift don’t each take up","type":"text"},{"text":" ","type":"text"},{"text":"the same amount of memory within a string’s representation.","type":"text"},{"text":" ","type":"text"},{"text":"As a result, the number of characters in a string can’t be calculated","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"without iterating through the string to determine"},{"text":" ","type":"text"},{"type":"text","text":"its extended grapheme cluster boundaries."},{"type":"text","text":" "},{"text":"If you are working with particularly long string values,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"be aware that the "},{"type":"codeVoice","code":"count"},{"text":" property","type":"text"},{"type":"text","text":" "},{"text":"must iterate over the Unicode scalars in the entire string","type":"text"},{"type":"text","text":" "},{"text":"in order to determine the characters for that string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The count of the characters returned by the ","type":"text"},{"type":"codeVoice","code":"count"},{"type":"text","text":" property"},{"type":"text","text":" "},{"text":"isn’t always the same as the ","type":"text"},{"code":"length","type":"codeVoice"},{"text":" property of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" that contains the same characters."},{"text":" ","type":"text"},{"text":"The length of an ","type":"text"},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" is based on"},{"text":" ","type":"text"},{"type":"text","text":"the number of 16-bit code units within the string’s UTF-16 representation"},{"text":" ","type":"text"},{"type":"text","text":"and not the number of Unicode extended grapheme clusters within the string."}]}]},{"type":"heading","anchor":"Acceso-y-modificaci%C3%B3n-de-una-cadena","level":2,"text":"Acceso y modificación de una cadena"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You access and modify a string through its methods and properties,"},{"text":" ","type":"text"},{"type":"text","text":"or by using subscript syntax."}]},{"anchor":"%C3%8Dndices-de-una-cadena","type":"heading","level":3,"text":"Índices de una cadena"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value has an associated "},{"inlineContent":[{"text":"index type","type":"text"}],"type":"emphasis"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":"String.Index","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which corresponds to the position of each ","type":"text"},{"type":"codeVoice","code":"Character"},{"text":" in the string.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"As mentioned above,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"different characters can require different amounts of memory to store,"},{"type":"text","text":" "},{"text":"so in order to determine which ","type":"text"},{"type":"codeVoice","code":"Character"},{"type":"text","text":" is at a particular position,"},{"text":" ","type":"text"},{"text":"you must iterate over each Unicode scalar from the start or end of that ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"For this reason, Swift strings can’t be indexed by integer values.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"code":"startIndex","type":"codeVoice"},{"type":"text","text":" property to access"},{"type":"text","text":" "},{"text":"the position of the first ","type":"text"},{"type":"codeVoice","code":"Character"},{"text":" of a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"endIndex"},{"type":"text","text":" property is the position after the last character in a "},{"code":"String","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"As a result,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"endIndex","type":"codeVoice"},{"text":" property isn’t a valid argument to a string’s subscript.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If a "},{"code":"String","type":"codeVoice"},{"text":" is empty, ","type":"text"},{"type":"codeVoice","code":"startIndex"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"endIndex"},{"text":" are equal.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You access the indices before and after a given index"},{"text":" ","type":"text"},{"type":"text","text":"using the "},{"type":"codeVoice","code":"index(before:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"index(after:)"},{"type":"text","text":" methods of "},{"code":"String","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"To access an index farther away from the given index,"},{"type":"text","text":" "},{"type":"text","text":"you can use the "},{"code":"index(_:offsetBy:)","type":"codeVoice"},{"text":" method","type":"text"},{"type":"text","text":" "},{"type":"text","text":"instead of calling one of these methods multiple times."}]},{"type":"paragraph","inlineContent":[{"text":"You can use subscript syntax to access","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"Character","type":"codeVoice"},{"type":"text","text":" at a particular "},{"code":"String","type":"codeVoice"},{"type":"text","text":" index."}]},{"type":"codeListing","syntax":"swift","code":["let greeting = \"Guten Tag!\"","greeting[greeting.startIndex]","\/\/ G","greeting[greeting.index(before: greeting.endIndex)]","\/\/ !","greeting[greeting.index(after: greeting.startIndex)]","\/\/ u","let index = greeting.index(greeting.startIndex, offsetBy: 7)","greeting[index]","\/\/ a"]},{"type":"paragraph","inlineContent":[{"text":"Attempting to access an index outside of a string’s range","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or a "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" at an index outside of a string’s range"},{"text":" ","type":"text"},{"type":"text","text":"will trigger a runtime error."}]},{"type":"codeListing","code":["greeting[greeting.endIndex] \/\/ Error","greeting.index(after: greeting.endIndex) \/\/ Error"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"indices"},{"type":"text","text":" property to access all of the"},{"text":" ","type":"text"},{"text":"indices of individual characters in a string.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["for index in greeting.indices {","    print(\"\\(greeting[index]) \", terminator: \"\")","}","\/\/ Prints \"G u t e n   T a g ! \""]},{"name":"Note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"You can use the "},{"type":"codeVoice","code":"startIndex"},{"type":"text","text":" and "},{"type":"codeVoice","code":"endIndex"},{"type":"text","text":" properties"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"code":"index(before:)","type":"codeVoice"},{"text":", ","type":"text"},{"code":"index(after:)","type":"codeVoice"},{"type":"text","text":", and "},{"code":"index(_:offsetBy:)","type":"codeVoice"},{"text":" methods","type":"text"},{"type":"text","text":" "},{"type":"text","text":"on any type that conforms to the "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":" protocol."},{"type":"text","text":" "},{"type":"text","text":"This includes "},{"code":"String","type":"codeVoice"},{"text":", as shown here,","type":"text"},{"text":" ","type":"text"},{"text":"as well as collection types such as ","type":"text"},{"type":"codeVoice","code":"Array"},{"type":"text","text":", "},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Set","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"style":"note"},{"type":"heading","level":3,"text":"Insertar y remover","anchor":"Insertar-y-remover"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To insert a single character into a string at a specified index,"},{"type":"text","text":" "},{"text":"use the ","type":"text"},{"code":"insert(_:at:)","type":"codeVoice"},{"text":" method,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and to insert the contents of another string at a specified index,"},{"text":" ","type":"text"},{"type":"text","text":"use the "},{"code":"insert(contentsOf:at:)","type":"codeVoice"},{"type":"text","text":" method."}]},{"syntax":"swift","type":"codeListing","code":["var welcome = \"hello\"","welcome.insert(\"!\", at: welcome.endIndex)","\/\/ welcome now equals \"hello!\"","","welcome.insert(contentsOf: \" there\", at: welcome.index(before: welcome.endIndex))","\/\/ welcome now equals \"hello there!\""]},{"inlineContent":[{"text":"To remove a single character from a string at a specified index,","type":"text"},{"type":"text","text":" "},{"text":"use the ","type":"text"},{"type":"codeVoice","code":"remove(at:)"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"text":"and to remove a substring at a specified range,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"removeSubrange(_:)"},{"type":"text","text":" method:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["welcome.remove(at: welcome.index(before: welcome.endIndex))","\/\/ welcome now equals \"hello there\"","","let range = welcome.index(welcome.endIndex, offsetBy: -6)..<welcome.endIndex","welcome.removeSubrange(range)","\/\/ welcome now equals \"hello\""]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use the "},{"type":"codeVoice","code":"insert(_:at:)"},{"type":"text","text":", "},{"code":"insert(contentsOf:at:)","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"code":"remove(at:)","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"removeSubrange(_:)","type":"codeVoice"},{"type":"text","text":" methods"},{"text":" ","type":"text"},{"type":"text","text":"on any type that conforms to the "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"text":" protocol.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This includes "},{"type":"codeVoice","code":"String"},{"type":"text","text":", as shown here,"},{"text":" ","type":"text"},{"text":"as well as collection types such as ","type":"text"},{"code":"Array","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":", and "},{"code":"Set","type":"codeVoice"},{"text":".","type":"text"}]}],"name":"Note"},{"text":"Subcadenas","anchor":"Subcadenas","type":"heading","level":2},{"inlineContent":[{"text":"When you get a substring from a string —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for example, using a subscript or a method like "},{"type":"codeVoice","code":"prefix(_:)"},{"text":" —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the result is an instance"},{"text":" ","type":"text"},{"type":"text","text":"of "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/substring","type":"reference"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"not another string."},{"type":"text","text":" "},{"type":"text","text":"Substrings in Swift have most of the same methods as strings,"},{"text":" ","type":"text"},{"text":"which means you can work with substrings","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the same way you work with strings."},{"type":"text","text":" "},{"type":"text","text":"However, unlike strings,"},{"type":"text","text":" "},{"type":"text","text":"you use substrings for only a short amount of time"},{"text":" ","type":"text"},{"text":"while performing actions on a string.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When you’re ready to store the result for a longer time,"},{"type":"text","text":" "},{"type":"text","text":"you convert the substring to an instance of "},{"code":"String","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"For example:","type":"text"}],"type":"paragraph"},{"code":["let greeting = \"Hello, world!\"","let index = greeting.firstIndex(of: \",\") ?? greeting.endIndex","let beginning = greeting[..<index]","\/\/ beginning is \"Hello\"","","\/\/ Convert the result to a String for long-term storage.","let newString = String(beginning)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Like strings, each substring has a region of memory","type":"text"},{"type":"text","text":" "},{"type":"text","text":"where the characters that make up the substring are stored."},{"text":" ","type":"text"},{"type":"text","text":"The difference between strings and substrings"},{"type":"text","text":" "},{"text":"is that, as a performance optimization,","type":"text"},{"type":"text","text":" "},{"text":"a substring can reuse part of the memory","type":"text"},{"text":" ","type":"text"},{"text":"that’s used to store the original string,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or part of the memory that’s used to store another substring."},{"type":"text","text":" "},{"text":"(Strings have a similar optimization,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but if two strings share memory, they’re equal.)"},{"text":" ","type":"text"},{"type":"text","text":"This performance optimization means"},{"text":" ","type":"text"},{"text":"you don’t have to pay the performance cost of copying memory","type":"text"},{"type":"text","text":" "},{"text":"until you modify either the string or substring.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"As mentioned above,"},{"type":"text","text":" "},{"text":"substrings aren’t suitable for long-term storage —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"because they reuse the storage of the original string,"},{"text":" ","type":"text"},{"type":"text","text":"the entire original string must be kept in memory"},{"type":"text","text":" "},{"text":"as long as any of its substrings are being used.","type":"text"}]},{"inlineContent":[{"type":"text","text":"In the example above,"},{"type":"text","text":" "},{"type":"codeVoice","code":"greeting"},{"type":"text","text":" is a string,"},{"text":" ","type":"text"},{"text":"which means it has a region of memory","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"where the characters that make up the string are stored."},{"type":"text","text":" "},{"text":"Because","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"beginning"},{"type":"text","text":" is a substring of "},{"type":"codeVoice","code":"greeting"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"it reuses the memory that "},{"code":"greeting","type":"codeVoice"},{"text":" uses.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In contrast,"},{"type":"text","text":" "},{"type":"codeVoice","code":"newString"},{"type":"text","text":" is a string —"},{"type":"text","text":" "},{"text":"when it’s created from the substring,","type":"text"},{"type":"text","text":" "},{"text":"it has its own storage.","type":"text"},{"text":" ","type":"text"},{"text":"The figure below shows these relationships:","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"stringSubstring"}],"type":"paragraph"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Both ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Substring"},{"text":" conform to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/stringprotocol"},{"type":"text","text":" protocol,"},{"text":" ","type":"text"},{"type":"text","text":"which means it’s often convenient for string-manipulation functions"},{"type":"text","text":" "},{"type":"text","text":"to accept a "},{"code":"StringProtocol","type":"codeVoice"},{"type":"text","text":" value."},{"text":" ","type":"text"},{"text":"You can call such functions with either a ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" or "},{"code":"Substring","type":"codeVoice"},{"text":" value.","type":"text"}]}],"type":"aside","name":"Note"},{"level":2,"type":"heading","text":"Comparación de cadenas","anchor":"Comparaci%C3%B3n-de-cadenas"},{"inlineContent":[{"type":"text","text":"Swift provides three ways to compare textual values:"},{"text":" ","type":"text"},{"text":"string and character equality, prefix equality, and suffix equality.","type":"text"}],"type":"paragraph"},{"text":"Igualdad de cadenas y caracteres","type":"heading","level":3,"anchor":"Igualdad-de-cadenas-y-caracteres"},{"inlineContent":[{"type":"text","text":"String and character equality is checked with the “equal to” operator ("},{"code":"==","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"and the “not equal to” operator (","type":"text"},{"type":"codeVoice","code":"!="},{"type":"text","text":"),"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"text":"doc:OperadoresBasicos#Operadores-de-comparación","type":"text"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["let quotation = \"We're a lot alike, you and I.\"","let sameQuotation = \"We're a lot alike, you and I.\"","if quotation == sameQuotation {","    print(\"These two strings are considered equal\")","}","\/\/ Prints \"These two strings are considered equal\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Two ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" values (or two "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values) are considered equal if"},{"text":" ","type":"text"},{"type":"text","text":"their extended grapheme clusters are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"canonically equivalent"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Extended grapheme clusters are canonically equivalent if they have","type":"text"},{"text":" ","type":"text"},{"text":"the same linguistic meaning and appearance,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"even if they’re composed from different Unicode scalars behind the scenes."}]},{"inlineContent":[{"type":"text","text":"For example, "},{"type":"codeVoice","code":"LATIN SMALL LETTER E WITH ACUTE"},{"type":"text","text":" ("},{"type":"codeVoice","code":"U+00E9"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"is canonically equivalent to ","type":"text"},{"type":"codeVoice","code":"LATIN SMALL LETTER E"},{"type":"text","text":" ("},{"type":"codeVoice","code":"U+0065"},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"followed by "},{"code":"COMBINING ACUTE ACCENT","type":"codeVoice"},{"text":" (","type":"text"},{"type":"codeVoice","code":"U+0301"},{"text":").","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Both of these extended grapheme clusters are valid ways to represent the character "},{"code":"é","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and so they’re considered to be canonically equivalent:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ \"Voulez-vous un café?\" using LATIN SMALL LETTER E WITH ACUTE","let eAcuteQuestion = \"Voulez-vous un caf\\u{E9}?\"","","\/\/ \"Voulez-vous un café?\" using LATIN SMALL LETTER E and COMBINING ACUTE ACCENT","let combinedEAcuteQuestion = \"Voulez-vous un caf\\u{65}\\u{301}?\"","","if eAcuteQuestion == combinedEAcuteQuestion {","    print(\"These two strings are considered equal\")","}","\/\/ Prints \"These two strings are considered equal\""],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Conversely, "},{"code":"LATIN CAPITAL LETTER A","type":"codeVoice"},{"text":" (","type":"text"},{"code":"U+0041","type":"codeVoice"},{"type":"text","text":", or "},{"code":"\"A\"","type":"codeVoice"},{"text":"),","type":"text"},{"type":"text","text":" "},{"text":"as used in English, is ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" equivalent to","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"CYRILLIC CAPITAL LETTER A"},{"type":"text","text":" ("},{"type":"codeVoice","code":"U+0410"},{"type":"text","text":", or "},{"code":"\"А\"","type":"codeVoice"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"as used in Russian."},{"text":" ","type":"text"},{"text":"The characters are visually similar,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but don’t have the same linguistic meaning:"}],"type":"paragraph"},{"syntax":"swift","code":["let latinCapitalLetterA: Character = \"\\u{41}\"","","let cyrillicCapitalLetterA: Character = \"\\u{0410}\"","","if latinCapitalLetterA != cyrillicCapitalLetterA {","    print(\"These two characters aren't equivalent.\")","}","\/\/ Prints \"These two characters aren't equivalent.\""],"type":"codeListing"},{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"String and character comparisons in Swift aren’t locale-sensitive."}],"type":"paragraph"}]},{"text":"Igualdad de prefijo y sufijo","type":"heading","anchor":"Igualdad-de-prefijo-y-sufijo","level":3},{"type":"paragraph","inlineContent":[{"text":"To check whether a string has a particular string prefix or suffix,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"call the string’s "},{"type":"codeVoice","code":"hasPrefix(_:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"hasSuffix(_:)"},{"type":"text","text":" methods,"},{"type":"text","text":" "},{"text":"both of which take a single argument of type ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" and return a Boolean value."}]},{"inlineContent":[{"type":"text","text":"The examples below consider an array of strings representing"},{"text":" ","type":"text"},{"text":"the scene locations from the first two acts of Shakespeare’s ","type":"text"},{"inlineContent":[{"type":"text","text":"Romeo and Juliet"}],"type":"emphasis"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let romeoAndJuliet = [","    \"Act 1 Scene 1: Verona, A public place\",","    \"Act 1 Scene 2: Capulet's mansion\",","    \"Act 1 Scene 3: A room in Capulet's mansion\",","    \"Act 1 Scene 4: A street outside Capulet's mansion\",","    \"Act 1 Scene 5: The Great Hall in Capulet's mansion\",","    \"Act 2 Scene 1: Outside Capulet's mansion\",","    \"Act 2 Scene 2: Capulet's orchard\",","    \"Act 2 Scene 3: Outside Friar Lawrence's cell\",","    \"Act 2 Scene 4: A street in Verona\",","    \"Act 2 Scene 5: Capulet's mansion\",","    \"Act 2 Scene 6: Friar Lawrence's cell\"","]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use the "},{"type":"codeVoice","code":"hasPrefix(_:)"},{"text":" method with the ","type":"text"},{"type":"codeVoice","code":"romeoAndJuliet"},{"text":" array","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to count the number of scenes in Act 1 of the play:"}]},{"code":["var act1SceneCount = 0","for scene in romeoAndJuliet {","    if scene.hasPrefix(\"Act 1 \") {","        act1SceneCount += 1","    }","}","print(\"There are \\(act1SceneCount) scenes in Act 1\")","\/\/ Prints \"There are 5 scenes in Act 1\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Similarly, use the ","type":"text"},{"code":"hasSuffix(_:)","type":"codeVoice"},{"type":"text","text":" method to count the number of scenes"},{"type":"text","text":" "},{"text":"that take place in or around Capulet’s mansion and Friar Lawrence’s cell:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var mansionCount = 0","var cellCount = 0","for scene in romeoAndJuliet {","    if scene.hasSuffix(\"Capulet's mansion\") {","        mansionCount += 1","    } else if scene.hasSuffix(\"Friar Lawrence's cell\") {","        cellCount += 1","    }","}","print(\"\\(mansionCount) mansion scenes; \\(cellCount) cell scenes\")","\/\/ Prints \"6 mansion scenes; 2 cell scenes\""]},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"hasPrefix(_:)"},{"text":" and ","type":"text"},{"code":"hasSuffix(_:)","type":"codeVoice"},{"text":" methods","type":"text"},{"text":" ","type":"text"},{"text":"perform a character-by-character canonical equivalence comparison between","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the extended grapheme clusters in each string,"},{"type":"text","text":" "},{"text":"as described in ","type":"text"},{"text":"doc:CadenasYCaracteres#Igualdad-de-cadenas-y-caracteres","type":"text"},{"type":"text","text":"."}]}]},{"text":"Representación Unicode de cadenas","type":"heading","level":2,"anchor":"Representaci%C3%B3n-Unicode-de-cadenas"},{"type":"paragraph","inlineContent":[{"text":"When a Unicode string is written to a text file or some other storage,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the Unicode scalars in that string are encoded in one of"},{"text":" ","type":"text"},{"type":"text","text":"several Unicode-defined "},{"inlineContent":[{"text":"encoding forms","type":"text"}],"type":"emphasis"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Each form encodes the string in small chunks known as ","type":"text"},{"inlineContent":[{"text":"code units","type":"text"}],"type":"emphasis"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"These include the UTF-8 encoding form (which encodes a string as 8-bit code units),"},{"text":" ","type":"text"},{"type":"text","text":"the UTF-16 encoding form (which encodes a string as 16-bit code units),"},{"type":"text","text":" "},{"text":"and the UTF-32 encoding form (which encodes a string as 32-bit code units).","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift provides several different ways to access Unicode representations of strings."},{"type":"text","text":" "},{"type":"text","text":"You can iterate over the string with a "},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"code":"in","type":"codeVoice"},{"text":" statement,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to access its individual "},{"code":"Character","type":"codeVoice"},{"type":"text","text":" values as Unicode extended grapheme clusters."},{"text":" ","type":"text"},{"type":"text","text":"This process is described in "},{"type":"text","text":"doc:CadenasYCaracteres#Trabajando-con-caracteres"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"Alternatively, access a ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" value"},{"text":" ","type":"text"},{"text":"in one of three other Unicode-compliant representations:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"A collection of UTF-8 code units (accessed with the string’s "},{"type":"codeVoice","code":"utf8"},{"type":"text","text":" property)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"A collection of UTF-16 code units (accessed with the string’s "},{"code":"utf16","type":"codeVoice"},{"text":" property)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A collection of 21-bit Unicode scalar values,"},{"type":"text","text":" "},{"text":"equivalent to the string’s UTF-32 encoding form","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(accessed with the string’s "},{"type":"codeVoice","code":"unicodeScalars"},{"text":" property)","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each example below shows a different representation of the following string,"},{"type":"text","text":" "},{"type":"text","text":"which is made up of the characters "},{"type":"codeVoice","code":"D"},{"text":", ","type":"text"},{"code":"o","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"g"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"‼"},{"text":" (","type":"text"},{"type":"codeVoice","code":"DOUBLE EXCLAMATION MARK"},{"type":"text","text":", or Unicode scalar "},{"code":"U+203C","type":"codeVoice"},{"type":"text","text":"),"},{"text":" ","type":"text"},{"type":"text","text":"and the 🐶 character ("},{"code":"DOG FACE","type":"codeVoice"},{"type":"text","text":", or Unicode scalar "},{"type":"codeVoice","code":"U+1F436"},{"type":"text","text":"):"}]},{"code":["let dogString = \"Dog‼🐶\""],"type":"codeListing","syntax":"swift"},{"text":"Representación UTF-8","type":"heading","anchor":"Representaci%C3%B3n-UTF-8","level":3},{"inlineContent":[{"text":"You can access a UTF-8 representation of a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" ","type":"text"},{"type":"text","text":"by iterating over its "},{"type":"codeVoice","code":"utf8"},{"text":" property.","type":"text"},{"type":"text","text":" "},{"text":"This property is of type ","type":"text"},{"code":"String.UTF8View","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which is a collection of unsigned 8-bit (","type":"text"},{"code":"UInt8","type":"codeVoice"},{"text":") values,","type":"text"},{"text":" ","type":"text"},{"text":"one for each byte in the string’s UTF-8 representation:","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"identifier":"UTF8","type":"image"}]},{"type":"codeListing","syntax":"swift","code":["for codeUnit in dogString.utf8 {","    print(\"\\(codeUnit) \", terminator: \"\")","}","print(\"\")","\/\/ Prints \"68 111 103 226 128 188 240 159 144 182 \""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above, the first three decimal "},{"type":"codeVoice","code":"codeUnit"},{"type":"text","text":" values"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"68"},{"text":", ","type":"text"},{"code":"111","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"103"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"represent the characters "},{"code":"D","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"o"},{"type":"text","text":", and "},{"type":"codeVoice","code":"g"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"whose UTF-8 representation is the same as their ASCII representation."},{"text":" ","type":"text"},{"text":"The next three decimal ","type":"text"},{"type":"codeVoice","code":"codeUnit"},{"type":"text","text":" values"},{"text":" ","type":"text"},{"type":"text","text":"("},{"type":"codeVoice","code":"226"},{"type":"text","text":", "},{"type":"codeVoice","code":"128"},{"type":"text","text":", "},{"code":"188","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"are a three-byte UTF-8 representation of the ","type":"text"},{"code":"DOUBLE EXCLAMATION MARK","type":"codeVoice"},{"type":"text","text":" character."},{"text":" ","type":"text"},{"text":"The last four ","type":"text"},{"code":"codeUnit","type":"codeVoice"},{"text":" values (","type":"text"},{"code":"240","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"159"},{"text":", ","type":"text"},{"type":"codeVoice","code":"144"},{"text":", ","type":"text"},{"code":"182","type":"codeVoice"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are a four-byte UTF-8 representation of the "},{"type":"codeVoice","code":"DOG FACE"},{"text":" character.","type":"text"}]},{"anchor":"Representaci%C3%B3n-UTF-16","text":"Representación UTF-16","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"You can access a UTF-16 representation of a "},{"code":"String","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"by iterating over its "},{"type":"codeVoice","code":"utf16"},{"type":"text","text":" property."},{"text":" ","type":"text"},{"type":"text","text":"This property is of type "},{"code":"String.UTF16View","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which is a collection of unsigned 16-bit (","type":"text"},{"type":"codeVoice","code":"UInt16"},{"text":") values,","type":"text"},{"text":" ","type":"text"},{"text":"one for each 16-bit code unit in the string’s UTF-16 representation:","type":"text"}],"type":"paragraph"},{"inlineContent":[{"identifier":"UTF16","type":"image"}],"type":"paragraph"},{"type":"codeListing","code":["for codeUnit in dogString.utf16 {","    print(\"\\(codeUnit) \", terminator: \"\")","}","print(\"\")","\/\/ Prints \"68 111 103 8252 55357 56374 \""],"syntax":"swift"},{"inlineContent":[{"text":"Again, the first three ","type":"text"},{"code":"codeUnit","type":"codeVoice"},{"text":" values","type":"text"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"68"},{"text":", ","type":"text"},{"code":"111","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"103"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"represent the characters "},{"code":"D","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"o"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"g"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"whose UTF-16 code units have the same values as in the string’s UTF-8 representation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(because these Unicode scalars represent ASCII characters)."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The fourth "},{"code":"codeUnit","type":"codeVoice"},{"text":" value (","type":"text"},{"code":"8252","type":"codeVoice"},{"text":") is a decimal equivalent of","type":"text"},{"text":" ","type":"text"},{"text":"the hexadecimal value ","type":"text"},{"type":"codeVoice","code":"203C"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which represents the Unicode scalar "},{"type":"codeVoice","code":"U+203C"},{"text":" ","type":"text"},{"type":"text","text":"for the "},{"type":"codeVoice","code":"DOUBLE EXCLAMATION MARK"},{"text":" character.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This character can be represented as a single code unit in UTF-16."}],"type":"paragraph"},{"inlineContent":[{"text":"The fifth and sixth ","type":"text"},{"code":"codeUnit","type":"codeVoice"},{"text":" values (","type":"text"},{"type":"codeVoice","code":"55357"},{"type":"text","text":" and "},{"code":"56374","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"are a UTF-16 surrogate pair representation of the ","type":"text"},{"type":"codeVoice","code":"DOG FACE"},{"type":"text","text":" character."},{"type":"text","text":" "},{"type":"text","text":"These values are a high-surrogate value of "},{"type":"codeVoice","code":"U+D83D"},{"type":"text","text":" (decimal value "},{"type":"codeVoice","code":"55357"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"and a low-surrogate value of ","type":"text"},{"code":"U+DC36","type":"codeVoice"},{"type":"text","text":" (decimal value "},{"type":"codeVoice","code":"56374"},{"text":").","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Representaci%C3%B3n-escalar-Unicode","text":"Representación escalar Unicode","level":3},{"type":"paragraph","inlineContent":[{"text":"You can access a Unicode scalar representation of a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by iterating over its "},{"type":"codeVoice","code":"unicodeScalars"},{"text":" property.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This property is of type "},{"code":"UnicodeScalarView","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which is a collection of values of type "},{"type":"codeVoice","code":"UnicodeScalar"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each "},{"code":"UnicodeScalar","type":"codeVoice"},{"type":"text","text":" has a "},{"type":"codeVoice","code":"value"},{"type":"text","text":" property that returns"},{"text":" ","type":"text"},{"text":"the scalar’s 21-bit value, represented within a ","type":"text"},{"code":"UInt32","type":"codeVoice"},{"text":" value:","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"UnicodeScalar","type":"image"}]},{"syntax":"swift","type":"codeListing","code":["for scalar in dogString.unicodeScalars {","    print(\"\\(scalar.value) \", terminator: \"\")","}","print(\"\")","\/\/ Prints \"68 111 103 8252 128054 \""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"value"},{"type":"text","text":" properties for the first three "},{"type":"codeVoice","code":"UnicodeScalar"},{"text":" values","type":"text"},{"type":"text","text":" "},{"text":"(","type":"text"},{"type":"codeVoice","code":"68"},{"type":"text","text":", "},{"type":"codeVoice","code":"111"},{"text":", ","type":"text"},{"type":"codeVoice","code":"103"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"once again represent the characters "},{"code":"D","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"o"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"g"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The fourth ","type":"text"},{"code":"codeUnit","type":"codeVoice"},{"text":" value (","type":"text"},{"code":"8252","type":"codeVoice"},{"type":"text","text":") is again a decimal equivalent of"},{"type":"text","text":" "},{"type":"text","text":"the hexadecimal value "},{"type":"codeVoice","code":"203C"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which represents the Unicode scalar ","type":"text"},{"code":"U+203C","type":"codeVoice"},{"type":"text","text":" "},{"text":"for the ","type":"text"},{"type":"codeVoice","code":"DOUBLE EXCLAMATION MARK"},{"type":"text","text":" character."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"value"},{"type":"text","text":" property of the fifth and final "},{"type":"codeVoice","code":"UnicodeScalar"},{"text":", ","type":"text"},{"type":"codeVoice","code":"128054"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"is a decimal equivalent of the hexadecimal value "},{"code":"1F436","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which represents the Unicode scalar "},{"type":"codeVoice","code":"U+1F436"},{"type":"text","text":" for the "},{"code":"DOG FACE","type":"codeVoice"},{"text":" character.","type":"text"}]},{"inlineContent":[{"text":"As an alternative to querying their ","type":"text"},{"code":"value","type":"codeVoice"},{"text":" properties,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"each "},{"type":"codeVoice","code":"UnicodeScalar"},{"type":"text","text":" value can also be used to construct a new "},{"type":"codeVoice","code":"String"},{"text":" value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"such as with string interpolation:"}],"type":"paragraph"},{"code":["for scalar in dogString.unicodeScalars {","    print(\"\\(scalar) \")","}","\/\/ D","\/\/ o","\/\/ g","\/\/ ‼","\/\/ 🐶"],"syntax":"swift","type":"codeListing"},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Conoce más acerca del uso del "},{"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}],"style":"note","name":"Software Beta"}]}],"references":{"https://developer.apple.com/documentation/swift/string#2919514":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/string#2919514","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/string#2919514","titleInlineContent":[{"type":"text","text":"Bridging Between String and NSString"}],"title":"Bridging Between String and NSString"},"https://developer.apple.com/es/support/beta-software/":{"url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"link","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","titleInlineContent":[{"type":"text","text":"software beta de Apple"}],"title":"software beta de Apple"},"UnicodeScalar":{"type":"image","identifier":"UnicodeScalar","variants":[{"url":"\/images\/org.swift.tspl\/UnicodeScalar@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/UnicodeScalar~dark@2x.png","traits":["2x","dark"]}],"alt":null},"https://developer.apple.com/documentation/swift/stringprotocol":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/stringprotocol","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/stringprotocol","titleInlineContent":[{"type":"codeVoice","code":"StringProtocol"}],"title":"StringProtocol"},"https://developer.apple.com/documentation/swift/substring":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/substring","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/substring","titleInlineContent":[{"type":"codeVoice","code":"Substring"}],"title":"Substring"},"multilineStringWhitespace":{"type":"image","identifier":"multilineStringWhitespace","variants":[{"url":"\/images\/org.swift.tspl\/multilineStringWhitespace@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/multilineStringWhitespace~dark@2x.png","traits":["2x","dark"]}],"alt":null},"stringSubstring":{"type":"image","identifier":"stringSubstring","variants":[{"url":"\/images\/org.swift.tspl\/stringSubstring@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/stringSubstring~dark@2x.png","traits":["2x","dark"]}],"alt":null},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"role":"collection","type":"topic","url":"\/documentation\/the-swift-programming-language","abstract":[],"title":"The Swift Programming Language (6)","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","kind":"article"},"UTF16":{"type":"image","identifier":"UTF16","variants":[{"url":"\/images\/org.swift.tspl\/UTF16@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/UTF16~dark@2x.png","traits":["2x","dark"]}],"alt":null},"UTF8":{"type":"image","identifier":"UTF8","variants":[{"url":"\/images\/org.swift.tspl\/UTF8@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/UTF8~dark@2x.png","traits":["2x","dark"]}],"alt":null}}}
>>>>>>> 2fa5d86d (yet one more fix attempt)
