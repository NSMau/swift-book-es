{
  "abstract" : [
    {
      "text" : "Explora las características y la sintaxis de Swift.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour"
  },
  "kind" : "article",
  "metadata" : {
    "title" : "Un Recorrido por Swift"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "inlineContent" : [
            {
              "text" : "Es costumbre que el primer programa en un nuevo lenguaje",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "imprima la frase “¡Hola, mundo!” en la pantalla.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "En Swift, esto se puede conseguir mediante una sola línea de código:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "print(\"¡Hola, mundo!\")",
            "\/\/ Imprime \"¡Hola, mundo!\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Si has desarollado anteriormente en C u Objective-C,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "esta sintaxis te resultará familiar;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "en Swift, esta línea de código representa un programa completo.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "No hace falta importar una biblioteca aparte",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para contar con funciones como entrada\/salida o manejo de cadenas de texto.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Todo código escrito en el ámbito (",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "scope",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ") global se utiliza",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "como punto de entrada para el programa,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "por lo que no necesitamos una función ",
              "type" : "text"
            },
            {
              "code" : "main()",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Tampoco hace falta escribir punto y coma",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "al final de cada declaración.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Esta guía te proporciona suficiente información",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para comenzar a desarrollar código en Swift",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "al enseñarte cómo realizar una variedad de tareas de programación.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "No te preocupes si hay algo que no entiendes —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "todo lo presentado en esta guía",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "se explica en detalle en el resto de este libro.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Valores-Sencillos",
          "level" : 2,
          "text" : "Valores Sencillos",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Usa ",
              "type" : "text"
            },
            {
              "code" : "let",
              "type" : "codeVoice"
            },
            {
              "text" : " para crear una constante y ",
              "type" : "text"
            },
            {
              "code" : "var",
              "type" : "codeVoice"
            },
            {
              "text" : " para crear una variable.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "No hace falta saber el valor de una constante a la hora de compilar,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "pero tal valor debe asignarse exactamente una única vez.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Esto significa que puedes usar constantes para nombrar un valor",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "que solo se define una vez, pero que se usa en muchas partes.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var miVariable = 42",
            "miVariable = 50",
            "let miConstante = 42"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Una constante o variable debe ser del mismo tipo",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "que el valor que se le quiera asignar.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Sin embargo, no siempre tienes que escribir el tipo explícitamente.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "El hecho de proporcionar un valor al crear una variable o constante,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "le permite al compilador inferir el tipo de dicha variable o constante.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "En el ejemplo anterior,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "el compilador infiere que ",
              "type" : "text"
            },
            {
              "code" : "miVariable",
              "type" : "codeVoice"
            },
            {
              "text" : " es un entero",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "porque su valor inicial es un entero.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Si el valor inicial no proporciona suficiente información",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(o si no hay un valor inicial),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "especifica el tipo escribiéndolo después de la variable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "separado por dos puntos (",
              "type" : "text"
            },
            {
              "code" : ":",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let enteroImplicito = 70",
            "let doubleImplicito = 70.0",
            "let doubleExplicito: Double = 70"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Crea una constante",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "con un tipo explícito de ",
                  "type" : "text"
                },
                {
                  "code" : "Float",
                  "type" : "codeVoice"
                },
                {
                  "text" : " y un valor de ",
                  "type" : "text"
                },
                {
                  "code" : "4",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Experimento",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los valores nunca se convierten a un tipo diferente implícitamente.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Si necesitas convertir un valor a un tipo diferente,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "debes crear —de manera explícita— una instancia del tipo deseado.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let etiqueta = \"El ancho es \"",
            "let ancho = 94",
            "let anchoDeLaEtiqueta = etiqueta + String(ancho)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Intenta removiendo la conversión a ",
                  "type" : "text"
                },
                {
                  "code" : "String",
                  "type" : "codeVoice"
                },
                {
                  "text" : " de la última línea.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "¿Cuál error te aparece?",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Experimento",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Hay una manera incluso más sencilla de insertar valores en una cadena de texto —",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "escribe el valor en paréntesis,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y agrega una barra invertida (",
              "type" : "text"
            },
            {
              "code" : "\\",
              "type" : "codeVoice"
            },
            {
              "text" : ") antes de los paréntesis.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Por ejemplo:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let manzanas = 3",
            "let naranjas = 5",
            "let totalManzanas = \"Tengo \\(manzanas) manzanas.\"",
            "let totalFrutas = \"Tengo \\(manzanas + naranjas) frutas.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Usa ",
                  "type" : "text"
                },
                {
                  "code" : "\\()",
                  "type" : "codeVoice"
                },
                {
                  "text" : " para",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "incluir un operación con números de coma flotante en una cadena de texto",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "y para incluir el nombre de alguien en un saludo.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Experimento",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Usa tres comillas dobles (",
              "type" : "text"
            },
            {
              "code" : "\"\"\"",
              "type" : "codeVoice"
            },
            {
              "text" : ") para cadenas de texto",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "que ocupan más de una línea.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "La sangría (",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "indentation",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ") al inicio de cada línea de la cadena es removida",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "siempre y cuando concuerde con la sangría de las comillas de cierre.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Por ejemplo:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let cita = \"\"\"",
            "        Aun cuando hay espacios en blanco a la izquierda,",
            "        las líneas como tal no llevan sangría.",
            "            Excepto por esta línea.",
            "        Las comillas dobles (\") pueden aparecer sin escaparlas.",
            "",
            "        Todavía tengo \\(manzanas + naranjas) frutas.",
            "        \"\"\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Crea arreglos y diccionarios usando corchetes (",
              "type" : "text"
            },
            {
              "code" : "[]",
              "type" : "codeVoice"
            },
            {
              "text" : "),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y accede a sus elementos referenciando",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "su índice o llave en corchetes.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Está permitido agregar una coma después del último elemento.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var frutas = [\"fresas\", \"limas\", \"mandarinas\"]",
            "frutas[1] = \"uvas\"",
            "",
            "var ocupaciones = [",
            "    \"Malcolm\": \"Capitán\",",
            "    \"Kaylee\": \"Mecánica\",",
            " ]",
            "ocupaciones[\"Jayne\"] = \"Relaciones Públicas\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los arreglos crecen automáticamente a medida que agregas elementos.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "frutas.append(\"moras\")",
            "print(frutas)",
            "\/\/ Imprime \"[\"fresas\", \"uvas\", \"mandarinas\", \"moras\"]\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "También puedes usar corchetes para crear un arreglo o un diccionario vacíos.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Para un arreglo, usa ",
              "type" : "text"
            },
            {
              "code" : "[]",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y, para un diccionario, usa ",
              "type" : "text"
            },
            {
              "code" : "[:]",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "frutas = []",
            "ocupaciones = [:]"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Si asignas un arreglo o un diccionario vacíos a una nueva variable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "o a algún otro lugar donde no hay ninguna información sobre el tipo,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "tendrás que especificarlo.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let arregloVacio: [String] = []",
            "let diccionarioVacio: [String: Float] = [:]"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Flujo-de-Control",
          "level" : 2,
          "text" : "Flujo de Control",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Usa ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " y ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " para crear condicionales,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y usa ",
              "type" : "text"
            },
            {
              "code" : "for-in",
              "type" : "codeVoice"
            },
            {
              "text" : ", ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : ", y ",
              "type" : "text"
            },
            {
              "code" : "repeat-while",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para crear ciclos.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "El uso de paréntesis alrededor de la condición",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "o de la variable del ciclo es opcional.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "El uso de llaves alrededor del cuerpo del ciclo es obligatorio.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let puntajesIndividuales = [75, 43, 103, 87, 12]",
            "var puntajeDelEquipo = 0",
            "",
            "for puntaje in puntajesIndividuales {",
            "    if puntaje > 50 {",
            "        puntajeDelEquipo += 3",
            "    } else {",
            "        puntajeDelEquipo += 1",
            "    }",
            "}",
            "",
            "print(puntajeDelEquipo)",
            "\/\/ Imprime \"11\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "En una instrucción ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "el condicional debe ser una expresión booleana;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "esto significa, que una instrucción tipo ",
              "type" : "text"
            },
            {
              "code" : "if puntaje { ... }",
              "type" : "codeVoice"
            },
            {
              "text" : " es un error,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "pues no se hace una comparación explícita con cero.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Puede escribir ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " o ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "después del signo igual (",
              "type" : "text"
            },
            {
              "code" : "=",
              "type" : "codeVoice"
            },
            {
              "text" : ") de una asignación",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "o después de ",
              "type" : "text"
            },
            {
              "code" : "return",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para elegir un valor en función de la condición.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let decoracionDelPuntaje = if puntajeDelEquipo > 10 {",
            "    \"🎉\"",
            "} else {",
            "    \"\"",
            "}",
            "print(\"Puntaje:\", puntajeDelEquipo, decoracionDelPuntaje)",
            "\/\/ Imprime \"Puntaje: 11 🎉\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Puedes usar ",
              "type" : "text"
            },
            {
              "code" : "if",
              "type" : "codeVoice"
            },
            {
              "text" : " y ",
              "type" : "text"
            },
            {
              "code" : "let",
              "type" : "codeVoice"
            },
            {
              "text" : " en conjunto",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para lidiar con valores que podrían no existir.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Estos valores son representados como opcionales.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Un valor opcional puede contener o un valor",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "o ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ", para indicar la ausencia de un valor.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Agrega un signo de interrogación (",
              "type" : "text"
            },
            {
              "code" : "?",
              "type" : "codeVoice"
            },
            {
              "text" : ") después del tipo de un valor",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para marcar dicho valor como opcional.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var cadenaOpcional: String? = \"Hola\"",
            "print(cadenaOpcional == nil)",
            "\/\/ Imprime \"false\"",
            "",
            "var nombreOpcional: String? = \"John Appleseed\"",
            "var saludo = \"¡Hola!\"",
            "",
            "if let nombre = nombreOpcional {",
            "    saludo = \"¡Hola, \\(nombre)!\"",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Cambia el valor de ",
                  "type" : "text"
                },
                {
                  "code" : "nombreOpcional",
                  "type" : "codeVoice"
                },
                {
                  "text" : " por ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "¿Cuál saludo obtienes?",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Agrega una cláusula ",
                  "type" : "text"
                },
                {
                  "code" : "else",
                  "type" : "codeVoice"
                },
                {
                  "text" : " que defina un saludo diferente",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "si ",
                  "type" : "text"
                },
                {
                  "code" : "nombreOpcional",
                  "type" : "codeVoice"
                },
                {
                  "text" : " es ",
                  "type" : "text"
                },
                {
                  "code" : "nil",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Experimento",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Si el valor opcional es ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "el condicional resulta ser ",
              "type" : "text"
            },
            {
              "code" : "false",
              "type" : "codeVoice"
            },
            {
              "text" : " y el código en las llaves es ignorado.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "En caso contrario, se extrae el valor opcional y se le asigna",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a la constante que le sigue a ",
              "type" : "text"
            },
            {
              "code" : "let",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "lo cual hace que el valor extraído esté disponible",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "dentro del bloque de código.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Otra forma de manejar valores opcionales",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "es proporcionar un valor predeterminado mediante el uso del operador ",
              "type" : "text"
            },
            {
              "code" : "??",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Si el valor opcional no existe,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "se usará el valor predeterminado en su lugar.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let alias: String? = nil",
            "let nombreCompleto: String = \"John Appleseed\"",
            "let saludoInformal = \"Hola, \\(alias ?? nombreCompleto)\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Puedes usar una sintaxis más concisa para extraer un valor,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "usando el mismo nombre para dicho valor extraído.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if let alias {",
            "    print(\"Hey, \\(alias)\")",
            "}",
            "\/\/ No imprime nada porque alias es nil."
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los ciclos ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : " soportan cualquier tipo de datos",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "al igual que una gran variedad de operaciones comparativas;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "estos no se limitan a enteros",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y comprobaciones de igualdad.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let vegetal = \"pimiento rojo\"",
            "switch vegetal {",
            "case \"apio\":",
            "    print(\"Un par de vegetales más y tendrás un buen jugo verde.\")",
            "case \"pepino\", \"cebolla\":",
            "    print(\"Útil para una buena ensalada.\")",
            "case let x where x.hasSuffix(\"pimiento\"):",
            "    print(\"¿Es un \\(x) picante?\")",
            "default:",
            "    print(\"Todo sabe bien en una sopa.\")",
            "}",
            "\/\/ Imprime \"¿Es un pimiento rojo picante?\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Remueve el caso ",
                  "type" : "text"
                },
                {
                  "code" : "default",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "¿Cuál es el error que aparece?",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Experimento",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Observa cómo es posible usar ",
              "type" : "text"
            },
            {
              "code" : "let",
              "type" : "codeVoice"
            },
            {
              "text" : " con un patrón",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para asignar, a una constante,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "el valor que concuerde con dicho patrón.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Una vez ejecutado el código dentro del caso que concuerda,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "el programa abandona la sentencia ",
              "type" : "text"
            },
            {
              "code" : "switch",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "La ejecución no continúa al siguiente caso,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "por lo que no tienes que indicar, explícitamente, la salida del ciclo",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "al final del código de cada caso.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Puedes usar ",
              "type" : "text"
            },
            {
              "code" : "for",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " para iterar sobre los elementos de un diccionario,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "proporcionando un par de nombres a usar",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para cada par llave-valor.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Los diccionarios son colecciones sin un orden particular,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "por lo que se itera sobre sus llaves y valores",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "de manera arbitraria.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let numerosInteresantes = [",
            "    \"Primos\": [2, 3, 5, 7, 11, 13],",
            "    \"Fibonacci\": [1, 1, 2, 3, 5, 8],",
            "    \"Cuadrados\": [1, 4, 9, 16, 25],",
            "]",
            "var numeroMayor = 0",
            "",
            "for (_, numeros) in numerosInteresantes {",
            "    for numero in numeros {",
            "        if numero > numeroMayor {",
            "            numeroMayor = numero",
            "        }",
            "    }",
            "}",
            "",
            "print(numeroMayor)",
            "\/\/ Imprime \"25\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Reemplaza ",
                  "type" : "text"
                },
                {
                  "code" : "_",
                  "type" : "codeVoice"
                },
                {
                  "text" : " por el nombre de una variable",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "y hazle seguimiento al tipo de número que resultó ser el mayor.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Experimento",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Usa ",
              "type" : "text"
            },
            {
              "code" : "while",
              "type" : "codeVoice"
            },
            {
              "text" : " para repetir un bloque de código hasta que una condición cambie.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "La condición de un ciclo puede ir al final, para asegurar que este se ejecute al menos una vez.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var n = 2",
            "",
            "while n < 100 {",
            "    n *= 2",
            "}",
            "",
            "print(n)",
            "\/\/ Imprime \"128\"",
            "",
            "var m = 2",
            "",
            "repeat {",
            "    m *= 2",
            "} while m < 100",
            "",
            "print(m)",
            "\/\/ Imprime \"128\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Cambia la condición de ",
                  "type" : "text"
                },
                {
                  "code" : "m < 100",
                  "type" : "codeVoice"
                },
                {
                  "text" : " a ",
                  "type" : "text"
                },
                {
                  "code" : "m < 0",
                  "type" : "codeVoice"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "para ver cómo ",
                  "type" : "text"
                },
                {
                  "code" : "while",
                  "type" : "codeVoice"
                },
                {
                  "text" : " y ",
                  "type" : "text"
                },
                {
                  "code" : "repeat",
                  "type" : "codeVoice"
                },
                {
                  "text" : "-",
                  "type" : "text"
                },
                {
                  "code" : "while",
                  "type" : "codeVoice"
                },
                {
                  "text" : " se comportan diferente",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "cuando la condición del ciclo es verdadera desde un inicio.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Experimento",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Es posible tener índices en un ciclo,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "mediante el uso de ",
              "type" : "text"
            },
            {
              "code" : "..<",
              "type" : "codeVoice"
            },
            {
              "text" : " para crear un rango de índices.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var total = 0",
            "",
            "for i in 0..<4 {",
            "    total += i",
            "}",
            "",
            "print(total)",
            "\/\/ Imprime \"6\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Usa ",
              "type" : "text"
            },
            {
              "code" : "..<",
              "type" : "codeVoice"
            },
            {
              "text" : " para crear un rango que omita el valor superior,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y usa ",
              "type" : "text"
            },
            {
              "code" : "...",
              "type" : "codeVoice"
            },
            {
              "text" : " para crear uno que incluya ambos valores.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Funciones-y-Clausuras",
          "level" : 2,
          "text" : "Funciones y Clausuras",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Usa ",
              "type" : "text"
            },
            {
              "code" : "func",
              "type" : "codeVoice"
            },
            {
              "text" : " para declarar una función.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Para llamar una función,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "escribe una lista de argumentos en paréntesis después de su nombre.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Usa ",
              "type" : "text"
            },
            {
              "code" : "->",
              "type" : "codeVoice"
            },
            {
              "text" : " para separar el nombre de los parámetros y sus tipos",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "del tipo que devuelve la función.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func saludar(persona: String, dia: String) -> String {",
            "    return \"Hola, \\(persona), hoy es \\(dia).\"",
            "}",
            "saludar(persona: \"Bob\", dia: \"martes\")"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Remueve el parámetro ",
                  "type" : "text"
                },
                {
                  "code" : "dia",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Agrega un parámetro que incluya el almuerzo especial de hoy en el saludo.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Experimento",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Por defecto,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "las funciones usan los nombres de sus parámetros",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "como etiquetas para sus argumentos.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Crea tu propia etiqueta de argumento anteponiéndola al nombre del parámetro,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "o agrega ",
              "type" : "text"
            },
            {
              "code" : "_",
              "type" : "codeVoice"
            },
            {
              "text" : " para no usar una etiqueta de argumento.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func saludar(_ persona: String, el dia: String) -> String {",
            "    return \"Hola, \\(persona), hoy es \\(dia).\"",
            "}",
            "saludar(\"John\", el: \"miércoles\")"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Usa una tupla para crear un valor compuesto;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "por ejemplo, para devolver múltiples valores desde una función.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Los elementos de una tupla se pueden referenciar",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "bien sea por nombre o por número.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func calcularEstadisticas(puntajes: [Int]) -> (min: Int, max: Int, suma: Int) {",
            "    var min = puntajes[0]",
            "    var max = puntajes[0]",
            "    var suma = 0",
            "",
            "    for puntaje in puntajes {",
            "        if puntaje > max {",
            "            max = puntaje",
            "        } else if puntaje < min {",
            "            min = puntaje",
            "        }",
            "",
            "        suma += puntaje",
            "    }",
            "",
            "    return (min, max, suma)",
            "}",
            "",
            "let estadisticas = calcularEstadisticas(puntajes: [5, 3, 100, 3, 9])",
            "print(estadisticas.suma)",
            "\/\/ Imprime \"120\"",
            "print(estadisticas.2)",
            "\/\/ Imprime \"120\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Las funciones pueden anidarse.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Las funciones anidadas tienen acceso a variables",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "que hayan sido declaradas en la función externa.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Puedes usar funciones anidadas",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para organizar el código de una función",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "que es larga o compleja.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func devolverQuince() -> Int {",
            "    var y = 10",
            "    func agregar() {",
            "        y += 5",
            "    }",
            "    agregar()",
            "    return y",
            "}",
            "devolverQuince()"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Las funciones son un tipo de primera clase.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Esto quiere decir que una función puede devolver otra función como su valor.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func crearIncrementador() -> ((Int) -> Int) {",
            "    func agregarUno(numero: Int) -> Int {",
            "        return 1 + numero",
            "    }",
            "",
            "    return agregarUno",
            "}",
            "var incrementar = crearIncrementador()",
            "incrementar(7)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Una función puede tomar a otra función como uno de sus argumentos.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func coincideAlguno(lista: [Int], condicion: (Int) -> Bool) -> Bool {",
            "",
            "    for elemento in lista {",
            "        if condicion(elemento) {",
            "            return true",
            "        }",
            "    }",
            "",
            "    return false",
            "}",
            "",
            "func menorQueDiez(numero: Int) -> Bool {",
            "    return numero < 10",
            "}",
            "",
            "var numeros = [20, 19, 7, 12]",
            "coincideAlguno(lista: numeros, condicion: menorQueDiez)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Las funciones son, en realidad, un caso especial de las clausuras:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "bloques de código que pueden ser llamados más tarde.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "El código en una clausura tiene acceso a elementos como variables y funciones",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "que están disponibles en el ámbito en el cual se creó la clausura,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "incluso si la clausura se encuentra en un ámbito diferente al ejecutarse;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "ya has visto un ejemplo de esto con las funciones anidadas.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Puedes crear una clausura anónima",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "al encerrar el código en llaves (",
              "type" : "text"
            },
            {
              "code" : "{}",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Usa ",
              "type" : "text"
            },
            {
              "code" : "in",
              "type" : "codeVoice"
            },
            {
              "text" : " para separar los argumentos y el tipo devuelto por la función",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "del cuerpo de la función.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "numeros.map({ (numero: Int) -> Int in",
            "    let resultado = 3 * numero",
            "    return resultado",
            "})"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Reescribe la clausura de manera que devuelva cero",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "para todos los números impares.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Experimento",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Existen muchas maneras de crear una clausura de forma más concisa.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Cuando se conoce el tipo de una clausura,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "como en el caso de un ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "callback",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " para un delegado,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "puedes omitir el tipo de sus parámetros,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "el tipo devuelto, o ambos.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Las clausuras de una sola sentencia devuelven el valor",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "de su única sentencia de manera implícita.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let numerosMapeados = numeros.map({ numero in 3 * numero })",
            "print(numerosMapeados)",
            "\/\/ Imprime \"[60, 57, 21, 36]\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Puedes referenciar parámetros por número en vez de nombre;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "este enfoque es, especialmente, útil para clausuras muy concisas.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Una clausura que se pasa como el último argumento de una función",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "puede aparecer inmediatamente después de los paréntesis.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Cuando una clausura es el único argumento de una función,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "puedes omitir los paréntesis por completo.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let numerosOrdenados = numeros.sorted { $0 > $1 }",
            "print(numerosOrdenados)",
            "\/\/ Imprime \"[20, 19, 12, 7]\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Objetos-y-Clases",
          "level" : 2,
          "text" : "Objetos y Clases",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Usa ",
              "type" : "text"
            },
            {
              "code" : "class",
              "type" : "codeVoice"
            },
            {
              "text" : " seguido del nombre de la clase para crear una clase.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "La declaración de una propiedad en una clase, se escribe igual",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "que la declaración de una constante o variable,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "excepto que esta existiría en el contexto de una clase.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Similarmente, la declaración de métodos y funciones se hace de la misma forma.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class Figura {",
            "    var numeroDeLados = 0",
            "",
            "    func descripcionBasica() -> String {",
            "        return \"Una figura con \\(numeroDeLados) lados.\"",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Agrega una propiedad constante con ",
                  "type" : "text"
                },
                {
                  "code" : "let",
                  "type" : "codeVoice"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "y otro método que tome un argumento.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Experimento",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Crea una instancia de una clase",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "al poner paréntesis después del nombre de la clase.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Usa la sintaxis de punto para acceder",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a las propiedades y métodos de la instancia.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var figura = Figura()",
            "figura.numeroDeLados = 7",
            "var descripcionDeLaFigura = figura.descripcionBasica()"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "A esta versión de la clase ",
              "type" : "text"
            },
            {
              "code" : "Figura",
              "type" : "codeVoice"
            },
            {
              "text" : " le hace falta algo importante:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "un inicializador que configure la clase al crear una instancia.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Usa ",
              "type" : "text"
            },
            {
              "code" : "init",
              "type" : "codeVoice"
            },
            {
              "text" : " para crear uno.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class FiguraConNombre {",
            "    var numeroDeLados: Int = 0",
            "    var nombre: String",
            "",
            "    init(nombre: String) {",
            "       self.nombre = nombre",
            "    }",
            "",
            "    func descripcionBasica() -> String {",
            "       return \"Una figura con \\(numeroDeLados) lados.\"",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Observa cómo se usa ",
              "type" : "text"
            },
            {
              "code" : "self",
              "type" : "codeVoice"
            },
            {
              "text" : " para diferenciar la propiedad ",
              "type" : "text"
            },
            {
              "code" : "nombre",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "del argumento (del inicializador) ",
              "type" : "text"
            },
            {
              "code" : "nombre",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Al crear una instancia de una clase,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "los argumentos del inicializador se pasan como cuando se llama una función.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Cada propiedad requiere que se le asigne un valor,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "bien sea al declararla (como con ",
              "type" : "text"
            },
            {
              "code" : "numeroDeLados",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "o en el inicializador (como con ",
              "type" : "text"
            },
            {
              "code" : "nombre",
              "type" : "codeVoice"
            },
            {
              "text" : ").",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Usa ",
              "type" : "text"
            },
            {
              "code" : "deinit",
              "type" : "codeVoice"
            },
            {
              "text" : " para crear un «desinicializador» (del inglés ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "deinitializer",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "si necesitas llevar a cabo alguna limpieza",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "antes de que el objeto sea «desasignado» (del inglés ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "deallocated",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ").",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Las subclases incluyen el nombre de su súperclase",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "después de su propio nombre,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "separados por una coma.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "No es requerimiento para las clases ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "subclasificar",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " ninguna clase base estándar,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "por lo que puedes incluir u omitir una súperclase si así lo requieres.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los métodos de una subclase que sustituyen la implementación de una súperclase",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "se marcan con ",
              "type" : "text"
            },
            {
              "code" : "override",
              "type" : "codeVoice"
            },
            {
              "text" : ";",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "sustituir un método por accidente, sin usar ",
              "type" : "text"
            },
            {
              "code" : "override",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "es detectado por el compilador como un error.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "El compilador también detecta métodos con ",
              "type" : "text"
            },
            {
              "code" : "override",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "que no sustituyen ningún método de la súperclase.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class Cuadrado: FiguraConNombre {",
            "    var longitudDeLosLados: Double",
            "",
            "    init(longitudDeLosLados: Double, nombre: String) {",
            "        self.longitudDeLosLados = longitudDeLosLados",
            "        super.init(nombre: nombre)",
            "        numeroDeLados = 4",
            "    }",
            "",
            "    func area() -> Double {",
            "        return longitudDeLosLados * longitudDeLosLados",
            "    }",
            "",
            "    override func descripcionBasica() -> String {",
            "        return \"Un cuadrado con lados de longitud \\(longitudDeLosLados).\"",
            "    }",
            "}",
            "let prueba = Cuadrado(longitudDeLosLados: 5.2, name: \"mi cuadrado de prueba\")",
            "prueba.area()",
            "prueba.descripcionBasica()"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Crea otra subclase de ",
                  "type" : "text"
                },
                {
                  "code" : "FiguraConNombre",
                  "type" : "codeVoice"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "llamada ",
                  "type" : "text"
                },
                {
                  "code" : "Circulo",
                  "type" : "codeVoice"
                },
                {
                  "text" : ",",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "que tome un radio y un nombre",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "como argumentos para su inicializador.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Implementa los métodos ",
                  "type" : "text"
                },
                {
                  "code" : "area()",
                  "type" : "codeVoice"
                },
                {
                  "text" : " y ",
                  "type" : "text"
                },
                {
                  "code" : "descripcionBasica()",
                  "type" : "codeVoice"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "en la clase ",
                  "type" : "text"
                },
                {
                  "code" : "Circulo",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Experimento",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Aparte de ser simples propiedades que se pueden almacenar,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "las propiedades pueden tener un ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "getter",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " y un ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "setter",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class TrianguloEquilatero: FiguraConNombre {",
            "    var longitudDeLosLados: Double = 0.0",
            "",
            "    init(longitudDeLosLados: Double, nombre: String) {",
            "        self.longitudDeLosLados = longitudDeLosLados",
            "        super.init(nombre: nombre)",
            "        numeroDeLados = 3",
            "    }",
            "",
            "    var perimetro: Double {",
            "        get {",
            "             return 3.0 * longitudDeLosLados",
            "        }",
            "        set {",
            "            longitudDeLosLados = newValue \/ 3.0",
            "        }",
            "    }",
            "",
            "    override func descripcionBasica() -> String {",
            "        return \"Un triángulo equilátero con lados de longitud \\(longitudDeLosLados).\"",
            "    }",
            "}",
            "var triangulo = TrianguloEquilatero(longitudDeLosLados: 3.1, nombre: \"un triángulo\")",
            "print(triangulo.perimetro)",
            "\/\/ Imprime \"9.3\"",
            "triangulo.perimetro = 9.9",
            "print(triangulo.longitudDeLosLados)",
            "\/\/ Imprime \"3.3000000000000003\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "En el ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "setter",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " de ",
              "type" : "text"
            },
            {
              "code" : "perimetro",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "el nuevo valor tiene el nombre implícito de ",
              "type" : "text"
            },
            {
              "code" : "newValue",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Puedes proporcionar un nombre explícito en paréntesis después de ",
              "type" : "text"
            },
            {
              "code" : "set",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Observa que el inicializador de la clase ",
              "type" : "text"
            },
            {
              "code" : "TrianguloEquilatero",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "tiene tres pasos diferentes:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Establecer el valor de las propiedades declaradas por la subclase.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Llamar al inicializador de la súperclase.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Cambiar el valor de las propiedades definidas por la súperclase.",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "Cualquier otra configuración adicional que use métodos, ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "getters",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : ", o ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "setters",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "también puede llevarse a cabo en este punto.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "orderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "Si no necesitas calcular la propiedad,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "pero igual necesitas proporcionar código",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para ejecutar antes y después de establecer un nuevo valor,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "usa ",
              "type" : "text"
            },
            {
              "code" : "willSet",
              "type" : "codeVoice"
            },
            {
              "text" : " y ",
              "type" : "text"
            },
            {
              "code" : "didSet",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "El código que proporciones se ejecutará",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "cada vez que el valor cambie fuera del inicializador.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Por ejemplo, la clase a continuación se asegura",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "de que la longitud de los lados de su triángulo",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "siempre sea la misma que la longitud de los lados de su cuadrado.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class TrianguloYCuadrado {",
            "    var triangulo: TrianguloEquilatero {",
            "        willSet {",
            "            cuadrado.longitudDeLosLados = newValue.longitudDeLosLados",
            "        }",
            "    }",
            "",
            "    var cuadrado: Cuadrado {",
            "        willSet {",
            "            triangulo.longitudDeLosLados = newValue.longitudDeLosLados",
            "        }",
            "    }",
            "",
            "    init(tamano: Double, nombre: String) {",
            "        cuadrado = Cuadrado(longitudDeLosLados: tamano, nombre: nombre)",
            "        triangulo = TrianguloEquilatero(longitudDeLosLados: tamano, nombre: nombre)",
            "    }",
            "}",
            "",
            "var trianguloYCuadrado = TrianguloYCuadrado(tamano: 10, nombre: \"otra figura de prueba\")",
            "print(trianguloYCuadrado.cuadrado.longitudDeLosLados)",
            "\/\/ Imprime \"10.0\"",
            "print(trianguloYCuadrado.triangulo.longitudDeLosLados)",
            "\/\/ Imprime \"10.0\"",
            "trianguloYCuadrado.cuadrado = Cuadrado(longitudDeLosLados: 50, nombre: \"cuadrado más grande\")",
            "print(trianguloYCuadrado.triangulo.longitudDeLosLados)",
            "\/\/ Imprime \"50.0\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Al trabajar con valores opcionales,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "puedes escribir ",
              "type" : "text"
            },
            {
              "code" : "?",
              "type" : "codeVoice"
            },
            {
              "text" : " antes de operaciones como métodos, propiedades, y ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "subscripting",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Si el valor antes de ",
              "type" : "text"
            },
            {
              "code" : "?",
              "type" : "codeVoice"
            },
            {
              "text" : " es ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "todo lo que sigue a ",
              "type" : "text"
            },
            {
              "code" : "?",
              "type" : "codeVoice"
            },
            {
              "text" : " es ignorado",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y el valor de toda la expresión es ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "En caso contrario, se extrae el valor opcional",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y todo lo que sigue a ",
              "type" : "text"
            },
            {
              "code" : "?",
              "type" : "codeVoice"
            },
            {
              "text" : " opera sobre el valor extraído.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "En ambos casos,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "el valor de toda la expresión es un valor opcional.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let cuadradoOpcional: Cuadrado? = Cuadrado(longitudDeLosLados: 2.5, nombre: \"cuadrado opcional\")",
            "let longitudDeLosLados = cuadradoOpcional?.longitudDeLosLados"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Enumeraciones-y-Estructuras",
          "level" : 2,
          "text" : "Enumeraciones y Estructuras",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Usa ",
              "type" : "text"
            },
            {
              "code" : "enum",
              "type" : "codeVoice"
            },
            {
              "text" : " para crear una enumeración.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Al igual que las clases y todos los demás tipos con nombre,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "las enumeraciones pueden tener métodos asociados con ellas.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "enum Escala: Int {",
            "    case _as = 1",
            "    case dos, tres, cuatro, cinco, seis, siete, ocho, nueve, diez",
            "    case jack, reina, rey",
            "",
            "    func descripcionBasica() -> String {",
            "        switch self {",
            "        case ._as:",
            "            return \"as\"",
            "        case .jack:",
            "            return \"jack\"",
            "        case .reina:",
            "            return \"reina\"",
            "        case .rey:",
            "            return \"rey\"",
            "        default:",
            "            return String(self.rawValue)",
            "        }",
            "    }",
            "}",
            "",
            "let _as = Escala._as",
            "let valorBrutoDeAs = _as.rawValue"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Crea una función que compare dos valores de tipo ",
                  "type" : "text"
                },
                {
                  "code" : "Escala",
                  "type" : "codeVoice"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "comparando sus valores brutos.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Experimento",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "De manera predeterminada, Swift asigna los valores brutos comenzando por cero",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y aumentando en uno cada vez,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "pero puedes cambiar dicho comportamiento al especificar valores explícitamente.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "En el ejemplo anterior, ",
              "type" : "text"
            },
            {
              "code" : "_as",
              "type" : "codeVoice"
            },
            {
              "text" : " recibe, explícitamente, un valor bruto de ",
              "type" : "text"
            },
            {
              "code" : "1",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y el resto de los valores brutos se asignan en orden.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "También puedes usar cadenas de texto o números de coma flotante",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "como el tipo bruto de una enumeración.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Usa la propiedad ",
              "type" : "text"
            },
            {
              "code" : "rawValue",
              "type" : "codeVoice"
            },
            {
              "text" : " para acceder al valor bruto del caso de una enumeración.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Utiliza el inicializador ",
              "type" : "text"
            },
            {
              "code" : "init?(rawValue:)",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para crear una instancia de una enumeración a partir de un valor bruto.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Este inicializador devuelve el caso (de la enumeración)",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "que coincida con el valor bruto",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "o ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " si no existe una enumeración ",
              "type" : "text"
            },
            {
              "code" : "Escala",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if let escalaTransformada = Escala(rawValue: 3) {",
            "    let descripcionDelTres = escalaTransformada.descripcionBasica()",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Los valores de los casos de una enumeración son valores reales,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y no solo otra forma de escribir sus valores brutos.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "De hecho,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "en los casos en los que no existe un valor bruto significativo,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "no es necesario que proporciones uno.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "enum Palo {",
            "    case picas, corazones, diamantes, treboles",
            "",
            "    func descripcionBasica() -> String {",
            "        switch self {",
            "        case .picas:",
            "            return \"picas\"",
            "        case .corazones:",
            "            return \"corazones\"",
            "        case .diamantes:",
            "            return \"diamantes\"",
            "        case .treboles:",
            "            return \"treboles\"",
            "        }",
            "    }",
            "}",
            "",
            "let corazones = Palo.corazones",
            "let descripcionDeCorazones = corazones.descripcionBasica()"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Crea un método ",
                  "type" : "text"
                },
                {
                  "code" : "color()",
                  "type" : "codeVoice"
                },
                {
                  "text" : " para la enumeración ",
                  "type" : "text"
                },
                {
                  "code" : "Palo",
                  "type" : "codeVoice"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "que devuelva “negro” para picas y tréboles, y “rojo” para corazones y diamantes.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Experimento",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Fíjate en las dos formas en las que se hizo referencia",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "al caso ",
              "type" : "text"
            },
            {
              "code" : "corazones",
              "type" : "codeVoice"
            },
            {
              "text" : " de la enumeración:",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "al asignar un valor a la constante ",
              "type" : "text"
            },
            {
              "code" : "corazones",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "el caso ",
              "type" : "text"
            },
            {
              "code" : "Palo.corazones",
              "type" : "codeVoice"
            },
            {
              "text" : " se referencia por su nombre completo",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "porque no se especificó un tipo explícito para la constante.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Dentro del ciclo ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "switch",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "el caso se referencia mediante la forma abreviada ",
              "type" : "text"
            },
            {
              "code" : ".corazones",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "porque ya sabemos que el valor de ",
              "type" : "text"
            },
            {
              "code" : "self",
              "type" : "codeVoice"
            },
            {
              "text" : " es un tipo de palo.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Puedes utilizar la forma abreviada",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "cada vez que conozcas el tipo del valor por anticipado.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Si una enumeración tiene valores brutos,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "se establece que dicho valores forman parte de la declaración,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "lo que significa que cada instancia de un caso de enumeración en particular",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "siempre tendrá el mismo valor bruto.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Otra opción para los casos de enumeraciones",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "es tener valores asociados con el caso;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "estos valores se determinan al crear la instancia",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y pueden ser diferentes para cada instancia de un caso de enumeración.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Puedes ver a los valores asociados",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "como valores que se comportan de manera similar a las propiedades almacenadas",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "de la instancia del caso de enumeración.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Por ejemplo,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "considera el caso en el que se le pide a un servidor",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "las horas de salida y puesta del sol.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "El servidor responderá con la información solicitada",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "o responderá con una descripción de lo que haya salido mal.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "enum RespuestaDelServidor {",
            "    case resultado(String, String)",
            "    case falla(String)",
            "}",
            "",
            "let exito = RespuestaDelServidor.resultado(\"6:00 am\", \"6:30 pm\")",
            "let error = RespuestaDelServidor.falla(\"Se ha agotado el queso.\")",
            "",
            "switch exito {",
            "case let .resultado(amanecer, atardecer):",
            "    print(\"El amanecer es a las \\(amanecer) y el atardecer es a las \\(atardecer).\")",
            "case let .falla(mensaje):",
            "    print(\"Error... \\(mensaje)\")",
            "}",
            "\/\/ Imprime \"El amanecer es a las 6:00 am y el atardecer es a las 6:30 pm.\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Agrega un tercer caso a ",
                  "type" : "text"
                },
                {
                  "code" : "RespuestaDelServidor",
                  "type" : "codeVoice"
                },
                {
                  "text" : " y al ciclo ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "switch",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Experimento",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Observa cómo las horas del amanecer y del atardecer",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "se extraen del valor ",
              "type" : "text"
            },
            {
              "code" : "RespuestaDelServidor",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "como parte de la comparación del valor con los casos del ciclo ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "switch",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Usa ",
              "type" : "text"
            },
            {
              "code" : "struct",
              "type" : "codeVoice"
            },
            {
              "text" : " para crear una estructura.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Las estructuras soportan muchos de los mismos comportamientos que las clases,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "incluyendo métodos e inicializadores.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Una de las diferencias más importantes",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "entre las estructuras y las clases es que",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "las estructuras siempre se copian cuando se pasan en el código,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "mientras que las clases se pasan por referencia.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct Carta {",
            "    var escala: Escala",
            "    var palo: Palo",
            "",
            "    func descripcionBasica() -> String {",
            "        return \"El \\(escala.descripcionBasica()) de \\(palo.descripcionBasica())\"",
            "    }",
            "}",
            "",
            "let tresDePicas = Carta(escala: .tres, palo: .picas)",
            "let descripcionDelTresDePicas = tresDePicas.descripcionBasica()"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Crea una función que devuelva un arreglo que contenga",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "una baraja completa de cartas,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "con una carta de cada combinación de escala y palo.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Experimento",
          "style" : "note",
          "type" : "aside"
        },
        {
          "anchor" : "Concurrencia",
          "level" : 2,
          "text" : "Concurrencia",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Usa ",
              "type" : "text"
            },
            {
              "code" : "async",
              "type" : "codeVoice"
            },
            {
              "text" : " para marcar una función que se ejecuta de manera asíncrona:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func buscarIDDeUsuario(en servidor: String) async -> Int {",
            "    if servidor == \"principal\" {",
            "        return 97",
            "    }",
            "",
            "    return 501",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Para marcar el llamado a una función asíncrona,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "agrega la palabra clave ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : " antes de la invocación de la función:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func buscarNombreDeUsuario(en servidor: String) async -> String {",
            "    let idDeUsuario = await buscarIDDeUsuario(en: servidor)",
            "",
            "    if idDeUsuario == 501 {",
            "        return \"John Appleseed\"",
            "    }",
            "",
            "    return \"Visitante\"",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Usa ",
              "type" : "text"
            },
            {
              "code" : "async let",
              "type" : "codeVoice"
            },
            {
              "text" : " para llamar a una función asíncrona",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "permitiéndole ejecutarse en paralelo con otro código asíncrono.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Si necesitas usar el valor que devuelve, utiliza ",
              "type" : "text"
            },
            {
              "code" : "await",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func conectarUsuario(a servidor: String) async {",
            "    async let idDeUsuario = buscarIDDeUsuario(en: servidor)",
            "    async let nombreDeUsuario = buscarNombreDeUsuario(en: servidor)",
            "    let saludo = await \"Hola, \\(nombreDeUsuario), ID de usuario \\(idDeUsuario)\"",
            "",
            "    print(greeting)",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Usa ",
              "type" : "text"
            },
            {
              "code" : "Task",
              "type" : "codeVoice"
            },
            {
              "text" : " para invocar funciones asíncronas desde código sincrónico,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "sin tener que esperar a que estas devuelvan su valor.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "Task {",
            "    await conectarUsuario(a: \"principal\")",
            "}",
            "\/\/ Imprime \"Hola, Visitante, ID de usuario 97\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Protocolos-y-Extensiones",
          "level" : 2,
          "text" : "Protocolos y Extensiones",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Usa ",
              "type" : "text"
            },
            {
              "code" : "protocol",
              "type" : "codeVoice"
            },
            {
              "text" : " para declarar un protocolo.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "protocol EjemploDeProtocolo {",
            "     var descripcionBasica: String { get }",
            "     mutating func ajustar()",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Las clases, enumeraciones, y estructuras pueden adoptar protocolos.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class ClaseBasica: EjemploDeProtocolo {",
            "     var descripcionBasica: String = \"Una clase muy básica.\"",
            "     var otraPropiedad: Int = 69105",
            "",
            "     func ajustar() {",
            "          descripcionBasica += \" Ahora 100% ajustada.\"",
            "     }",
            "}",
            "",
            "var a = ClaseBasica()",
            "a.ajustar()",
            "let descripcionDeA = a.descripcionBasica",
            "",
            "struct EstructuraBasica: EjemploDeProtocolo {",
            "     var descripcionBasica: String = \"Una estructura básica\"",
            "",
            "     mutating func ajustar() {",
            "          descripcionBasica += \" (ajustada)\"",
            "     }",
            "}",
            "",
            "var b = EstructuraBasica()",
            "b.ajustar()",
            "let descripcionDeB = b.descripcionBasica"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Agrega otro requerimiento a ",
                  "type" : "text"
                },
                {
                  "code" : "EjemploDeProtocolo",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "¿Qué cambios debes hacer en",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "code" : "ClaseBasica",
                  "type" : "codeVoice"
                },
                {
                  "text" : " y ",
                  "type" : "text"
                },
                {
                  "code" : "EstructuraBasica",
                  "type" : "codeVoice"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "de manera que estas sigan estando en conformidad con el protocolo?",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Experimento",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Observa el uso de la palabra clave ",
              "type" : "text"
            },
            {
              "code" : "mutating",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "en la declaración de ",
              "type" : "text"
            },
            {
              "code" : "EstructuraBasica",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para marcar un método que modifica la estructura.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "La declaración de ",
              "type" : "text"
            },
            {
              "code" : "ClaseBasica",
              "type" : "codeVoice"
            },
            {
              "text" : " no requiere",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "que ninguno de sus métodos esté marcado como mutante",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "ya que los métodos de una clase siempre pueden modificar la clase misma.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Utiliza ",
              "type" : "text"
            },
            {
              "code" : "extension",
              "type" : "codeVoice"
            },
            {
              "text" : " para agregar funcionalidad a un tipo existente,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "como nuevos métodos y propiedades calculadas.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Puedes usar una extensión para hacer que un tipo se ajuste a un protocolo,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "bien sea un tipo que se declara en otro lugar,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "o incluso un tipo que importas desde una biblioteca o ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "framework",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "extension Int: EjemploDeProtocolo {",
            "    var descripcionBasica: String {",
            "        return \"El número \\(self)\"",
            "    }",
            "",
            "    mutating func ajustar() {",
            "        self += 42",
            "    }",
            " }",
            "",
            "print(7.descripcionBasica)",
            "\/\/ Imprime \"El número 7\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Crea una extensión para el tipo ",
                  "type" : "text"
                },
                {
                  "code" : "Double",
                  "type" : "codeVoice"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "que agregue la propiedad ",
                  "type" : "text"
                },
                {
                  "code" : "valorAbsoluto",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Experimento",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Puedes usar el nombre de un protocolo como cualquier otro tipo con nombre;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "por ejemplo, para crear una colección de objetos",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "que tiene tipos diferentes,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "pero que todos se ajusten a un solo protocolo.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Al trabajar con valores cuyo tipo es un tipo de protocolo,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "los métodos externos a la definición del protocolo no estarán disponibles.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let valorProtocolo: any EjemploDeProtocolo = a",
            "print(valorProtocolo.descripcionBasica)",
            "\/\/ Imprime \"Una clase muy básica. Ahora 100% ajustada.\"",
            "\/\/ print(valorProtocolo.otraPropiedad)  \/\/ Habilita esta línea para ver el error"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Aun cuando el tipo de runtime de la variable ",
              "type" : "text"
            },
            {
              "code" : "valorProtocolo",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "es del tipo ",
              "type" : "text"
            },
            {
              "code" : "ClaseBasica",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "el compilador la trata como el tipo dado de ",
              "type" : "text"
            },
            {
              "code" : "EjemploDeProtocolo",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Esto significa que no puedes acceder, de manera accidental,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a métodos o propiedades que la clase implementa",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "además de su conformidad con el protocolo.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Manejo-de-Errores",
          "level" : 2,
          "text" : "Manejo de Errores",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Para representar errores, usa cualquier tipo que adopte el protocolo ",
              "type" : "text"
            },
            {
              "code" : "Error",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "enum ErrorDeLaImpresora: Error {",
            "    case sinPapel",
            "    case sinToner",
            "    case enLlamas",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Usa ",
              "type" : "text"
            },
            {
              "code" : "throw",
              "type" : "codeVoice"
            },
            {
              "text" : " para arrojar un error",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "y ",
              "type" : "text"
            },
            {
              "code" : "throws",
              "type" : "codeVoice"
            },
            {
              "text" : " para marcar una función que puede arrojar un error.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Si arrojas un error en una función,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "la función se interrumpe inmediatamente y el código que llamó a la función",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "se encargará de manejar el error.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func enviar(tarea: Int, impresoraDestino nombreDeImpresora: String) throws -> String {",
            "    if nombreDeImpresora == \"Nunca Tiene Toner\" {",
            "        throw ErrorDeLaImpresora.sinToner",
            "    }",
            "",
            "    return \"Tarea enviada\"",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Hay muchas maneras de manejar los errores.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Una de ellas es usar ",
              "type" : "text"
            },
            {
              "code" : "do",
              "type" : "codeVoice"
            },
            {
              "text" : "-",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Dentro del bloque ",
              "type" : "text"
            },
            {
              "code" : "do",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "marcas todo código que pueda arrojar un error,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "agregando ",
              "type" : "text"
            },
            {
              "code" : "try",
              "type" : "codeVoice"
            },
            {
              "text" : " delante del mismo.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Dentro del bloque ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "al error se le asigna automáticamente el nombre ",
              "type" : "text"
            },
            {
              "code" : "error",
              "type" : "codeVoice"
            },
            {
              "text" : ",",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a menos que le asignes un nombre diferente.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "do {",
            "    let respuestaDeImpresora = try enviar(tarea: 1040, impresoraDestino: \"Bi Sheng\")",
            "    print(respuestaDeImpresora)",
            "} catch {",
            "    print(error)",
            "}",
            "\/\/ Imprime \"Tarea enviada\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Cambia el nombre de la impresora a ",
                  "type" : "text"
                },
                {
                  "code" : "“Nunca Tiene Toner”",
                  "type" : "codeVoice"
                },
                {
                  "text" : ",",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "de manera que la función ",
                  "type" : "text"
                },
                {
                  "code" : "enviar(tarea:impresoraDestino:)",
                  "type" : "codeVoice"
                },
                {
                  "text" : " arroje un error.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Experimento",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Puedes usar múltiples bloques ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "que manejen errores específicos.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Para ello, escribe un patrón después de ",
              "type" : "text"
            },
            {
              "code" : "catch",
              "type" : "codeVoice"
            },
            {
              "text" : " al igual que harías",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "después de ",
              "type" : "text"
            },
            {
              "code" : "case",
              "type" : "codeVoice"
            },
            {
              "text" : " en un ciclo ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "switch",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "do {",
            "    let respuestaDeImpresora = try enviar(tarea: 1440, impresoraDestino: \"Gutenberg\")",
            "    print(respuestaDeImpresora)",
            "} catch ErrorDeLaImpresora.enLlamas {",
            "    print(\"Dejaré esto por aquí, con el resto del fuego.\")",
            "} catch let errorDeLaImpresora as ErrorDeLaImpresora {",
            "    print(\"Error de la impresora: \\(errorDeLaImpresora).\")",
            "} catch {",
            "    print(error)",
            "}",
            "\/\/ Imprime \"Tarea enviada\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Añade código para arrojar un error dentro del bloque ",
                  "type" : "text"
                },
                {
                  "code" : "do",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "¿Qué tipo de error es necesario arrojar",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "para que este sea manejado por el primer bloque ",
                  "type" : "text"
                },
                {
                  "code" : "catch",
                  "type" : "codeVoice"
                },
                {
                  "text" : "?",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "¿Qué tal con los bloques segundo y tercero?",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Experimento",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Otra forma de manejar los errores",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "es usar ",
              "type" : "text"
            },
            {
              "code" : "try?",
              "type" : "codeVoice"
            },
            {
              "text" : " para convertir el resultado en un opcional.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Si la función arroja un error,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "el error específico es descartado y el resultado es ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "En caso contrario, el resultado es un opcional",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "que contiene el valor devuelto por la función.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let exitoImpresora = try? enviar(tarea: 1884, impresoraDestino: \"Mergenthaler\")",
            "let fallaImpresora = try? enviar(tarea: 1885, impresoraDestino: \"Nunca Tiene Toner\")"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Usa ",
              "type" : "text"
            },
            {
              "code" : "defer",
              "type" : "codeVoice"
            },
            {
              "text" : " para crear un bloque de código",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "que se ejecute después de todo el código de una función,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "justo antes de que la función devuelva su valor.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "El código se ejecuta sin importar que la función arroje un error.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Puedes utilizar ",
              "type" : "text"
            },
            {
              "code" : "defer",
              "type" : "codeVoice"
            },
            {
              "text" : " para escribir códigos de configuración y limpieza,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "uno al lado del otro,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "aun cuando estos deban ejecutarse en momentos diferentes.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "var elRefrigeradorEstaAbierto = false",
            "let contenidoDelRefrigerador = [\"leche\", \"huevos\", \"sobras\"]",
            "",
            "func elRefrigeradorContiene(_ alimento: String) -> Bool {",
            "    elRefrigeradorEstaAbierto = true",
            "",
            "    defer {",
            "        elRefrigeradorEstaAbierto = false",
            "    }",
            "",
            "    let resultado = contenidoDelRefrigerador.contains(alimento)",
            "",
            "    return resultado",
            "}",
            "",
            "elRefrigeradorContiene(\"banana\")",
            "print(elRefrigeradorEstaAbierto)",
            "\/\/ Imprime \"false\""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Gen%C3%A9ricos",
          "level" : 2,
          "text" : "Genéricos",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Escribe un nombre entre paréntesis angulares (",
              "type" : "text"
            },
            {
              "code" : "<>",
              "type" : "codeVoice"
            },
            {
              "text" : ")",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para crear una función o tipo genéricos.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func crearArreglo<Item>(repitiendo item: Item, numeroDeVeces: Int) -> [Item] {",
            "    var resultado: [Item] = []",
            "",
            "    for _ in 0..<numeroDeVeces {",
            "         resultado.append(item)",
            "    }",
            "",
            "    return resultado",
            "}",
            "",
            "crearArreglo(repitiendo: \"toc\", numeroDeVeces: 4)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "También puedes crear formas genéricas de funciones y métodos,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "como también de clases, enumeraciones, y estructuras.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/ Reimplementa el tipo opcional de la librería estándar de Swift",
            "enum OptionalValue<Wrapped> {",
            "    case none",
            "    case some(Wrapped)",
            "}",
            "",
            "var posibleEntero: OptionalValue<Int> = .none",
            "posibleEntero = .some(100)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Utiliza ",
              "type" : "text"
            },
            {
              "code" : "where",
              "type" : "codeVoice"
            },
            {
              "text" : " justo antes del cuerpo de la función",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para especificar una lista de requerimientos;",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "por ejemplo,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para requerir el tipo para implementar un protocolo,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "para requerir que dos tipos sean el mismo,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "o para requerir que una clase tenga una súperclase en particular.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func anyCommonElements<T: Sequence, U: Sequence>(_ lhs: T, _ rhs: U) -> Bool",
            "    where T.Element: Equatable, T.Element == U.Element",
            "{",
            "    for lhsItem in lhs {",
            "        for rhsItem in rhs {",
            "            if lhsItem == rhsItem {",
            "                return true",
            "            }",
            "        }",
            "    }",
            "",
            "   return false",
            "}",
            "",
            "anyCommonElements([1, 2, 3], [3])"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "Modifica la función ",
                  "type" : "text"
                },
                {
                  "code" : "anyCommonElements(_:_:)",
                  "type" : "codeVoice"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "para crear una función que devuelva un arreglo",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "de los elementos que dos secuencias cualesquiera tienen en común.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Experimento",
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Escribir ",
              "type" : "text"
            },
            {
              "code" : "<T: Equatable>",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "es lo mismo que escribir ",
              "type" : "text"
            },
            {
              "code" : "<T> ... where T: Equatable",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "text" : "Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "text" : "Conoce más acerca del uso de ",
                  "type" : "text"
                },
                {
                  "identifier" : "https:\/\/developer.apple.com\/es\/support\/beta-software\/",
                  "isActive" : true,
                  "type" : "reference"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Software Beta",
          "style" : "note",
          "type" : "aside"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ]
, 
"references": {
"doc://org.swift.tspl/documentation/The-Swift-Programming-Language": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language",
  "kind" : "article",
  "role" : "collection",
  "title" : "The Swift Programming Language (6)",
  "type" : "topic",
  "url" : "\/documentation\/the-swift-programming-language"
},
"https://developer.apple.com/es/support/beta-software/": {
  "identifier" : "https:\/\/developer.apple.com\/es\/support\/beta-software\/",
  "title" : "software beta de Apple",
  "titleInlineContent" : [
    {
      "text" : "software beta de Apple",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/es\/support\/beta-software\/"
}
}
}