{"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour"},"sections":[],"metadata":{"title":"Un Recorrido por Swift"},"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"text":"Es costumbre que el primer programa en un nuevo lenguaje","type":"text"},{"text":" ","type":"text"},{"text":"imprima la frase “¡Hola, mundo!” en la pantalla.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"En Swift, esto se puede conseguir mediante una sola línea de código:"}]},{"code":["print(\"¡Hola, mundo!\")","\/\/ Imprime \"¡Hola, mundo!\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Si has desarollado anteriormente en C u Objective-C,"},{"text":" ","type":"text"},{"type":"text","text":"esta sintaxis te resultará familiar;"},{"text":" ","type":"text"},{"text":"en Swift, esta línea de código representa un programa completo.","type":"text"},{"type":"text","text":" "},{"text":"No hace falta importar una biblioteca aparte","type":"text"},{"type":"text","text":" "},{"type":"text","text":"para contar con funciones como entrada\/salida o manejo de cadenas de texto."},{"type":"text","text":" "},{"type":"text","text":"Todo código escrito en el ámbito ("},{"inlineContent":[{"text":"scope","type":"text"}],"type":"emphasis"},{"text":") global se utiliza","type":"text"},{"text":" ","type":"text"},{"text":"como punto de entrada para el programa,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"por lo que no necesitamos una función "},{"type":"codeVoice","code":"main()"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Tampoco hace falta escribir punto y coma"},{"type":"text","text":" "},{"type":"text","text":"al final de cada declaración."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Esta guía te proporciona suficiente información","type":"text"},{"type":"text","text":" "},{"text":"para comenzar a desarrollar código en Swift","type":"text"},{"type":"text","text":" "},{"text":"al enseñarte cómo realizar una variedad de tareas de programación.","type":"text"},{"type":"text","text":" "},{"text":"No te preocupes si hay algo que no entiendes —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"todo lo presentado en esta guía"},{"text":" ","type":"text"},{"type":"text","text":"se explica en detalle en el resto de este libro."}]},{"anchor":"Valores-Sencillos","text":"Valores Sencillos","level":2,"type":"heading"},{"inlineContent":[{"text":"Usa ","type":"text"},{"type":"codeVoice","code":"let"},{"text":" para crear una constante y ","type":"text"},{"type":"codeVoice","code":"var"},{"type":"text","text":" para crear una variable."},{"text":" ","type":"text"},{"text":"No hace falta saber el valor de una constante a la hora de compilar,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"pero tal valor debe asignarse exactamente una única vez."},{"type":"text","text":" "},{"type":"text","text":"Esto significa que puedes usar constantes para nombrar un valor"},{"text":" ","type":"text"},{"text":"que solo se define una vez, pero que se usa en muchas partes.","type":"text"}],"type":"paragraph"},{"code":["var miVariable = 42","miVariable = 50","let miConstante = 42"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Una constante o variable debe ser del mismo tipo","type":"text"},{"type":"text","text":" "},{"type":"text","text":"que el valor que se le quiera asignar."},{"text":" ","type":"text"},{"type":"text","text":"Sin embargo, no siempre tienes que escribir el tipo explícitamente."},{"type":"text","text":" "},{"text":"El hecho de proporcionar un valor al crear una variable o constante,","type":"text"},{"type":"text","text":" "},{"text":"le permite al compilador inferir el tipo de dicha variable o constante.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"En el ejemplo anterior,"},{"type":"text","text":" "},{"text":"el compilador infiere que ","type":"text"},{"type":"codeVoice","code":"miVariable"},{"type":"text","text":" es un entero"},{"type":"text","text":" "},{"type":"text","text":"porque su valor inicial es un entero."}]},{"type":"paragraph","inlineContent":[{"text":"Si el valor inicial no proporciona suficiente información","type":"text"},{"type":"text","text":" "},{"text":"(o si no hay un valor inicial),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"especifica el tipo escribiéndolo después de la variable,"},{"text":" ","type":"text"},{"type":"text","text":"separado por dos puntos ("},{"code":":","type":"codeVoice"},{"text":").","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let enteroImplicito = 70","let doubleImplicito = 70.0","let doubleExplicito: Double = 70"]},{"type":"aside","name":"Experimento","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Crea una constante"},{"text":" ","type":"text"},{"text":"con un tipo explícito de ","type":"text"},{"code":"Float","type":"codeVoice"},{"type":"text","text":" y un valor de "},{"type":"codeVoice","code":"4"},{"text":".","type":"text"}]}],"style":"note"},{"inlineContent":[{"text":"Los valores nunca se convierten a un tipo diferente implícitamente.","type":"text"},{"type":"text","text":" "},{"text":"Si necesitas convertir un valor a un tipo diferente,","type":"text"},{"text":" ","type":"text"},{"text":"debes crear —de manera explícita— una instancia del tipo deseado.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let etiqueta = \"El ancho es \"","let ancho = 94","let anchoDeLaEtiqueta = etiqueta + String(ancho)"]},{"name":"Experimento","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"Intenta removiendo la conversión a "},{"type":"codeVoice","code":"String"},{"text":" de la última línea.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"¿Cuál error te aparece?"}],"type":"paragraph"}]},{"inlineContent":[{"text":"Hay una manera incluso más sencilla de insertar valores en una cadena de texto —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"escribe el valor en paréntesis,"},{"text":" ","type":"text"},{"text":"y agrega una barra invertida (","type":"text"},{"code":"\\","type":"codeVoice"},{"type":"text","text":") antes de los paréntesis."},{"type":"text","text":" "},{"text":"Por ejemplo:","type":"text"}],"type":"paragraph"},{"code":["let manzanas = 3","let naranjas = 5","let totalManzanas = \"Tengo \\(manzanas) manzanas.\"","let totalFrutas = \"Tengo \\(manzanas + naranjas) frutas.\""],"syntax":"swift","type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Usa "},{"code":"\\()","type":"codeVoice"},{"type":"text","text":" para"},{"text":" ","type":"text"},{"text":"incluir un operación con números de coma flotante en una cadena de texto","type":"text"},{"type":"text","text":" "},{"type":"text","text":"y para incluir el nombre de alguien en un saludo."}]}],"style":"note","type":"aside","name":"Experimento"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Usa tres comillas dobles ("},{"type":"codeVoice","code":"\"\"\""},{"text":") para cadenas de texto","type":"text"},{"type":"text","text":" "},{"text":"que ocupan más de una línea.","type":"text"},{"text":" ","type":"text"},{"text":"La sangría (","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"indentation"}]},{"text":") al inicio de cada línea de la cadena es removida","type":"text"},{"type":"text","text":" "},{"type":"text","text":"siempre y cuando concuerde con la sangría de las comillas de cierre."},{"text":" ","type":"text"},{"text":"Por ejemplo:","type":"text"}]},{"code":["let cita = \"\"\"","        Aun cuando hay espacios en blanco a la izquierda,","        las líneas como tal no llevan sangría.","            Excepto por esta línea.","        Las comillas dobles (\") pueden aparecer sin escaparlas.","","        Todavía tengo \\(manzanas + naranjas) frutas.","        \"\"\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Crea arreglos y diccionarios usando corchetes ("},{"type":"codeVoice","code":"[]"},{"type":"text","text":"),"},{"text":" ","type":"text"},{"text":"y accede a sus elementos referenciando","type":"text"},{"text":" ","type":"text"},{"text":"su índice o llave en corchetes.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Está permitido agregar una coma después del último elemento."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var frutas = [\"fresas\", \"limas\", \"mandarinas\"]","frutas[1] = \"uvas\"","","var ocupaciones = [","    \"Malcolm\": \"Capitán\",","    \"Kaylee\": \"Mecánica\","," ]","ocupaciones[\"Jayne\"] = \"Relaciones Públicas\""]},{"type":"paragraph","inlineContent":[{"text":"Los arreglos crecen automáticamente a medida que agregas elementos.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["frutas.append(\"moras\")","print(frutas)","\/\/ Imprime \"[\"fresas\", \"uvas\", \"mandarinas\", \"moras\"]\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"También puedes usar corchetes para crear un arreglo o un diccionario vacíos."},{"type":"text","text":" "},{"type":"text","text":"Para un arreglo, usa "},{"code":"[]","type":"codeVoice"},{"text":" ","type":"text"},{"text":"y, para un diccionario, usa ","type":"text"},{"type":"codeVoice","code":"[:]"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["frutas = []","ocupaciones = [:]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Si asignas un arreglo o un diccionario vacíos a una nueva variable,"},{"text":" ","type":"text"},{"type":"text","text":"o a algún otro lugar donde no hay ninguna información sobre el tipo,"},{"type":"text","text":" "},{"type":"text","text":"tendrás que especificarlo."}]},{"type":"codeListing","syntax":"swift","code":["let arregloVacio: [String] = []","let diccionarioVacio: [String: Float] = [:]"]},{"text":"Flujo de Control","type":"heading","level":2,"anchor":"Flujo-de-Control"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Usa "},{"type":"codeVoice","code":"if"},{"type":"text","text":" y "},{"type":"codeVoice","code":"switch"},{"text":" para crear condicionales,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"y usa "},{"type":"codeVoice","code":"for-in"},{"text":", ","type":"text"},{"type":"codeVoice","code":"while"},{"text":", y ","type":"text"},{"type":"codeVoice","code":"repeat-while"},{"type":"text","text":" "},{"type":"text","text":"para crear ciclos."},{"type":"text","text":" "},{"text":"El uso de paréntesis alrededor de la condición","type":"text"},{"text":" ","type":"text"},{"text":"o de la variable del ciclo es opcional.","type":"text"},{"text":" ","type":"text"},{"text":"El uso de llaves alrededor del cuerpo del ciclo es obligatorio.","type":"text"}]},{"type":"codeListing","code":["let puntajesIndividuales = [75, 43, 103, 87, 12]","var puntajeDelEquipo = 0","","for puntaje in puntajesIndividuales {","    if puntaje > 50 {","        puntajeDelEquipo += 3","    } else {","        puntajeDelEquipo += 1","    }","}","","print(puntajeDelEquipo)","\/\/ Imprime \"11\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"En una instrucción "},{"type":"codeVoice","code":"if"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"el condicional debe ser una expresión booleana;"},{"text":" ","type":"text"},{"type":"text","text":"esto significa, que una instrucción tipo "},{"code":"if puntaje { ... }","type":"codeVoice"},{"type":"text","text":" es un error,"},{"type":"text","text":" "},{"text":"pues no se hace una comparación explícita con cero.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Puede escribir "},{"type":"codeVoice","code":"if"},{"type":"text","text":" o "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" "},{"type":"text","text":"después del signo igual ("},{"type":"codeVoice","code":"="},{"text":") de una asignación","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"o después de "},{"code":"return","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"para elegir un valor en función de la condición.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let decoracionDelPuntaje = if puntajeDelEquipo > 10 {","    \"🎉\"","} else {","    \"\"","}","print(\"Puntaje:\", puntajeDelEquipo, decoracionDelPuntaje)","\/\/ Imprime \"Puntaje: 11 🎉\""]},{"inlineContent":[{"text":"Puedes usar ","type":"text"},{"code":"if","type":"codeVoice"},{"text":" y ","type":"text"},{"code":"let","type":"codeVoice"},{"text":" en conjunto","type":"text"},{"type":"text","text":" "},{"type":"text","text":"para lidiar con valores que podrían no existir."},{"type":"text","text":" "},{"type":"text","text":"Estos valores son representados como opcionales."},{"text":" ","type":"text"},{"type":"text","text":"Un valor opcional puede contener o un valor"},{"type":"text","text":" "},{"type":"text","text":"o "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", para indicar la ausencia de un valor."},{"type":"text","text":" "},{"text":"Agrega un signo de interrogación (","type":"text"},{"type":"codeVoice","code":"?"},{"text":") después del tipo de un valor","type":"text"},{"text":" ","type":"text"},{"text":"para marcar dicho valor como opcional.","type":"text"}],"type":"paragraph"},{"code":["var cadenaOpcional: String? = \"Hola\"","print(cadenaOpcional == nil)","\/\/ Imprime \"false\"","","var nombreOpcional: String? = \"John Appleseed\"","var saludo = \"¡Hola!\"","","if let nombre = nombreOpcional {","    saludo = \"¡Hola, \\(nombre)!\"","}"],"type":"codeListing","syntax":"swift"},{"style":"note","type":"aside","content":[{"inlineContent":[{"text":"Cambia el valor de ","type":"text"},{"type":"codeVoice","code":"nombreOpcional"},{"type":"text","text":" por "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"¿Cuál saludo obtienes?","type":"text"},{"text":" ","type":"text"},{"text":"Agrega una cláusula ","type":"text"},{"code":"else","type":"codeVoice"},{"type":"text","text":" que defina un saludo diferente"},{"type":"text","text":" "},{"type":"text","text":"si "},{"type":"codeVoice","code":"nombreOpcional"},{"type":"text","text":" es "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"Experimento"},{"type":"paragraph","inlineContent":[{"text":"Si el valor opcional es ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"el condicional resulta ser ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":" y el código en las llaves es ignorado."},{"text":" ","type":"text"},{"text":"En caso contrario, se extrae el valor opcional y se le asigna","type":"text"},{"type":"text","text":" "},{"text":"a la constante que le sigue a ","type":"text"},{"code":"let","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"lo cual hace que el valor extraído esté disponible","type":"text"},{"type":"text","text":" "},{"type":"text","text":"dentro del bloque de código."}]},{"inlineContent":[{"type":"text","text":"Otra forma de manejar valores opcionales"},{"text":" ","type":"text"},{"type":"text","text":"es proporcionar un valor predeterminado mediante el uso del operador "},{"type":"codeVoice","code":"??"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Si el valor opcional no existe,"},{"text":" ","type":"text"},{"text":"se usará el valor predeterminado en su lugar.","type":"text"}],"type":"paragraph"},{"code":["let alias: String? = nil","let nombreCompleto: String = \"John Appleseed\"","let saludoInformal = \"Hola, \\(alias ?? nombreCompleto)\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Puedes usar una sintaxis más concisa para extraer un valor,"},{"text":" ","type":"text"},{"text":"usando el mismo nombre para dicho valor extraído.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["if let alias {","    print(\"Hey, \\(alias)\")","}","\/\/ No imprime nada porque alias es nil."]},{"type":"paragraph","inlineContent":[{"text":"Los ciclos ","type":"text"},{"type":"codeVoice","code":"switch"},{"type":"text","text":" soportan cualquier tipo de datos"},{"text":" ","type":"text"},{"type":"text","text":"al igual que una gran variedad de operaciones comparativas;"},{"text":" ","type":"text"},{"type":"text","text":"estos no se limitan a enteros"},{"type":"text","text":" "},{"type":"text","text":"y comprobaciones de igualdad."}]},{"syntax":"swift","code":["let vegetal = \"pimiento rojo\"","switch vegetal {","case \"apio\":","    print(\"Un par de vegetales más y tendrás un buen jugo verde.\")","case \"pepino\", \"cebolla\":","    print(\"Útil para una buena ensalada.\")","case let x where x.hasSuffix(\"pimiento\"):","    print(\"¿Es un \\(x) picante?\")","default:","    print(\"Todo sabe bien en una sopa.\")","}","\/\/ Imprime \"¿Es un pimiento rojo picante?\""],"type":"codeListing"},{"style":"note","type":"aside","name":"Experimento","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Remueve el caso "},{"code":"default","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"¿Cuál es el error que aparece?","type":"text"}]}]},{"inlineContent":[{"type":"text","text":"Observa cómo es posible usar "},{"type":"codeVoice","code":"let"},{"type":"text","text":" con un patrón"},{"type":"text","text":" "},{"type":"text","text":"para asignar, a una constante,"},{"type":"text","text":" "},{"type":"text","text":"el valor que concuerde con dicho patrón."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Una vez ejecutado el código dentro del caso que concuerda,","type":"text"},{"text":" ","type":"text"},{"text":"el programa abandona la sentencia ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"La ejecución no continúa al siguiente caso,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"por lo que no tienes que indicar, explícitamente, la salida del ciclo"},{"type":"text","text":" "},{"type":"text","text":"al final del código de cada caso."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Puedes usar "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" para iterar sobre los elementos de un diccionario,"},{"type":"text","text":" "},{"type":"text","text":"proporcionando un par de nombres a usar"},{"text":" ","type":"text"},{"type":"text","text":"para cada par llave-valor."},{"text":" ","type":"text"},{"type":"text","text":"Los diccionarios son colecciones sin un orden particular,"},{"type":"text","text":" "},{"text":"por lo que se itera sobre sus llaves y valores","type":"text"},{"type":"text","text":" "},{"text":"de manera arbitraria.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let numerosInteresantes = [","    \"Primos\": [2, 3, 5, 7, 11, 13],","    \"Fibonacci\": [1, 1, 2, 3, 5, 8],","    \"Cuadrados\": [1, 4, 9, 16, 25],","]","var numeroMayor = 0","","for (_, numeros) in numerosInteresantes {","    for numero in numeros {","        if numero > numeroMayor {","            numeroMayor = numero","        }","    }","}","","print(numeroMayor)","\/\/ Imprime \"25\""]},{"content":[{"inlineContent":[{"type":"text","text":"Reemplaza "},{"type":"codeVoice","code":"_"},{"type":"text","text":" por el nombre de una variable"},{"type":"text","text":" "},{"type":"text","text":"y hazle seguimiento al tipo de número que resultó ser el mayor."}],"type":"paragraph"}],"type":"aside","name":"Experimento","style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Usa "},{"code":"while","type":"codeVoice"},{"text":" para repetir un bloque de código hasta que una condición cambie.","type":"text"},{"type":"text","text":" "},{"text":"La condición de un ciclo puede ir al final, para asegurar que este se ejecute al menos una vez.","type":"text"}]},{"syntax":"swift","code":["var n = 2","","while n < 100 {","    n *= 2","}","","print(n)","\/\/ Imprime \"128\"","","var m = 2","","repeat {","    m *= 2","} while m < 100","","print(m)","\/\/ Imprime \"128\""],"type":"codeListing"},{"style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":""},{"text":" ","type":"text"},{"type":"text","text":"Cambia la condición de "},{"type":"codeVoice","code":"m < 100"},{"text":" a ","type":"text"},{"type":"codeVoice","code":"m < 0"},{"text":" ","type":"text"},{"text":"para ver cómo ","type":"text"},{"type":"codeVoice","code":"while"},{"type":"text","text":" y "},{"type":"codeVoice","code":"repeat"},{"text":"-","type":"text"},{"code":"while","type":"codeVoice"},{"type":"text","text":" se comportan diferente"},{"text":" ","type":"text"},{"text":"cuando la condición del ciclo es verdadera desde un inicio.","type":"text"}],"type":"paragraph"}],"name":"Experimento"},{"type":"paragraph","inlineContent":[{"text":"Es posible tener índices en un ciclo,","type":"text"},{"type":"text","text":" "},{"text":"mediante el uso de ","type":"text"},{"code":"..<","type":"codeVoice"},{"text":" para crear un rango de índices.","type":"text"}]},{"code":["var total = 0","","for i in 0..<4 {","    total += i","}","","print(total)","\/\/ Imprime \"6\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Usa "},{"type":"codeVoice","code":"..<"},{"text":" para crear un rango que omita el valor superior,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"y usa "},{"code":"...","type":"codeVoice"},{"type":"text","text":" para crear uno que incluya ambos valores."}]},{"level":2,"text":"Funciones y Clausuras","type":"heading","anchor":"Funciones-y-Clausuras"},{"type":"paragraph","inlineContent":[{"text":"Usa ","type":"text"},{"code":"func","type":"codeVoice"},{"text":" para declarar una función.","type":"text"},{"type":"text","text":" "},{"text":"Para llamar una función,","type":"text"},{"type":"text","text":" "},{"text":"escribe una lista de argumentos en paréntesis después de su nombre.","type":"text"},{"text":" ","type":"text"},{"text":"Usa ","type":"text"},{"code":"->","type":"codeVoice"},{"type":"text","text":" para separar el nombre de los parámetros y sus tipos"},{"text":" ","type":"text"},{"type":"text","text":"del tipo que devuelve la función."}]},{"type":"codeListing","syntax":"swift","code":["func saludar(persona: String, dia: String) -> String {","    return \"Hola, \\(persona), hoy es \\(dia).\"","}","saludar(persona: \"Bob\", dia: \"martes\")"]},{"type":"aside","name":"Experimento","style":"note","content":[{"inlineContent":[{"type":"text","text":"Remueve el parámetro "},{"type":"codeVoice","code":"dia"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Agrega un parámetro que incluya el almuerzo especial de hoy en el saludo.","type":"text"}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Por defecto,"},{"text":" ","type":"text"},{"type":"text","text":"las funciones usan los nombres de sus parámetros"},{"text":" ","type":"text"},{"text":"como etiquetas para sus argumentos.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Crea tu propia etiqueta de argumento anteponiéndola al nombre del parámetro,"},{"type":"text","text":" "},{"text":"o agrega ","type":"text"},{"code":"_","type":"codeVoice"},{"type":"text","text":" para no usar una etiqueta de argumento."}]},{"syntax":"swift","code":["func saludar(_ persona: String, el dia: String) -> String {","    return \"Hola, \\(persona), hoy es \\(dia).\"","}","saludar(\"John\", el: \"miércoles\")"],"type":"codeListing"},{"inlineContent":[{"text":"Usa una tupla para crear un valor compuesto;","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"por ejemplo, para devolver múltiples valores desde una función."},{"type":"text","text":" "},{"type":"text","text":"Los elementos de una tupla se pueden referenciar"},{"type":"text","text":" "},{"type":"text","text":"bien sea por nombre o por número."}],"type":"paragraph"},{"syntax":"swift","code":["func calcularEstadisticas(puntajes: [Int]) -> (min: Int, max: Int, suma: Int) {","    var min = puntajes[0]","    var max = puntajes[0]","    var suma = 0","","    for puntaje in puntajes {","        if puntaje > max {","            max = puntaje","        } else if puntaje < min {","            min = puntaje","        }","","        suma += puntaje","    }","","    return (min, max, suma)","}","","let estadisticas = calcularEstadisticas(puntajes: [5, 3, 100, 3, 9])","print(estadisticas.suma)","\/\/ Imprime \"120\"","print(estadisticas.2)","\/\/ Imprime \"120\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Las funciones pueden anidarse.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Las funciones anidadas tienen acceso a variables"},{"type":"text","text":" "},{"type":"text","text":"que hayan sido declaradas en la función externa."},{"text":" ","type":"text"},{"type":"text","text":"Puedes usar funciones anidadas"},{"type":"text","text":" "},{"text":"para organizar el código de una función","type":"text"},{"text":" ","type":"text"},{"text":"que es larga o compleja.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func devolverQuince() -> Int {","    var y = 10","    func agregar() {","        y += 5","    }","    agregar()","    return y","}","devolverQuince()"]},{"inlineContent":[{"type":"text","text":"Las funciones son un tipo de primera clase."},{"text":" ","type":"text"},{"text":"Esto quiere decir que una función puede devolver otra función como su valor.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["func crearIncrementador() -> ((Int) -> Int) {","    func agregarUno(numero: Int) -> Int {","        return 1 + numero","    }","","    return agregarUno","}","var incrementar = crearIncrementador()","incrementar(7)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Una función puede tomar a otra función como uno de sus argumentos."}]},{"code":["func coincideAlguno(lista: [Int], condicion: (Int) -> Bool) -> Bool {","","    for elemento in lista {","        if condicion(elemento) {","            return true","        }","    }","","    return false","}","","func menorQueDiez(numero: Int) -> Bool {","    return numero < 10","}","","var numeros = [20, 19, 7, 12]","coincideAlguno(lista: numeros, condicion: menorQueDiez)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Las funciones son, en realidad, un caso especial de las clausuras:"},{"text":" ","type":"text"},{"text":"bloques de código que pueden ser llamados más tarde.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"El código en una clausura tiene acceso a elementos como variables y funciones"},{"type":"text","text":" "},{"type":"text","text":"que están disponibles en el ámbito en el cual se creó la clausura,"},{"text":" ","type":"text"},{"text":"incluso si la clausura se encuentra en un ámbito diferente al ejecutarse;","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"ya has visto un ejemplo de esto con las funciones anidadas."},{"text":" ","type":"text"},{"type":"text","text":"Puedes crear una clausura anónima"},{"text":" ","type":"text"},{"type":"text","text":"al encerrar el código en llaves ("},{"type":"codeVoice","code":"{}"},{"text":").","type":"text"},{"type":"text","text":" "},{"text":"Usa ","type":"text"},{"code":"in","type":"codeVoice"},{"text":" para separar los argumentos y el tipo devuelto por la función","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"del cuerpo de la función."}]},{"code":["numeros.map({ (numero: Int) -> Int in","    let resultado = 3 * numero","    return resultado","})"],"type":"codeListing","syntax":"swift"},{"name":"Experimento","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Reescribe la clausura de manera que devuelva cero","type":"text"},{"type":"text","text":" "},{"type":"text","text":"para todos los números impares."}]}],"type":"aside"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Existen muchas maneras de crear una clausura de forma más concisa."},{"type":"text","text":" "},{"text":"Cuando se conoce el tipo de una clausura,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"como en el caso de un "},{"inlineContent":[{"text":"callback","type":"text"}],"type":"emphasis"},{"text":" para un delegado,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"puedes omitir el tipo de sus parámetros,"},{"type":"text","text":" "},{"type":"text","text":"el tipo devuelto, o ambos."},{"type":"text","text":" "},{"type":"text","text":"Las clausuras de una sola sentencia devuelven el valor"},{"text":" ","type":"text"},{"type":"text","text":"de su única sentencia de manera implícita."}]},{"type":"codeListing","syntax":"swift","code":["let numerosMapeados = numeros.map({ numero in 3 * numero })","print(numerosMapeados)","\/\/ Imprime \"[60, 57, 21, 36]\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Puedes referenciar parámetros por número en vez de nombre;"},{"type":"text","text":" "},{"type":"text","text":"este enfoque es, especialmente, útil para clausuras muy concisas."},{"type":"text","text":" "},{"type":"text","text":"Una clausura que se pasa como el último argumento de una función"},{"type":"text","text":" "},{"text":"puede aparecer inmediatamente después de los paréntesis.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Cuando una clausura es el único argumento de una función,"},{"text":" ","type":"text"},{"text":"puedes omitir los paréntesis por completo.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let numerosOrdenados = numeros.sorted { $0 > $1 }","print(numerosOrdenados)","\/\/ Imprime \"[20, 19, 12, 7]\""]},{"level":2,"text":"Objetos y Clases","anchor":"Objetos-y-Clases","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Usa ","type":"text"},{"type":"codeVoice","code":"class"},{"text":" seguido del nombre de la clase para crear una clase.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"La declaración de una propiedad en una clase, se escribe igual"},{"type":"text","text":" "},{"type":"text","text":"que la declaración de una constante o variable,"},{"type":"text","text":" "},{"text":"excepto que esta existiría en el contexto de una clase.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Similarmente, la declaración de métodos y funciones se hace de la misma forma."}]},{"syntax":"swift","code":["class Figura {","    var numeroDeLados = 0","","    func descripcionBasica() -> String {","        return \"Una figura con \\(numeroDeLados) lados.\"","    }","}"],"type":"codeListing"},{"style":"note","type":"aside","name":"Experimento","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Agrega una propiedad constante con "},{"type":"codeVoice","code":"let"},{"text":" ","type":"text"},{"text":"y otro método que tome un argumento.","type":"text"}]}]},{"inlineContent":[{"type":"text","text":"Crea una instancia de una clase"},{"text":" ","type":"text"},{"text":"al poner paréntesis después del nombre de la clase.","type":"text"},{"text":" ","type":"text"},{"text":"Usa la sintaxis de punto para acceder","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a las propiedades y métodos de la instancia."}],"type":"paragraph"},{"syntax":"swift","code":["var figura = Figura()","figura.numeroDeLados = 7","var descripcionDeLaFigura = figura.descripcionBasica()"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"A esta versión de la clase "},{"type":"codeVoice","code":"Figura"},{"type":"text","text":" le hace falta algo importante:"},{"text":" ","type":"text"},{"type":"text","text":"un inicializador que configure la clase al crear una instancia."},{"text":" ","type":"text"},{"type":"text","text":"Usa "},{"type":"codeVoice","code":"init"},{"type":"text","text":" para crear uno."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class FiguraConNombre {","    var numeroDeLados: Int = 0","    var nombre: String","","    init(nombre: String) {","       self.nombre = nombre","    }","","    func descripcionBasica() -> String {","       return \"Una figura con \\(numeroDeLados) lados.\"","    }","}"]},{"inlineContent":[{"text":"Observa cómo se usa ","type":"text"},{"code":"self","type":"codeVoice"},{"text":" para diferenciar la propiedad ","type":"text"},{"type":"codeVoice","code":"nombre"},{"type":"text","text":" "},{"type":"text","text":"del argumento (del inicializador) "},{"type":"codeVoice","code":"nombre"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Al crear una instancia de una clase,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"los argumentos del inicializador se pasan como cuando se llama una función."},{"text":" ","type":"text"},{"type":"text","text":"Cada propiedad requiere que se le asigne un valor,"},{"text":" ","type":"text"},{"type":"text","text":"bien sea al declararla (como con "},{"type":"codeVoice","code":"numeroDeLados"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"o en el inicializador (como con ","type":"text"},{"type":"codeVoice","code":"nombre"},{"type":"text","text":")."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Usa "},{"code":"deinit","type":"codeVoice"},{"type":"text","text":" para crear un «desinicializador» (del inglés "},{"type":"emphasis","inlineContent":[{"text":"deinitializer","type":"text"}]},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"si necesitas llevar a cabo alguna limpieza","type":"text"},{"type":"text","text":" "},{"type":"text","text":"antes de que el objeto sea «desasignado» (del inglés "},{"type":"emphasis","inlineContent":[{"text":"deallocated","type":"text"}]},{"type":"text","text":")."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Las subclases incluyen el nombre de su súperclase"},{"type":"text","text":" "},{"type":"text","text":"después de su propio nombre,"},{"text":" ","type":"text"},{"type":"text","text":"separados por una coma."},{"type":"text","text":" "},{"type":"text","text":"No es requerimiento para las clases "},{"type":"emphasis","inlineContent":[{"text":"subclasificar","type":"text"}]},{"type":"text","text":" ninguna clase base estándar,"},{"type":"text","text":" "},{"type":"text","text":"por lo que puedes incluir u omitir una súperclase si así lo requieres."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Los métodos de una subclase que sustituyen la implementación de una súperclase"},{"type":"text","text":" "},{"type":"text","text":"se marcan con "},{"code":"override","type":"codeVoice"},{"type":"text","text":";"},{"text":" ","type":"text"},{"text":"sustituir un método por accidente, sin usar ","type":"text"},{"code":"override","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"es detectado por el compilador como un error.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"El compilador también detecta métodos con "},{"code":"override","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"que no sustituyen ningún método de la súperclase."}]},{"code":["class Cuadrado: FiguraConNombre {","    var longitudDeLosLados: Double","","    init(longitudDeLosLados: Double, nombre: String) {","        self.longitudDeLosLados = longitudDeLosLados","        super.init(nombre: nombre)","        numeroDeLados = 4","    }","","    func area() -> Double {","        return longitudDeLosLados * longitudDeLosLados","    }","","    override func descripcionBasica() -> String {","        return \"Un cuadrado con lados de longitud \\(longitudDeLosLados).\"","    }","}","let prueba = Cuadrado(longitudDeLosLados: 5.2, name: \"mi cuadrado de prueba\")","prueba.area()","prueba.descripcionBasica()"],"type":"codeListing","syntax":"swift"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Crea otra subclase de ","type":"text"},{"type":"codeVoice","code":"FiguraConNombre"},{"type":"text","text":" "},{"text":"llamada ","type":"text"},{"type":"codeVoice","code":"Circulo"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"que tome un radio y un nombre"},{"type":"text","text":" "},{"type":"text","text":"como argumentos para su inicializador."},{"type":"text","text":" "},{"type":"text","text":"Implementa los métodos "},{"type":"codeVoice","code":"area()"},{"type":"text","text":" y "},{"code":"descripcionBasica()","type":"codeVoice"},{"type":"text","text":" "},{"text":"en la clase ","type":"text"},{"code":"Circulo","type":"codeVoice"},{"text":".","type":"text"}]}],"name":"Experimento","type":"aside"},{"inlineContent":[{"text":"Aparte de ser simples propiedades que se pueden almacenar,","type":"text"},{"text":" ","type":"text"},{"text":"las propiedades pueden tener un ","type":"text"},{"inlineContent":[{"text":"getter","type":"text"}],"type":"emphasis"},{"text":" y un ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"setter","type":"text"}]},{"text":".","type":"text"}],"type":"paragraph"},{"code":["class TrianguloEquilatero: FiguraConNombre {","    var longitudDeLosLados: Double = 0.0","","    init(longitudDeLosLados: Double, nombre: String) {","        self.longitudDeLosLados = longitudDeLosLados","        super.init(nombre: nombre)","        numeroDeLados = 3","    }","","    var perimetro: Double {","        get {","             return 3.0 * longitudDeLosLados","        }","        set {","            longitudDeLosLados = newValue \/ 3.0","        }","    }","","    override func descripcionBasica() -> String {","        return \"Un triángulo equilátero con lados de longitud \\(longitudDeLosLados).\"","    }","}","var triangulo = TrianguloEquilatero(longitudDeLosLados: 3.1, nombre: \"un triángulo\")","print(triangulo.perimetro)","\/\/ Imprime \"9.3\"","triangulo.perimetro = 9.9","print(triangulo.longitudDeLosLados)","\/\/ Imprime \"3.3000000000000003\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"En el ","type":"text"},{"inlineContent":[{"type":"text","text":"setter"}],"type":"emphasis"},{"text":" de ","type":"text"},{"code":"perimetro","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"el nuevo valor tiene el nombre implícito de ","type":"text"},{"type":"codeVoice","code":"newValue"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Puedes proporcionar un nombre explícito en paréntesis después de ","type":"text"},{"code":"set","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Observa que el inicializador de la clase "},{"type":"codeVoice","code":"TrianguloEquilatero"},{"text":" ","type":"text"},{"type":"text","text":"tiene tres pasos diferentes:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Establecer el valor de las propiedades declaradas por la subclase."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Llamar al inicializador de la súperclase."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Cambiar el valor de las propiedades definidas por la súperclase.","type":"text"},{"text":" ","type":"text"},{"text":"Cualquier otra configuración adicional que use métodos, ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"getters","type":"text"}]},{"type":"text","text":", o "},{"type":"emphasis","inlineContent":[{"text":"setters","type":"text"}]},{"type":"text","text":" "},{"text":"también puede llevarse a cabo en este punto.","type":"text"}]}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"text":"Si no necesitas calcular la propiedad,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"pero igual necesitas proporcionar código"},{"text":" ","type":"text"},{"text":"para ejecutar antes y después de establecer un nuevo valor,","type":"text"},{"text":" ","type":"text"},{"text":"usa ","type":"text"},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" y "},{"code":"didSet","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"El código que proporciones se ejecutará","type":"text"},{"type":"text","text":" "},{"text":"cada vez que el valor cambie fuera del inicializador.","type":"text"},{"text":" ","type":"text"},{"text":"Por ejemplo, la clase a continuación se asegura","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"de que la longitud de los lados de su triángulo"},{"type":"text","text":" "},{"type":"text","text":"siempre sea la misma que la longitud de los lados de su cuadrado."}]},{"type":"codeListing","syntax":"swift","code":["class TrianguloYCuadrado {","    var triangulo: TrianguloEquilatero {","        willSet {","            cuadrado.longitudDeLosLados = newValue.longitudDeLosLados","        }","    }","","    var cuadrado: Cuadrado {","        willSet {","            triangulo.longitudDeLosLados = newValue.longitudDeLosLados","        }","    }","","    init(tamano: Double, nombre: String) {","        cuadrado = Cuadrado(longitudDeLosLados: tamano, nombre: nombre)","        triangulo = TrianguloEquilatero(longitudDeLosLados: tamano, nombre: nombre)","    }","}","","var trianguloYCuadrado = TrianguloYCuadrado(tamano: 10, nombre: \"otra figura de prueba\")","print(trianguloYCuadrado.cuadrado.longitudDeLosLados)","\/\/ Imprime \"10.0\"","print(trianguloYCuadrado.triangulo.longitudDeLosLados)","\/\/ Imprime \"10.0\"","trianguloYCuadrado.cuadrado = Cuadrado(longitudDeLosLados: 50, nombre: \"cuadrado más grande\")","print(trianguloYCuadrado.triangulo.longitudDeLosLados)","\/\/ Imprime \"50.0\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Al trabajar con valores opcionales,"},{"text":" ","type":"text"},{"type":"text","text":"puedes escribir "},{"code":"?","type":"codeVoice"},{"text":" antes de operaciones como métodos, propiedades, y ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"subscripting","type":"text"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Si el valor antes de ","type":"text"},{"type":"codeVoice","code":"?"},{"type":"text","text":" es "},{"code":"nil","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"todo lo que sigue a ","type":"text"},{"code":"?","type":"codeVoice"},{"text":" es ignorado","type":"text"},{"text":" ","type":"text"},{"text":"y el valor de toda la expresión es ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"En caso contrario, se extrae el valor opcional","type":"text"},{"type":"text","text":" "},{"text":"y todo lo que sigue a ","type":"text"},{"type":"codeVoice","code":"?"},{"text":" opera sobre el valor extraído.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"En ambos casos,"},{"type":"text","text":" "},{"text":"el valor de toda la expresión es un valor opcional.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let cuadradoOpcional: Cuadrado? = Cuadrado(longitudDeLosLados: 2.5, nombre: \"cuadrado opcional\")","let longitudDeLosLados = cuadradoOpcional?.longitudDeLosLados"]},{"type":"heading","anchor":"Enumeraciones-y-Estructuras","level":2,"text":"Enumeraciones y Estructuras"},{"inlineContent":[{"text":"Usa ","type":"text"},{"code":"enum","type":"codeVoice"},{"type":"text","text":" para crear una enumeración."},{"text":" ","type":"text"},{"text":"Al igual que las clases y todos los demás tipos con nombre,","type":"text"},{"type":"text","text":" "},{"text":"las enumeraciones pueden tener métodos asociados con ellas.","type":"text"}],"type":"paragraph"},{"code":["enum Escala: Int {","    case _as = 1","    case dos, tres, cuatro, cinco, seis, siete, ocho, nueve, diez","    case jack, reina, rey","","    func descripcionBasica() -> String {","        switch self {","        case ._as:","            return \"as\"","        case .jack:","            return \"jack\"","        case .reina:","            return \"reina\"","        case .rey:","            return \"rey\"","        default:","            return String(self.rawValue)","        }","    }","}","","let _as = Escala._as","let valorBrutoDeAs = _as.rawValue"],"type":"codeListing","syntax":"swift"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Crea una función que compare dos valores de tipo ","type":"text"},{"code":"Escala","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"comparando sus valores brutos."}]}],"type":"aside","name":"Experimento"},{"inlineContent":[{"type":"text","text":"De manera predeterminada, Swift asigna los valores brutos comenzando por cero"},{"text":" ","type":"text"},{"type":"text","text":"y aumentando en uno cada vez,"},{"type":"text","text":" "},{"text":"pero puedes cambiar dicho comportamiento al especificar valores explícitamente.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"En el ejemplo anterior, "},{"code":"_as","type":"codeVoice"},{"text":" recibe, explícitamente, un valor bruto de ","type":"text"},{"code":"1","type":"codeVoice"},{"type":"text","text":" "},{"text":"y el resto de los valores brutos se asignan en orden.","type":"text"},{"type":"text","text":" "},{"text":"También puedes usar cadenas de texto o números de coma flotante","type":"text"},{"type":"text","text":" "},{"text":"como el tipo bruto de una enumeración.","type":"text"},{"text":" ","type":"text"},{"text":"Usa la propiedad ","type":"text"},{"type":"codeVoice","code":"rawValue"},{"type":"text","text":" para acceder al valor bruto del caso de una enumeración."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Utiliza el inicializador ","type":"text"},{"type":"codeVoice","code":"init?(rawValue:)"},{"text":" ","type":"text"},{"type":"text","text":"para crear una instancia de una enumeración a partir de un valor bruto."},{"text":" ","type":"text"},{"type":"text","text":"Este inicializador devuelve el caso (de la enumeración)"},{"text":" ","type":"text"},{"text":"que coincida con el valor bruto","type":"text"},{"type":"text","text":" "},{"text":"o ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" si no existe una enumeración "},{"code":"Escala","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["if let escalaTransformada = Escala(rawValue: 3) {","    let descripcionDelTres = escalaTransformada.descripcionBasica()","}"]},{"inlineContent":[{"text":"Los valores de los casos de una enumeración son valores reales,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"y no solo otra forma de escribir sus valores brutos."},{"type":"text","text":" "},{"type":"text","text":"De hecho,"},{"text":" ","type":"text"},{"type":"text","text":"en los casos en los que no existe un valor bruto significativo,"},{"text":" ","type":"text"},{"text":"no es necesario que proporciones uno.","type":"text"}],"type":"paragraph"},{"code":["enum Palo {","    case picas, corazones, diamantes, treboles","","    func descripcionBasica() -> String {","        switch self {","        case .picas:","            return \"picas\"","        case .corazones:","            return \"corazones\"","        case .diamantes:","            return \"diamantes\"","        case .treboles:","            return \"treboles\"","        }","    }","}","","let corazones = Palo.corazones","let descripcionDeCorazones = corazones.descripcionBasica()"],"syntax":"swift","type":"codeListing"},{"name":"Experimento","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Crea un método ","type":"text"},{"type":"codeVoice","code":"color()"},{"text":" para la enumeración ","type":"text"},{"code":"Palo","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"que devuelva “negro” para picas y tréboles, y “rojo” para corazones y diamantes."}]}]},{"inlineContent":[{"text":"Fíjate en las dos formas en las que se hizo referencia","type":"text"},{"type":"text","text":" "},{"text":"al caso ","type":"text"},{"type":"codeVoice","code":"corazones"},{"text":" de la enumeración:","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"al asignar un valor a la constante "},{"type":"codeVoice","code":"corazones"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"el caso "},{"type":"codeVoice","code":"Palo.corazones"},{"type":"text","text":" se referencia por su nombre completo"},{"type":"text","text":" "},{"text":"porque no se especificó un tipo explícito para la constante.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Dentro del ciclo "},{"type":"emphasis","inlineContent":[{"text":"switch","type":"text"}]},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"el caso se referencia mediante la forma abreviada "},{"type":"codeVoice","code":".corazones"},{"type":"text","text":" "},{"text":"porque ya sabemos que el valor de ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":" es un tipo de palo."},{"text":" ","type":"text"},{"text":"Puedes utilizar la forma abreviada","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"cada vez que conozcas el tipo del valor por anticipado."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Si una enumeración tiene valores brutos,"},{"type":"text","text":" "},{"type":"text","text":"se establece que dicho valores forman parte de la declaración,"},{"text":" ","type":"text"},{"text":"lo que significa que cada instancia de un caso de enumeración en particular","type":"text"},{"type":"text","text":" "},{"text":"siempre tendrá el mismo valor bruto.","type":"text"},{"type":"text","text":" "},{"text":"Otra opción para los casos de enumeraciones","type":"text"},{"type":"text","text":" "},{"type":"text","text":"es tener valores asociados con el caso;"},{"text":" ","type":"text"},{"type":"text","text":"estos valores se determinan al crear la instancia"},{"text":" ","type":"text"},{"type":"text","text":"y pueden ser diferentes para cada instancia de un caso de enumeración."},{"type":"text","text":" "},{"type":"text","text":"Puedes ver a los valores asociados"},{"text":" ","type":"text"},{"text":"como valores que se comportan de manera similar a las propiedades almacenadas","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"de la instancia del caso de enumeración."},{"text":" ","type":"text"},{"type":"text","text":"Por ejemplo,"},{"type":"text","text":" "},{"type":"text","text":"considera el caso en el que se le pide a un servidor"},{"type":"text","text":" "},{"text":"las horas de salida y puesta del sol.","type":"text"},{"type":"text","text":" "},{"text":"El servidor responderá con la información solicitada","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"o responderá con una descripción de lo que haya salido mal."}],"type":"paragraph"},{"syntax":"swift","code":["enum RespuestaDelServidor {","    case resultado(String, String)","    case falla(String)","}","","let exito = RespuestaDelServidor.resultado(\"6:00 am\", \"6:30 pm\")","let error = RespuestaDelServidor.falla(\"Se ha agotado el queso.\")","","switch exito {","case let .resultado(amanecer, atardecer):","    print(\"El amanecer es a las \\(amanecer) y el atardecer es a las \\(atardecer).\")","case let .falla(mensaje):","    print(\"Error... \\(mensaje)\")","}","\/\/ Imprime \"El amanecer es a las 6:00 am y el atardecer es a las 6:30 pm.\""],"type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Agrega un tercer caso a "},{"type":"codeVoice","code":"RespuestaDelServidor"},{"type":"text","text":" y al ciclo "},{"inlineContent":[{"type":"text","text":"switch"}],"type":"emphasis"},{"text":".","type":"text"}]}],"style":"note","type":"aside","name":"Experimento"},{"inlineContent":[{"text":"Observa cómo las horas del amanecer y del atardecer","type":"text"},{"text":" ","type":"text"},{"text":"se extraen del valor ","type":"text"},{"code":"RespuestaDelServidor","type":"codeVoice"},{"text":" ","type":"text"},{"text":"como parte de la comparación del valor con los casos del ciclo ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"switch","type":"text"}]},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Usa "},{"code":"struct","type":"codeVoice"},{"text":" para crear una estructura.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Las estructuras soportan muchos de los mismos comportamientos que las clases,"},{"text":" ","type":"text"},{"type":"text","text":"incluyendo métodos e inicializadores."},{"text":" ","type":"text"},{"text":"Una de las diferencias más importantes","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"entre las estructuras y las clases es que"},{"type":"text","text":" "},{"text":"las estructuras siempre se copian cuando se pasan en el código,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"mientras que las clases se pasan por referencia."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct Carta {","    var escala: Escala","    var palo: Palo","","    func descripcionBasica() -> String {","        return \"El \\(escala.descripcionBasica()) de \\(palo.descripcionBasica())\"","    }","}","","let tresDePicas = Carta(escala: .tres, palo: .picas)","let descripcionDelTresDePicas = tresDePicas.descripcionBasica()"]},{"style":"note","content":[{"inlineContent":[{"text":"Crea una función que devuelva un arreglo que contenga","type":"text"},{"type":"text","text":" "},{"text":"una baraja completa de cartas,","type":"text"},{"text":" ","type":"text"},{"text":"con una carta de cada combinación de escala y palo.","type":"text"}],"type":"paragraph"}],"name":"Experimento","type":"aside"},{"level":2,"type":"heading","text":"Concurrencia","anchor":"Concurrencia"},{"type":"paragraph","inlineContent":[{"text":"Usa ","type":"text"},{"code":"async","type":"codeVoice"},{"type":"text","text":" para marcar una función que se ejecuta de manera asíncrona:"}]},{"type":"codeListing","syntax":"swift","code":["func buscarIDDeUsuario(en servidor: String) async -> Int {","    if servidor == \"principal\" {","        return 97","    }","","    return 501","}"]},{"inlineContent":[{"type":"text","text":"Para marcar el llamado a una función asíncrona,"},{"type":"text","text":" "},{"type":"text","text":"agrega la palabra clave "},{"type":"codeVoice","code":"await"},{"type":"text","text":" antes de la invocación de la función:"}],"type":"paragraph"},{"syntax":"swift","code":["func buscarNombreDeUsuario(en servidor: String) async -> String {","    let idDeUsuario = await buscarIDDeUsuario(en: servidor)","","    if idDeUsuario == 501 {","        return \"John Appleseed\"","    }","","    return \"Visitante\"","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Usa "},{"code":"async let","type":"codeVoice"},{"type":"text","text":" para llamar a una función asíncrona"},{"text":" ","type":"text"},{"type":"text","text":"permitiéndole ejecutarse en paralelo con otro código asíncrono."},{"text":" ","type":"text"},{"text":"Si necesitas usar el valor que devuelve, utiliza ","type":"text"},{"code":"await","type":"codeVoice"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["func conectarUsuario(a servidor: String) async {","    async let idDeUsuario = buscarIDDeUsuario(en: servidor)","    async let nombreDeUsuario = buscarNombreDeUsuario(en: servidor)","    let saludo = await \"Hola, \\(nombreDeUsuario), ID de usuario \\(idDeUsuario)\"","","    print(greeting)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Usa "},{"type":"codeVoice","code":"Task"},{"type":"text","text":" para invocar funciones asíncronas desde código sincrónico,"},{"type":"text","text":" "},{"text":"sin tener que esperar a que estas devuelvan su valor.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["Task {","    await conectarUsuario(a: \"principal\")","}","\/\/ Imprime \"Hola, Visitante, ID de usuario 97\""]},{"level":2,"type":"heading","text":"Protocolos y Extensiones","anchor":"Protocolos-y-Extensiones"},{"inlineContent":[{"text":"Usa ","type":"text"},{"type":"codeVoice","code":"protocol"},{"type":"text","text":" para declarar un protocolo."}],"type":"paragraph"},{"syntax":"swift","code":["protocol EjemploDeProtocolo {","     var descripcionBasica: String { get }","     mutating func ajustar()","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Las clases, enumeraciones, y estructuras pueden adoptar protocolos."}],"type":"paragraph"},{"code":["class ClaseBasica: EjemploDeProtocolo {","     var descripcionBasica: String = \"Una clase muy básica.\"","     var otraPropiedad: Int = 69105","","     func ajustar() {","          descripcionBasica += \" Ahora 100% ajustada.\"","     }","}","","var a = ClaseBasica()","a.ajustar()","let descripcionDeA = a.descripcionBasica","","struct EstructuraBasica: EjemploDeProtocolo {","     var descripcionBasica: String = \"Una estructura básica\"","","     mutating func ajustar() {","          descripcionBasica += \" (ajustada)\"","     }","}","","var b = EstructuraBasica()","b.ajustar()","let descripcionDeB = b.descripcionBasica"],"type":"codeListing","syntax":"swift"},{"type":"aside","style":"note","name":"Experimento","content":[{"inlineContent":[{"text":"Agrega otro requerimiento a ","type":"text"},{"code":"EjemploDeProtocolo","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"¿Qué cambios debes hacer en","type":"text"},{"type":"text","text":" "},{"code":"ClaseBasica","type":"codeVoice"},{"type":"text","text":" y "},{"code":"EstructuraBasica","type":"codeVoice"},{"text":" ","type":"text"},{"text":"de manera que estas sigan estando en conformidad con el protocolo?","type":"text"}],"type":"paragraph"}]},{"inlineContent":[{"text":"Observa el uso de la palabra clave ","type":"text"},{"type":"codeVoice","code":"mutating"},{"text":" ","type":"text"},{"type":"text","text":"en la declaración de "},{"type":"codeVoice","code":"EstructuraBasica"},{"type":"text","text":" "},{"text":"para marcar un método que modifica la estructura.","type":"text"},{"text":" ","type":"text"},{"text":"La declaración de ","type":"text"},{"type":"codeVoice","code":"ClaseBasica"},{"type":"text","text":" no requiere"},{"type":"text","text":" "},{"text":"que ninguno de sus métodos esté marcado como mutante","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"ya que los métodos de una clase siempre pueden modificar la clase misma."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Utiliza "},{"code":"extension","type":"codeVoice"},{"text":" para agregar funcionalidad a un tipo existente,","type":"text"},{"text":" ","type":"text"},{"text":"como nuevos métodos y propiedades calculadas.","type":"text"},{"type":"text","text":" "},{"text":"Puedes usar una extensión para hacer que un tipo se ajuste a un protocolo,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"bien sea un tipo que se declara en otro lugar,"},{"type":"text","text":" "},{"type":"text","text":"o incluso un tipo que importas desde una biblioteca o "},{"type":"emphasis","inlineContent":[{"type":"text","text":"framework"}]},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension Int: EjemploDeProtocolo {","    var descripcionBasica: String {","        return \"El número \\(self)\"","    }","","    mutating func ajustar() {","        self += 42","    }"," }","","print(7.descripcionBasica)","\/\/ Imprime \"El número 7\""]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Crea una extensión para el tipo "},{"code":"Double","type":"codeVoice"},{"text":" ","type":"text"},{"text":"que agregue la propiedad ","type":"text"},{"type":"codeVoice","code":"valorAbsoluto"},{"type":"text","text":"."}]}],"style":"note","name":"Experimento","type":"aside"},{"type":"paragraph","inlineContent":[{"text":"Puedes usar el nombre de un protocolo como cualquier otro tipo con nombre;","type":"text"},{"type":"text","text":" "},{"text":"por ejemplo, para crear una colección de objetos","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"que tiene tipos diferentes,"},{"type":"text","text":" "},{"type":"text","text":"pero que todos se ajusten a un solo protocolo."},{"text":" ","type":"text"},{"type":"text","text":"Al trabajar con valores cuyo tipo es un tipo de protocolo,"},{"type":"text","text":" "},{"text":"los métodos externos a la definición del protocolo no estarán disponibles.","type":"text"}]},{"syntax":"swift","code":["let valorProtocolo: any EjemploDeProtocolo = a","print(valorProtocolo.descripcionBasica)","\/\/ Imprime \"Una clase muy básica. Ahora 100% ajustada.\"","\/\/ print(valorProtocolo.otraPropiedad)  \/\/ Habilita esta línea para ver el error"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Aun cuando el tipo de runtime de la variable "},{"code":"valorProtocolo","type":"codeVoice"},{"type":"text","text":" "},{"text":"es del tipo ","type":"text"},{"type":"codeVoice","code":"ClaseBasica"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"el compilador la trata como el tipo dado de "},{"code":"EjemploDeProtocolo","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Esto significa que no puedes acceder, de manera accidental,"},{"text":" ","type":"text"},{"type":"text","text":"a métodos o propiedades que la clase implementa"},{"text":" ","type":"text"},{"text":"además de su conformidad con el protocolo.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Manejo de Errores","type":"heading","anchor":"Manejo-de-Errores"},{"inlineContent":[{"type":"text","text":"Para representar errores, usa cualquier tipo que adopte el protocolo "},{"type":"codeVoice","code":"Error"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["enum ErrorDeLaImpresora: Error {","    case sinPapel","    case sinToner","    case enLlamas","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Usa "},{"type":"codeVoice","code":"throw"},{"type":"text","text":" para arrojar un error"},{"type":"text","text":" "},{"type":"text","text":"y "},{"code":"throws","type":"codeVoice"},{"text":" para marcar una función que puede arrojar un error.","type":"text"},{"type":"text","text":" "},{"text":"Si arrojas un error en una función,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"la función se interrumpe inmediatamente y el código que llamó a la función"},{"type":"text","text":" "},{"type":"text","text":"se encargará de manejar el error."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func enviar(tarea: Int, impresoraDestino nombreDeImpresora: String) throws -> String {","    if nombreDeImpresora == \"Nunca Tiene Toner\" {","        throw ErrorDeLaImpresora.sinToner","    }","","    return \"Tarea enviada\"","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Hay muchas maneras de manejar los errores."},{"type":"text","text":" "},{"type":"text","text":"Una de ellas es usar "},{"code":"do","type":"codeVoice"},{"type":"text","text":"-"},{"code":"catch","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Dentro del bloque ","type":"text"},{"type":"codeVoice","code":"do"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"marcas todo código que pueda arrojar un error,"},{"type":"text","text":" "},{"text":"agregando ","type":"text"},{"code":"try","type":"codeVoice"},{"type":"text","text":" delante del mismo."},{"type":"text","text":" "},{"type":"text","text":"Dentro del bloque "},{"code":"catch","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"al error se le asigna automáticamente el nombre "},{"type":"codeVoice","code":"error"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"a menos que le asignes un nombre diferente."}]},{"syntax":"swift","code":["do {","    let respuestaDeImpresora = try enviar(tarea: 1040, impresoraDestino: \"Bi Sheng\")","    print(respuestaDeImpresora)","} catch {","    print(error)","}","\/\/ Imprime \"Tarea enviada\""],"type":"codeListing"},{"name":"Experimento","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Cambia el nombre de la impresora a "},{"code":"“Nunca Tiene Toner”","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"de manera que la función "},{"code":"enviar(tarea:impresoraDestino:)","type":"codeVoice"},{"type":"text","text":" arroje un error."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Puedes usar múltiples bloques "},{"type":"codeVoice","code":"catch"},{"text":" ","type":"text"},{"type":"text","text":"que manejen errores específicos."},{"text":" ","type":"text"},{"text":"Para ello, escribe un patrón después de ","type":"text"},{"code":"catch","type":"codeVoice"},{"text":" al igual que harías","type":"text"},{"type":"text","text":" "},{"type":"text","text":"después de "},{"code":"case","type":"codeVoice"},{"type":"text","text":" en un ciclo "},{"inlineContent":[{"text":"switch","type":"text"}],"type":"emphasis"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["do {","    let respuestaDeImpresora = try enviar(tarea: 1440, impresoraDestino: \"Gutenberg\")","    print(respuestaDeImpresora)","} catch ErrorDeLaImpresora.enLlamas {","    print(\"Dejaré esto por aquí, con el resto del fuego.\")","} catch let errorDeLaImpresora as ErrorDeLaImpresora {","    print(\"Error de la impresora: \\(errorDeLaImpresora).\")","} catch {","    print(error)","}","\/\/ Imprime \"Tarea enviada\""]},{"content":[{"inlineContent":[{"text":"Añade código para arrojar un error dentro del bloque ","type":"text"},{"type":"codeVoice","code":"do"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"¿Qué tipo de error es necesario arrojar","type":"text"},{"type":"text","text":" "},{"type":"text","text":"para que este sea manejado por el primer bloque "},{"code":"catch","type":"codeVoice"},{"text":"?","type":"text"},{"type":"text","text":" "},{"text":"¿Qué tal con los bloques segundo y tercero?","type":"text"}],"type":"paragraph"}],"style":"note","type":"aside","name":"Experimento"},{"inlineContent":[{"type":"text","text":"Otra forma de manejar los errores"},{"type":"text","text":" "},{"type":"text","text":"es usar "},{"type":"codeVoice","code":"try?"},{"type":"text","text":" para convertir el resultado en un opcional."},{"text":" ","type":"text"},{"text":"Si la función arroja un error,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"el error específico es descartado y el resultado es "},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"En caso contrario, el resultado es un opcional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"que contiene el valor devuelto por la función."}],"type":"paragraph"},{"code":["let exitoImpresora = try? enviar(tarea: 1884, impresoraDestino: \"Mergenthaler\")","let fallaImpresora = try? enviar(tarea: 1885, impresoraDestino: \"Nunca Tiene Toner\")"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Usa ","type":"text"},{"type":"codeVoice","code":"defer"},{"type":"text","text":" para crear un bloque de código"},{"type":"text","text":" "},{"type":"text","text":"que se ejecute después de todo el código de una función,"},{"text":" ","type":"text"},{"text":"justo antes de que la función devuelva su valor.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"El código se ejecuta sin importar que la función arroje un error."},{"type":"text","text":" "},{"text":"Puedes utilizar ","type":"text"},{"code":"defer","type":"codeVoice"},{"type":"text","text":" para escribir códigos de configuración y limpieza,"},{"type":"text","text":" "},{"text":"uno al lado del otro,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"aun cuando estos deban ejecutarse en momentos diferentes."}]},{"syntax":"swift","type":"codeListing","code":["var elRefrigeradorEstaAbierto = false","let contenidoDelRefrigerador = [\"leche\", \"huevos\", \"sobras\"]","","func elRefrigeradorContiene(_ alimento: String) -> Bool {","    elRefrigeradorEstaAbierto = true","","    defer {","        elRefrigeradorEstaAbierto = false","    }","","    let resultado = contenidoDelRefrigerador.contains(alimento)","","    return resultado","}","","elRefrigeradorContiene(\"banana\")","print(elRefrigeradorEstaAbierto)","\/\/ Imprime \"false\""]},{"level":2,"text":"Genéricos","type":"heading","anchor":"Gen%C3%A9ricos"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Escribe un nombre entre paréntesis angulares ("},{"type":"codeVoice","code":"<>"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"para crear una función o tipo genéricos.","type":"text"}]},{"type":"codeListing","code":["func crearArreglo<Item>(repitiendo item: Item, numeroDeVeces: Int) -> [Item] {","    var resultado: [Item] = []","","    for _ in 0..<numeroDeVeces {","         resultado.append(item)","    }","","    return resultado","}","","crearArreglo(repitiendo: \"toc\", numeroDeVeces: 4)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"También puedes crear formas genéricas de funciones y métodos,"},{"type":"text","text":" "},{"type":"text","text":"como también de clases, enumeraciones, y estructuras."}]},{"syntax":"swift","code":["\/\/ Reimplementa el tipo opcional de la librería estándar de Swift","enum OptionalValue<Wrapped> {","    case none","    case some(Wrapped)","}","","var posibleEntero: OptionalValue<Int> = .none","posibleEntero = .some(100)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Utiliza "},{"code":"where","type":"codeVoice"},{"type":"text","text":" justo antes del cuerpo de la función"},{"type":"text","text":" "},{"text":"para especificar una lista de requerimientos;","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"por ejemplo,"},{"text":" ","type":"text"},{"type":"text","text":"para requerir el tipo para implementar un protocolo,"},{"type":"text","text":" "},{"type":"text","text":"para requerir que dos tipos sean el mismo,"},{"text":" ","type":"text"},{"text":"o para requerir que una clase tenga una súperclase en particular.","type":"text"}]},{"code":["func anyCommonElements<T: Sequence, U: Sequence>(_ lhs: T, _ rhs: U) -> Bool","    where T.Element: Equatable, T.Element == U.Element","{","    for lhsItem in lhs {","        for rhsItem in rhs {","            if lhsItem == rhsItem {","                return true","            }","        }","    }","","   return false","}","","anyCommonElements([1, 2, 3], [3])"],"syntax":"swift","type":"codeListing"},{"style":"note","type":"aside","name":"Experimento","content":[{"inlineContent":[{"type":"text","text":"Modifica la función "},{"type":"codeVoice","code":"anyCommonElements(_:_:)"},{"text":" ","type":"text"},{"type":"text","text":"para crear una función que devuelva un arreglo"},{"text":" ","type":"text"},{"type":"text","text":"de los elementos que dos secuencias cualesquiera tienen en común."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"text":"Escribir ","type":"text"},{"type":"codeVoice","code":"<T: Equatable>"},{"type":"text","text":" "},{"text":"es lo mismo que escribir ","type":"text"},{"type":"codeVoice","code":"<T> ... where T: Equatable"},{"text":".","type":"text"}]},{"style":"note","type":"aside","name":"Software Beta","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Conoce más acerca del uso de ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]}]}],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"type":"text","text":"Explora las características y la sintaxis de Swift."}],"references":{"https://developer.apple.com/es/support/beta-software/":{"title":"software beta de Apple","titleInlineContent":[{"type":"text","text":"software beta de Apple"}],"url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"link","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","abstract":[],"title":"The Swift Programming Language (5.9)","type":"topic","url":"\/documentation\/the-swift-programming-language","role":"collection"}}}