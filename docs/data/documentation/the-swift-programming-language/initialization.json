{"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Initialization"}],"type":"emphasis"},{"text":" is the process of preparing an instance of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a class, structure, or enumeration for use."},{"text":" ","type":"text"},{"text":"This process involves setting an initial value for each stored property on that instance","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and performing any other setup or initialization that’s required"},{"type":"text","text":" "},{"text":"before the new instance is ready for use.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You implement this initialization process by defining ","type":"text"},{"inlineContent":[{"type":"text","text":"initializers"}],"type":"emphasis"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are like special methods that can be called"},{"type":"text","text":" "},{"type":"text","text":"to create a new instance of a particular type."},{"type":"text","text":" "},{"type":"text","text":"Unlike Objective-C initializers, Swift initializers don’t return a value."},{"text":" ","type":"text"},{"text":"Their primary role is to ensure that new instances of a type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are correctly initialized before they’re used for the first time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instances of class types can also implement a "},{"inlineContent":[{"text":"deinitializer","type":"text"}],"type":"emphasis"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which performs any custom cleanup just before an instance of that class is deallocated."},{"text":" ","type":"text"},{"type":"text","text":"For more information about deinitializers, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","isActive":true},{"type":"text","text":"."}]},{"text":"Asignación de valores iniciales para propiedades almacenadas","type":"heading","level":2,"anchor":"Asignaci%C3%B3n-de-valores-iniciales-para-propiedades-almacenadas"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Classes and structures "},{"type":"emphasis","inlineContent":[{"type":"text","text":"must"}]},{"type":"text","text":" set all of their stored properties"},{"type":"text","text":" "},{"type":"text","text":"to an appropriate initial value by the time"},{"text":" ","type":"text"},{"text":"an instance of that class or structure is created.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Stored properties can’t be left in an indeterminate state."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can set an initial value for a stored property within an initializer,"},{"text":" ","type":"text"},{"type":"text","text":"or by assigning a default property value as part of the property’s definition."},{"text":" ","type":"text"},{"text":"These actions are described in the following sections.","type":"text"}]},{"style":"note","type":"aside","name":"Note","content":[{"inlineContent":[{"type":"text","text":"When you assign a default value to a stored property,"},{"type":"text","text":" "},{"text":"or set its initial value within an initializer,","type":"text"},{"type":"text","text":" "},{"text":"the value of that property is set directly,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"without calling any property observers."}],"type":"paragraph"}]},{"level":3,"type":"heading","text":"Inicializadores","anchor":"Inicializadores"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Initializers"}],"type":"emphasis"},{"type":"text","text":" are called to create a new instance of a particular type."},{"type":"text","text":" "},{"text":"In its simplest form, an initializer is like an instance method with no parameters,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"written using the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword:"}],"type":"paragraph"},{"syntax":"swift","code":["init() {","    \/\/ perform some initialization here","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a new structure called "},{"code":"Fahrenheit","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"to store temperatures expressed in the Fahrenheit scale."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"Fahrenheit","type":"codeVoice"},{"type":"text","text":" structure has one stored property,"},{"text":" ","type":"text"},{"code":"temperature","type":"codeVoice"},{"type":"text","text":", which is of type "},{"type":"codeVoice","code":"Double"},{"text":":","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct Fahrenheit {","    var temperature: Double","    init() {","        temperature = 32.0","    }","}","var f = Fahrenheit()","print(\"The default temperature is \\(f.temperature)° Fahrenheit\")","\/\/ Prints \"The default temperature is 32.0° Fahrenheit\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The structure defines a single initializer, "},{"type":"codeVoice","code":"init"},{"text":", with no parameters,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which initializes the stored temperature with a value of "},{"code":"32.0","type":"codeVoice"},{"text":" ","type":"text"},{"text":"(the freezing point of water in degrees Fahrenheit).","type":"text"}]},{"type":"heading","level":3,"anchor":"Valores-predeterminados-de-propiedades","text":"Valores predeterminados de propiedades"},{"type":"paragraph","inlineContent":[{"text":"You can set the initial value of a stored property from within an initializer,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as shown above."},{"type":"text","text":" "},{"type":"text","text":"Alternatively, specify a "},{"inlineContent":[{"type":"text","text":"default property value"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"as part of the property’s declaration.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You specify a default property value by assigning an initial value to the property"},{"type":"text","text":" "},{"type":"text","text":"when it’s defined."}]},{"content":[{"inlineContent":[{"type":"text","text":"If a property always takes the same initial value,"},{"text":" ","type":"text"},{"text":"provide a default value rather than setting a value within an initializer.","type":"text"},{"type":"text","text":" "},{"text":"The end result is the same,","type":"text"},{"type":"text","text":" "},{"text":"but the default value ties the property’s initialization more closely to its declaration.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It makes for shorter, clearer initializers"},{"type":"text","text":" "},{"text":"and enables you to infer the type of the property from its default value.","type":"text"},{"type":"text","text":" "},{"text":"The default value also makes it easier for you to take advantage of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"default initializers and initializer inheritance,"},{"text":" ","type":"text"},{"text":"as described later in this chapter.","type":"text"}],"type":"paragraph"}],"name":"Note","type":"aside","style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can write the "},{"type":"codeVoice","code":"Fahrenheit"},{"type":"text","text":" structure from above in a simpler form"},{"text":" ","type":"text"},{"text":"by providing a default value for its ","type":"text"},{"type":"codeVoice","code":"temperature"},{"type":"text","text":" property"},{"text":" ","type":"text"},{"type":"text","text":"at the point that the property is declared:"}]},{"syntax":"swift","type":"codeListing","code":["struct Fahrenheit {","    var temperature = 32.0","}"]},{"text":"Personalización de la inicialización","anchor":"Personalizaci%C3%B3n-de-la-inicializaci%C3%B3n","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can customize the initialization process"},{"type":"text","text":" "},{"text":"with input parameters and optional property types,","type":"text"},{"text":" ","type":"text"},{"text":"or by assigning constant properties during initialization,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as described in the following sections."}]},{"type":"heading","text":"Parámetros de inicialización","level":3,"anchor":"Par%C3%A1metros-de-inicializaci%C3%B3n"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can provide "},{"type":"emphasis","inlineContent":[{"text":"initialization parameters","type":"text"}]},{"type":"text","text":" as part of an initializer’s definition,"},{"text":" ","type":"text"},{"text":"to define the types and names of values that customize the initialization process.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Initialization parameters have the same capabilities and syntax"},{"text":" ","type":"text"},{"text":"as function and method parameters.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The following example defines a structure called "},{"type":"codeVoice","code":"Celsius"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which stores temperatures expressed in degrees Celsius."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"Celsius"},{"type":"text","text":" structure implements two custom initializers called"},{"type":"text","text":" "},{"code":"init(fromFahrenheit:)","type":"codeVoice"},{"type":"text","text":" and "},{"code":"init(fromKelvin:)","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which initialize a new instance of the structure","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with a value from a different temperature scale:"}],"type":"paragraph"},{"syntax":"swift","code":["struct Celsius {","    var temperatureInCelsius: Double","    init(fromFahrenheit fahrenheit: Double) {","        temperatureInCelsius = (fahrenheit - 32.0) \/ 1.8","    }","    init(fromKelvin kelvin: Double) {","        temperatureInCelsius = kelvin - 273.15","    }","}","let boilingPointOfWater = Celsius(fromFahrenheit: 212.0)","\/\/ boilingPointOfWater.temperatureInCelsius is 100.0","let freezingPointOfWater = Celsius(fromKelvin: 273.15)","\/\/ freezingPointOfWater.temperatureInCelsius is 0.0"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first initializer has a single initialization parameter"},{"text":" ","type":"text"},{"text":"with an argument label of ","type":"text"},{"type":"codeVoice","code":"fromFahrenheit"},{"type":"text","text":" and a parameter name of "},{"type":"codeVoice","code":"fahrenheit"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The second initializer has a single initialization parameter"},{"type":"text","text":" "},{"text":"with an argument label of ","type":"text"},{"type":"codeVoice","code":"fromKelvin"},{"text":" and a parameter name of ","type":"text"},{"code":"kelvin","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Both initializers convert their single argument into"},{"type":"text","text":" "},{"type":"text","text":"the corresponding Celsius value"},{"type":"text","text":" "},{"type":"text","text":"and store this value in a property called "},{"code":"temperatureInCelsius","type":"codeVoice"},{"type":"text","text":"."}]},{"anchor":"Nombres-de-par%C3%A1metros-y-etiquetas-de-argumentos","text":"Nombres de parámetros y etiquetas de argumentos","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"As with function and method parameters,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"initialization parameters can have both a parameter name"},{"type":"text","text":" "},{"text":"for use within the initializer’s body","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and an argument label for use when calling the initializer."}]},{"inlineContent":[{"text":"However, initializers don’t have an identifying function name before their parentheses","type":"text"},{"text":" ","type":"text"},{"text":"in the way that functions and methods do.","type":"text"},{"text":" ","type":"text"},{"text":"Therefore, the names and types of an initializer’s parameters","type":"text"},{"type":"text","text":" "},{"text":"play a particularly important role in identifying which initializer should be called.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Because of this, Swift provides an automatic argument label"},{"type":"text","text":" "},{"type":"text","text":"for "},{"inlineContent":[{"text":"every","type":"text"}],"type":"emphasis"},{"type":"text","text":" parameter in an initializer if you don’t provide one."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a structure called "},{"code":"Color","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"with three constant properties called ","type":"text"},{"code":"red","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"green"},{"text":", and ","type":"text"},{"code":"blue","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These properties store a value between "},{"type":"codeVoice","code":"0.0"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"1.0"},{"type":"text","text":" "},{"text":"to indicate the amount of red, green, and blue in the color.","type":"text"}]},{"type":"paragraph","inlineContent":[{"code":"Color","type":"codeVoice"},{"type":"text","text":" provides an initializer with"},{"text":" ","type":"text"},{"text":"three appropriately named parameters of type ","type":"text"},{"type":"codeVoice","code":"Double"},{"text":" ","type":"text"},{"type":"text","text":"for its red, green, and blue components."},{"type":"text","text":" "},{"type":"codeVoice","code":"Color"},{"text":" also provides a second initializer with a single ","type":"text"},{"code":"white","type":"codeVoice"},{"text":" parameter,","type":"text"},{"type":"text","text":" "},{"text":"which is used to provide the same value for all three color components.","type":"text"}]},{"syntax":"swift","code":["struct Color {","    let red, green, blue: Double","    init(red: Double, green: Double, blue: Double) {","        self.red   = red","        self.green = green","        self.blue  = blue","    }","    init(white: Double) {","        red   = white","        green = white","        blue  = white","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both initializers can be used to create a new "},{"code":"Color","type":"codeVoice"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"by providing named values for each initializer parameter:"}]},{"syntax":"swift","type":"codeListing","code":["let magenta = Color(red: 1.0, green: 0.0, blue: 1.0)","let halfGray = Color(white: 0.5)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that it isn’t possible to call these initializers"},{"text":" ","type":"text"},{"type":"text","text":"without using argument labels."},{"text":" ","type":"text"},{"text":"Argument labels must always be used in an initializer if they’re defined,","type":"text"},{"type":"text","text":" "},{"text":"and omitting them is a compile-time error:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let veryGreen = Color(0.0, 1.0, 0.0)","\/\/ this reports a compile-time error - argument labels are required"]},{"anchor":"Par%C3%A1metros-de-inicializaci%C3%B3n-sin-etiquetas-de-argumentos","text":"Parámetros de inicialización sin etiquetas de argumentos","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"If you don’t want to use an argument label for an initializer parameter,"},{"text":" ","type":"text"},{"type":"text","text":"write an underscore ("},{"code":"_","type":"codeVoice"},{"text":") instead of an explicit argument label for that parameter","type":"text"},{"text":" ","type":"text"},{"text":"to override the default behavior.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Here’s an expanded version of the ","type":"text"},{"type":"codeVoice","code":"Celsius"},{"type":"text","text":" example"},{"type":"text","text":" "},{"text":"from ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Par%C3%A1metros-de-inicializaci%C3%B3n"},{"text":" above,","type":"text"},{"text":" ","type":"text"},{"text":"with an additional initializer to create a new ","type":"text"},{"type":"codeVoice","code":"Celsius"},{"text":" instance","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from a "},{"code":"Double","type":"codeVoice"},{"type":"text","text":" value that’s already in the Celsius scale:"}]},{"type":"codeListing","code":["struct Celsius {","    var temperatureInCelsius: Double","    init(fromFahrenheit fahrenheit: Double) {","        temperatureInCelsius = (fahrenheit - 32.0) \/ 1.8","    }","    init(fromKelvin kelvin: Double) {","        temperatureInCelsius = kelvin - 273.15","    }","    init(_ celsius: Double) {","        temperatureInCelsius = celsius","    }","}","let bodyTemperature = Celsius(37.0)","\/\/ bodyTemperature.temperatureInCelsius is 37.0"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The initializer call "},{"type":"codeVoice","code":"Celsius(37.0)"},{"type":"text","text":" is clear in its intent"},{"text":" ","type":"text"},{"type":"text","text":"without the need for an argument label."},{"type":"text","text":" "},{"type":"text","text":"It’s therefore appropriate to write this initializer as "},{"type":"codeVoice","code":"init(_ celsius: Double)"},{"type":"text","text":" "},{"type":"text","text":"so that it can be called by providing an unnamed "},{"code":"Double","type":"codeVoice"},{"text":" value.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Tipos-de-propiedades-opcionales","level":3,"text":"Tipos de propiedades opcionales"},{"inlineContent":[{"type":"text","text":"If your custom type has a stored property that’s logically allowed to have “no value” —"},{"type":"text","text":" "},{"text":"perhaps because its value can’t be set during initialization,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or because it’s allowed to have “no value” at some later point —"},{"text":" ","type":"text"},{"type":"text","text":"declare the property with an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional"}]},{"text":" type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Properties of optional type are automatically initialized with a value of "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"indicating that the property is deliberately intended to have “no value yet”","type":"text"},{"type":"text","text":" "},{"type":"text","text":"during initialization."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following example defines a class called "},{"code":"SurveyQuestion","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"with an optional "},{"type":"codeVoice","code":"String"},{"type":"text","text":" property called "},{"type":"codeVoice","code":"response"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["class SurveyQuestion {","    var text: String","    var response: String?","    init(text: String) {","        self.text = text","    }","    func ask() {","        print(text)","    }","}","let cheeseQuestion = SurveyQuestion(text: \"Do you like cheese?\")","cheeseQuestion.ask()","\/\/ Prints \"Do you like cheese?\"","cheeseQuestion.response = \"Yes, I do like cheese.\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The response to a survey question can’t be known until it’s asked,"},{"type":"text","text":" "},{"type":"text","text":"and so the "},{"code":"response","type":"codeVoice"},{"type":"text","text":" property is declared with a type of "},{"type":"codeVoice","code":"String?"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"or “optional ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":"”."},{"type":"text","text":" "},{"type":"text","text":"It’s automatically assigned a default value of "},{"type":"codeVoice","code":"nil"},{"text":", meaning “no string yet”,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when a new instance of "},{"code":"SurveyQuestion","type":"codeVoice"},{"text":" is initialized.","type":"text"}]},{"level":3,"type":"heading","text":"Asignación de propiedades constantes durante la inicialización","anchor":"Asignaci%C3%B3n-de-propiedades-constantes-durante-la-inicializaci%C3%B3n"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can assign a value to a constant property"},{"type":"text","text":" "},{"type":"text","text":"at any point during initialization,"},{"type":"text","text":" "},{"text":"as long as it’s set to a definite value by the time initialization finishes.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Once a constant property is assigned a value,"},{"text":" ","type":"text"},{"text":"it can’t be further modified.","type":"text"}]},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For class instances,"},{"type":"text","text":" "},{"type":"text","text":"a constant property can be modified during initialization"},{"text":" ","type":"text"},{"text":"only by the class that introduces it.","type":"text"},{"text":" ","type":"text"},{"text":"It can’t be modified by a subclass.","type":"text"}]}],"name":"Note"},{"type":"paragraph","inlineContent":[{"text":"You can revise the ","type":"text"},{"type":"codeVoice","code":"SurveyQuestion"},{"type":"text","text":" example from above to use"},{"type":"text","text":" "},{"type":"text","text":"a constant property rather than a variable property for the "},{"code":"text","type":"codeVoice"},{"type":"text","text":" property of the question,"},{"type":"text","text":" "},{"text":"to indicate that the question doesn’t change once an instance of ","type":"text"},{"type":"codeVoice","code":"SurveyQuestion"},{"text":" is created.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Even though the "},{"type":"codeVoice","code":"text"},{"type":"text","text":" property is now a constant,"},{"type":"text","text":" "},{"type":"text","text":"it can still be set within the class’s initializer:"}]},{"syntax":"swift","code":["class SurveyQuestion {","    let text: String","    var response: String?","    init(text: String) {","        self.text = text","    }","    func ask() {","        print(text)","    }","}","let beetsQuestion = SurveyQuestion(text: \"How about beets?\")","beetsQuestion.ask()","\/\/ Prints \"How about beets?\"","beetsQuestion.response = \"I also like beets. (But not with cheese.)\""],"type":"codeListing"},{"anchor":"Inicializadores-predeterminados","text":"Inicializadores predeterminados","level":2,"type":"heading"},{"inlineContent":[{"text":"Swift provides a ","type":"text"},{"inlineContent":[{"type":"text","text":"default initializer"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"for any structure or class"},{"text":" ","type":"text"},{"text":"that provides default values for all of its properties","type":"text"},{"text":" ","type":"text"},{"text":"and doesn’t provide at least one initializer itself.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The default initializer simply creates a new instance"},{"type":"text","text":" "},{"type":"text","text":"with all of its properties set to their default values."}],"type":"paragraph"},{"inlineContent":[{"text":"This example defines a class called ","type":"text"},{"type":"codeVoice","code":"ShoppingListItem"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which encapsulates the name, quantity, and purchase state"},{"type":"text","text":" "},{"type":"text","text":"of an item in a shopping list:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class ShoppingListItem {","    var name: String?","    var quantity = 1","    var purchased = false","}","var item = ShoppingListItem()"]},{"inlineContent":[{"text":"Because all properties of the ","type":"text"},{"code":"ShoppingListItem","type":"codeVoice"},{"type":"text","text":" class have default values,"},{"text":" ","type":"text"},{"type":"text","text":"and because it’s a base class with no superclass,"},{"type":"text","text":" "},{"type":"codeVoice","code":"ShoppingListItem"},{"text":" automatically gains a default initializer implementation","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that creates a new instance with all of its properties set to their default values."},{"text":" ","type":"text"},{"type":"text","text":"(The "},{"code":"name","type":"codeVoice"},{"text":" property is an optional ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"type":"text","text":"and so it automatically receives a default value of "},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"even though this value isn’t written in the code.)"},{"type":"text","text":" "},{"text":"The example above uses the default initializer for the ","type":"text"},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":" class"},{"text":" ","type":"text"},{"text":"to create a new instance of the class with initializer syntax,","type":"text"},{"type":"text","text":" "},{"text":"written as ","type":"text"},{"type":"codeVoice","code":"ShoppingListItem()"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and assigns this new instance to a variable called "},{"type":"codeVoice","code":"item"},{"text":".","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"Inicializadores a nivel de miembro para tipos de estructura","anchor":"Inicializadores-a-nivel-de-miembro-para-tipos-de-estructura"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Structure types automatically receive a "},{"inlineContent":[{"type":"text","text":"memberwise initializer"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"if they don’t define any of their own custom initializers.","type":"text"},{"type":"text","text":" "},{"text":"Unlike a default initializer,","type":"text"},{"text":" ","type":"text"},{"text":"the structure receives a memberwise initializer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"even if it has stored properties that don’t have default values."}]},{"inlineContent":[{"type":"text","text":"The memberwise initializer is a shorthand way"},{"type":"text","text":" "},{"type":"text","text":"to initialize the member properties of new structure instances."},{"type":"text","text":" "},{"text":"Initial values for the properties of the new instance","type":"text"},{"text":" ","type":"text"},{"text":"can be passed to the memberwise initializer by name.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The example below defines a structure called "},{"type":"codeVoice","code":"Size"},{"text":" ","type":"text"},{"text":"with two properties called ","type":"text"},{"type":"codeVoice","code":"width"},{"type":"text","text":" and "},{"code":"height","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Both properties are inferred to be of type ","type":"text"},{"type":"codeVoice","code":"Double"},{"type":"text","text":" "},{"type":"text","text":"by assigning a default value of "},{"type":"codeVoice","code":"0.0"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Size"},{"type":"text","text":" structure automatically receives an "},{"code":"init(width:height:)","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"memberwise initializer,"},{"text":" ","type":"text"},{"type":"text","text":"which you can use to initialize a new "},{"code":"Size","type":"codeVoice"},{"text":" instance:","type":"text"}],"type":"paragraph"},{"code":["struct Size {","    var width = 0.0, height = 0.0","}","let twoByTwo = Size(width: 2.0, height: 2.0)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you call a memberwise initializer,"},{"text":" ","type":"text"},{"type":"text","text":"you can omit values for any properties"},{"text":" ","type":"text"},{"type":"text","text":"that have default values."},{"text":" ","type":"text"},{"text":"In the example above,","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"Size"},{"type":"text","text":" structure has a default value"},{"text":" ","type":"text"},{"type":"text","text":"for both its "},{"type":"codeVoice","code":"height"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"width"},{"type":"text","text":" properties."},{"text":" ","type":"text"},{"text":"You can omit either property or both properties,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the initializer uses the default value for anything you omit."},{"type":"text","text":" "},{"text":"For example:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let zeroByTwo = Size(height: 2.0)","print(zeroByTwo.width, zeroByTwo.height)","\/\/ Prints \"0.0 2.0\"","","let zeroByZero = Size()","print(zeroByZero.width, zeroByZero.height)","\/\/ Prints \"0.0 0.0\""]},{"type":"heading","level":2,"anchor":"Delegaci%C3%B3n-de-inicializadores-para-tipos-de-valor","text":"Delegación de inicializadores para tipos de valor"},{"type":"paragraph","inlineContent":[{"text":"Initializers can call other initializers to perform part of an instance’s initialization.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This process, known as "},{"inlineContent":[{"type":"text","text":"initializer delegation"}],"type":"emphasis"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"avoids duplicating code across multiple initializers."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The rules for how initializer delegation works,"},{"text":" ","type":"text"},{"text":"and for what forms of delegation are allowed,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are different for value types and class types."},{"type":"text","text":" "},{"text":"Value types (structures and enumerations) don’t support inheritance,","type":"text"},{"text":" ","type":"text"},{"text":"and so their initializer delegation process is relatively simple,","type":"text"},{"type":"text","text":" "},{"text":"because they can only delegate to another initializer that they provide themselves.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Classes, however, can inherit from other classes,"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","isActive":true},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"This means that classes have additional responsibilities for ensuring that"},{"text":" ","type":"text"},{"text":"all stored properties they inherit are assigned a suitable value during initialization.","type":"text"},{"type":"text","text":" "},{"text":"These responsibilities are described in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:Initialization#Herencide-de-clases-e-inicialización"},{"type":"text","text":" below."}]},{"type":"paragraph","inlineContent":[{"text":"For value types, you use ","type":"text"},{"type":"codeVoice","code":"self.init"},{"text":" to refer to other initializers","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from the same value type when writing your own custom initializers."},{"text":" ","type":"text"},{"text":"You can call ","type":"text"},{"type":"codeVoice","code":"self.init"},{"text":" only from within an initializer.","type":"text"}]},{"inlineContent":[{"text":"Note that if you define a custom initializer for a value type,","type":"text"},{"type":"text","text":" "},{"text":"you will no longer have access to the default initializer","type":"text"},{"type":"text","text":" "},{"text":"(or the memberwise initializer, if it’s a structure) for that type.","type":"text"},{"text":" ","type":"text"},{"text":"This constraint prevents a situation in which additional essential setup","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"provided in a more complex initializer"},{"type":"text","text":" "},{"text":"is accidentally circumvented by someone using one of the automatic initializers.","type":"text"}],"type":"paragraph"},{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"If you want your custom value type to be initializable with","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the default initializer and memberwise initializer,"},{"text":" ","type":"text"},{"type":"text","text":"and also with your own custom initializers,"},{"type":"text","text":" "},{"type":"text","text":"write your custom initializers in an extension"},{"text":" ","type":"text"},{"type":"text","text":"rather than as part of the value type’s original implementation."},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]},{"type":"paragraph","inlineContent":[{"text":"The following example defines a custom ","type":"text"},{"code":"Rect","type":"codeVoice"},{"text":" structure to represent a geometric rectangle.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The example requires two supporting structures called "},{"code":"Size","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Point","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"both of which provide default values of ","type":"text"},{"type":"codeVoice","code":"0.0"},{"type":"text","text":" for all of their properties:"}]},{"type":"codeListing","code":["struct Size {","    var width = 0.0, height = 0.0","}","struct Point {","    var x = 0.0, y = 0.0","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can initialize the "},{"type":"codeVoice","code":"Rect"},{"text":" structure below in one of three ways —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by using its default zero-initialized "},{"type":"codeVoice","code":"origin"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"size"},{"type":"text","text":" property values,"},{"text":" ","type":"text"},{"type":"text","text":"by providing a specific origin point and size,"},{"type":"text","text":" "},{"text":"or by providing a specific center point and size.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"These initialization options are represented by"},{"type":"text","text":" "},{"text":"three custom initializers that are part of the ","type":"text"},{"code":"Rect","type":"codeVoice"},{"type":"text","text":" structure’s definition:"}]},{"syntax":"swift","code":["struct Rect {","    var origin = Point()","    var size = Size()","    init() {}","    init(origin: Point, size: Size) {","        self.origin = origin","        self.size = size","    }","    init(center: Point, size: Size) {","        let originX = center.x - (size.width \/ 2)","        let originY = center.y - (size.height \/ 2)","        self.init(origin: Point(x: originX, y: originY), size: size)","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The first "},{"type":"codeVoice","code":"Rect"},{"text":" initializer, ","type":"text"},{"type":"codeVoice","code":"init()"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is functionally the same as the default initializer that the structure would have received"},{"type":"text","text":" "},{"type":"text","text":"if it didn’t have its own custom initializers."},{"type":"text","text":" "},{"text":"This initializer has an empty body,","type":"text"},{"type":"text","text":" "},{"text":"represented by an empty pair of curly braces ","type":"text"},{"code":"{}","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Calling this initializer returns a "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" instance whose"},{"type":"text","text":" "},{"type":"codeVoice","code":"origin"},{"type":"text","text":" and "},{"code":"size","type":"codeVoice"},{"text":" properties are both initialized with","type":"text"},{"type":"text","text":" "},{"text":"the default values of ","type":"text"},{"type":"codeVoice","code":"Point(x: 0.0, y: 0.0)"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"codeVoice","code":"Size(width: 0.0, height: 0.0)"},{"text":" ","type":"text"},{"type":"text","text":"from their property definitions:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let basicRect = Rect()","\/\/ basicRect's origin is (0.0, 0.0) and its size is (0.0, 0.0)"]},{"inlineContent":[{"text":"The second ","type":"text"},{"type":"codeVoice","code":"Rect"},{"text":" initializer, ","type":"text"},{"type":"codeVoice","code":"init(origin:size:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"is functionally the same as the memberwise initializer that the structure would have received"},{"text":" ","type":"text"},{"text":"if it didn’t have its own custom initializers.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This initializer simply assigns the "},{"code":"origin","type":"codeVoice"},{"type":"text","text":" and "},{"code":"size","type":"codeVoice"},{"type":"text","text":" argument values to"},{"text":" ","type":"text"},{"text":"the appropriate stored properties:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let originRect = Rect(origin: Point(x: 2.0, y: 2.0),","    size: Size(width: 5.0, height: 5.0))","\/\/ originRect's origin is (2.0, 2.0) and its size is (5.0, 5.0)"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The third "},{"code":"Rect","type":"codeVoice"},{"type":"text","text":" initializer, "},{"type":"codeVoice","code":"init(center:size:)"},{"text":", is slightly more complex.","type":"text"},{"text":" ","type":"text"},{"text":"It starts by calculating an appropriate origin point based on","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a "},{"code":"center","type":"codeVoice"},{"text":" point and a ","type":"text"},{"code":"size","type":"codeVoice"},{"type":"text","text":" value."},{"text":" ","type":"text"},{"type":"text","text":"It then calls (or "},{"inlineContent":[{"type":"text","text":"delegates"}],"type":"emphasis"},{"text":") to the ","type":"text"},{"code":"init(origin:size:)","type":"codeVoice"},{"type":"text","text":" initializer,"},{"text":" ","type":"text"},{"text":"which stores the new origin and size values in the appropriate properties:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let centerRect = Rect(center: Point(x: 4.0, y: 4.0),","    size: Size(width: 3.0, height: 3.0))","\/\/ centerRect's origin is (2.5, 2.5) and its size is (3.0, 3.0)"],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"init(center:size:)","type":"codeVoice"},{"text":" initializer could have assigned","type":"text"},{"type":"text","text":" "},{"text":"the new values of ","type":"text"},{"type":"codeVoice","code":"origin"},{"text":" and ","type":"text"},{"code":"size","type":"codeVoice"},{"text":" to the appropriate properties itself.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, it’s more convenient (and clearer in intent)"},{"text":" ","type":"text"},{"text":"for the ","type":"text"},{"type":"codeVoice","code":"init(center:size:)"},{"type":"text","text":" initializer to take advantage of an existing initializer"},{"type":"text","text":" "},{"type":"text","text":"that already provides exactly that functionality."}],"type":"paragraph"},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For an alternative way to write this example without defining"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"init()"},{"type":"text","text":" and "},{"code":"init(origin:size:)","type":"codeVoice"},{"type":"text","text":" initializers yourself,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","type":"reference","isActive":true},{"type":"text","text":"."}]}],"name":"Note"},{"type":"heading","anchor":"Herencia-de-clases-e-inicializaci%C3%B3n","level":2,"text":"Herencia de clases e inicialización"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of a class’s stored properties —"},{"text":" ","type":"text"},{"text":"including any properties the class inherits from its superclass —","type":"text"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"must","type":"text"}]},{"type":"text","text":" be assigned an initial value during initialization."}]},{"type":"paragraph","inlineContent":[{"text":"Swift defines two kinds of initializers for class types","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to help ensure all stored properties receive an initial value."},{"type":"text","text":" "},{"type":"text","text":"These are known as designated initializers and convenience initializers."}]},{"type":"heading","anchor":"Inicializadores-designados-e-inicializadores-de-conveniencia","level":3,"text":"Inicializadores designados e inicializadores de conveniencia"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Designated initializers"}]},{"text":" are the primary initializers for a class.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"A designated initializer fully initializes all properties introduced by that class"},{"type":"text","text":" "},{"type":"text","text":"and calls an appropriate superclass initializer"},{"type":"text","text":" "},{"text":"to continue the initialization process up the superclass chain.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Classes tend to have very few designated initializers,","type":"text"},{"text":" ","type":"text"},{"text":"and it’s quite common for a class to have only one.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Designated initializers are “funnel” points through which initialization takes place,"},{"text":" ","type":"text"},{"type":"text","text":"and through which the initialization process continues up the superclass chain."}]},{"inlineContent":[{"type":"text","text":"Every class must have at least one designated initializer."},{"text":" ","type":"text"},{"type":"text","text":"In some cases, this requirement is satisfied"},{"text":" ","type":"text"},{"type":"text","text":"by inheriting one or more designated initializers from a superclass,"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Herencia-autom%C3%A1tica-de-inicializadores","type":"reference"},{"text":" below.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Convenience initializers"}]},{"text":" are secondary, supporting initializers for a class.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can define a convenience initializer to call a designated initializer"},{"text":" ","type":"text"},{"text":"from the same class as the convenience initializer","type":"text"},{"type":"text","text":" "},{"text":"with some of the designated initializer’s parameters set to default values.","type":"text"},{"text":" ","type":"text"},{"text":"You can also define a convenience initializer to create","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"an instance of that class for a specific use case or input value type."}]},{"type":"paragraph","inlineContent":[{"text":"You don’t have to provide convenience initializers if your class doesn’t require them.","type":"text"},{"type":"text","text":" "},{"text":"Create convenience initializers whenever a shortcut to a common initialization pattern","type":"text"},{"type":"text","text":" "},{"text":"will save time or make initialization of the class clearer in intent.","type":"text"}]},{"level":3,"text":"Sintaxis para inicializadores designados y de conveniencia","anchor":"Sintaxis-para-inicializadores-designados-y-de-conveniencia","type":"heading"},{"inlineContent":[{"text":"Designated initializers for classes are written in the same way as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"simple initializers for value types:"}],"type":"paragraph"},{"code":["init(<#parameters#>) {","   <#statements#>","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Convenience initializers are written in the same style,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but with the "},{"code":"convenience","type":"codeVoice"},{"type":"text","text":" modifier placed before the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"text":"separated by a space:","type":"text"}],"type":"paragraph"},{"code":["convenience init(<#parameters#>) {","   <#statements#>","}"],"type":"codeListing","syntax":"swift"},{"level":3,"text":"Delegación de inicializadores para tipos de clase","anchor":"Delegaci%C3%B3n-de-inicializadores-para-tipos-de-clase","type":"heading"},{"inlineContent":[{"type":"text","text":"To simplify the relationships between designated and convenience initializers,"},{"type":"text","text":" "},{"text":"Swift applies the following three rules for delegation calls between initializers:","type":"text"}],"type":"paragraph"},{"type":"termList","items":[{"term":{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Rule 1","type":"text"}]}]},"definition":{"content":[{"inlineContent":[{"text":"A designated initializer must call a designated initializer from its immediate superclass.","type":"text"}],"type":"paragraph"}]}},{"definition":{"content":[{"inlineContent":[{"type":"text","text":"A convenience initializer must call another initializer from the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"same"}]},{"text":" class.","type":"text"}],"type":"paragraph"}]},"term":{"inlineContent":[{"inlineContent":[{"text":"Rule 2","type":"text"}],"type":"strong"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A convenience initializer must ultimately call a designated initializer."}]}]},"term":{"inlineContent":[{"inlineContent":[{"type":"text","text":"Rule 3"}],"type":"strong"}]}}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A simple way to remember this is:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Designated initializers must always delegate ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"up"}]},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Convenience initializers must always delegate "},{"type":"emphasis","inlineContent":[{"type":"text","text":"across"}]},{"text":".","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"These rules are illustrated in the figure below:","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"initializerDelegation01","type":"image"}]},{"inlineContent":[{"text":"Here, the superclass has a single designated initializer and two convenience initializers.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"One convenience initializer calls another convenience initializer,"},{"type":"text","text":" "},{"type":"text","text":"which in turn calls the single designated initializer."},{"type":"text","text":" "},{"type":"text","text":"This satisfies rules 2 and 3 from above."},{"text":" ","type":"text"},{"text":"The superclass doesn’t itself have a further superclass, and so rule 1 doesn’t apply.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The subclass in this figure has two designated initializers and one convenience initializer.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The convenience initializer must call one of the two designated initializers,"},{"text":" ","type":"text"},{"text":"because it can only call another initializer from the same class.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This satisfies rules 2 and 3 from above."},{"type":"text","text":" "},{"type":"text","text":"Both designated initializers must call the single designated initializer"},{"type":"text","text":" "},{"text":"from the superclass, to satisfy rule 1 from above.","type":"text"}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"These rules don’t affect how users of your classes "},{"inlineContent":[{"text":"create","type":"text"}],"type":"emphasis"},{"type":"text","text":" instances of each class."},{"type":"text","text":" "},{"type":"text","text":"Any initializer in the diagram above can be used to create"},{"type":"text","text":" "},{"text":"a fully initialized instance of the class they belong to.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The rules only affect how you write the implementation of the class’s initializers."}]}],"name":"Note","style":"note"},{"type":"paragraph","inlineContent":[{"text":"The figure below shows a more complex class hierarchy for four classes.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It illustrates how the designated initializers in this hierarchy"},{"type":"text","text":" "},{"text":"act as “funnel” points for class initialization,","type":"text"},{"type":"text","text":" "},{"text":"simplifying the interrelationships among classes in the chain:","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"initializerDelegation02"}]},{"anchor":"Inicializaci%C3%B3n-de-dos-fases","level":3,"text":"Inicialización de dos fases","type":"heading"},{"inlineContent":[{"text":"Class initialization in Swift is a two-phase process.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In the first phase, each stored property is assigned an initial value"},{"type":"text","text":" "},{"type":"text","text":"by the class that introduced it."},{"type":"text","text":" "},{"text":"Once the initial state for every stored property has been determined,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the second phase begins,"},{"text":" ","type":"text"},{"type":"text","text":"and each class is given the opportunity to customize its stored properties further"},{"type":"text","text":" "},{"type":"text","text":"before the new instance is considered ready for use."}],"type":"paragraph"},{"inlineContent":[{"text":"The use of a two-phase initialization process makes initialization safe,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"while still giving complete flexibility to each class in a class hierarchy."},{"text":" ","type":"text"},{"type":"text","text":"Two-phase initialization prevents property values"},{"type":"text","text":" "},{"text":"from being accessed before they’re initialized,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and prevents property values from being set to a different value"},{"type":"text","text":" "},{"type":"text","text":"by another initializer unexpectedly."}],"type":"paragraph"},{"name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s two-phase initialization process is similar to initialization in Objective-C."},{"text":" ","type":"text"},{"type":"text","text":"The main difference is that during phase 1,"},{"text":" ","type":"text"},{"type":"text","text":"Objective-C assigns zero or null values (such as "},{"type":"codeVoice","code":"0"},{"type":"text","text":" or "},{"type":"codeVoice","code":"nil"},{"text":") to every property.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift’s initialization flow is more flexible"},{"type":"text","text":" "},{"text":"in that it lets you set custom initial values,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and can cope with types for which "},{"code":"0","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" isn’t a valid default value.","type":"text"}]}],"type":"aside"},{"type":"paragraph","inlineContent":[{"text":"Swift’s compiler performs four helpful safety-checks to make sure that","type":"text"},{"type":"text","text":" "},{"text":"two-phase initialization is completed without error:","type":"text"}]},{"type":"termList","items":[{"term":{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Safety check 1"}]}]},"definition":{"content":[{"inlineContent":[{"type":"text","text":"A designated initializer must ensure that all of the properties introduced by its class are initialized before it delegates up to a superclass initializer."}],"type":"paragraph"}]}}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned above,"},{"type":"text","text":" "},{"type":"text","text":"the memory for an object is only considered fully initialized"},{"type":"text","text":" "},{"text":"once the initial state of all of its stored properties is known.","type":"text"},{"type":"text","text":" "},{"text":"In order for this rule to be satisfied, a designated initializer must make sure that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"all of its own properties are initialized before it hands off up the chain."}]},{"type":"termList","items":[{"term":{"inlineContent":[{"inlineContent":[{"text":"Safety check 2","type":"text"}],"type":"strong"}]},"definition":{"content":[{"inlineContent":[{"text":"A designated initializer must delegate up to a superclass initializer before assigning a value to an inherited property. If it doesn’t, the new value the designated initializer assigns will be overwritten by the superclass as part of its own initialization.","type":"text"}],"type":"paragraph"}]}},{"term":{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Safety check 3"}]}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A convenience initializer must delegate to another initializer before assigning a value to "},{"type":"emphasis","inlineContent":[{"text":"any","type":"text"}]},{"text":" property (including properties defined by the same class). If it doesn’t, the new value the convenience initializer assigns will be overwritten by its own class’s designated initializer.","type":"text"}]}]}},{"term":{"inlineContent":[{"inlineContent":[{"type":"text","text":"Safety check 4"}],"type":"strong"}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An initializer can’t call any instance methods, read the values of any instance properties, or refer to "},{"type":"codeVoice","code":"self"},{"text":" as a value until after the first phase of initialization is complete.","type":"text"}]}]}}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The class instance isn’t fully valid until the first phase ends."},{"text":" ","type":"text"},{"type":"text","text":"Properties can only be accessed, and methods can only be called,"},{"text":" ","type":"text"},{"type":"text","text":"once the class instance is known to be valid at the end of the first phase."}]},{"type":"paragraph","inlineContent":[{"text":"Here’s how two-phase initialization plays out, based on the four safety checks above:","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Phase 1"}]}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A designated or convenience initializer is called on a class."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Memory for a new instance of that class is allocated."},{"type":"text","text":" "},{"type":"text","text":"The memory isn’t yet initialized."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A designated initializer for that class confirms that","type":"text"},{"text":" ","type":"text"},{"text":"all stored properties introduced by that class have a value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The memory for these stored properties is now initialized."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The designated initializer hands off to a superclass initializer to perform the same task","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for its own stored properties."}]}]},{"content":[{"inlineContent":[{"text":"This continues up the class inheritance chain until the top of the chain is reached.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Once the top of the chain is reached,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the final class in the chain has ensured that all of its stored properties have a value,"},{"type":"text","text":" "},{"text":"the instance’s memory is considered to be fully initialized, and phase 1 is complete.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Phase 2","type":"text"}],"type":"strong"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Working back down from the top of the chain,"},{"type":"text","text":" "},{"type":"text","text":"each designated initializer in the chain has the option to customize the instance further."},{"type":"text","text":" "},{"text":"Initializers are now able to access ","type":"text"},{"code":"self","type":"codeVoice"},{"type":"text","text":" "},{"text":"and can modify its properties, call its instance methods, and so on.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Finally, any convenience initializers in the chain have the option"},{"type":"text","text":" "},{"type":"text","text":"to customize the instance and to work with "},{"type":"codeVoice","code":"self"},{"text":".","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how phase 1 looks for an initialization call for a hypothetical subclass and superclass:"}]},{"inlineContent":[{"identifier":"twoPhaseInitialization01","type":"image"}],"type":"paragraph"},{"inlineContent":[{"text":"In this example, initialization begins with a call to","type":"text"},{"text":" ","type":"text"},{"text":"a convenience initializer on the subclass.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This convenience initializer can’t yet modify any properties."},{"type":"text","text":" "},{"type":"text","text":"It delegates across to a designated initializer from the same class."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The designated initializer makes sure that all of the subclass’s properties have a value,"},{"type":"text","text":" "},{"text":"as per safety check 1. It then calls a designated initializer on its superclass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to continue the initialization up the chain."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The superclass’s designated initializer makes sure that"},{"type":"text","text":" "},{"type":"text","text":"all of the superclass properties have a value."},{"type":"text","text":" "},{"text":"There are no further superclasses to initialize,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and so no further delegation is needed."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"As soon as all properties of the superclass have an initial value,","type":"text"},{"type":"text","text":" "},{"text":"its memory is considered fully initialized, and phase 1 is complete.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how phase 2 looks for the same initialization call:"}]},{"inlineContent":[{"type":"image","identifier":"twoPhaseInitialization02"}],"type":"paragraph"},{"inlineContent":[{"text":"The superclass’s designated initializer now has an opportunity","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to customize the instance further"},{"type":"text","text":" "},{"type":"text","text":"(although it doesn’t have to)."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once the superclass’s designated initializer is finished,"},{"type":"text","text":" "},{"type":"text","text":"the subclass’s designated initializer can perform additional customization"},{"text":" ","type":"text"},{"type":"text","text":"(although again, it doesn’t have to)."}]},{"inlineContent":[{"type":"text","text":"Finally, once the subclass’s designated initializer is finished,"},{"text":" ","type":"text"},{"text":"the convenience initializer that was originally called","type":"text"},{"type":"text","text":" "},{"text":"can perform additional customization.","type":"text"}],"type":"paragraph"},{"anchor":"Herencia-y-sustituci%C3%B3n-de-inicializadores","type":"heading","text":"Herencia y sustitución de inicializadores","level":3},{"inlineContent":[{"type":"text","text":"Unlike subclasses in Objective-C,"},{"text":" ","type":"text"},{"text":"Swift subclasses don’t inherit their superclass initializers by default.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift’s approach prevents a situation in which a simple initializer from a superclass"},{"type":"text","text":" "},{"type":"text","text":"is inherited by a more specialized subclass"},{"text":" ","type":"text"},{"type":"text","text":"and is used to create a new instance of the subclass"},{"type":"text","text":" "},{"text":"that isn’t fully or correctly initialized.","type":"text"}],"type":"paragraph"},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"Superclass initializers ","type":"text"},{"inlineContent":[{"text":"are","type":"text"}],"type":"emphasis"},{"text":" inherited in certain circumstances,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but only when it’s safe and appropriate to do so."},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Herencia-autom%C3%A1tica-de-inicializadores","isActive":true,"type":"reference"},{"type":"text","text":" below."}]}],"style":"note","type":"aside"},{"type":"paragraph","inlineContent":[{"text":"If you want a custom subclass to present","type":"text"},{"text":" ","type":"text"},{"text":"one or more of the same initializers as its superclass,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can provide a custom implementation of those initializers within the subclass."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you write a subclass initializer that matches a superclass "},{"type":"emphasis","inlineContent":[{"text":"designated","type":"text"}]},{"type":"text","text":" initializer,"},{"text":" ","type":"text"},{"text":"you are effectively providing an override of that designated initializer.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Therefore, you must write the "},{"code":"override","type":"codeVoice"},{"type":"text","text":" modifier before the subclass’s initializer definition."},{"type":"text","text":" "},{"type":"text","text":"This is true even if you are overriding an automatically provided default initializer,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Inicializadores-predeterminados","type":"reference"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"As with an overridden property, method or subscript,"},{"type":"text","text":" "},{"text":"the presence of the ","type":"text"},{"code":"override","type":"codeVoice"},{"type":"text","text":" modifier prompts Swift to check that"},{"type":"text","text":" "},{"text":"the superclass has a matching designated initializer to be overridden,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and validates that the parameters for your overriding initializer have been specified as intended."}],"type":"paragraph"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You always write the "},{"type":"codeVoice","code":"override"},{"text":" modifier when overriding a superclass designated initializer,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"even if your subclass’s implementation of the initializer is a convenience initializer."}]}],"name":"Note","style":"note"},{"type":"paragraph","inlineContent":[{"text":"Conversely, if you write a subclass initializer that matches a superclass ","type":"text"},{"inlineContent":[{"type":"text","text":"convenience"}],"type":"emphasis"},{"text":" initializer,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that superclass convenience initializer can never be called directly by your subclass,"},{"text":" ","type":"text"},{"text":"as per the rules described above in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Delegaci%C3%B3n-de-inicializadores-para-tipos-de-clase","type":"reference","isActive":true},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Therefore, your subclass is not (strictly speaking) providing an override of the superclass initializer.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"As a result, you don’t write the "},{"code":"override","type":"codeVoice"},{"type":"text","text":" modifier when providing"},{"text":" ","type":"text"},{"type":"text","text":"a matching implementation of a superclass convenience initializer."}]},{"type":"paragraph","inlineContent":[{"text":"The example below defines a base class called ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This base class declares a stored property called "},{"type":"codeVoice","code":"numberOfWheels"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a default "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"0"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"numberOfWheels"},{"text":" property is used by a computed property called ","type":"text"},{"code":"description","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"to create a "},{"type":"codeVoice","code":"String"},{"text":" description of the vehicle’s characteristics:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class Vehicle {","    var numberOfWheels = 0","    var description: String {","        return \"\\(numberOfWheels) wheel(s)\"","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"type":"text","text":" class provides a default value for its only stored property,"},{"type":"text","text":" "},{"text":"and doesn’t provide any custom initializers itself.","type":"text"},{"type":"text","text":" "},{"text":"As a result, it automatically receives a default initializer,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Inicializadores-predeterminados","isActive":true,"type":"reference"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"The default initializer (when available) is always a designated initializer for a class,","type":"text"},{"text":" ","type":"text"},{"text":"and can be used to create a new ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":" instance with a ","type":"text"},{"type":"codeVoice","code":"numberOfWheels"},{"text":" of ","type":"text"},{"type":"codeVoice","code":"0"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let vehicle = Vehicle()","print(\"Vehicle: \\(vehicle.description)\")","\/\/ Vehicle: 0 wheel(s)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The next example defines a subclass of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" called "},{"type":"codeVoice","code":"Bicycle"},{"text":":","type":"text"}]},{"type":"codeListing","code":["class Bicycle: Vehicle {","    override init() {","        super.init()","        numberOfWheels = 2","    }","}"],"syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" subclass defines a custom designated initializer, "},{"code":"init()","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This designated initializer matches a designated initializer from the superclass of "},{"code":"Bicycle","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and so the "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" version of this initializer is marked with the "},{"type":"codeVoice","code":"override"},{"text":" modifier.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"init()"},{"type":"text","text":" initializer for "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" starts by calling "},{"type":"codeVoice","code":"super.init()"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which calls the default initializer for the "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" class’s superclass, "},{"type":"codeVoice","code":"Vehicle"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This ensures that the ","type":"text"},{"type":"codeVoice","code":"numberOfWheels"},{"text":" inherited property is initialized by ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" "},{"text":"before ","type":"text"},{"code":"Bicycle","type":"codeVoice"},{"type":"text","text":" has the opportunity to modify the property."},{"type":"text","text":" "},{"type":"text","text":"After calling "},{"type":"codeVoice","code":"super.init()"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"the original value of ","type":"text"},{"type":"codeVoice","code":"numberOfWheels"},{"type":"text","text":" is replaced with a new value of "},{"code":"2","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create an instance of "},{"code":"Bicycle","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can call its inherited "},{"type":"codeVoice","code":"description"},{"text":" computed property","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to see how its "},{"code":"numberOfWheels","type":"codeVoice"},{"type":"text","text":" property has been updated:"}]},{"type":"codeListing","syntax":"swift","code":["let bicycle = Bicycle()","print(\"Bicycle: \\(bicycle.description)\")","\/\/ Bicycle: 2 wheel(s)"]},{"type":"paragraph","inlineContent":[{"text":"If a subclass initializer performs no customization","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in phase 2 of the initialization process,"},{"text":" ","type":"text"},{"text":"and the superclass has a synchronous, zero-argument designated initializer,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can omit a call to "},{"type":"codeVoice","code":"super.init()"},{"text":" ","type":"text"},{"text":"after assigning values to all of the subclass’s stored properties.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If the superclass’s initializer is asynchronous,"},{"text":" ","type":"text"},{"text":"you need to write ","type":"text"},{"type":"codeVoice","code":"await super.init()"},{"text":" explicitly.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example defines another subclass of "},{"code":"Vehicle","type":"codeVoice"},{"text":", called ","type":"text"},{"type":"codeVoice","code":"Hoverboard"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"In its initializer, the ","type":"text"},{"code":"Hoverboard","type":"codeVoice"},{"text":" class sets only its ","type":"text"},{"code":"color","type":"codeVoice"},{"text":" property.","type":"text"},{"type":"text","text":" "},{"text":"Instead of making an explicit call to ","type":"text"},{"type":"codeVoice","code":"super.init()"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"this initializer relies on an implicit call to its superclass’s initializer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to complete the process."}]},{"type":"codeListing","syntax":"swift","code":["class Hoverboard: Vehicle {","    var color: String","    init(color: String) {","        self.color = color","        \/\/ super.init() implicitly called here","    }","    override var description: String {","        return \"\\(super.description) in a beautiful \\(color)\"","    }","}"]},{"inlineContent":[{"type":"text","text":"An instance of "},{"code":"Hoverboard","type":"codeVoice"},{"type":"text","text":" uses the default number of wheels"},{"text":" ","type":"text"},{"type":"text","text":"supplied by the "},{"type":"codeVoice","code":"Vehicle"},{"text":" initializer.","type":"text"}],"type":"paragraph"},{"code":["let hoverboard = Hoverboard(color: \"silver\")","print(\"Hoverboard: \\(hoverboard.description)\")","\/\/ Hoverboard: 0 wheel(s) in a beautiful silver"],"syntax":"swift","type":"codeListing"},{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Subclasses can modify inherited variable properties during initialization,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but can’t modify inherited constant properties."}]}]},{"level":3,"type":"heading","anchor":"Herencia-autom%C3%A1tica-de-inicializadores","text":"Herencia automática de inicializadores"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned above,"},{"type":"text","text":" "},{"text":"subclasses don’t inherit their superclass initializers by default.","type":"text"},{"text":" ","type":"text"},{"text":"However, superclass initializers ","type":"text"},{"inlineContent":[{"type":"text","text":"are"}],"type":"emphasis"},{"text":" automatically inherited if certain conditions are met.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In practice, this means that"},{"type":"text","text":" "},{"text":"you don’t need to write initializer overrides in many common scenarios,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and can inherit your superclass initializers with minimal effort whenever it’s safe to do so."}]},{"inlineContent":[{"type":"text","text":"Assuming that you provide default values for any new properties you introduce in a subclass,"},{"text":" ","type":"text"},{"text":"the following two rules apply:","type":"text"}],"type":"paragraph"},{"type":"termList","items":[{"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"If your subclass doesn’t define any designated initializers, it automatically inherits all of its superclass designated initializers.","type":"text"}]}]},"term":{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Rule 1","type":"text"}]}]}},{"term":{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Rule 2"}]}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"If your subclass provides an implementation of ","type":"text"},{"inlineContent":[{"text":"all","type":"text"}],"type":"emphasis"},{"text":" of its superclass designated initializers — either by inheriting them as per rule 1, or by providing a custom implementation as part of its definition — then it automatically inherits all of the superclass convenience initializers.","type":"text"}]}]}}]},{"inlineContent":[{"type":"text","text":"These rules apply even if your subclass adds further convenience initializers."}],"type":"paragraph"},{"type":"aside","content":[{"inlineContent":[{"text":"A subclass can implement a superclass designated initializer","type":"text"},{"type":"text","text":" "},{"text":"as a subclass convenience initializer as part of satisfying rule 2.","type":"text"}],"type":"paragraph"}],"name":"Note","style":"note"},{"text":"Inicializadores designados y de conveniencia en acción","level":3,"type":"heading","anchor":"Inicializadores-designados-y-de-conveniencia-en-acci%C3%B3n"},{"inlineContent":[{"text":"The following example shows designated initializers, convenience initializers,","type":"text"},{"text":" ","type":"text"},{"text":"and automatic initializer inheritance in action.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This example defines a hierarchy of three classes called"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Food"},{"text":", ","type":"text"},{"code":"RecipeIngredient","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"ShoppingListItem","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and demonstrates how their initializers interact."}],"type":"paragraph"},{"inlineContent":[{"text":"The base class in the hierarchy is called ","type":"text"},{"code":"Food","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which is a simple class to encapsulate the name of a foodstuff.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"Food"},{"text":" class introduces a single ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" property called ","type":"text"},{"code":"name","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and provides two initializers for creating ","type":"text"},{"code":"Food","type":"codeVoice"},{"type":"text","text":" instances:"}],"type":"paragraph"},{"code":["class Food {","    var name: String","    init(name: String) {","        self.name = name","    }","    convenience init() {","        self.init(name: \"[Unnamed]\")","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The figure below shows the initializer chain for the "},{"type":"codeVoice","code":"Food"},{"type":"text","text":" class:"}]},{"inlineContent":[{"identifier":"initializersExample01","type":"image"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Classes don’t have a default memberwise initializer,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and so the "},{"type":"codeVoice","code":"Food"},{"type":"text","text":" class provides a designated initializer"},{"type":"text","text":" "},{"text":"that takes a single argument called ","type":"text"},{"type":"codeVoice","code":"name"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This initializer can be used to create a new "},{"code":"Food","type":"codeVoice"},{"type":"text","text":" instance with a specific name:"}]},{"code":["let namedMeat = Food(name: \"Bacon\")","\/\/ namedMeat's name is \"Bacon\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"init(name: String)"},{"text":" initializer from the ","type":"text"},{"type":"codeVoice","code":"Food"},{"text":" class","type":"text"},{"text":" ","type":"text"},{"text":"is provided as a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"designated","type":"text"}]},{"text":" initializer,","type":"text"},{"text":" ","type":"text"},{"text":"because it ensures that all stored properties of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a new "},{"type":"codeVoice","code":"Food"},{"type":"text","text":" instance are fully initialized."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"Food","type":"codeVoice"},{"type":"text","text":" class doesn’t have a superclass,"},{"type":"text","text":" "},{"type":"text","text":"and so the "},{"code":"init(name: String)","type":"codeVoice"},{"type":"text","text":" initializer doesn’t need to call "},{"type":"codeVoice","code":"super.init()"},{"text":" ","type":"text"},{"type":"text","text":"to complete its initialization."}]},{"inlineContent":[{"type":"text","text":"The "},{"code":"Food","type":"codeVoice"},{"type":"text","text":" class also provides a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"convenience"}]},{"type":"text","text":" initializer, "},{"code":"init()","type":"codeVoice"},{"text":", with no arguments.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"init()","type":"codeVoice"},{"type":"text","text":" initializer provides a default placeholder name for a new food"},{"type":"text","text":" "},{"type":"text","text":"by delegating across to the "},{"type":"codeVoice","code":"Food"},{"text":" class’s ","type":"text"},{"type":"codeVoice","code":"init(name: String)"},{"text":" with","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a "},{"code":"name","type":"codeVoice"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"[Unnamed]"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let mysteryMeat = Food()","\/\/ mysteryMeat's name is \"[Unnamed]\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second class in the hierarchy is a subclass of "},{"code":"Food","type":"codeVoice"},{"type":"text","text":" called "},{"type":"codeVoice","code":"RecipeIngredient"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"RecipeIngredient"},{"text":" class models an ingredient in a cooking recipe.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It introduces an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" property called "},{"type":"codeVoice","code":"quantity"},{"text":" ","type":"text"},{"type":"text","text":"(in addition to the "},{"code":"name","type":"codeVoice"},{"type":"text","text":" property it inherits from "},{"type":"codeVoice","code":"Food"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and defines two initializers for creating "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" instances:"}]},{"type":"codeListing","syntax":"swift","code":["class RecipeIngredient: Food {","    var quantity: Int","    init(name: String, quantity: Int) {","        self.quantity = quantity","        super.init(name: name)","    }","    override convenience init(name: String) {","        self.init(name: name, quantity: 1)","    }","}"]},{"inlineContent":[{"type":"text","text":"The figure below shows the initializer chain for the "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" class:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"initializersExample02"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"RecipeIngredient","type":"codeVoice"},{"text":" class has a single designated initializer,","type":"text"},{"text":" ","type":"text"},{"code":"init(name: String, quantity: Int)","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which can be used to populate all of the properties of a new "},{"type":"codeVoice","code":"RecipeIngredient"},{"text":" instance.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This initializer starts by assigning"},{"text":" ","type":"text"},{"text":"the passed ","type":"text"},{"type":"codeVoice","code":"quantity"},{"text":" argument to the ","type":"text"},{"type":"codeVoice","code":"quantity"},{"text":" property,","type":"text"},{"text":" ","type":"text"},{"text":"which is the only new property introduced by ","type":"text"},{"type":"codeVoice","code":"RecipeIngredient"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"After doing so, the initializer delegates up to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"init(name: String)"},{"type":"text","text":" initializer of the "},{"type":"codeVoice","code":"Food"},{"text":" class.","type":"text"},{"type":"text","text":" "},{"text":"This process satisfies safety check 1","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Inicializaci%C3%B3n-de-dos-fases","type":"reference","isActive":true},{"text":" above.","type":"text"}]},{"inlineContent":[{"type":"codeVoice","code":"RecipeIngredient"},{"text":" also defines a convenience initializer, ","type":"text"},{"code":"init(name: String)","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which is used to create a ","type":"text"},{"code":"RecipeIngredient","type":"codeVoice"},{"text":" instance by name alone.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This convenience initializer assumes a quantity of "},{"type":"codeVoice","code":"1"},{"text":" ","type":"text"},{"type":"text","text":"for any "},{"type":"codeVoice","code":"RecipeIngredient"},{"text":" instance that’s created without an explicit quantity.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The definition of this convenience initializer makes"},{"text":" ","type":"text"},{"code":"RecipeIngredient","type":"codeVoice"},{"type":"text","text":" instances quicker and more convenient to create,"},{"text":" ","type":"text"},{"type":"text","text":"and avoids code duplication when creating"},{"text":" ","type":"text"},{"type":"text","text":"several single-quantity "},{"type":"codeVoice","code":"RecipeIngredient"},{"type":"text","text":" instances."},{"text":" ","type":"text"},{"type":"text","text":"This convenience initializer simply delegates across to the class’s designated initializer,"},{"type":"text","text":" "},{"text":"passing in a ","type":"text"},{"code":"quantity","type":"codeVoice"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"1"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"code":"init(name: String)","type":"codeVoice"},{"text":" convenience initializer provided by ","type":"text"},{"type":"codeVoice","code":"RecipeIngredient"},{"text":" ","type":"text"},{"text":"takes the same parameters as the ","type":"text"},{"code":"init(name: String)","type":"codeVoice"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"designated"}]},{"text":" initializer from ","type":"text"},{"code":"Food","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Because this convenience initializer overrides a designated initializer from its superclass,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it must be marked with the "},{"type":"codeVoice","code":"override"},{"text":" modifier","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(as described in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Herencia-y-sustituci%C3%B3n-de-inicializadores","isActive":true},{"type":"text","text":")."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Even though "},{"type":"codeVoice","code":"RecipeIngredient"},{"text":" provides","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"init(name: String)"},{"type":"text","text":" initializer as a convenience initializer,"},{"text":" ","type":"text"},{"code":"RecipeIngredient","type":"codeVoice"},{"text":" has nonetheless provided an implementation of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"all of its superclass’s designated initializers."},{"text":" ","type":"text"},{"text":"Therefore, ","type":"text"},{"type":"codeVoice","code":"RecipeIngredient"},{"text":" automatically inherits","type":"text"},{"type":"text","text":" "},{"type":"text","text":"all of its superclass’s convenience initializers too."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, the superclass for "},{"type":"codeVoice","code":"RecipeIngredient"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Food"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which has a single convenience initializer called ","type":"text"},{"type":"codeVoice","code":"init()"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"This initializer is therefore inherited by ","type":"text"},{"code":"RecipeIngredient","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The inherited version of "},{"type":"codeVoice","code":"init()"},{"type":"text","text":" functions in exactly the same way as the "},{"code":"Food","type":"codeVoice"},{"type":"text","text":" version,"},{"type":"text","text":" "},{"text":"except that it delegates to the ","type":"text"},{"type":"codeVoice","code":"RecipeIngredient"},{"text":" version of ","type":"text"},{"code":"init(name: String)","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"rather than the "},{"type":"codeVoice","code":"Food"},{"type":"text","text":" version."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All three of these initializers can be used to create new "},{"code":"RecipeIngredient","type":"codeVoice"},{"text":" instances:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let oneMysteryItem = RecipeIngredient()","let oneBacon = RecipeIngredient(name: \"Bacon\")","let sixEggs = RecipeIngredient(name: \"Eggs\", quantity: 6)"]},{"inlineContent":[{"type":"text","text":"The third and final class in the hierarchy is"},{"type":"text","text":" "},{"type":"text","text":"a subclass of "},{"code":"RecipeIngredient","type":"codeVoice"},{"type":"text","text":" called "},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"ShoppingListItem","type":"codeVoice"},{"type":"text","text":" class models a recipe ingredient as it appears in a shopping list."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Every item in the shopping list starts out as “unpurchased”."},{"type":"text","text":" "},{"text":"To represent this fact,","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"ShoppingListItem"},{"text":" introduces a Boolean property called ","type":"text"},{"code":"purchased","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"with a default value of "},{"code":"false","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"code":"ShoppingListItem","type":"codeVoice"},{"text":" also adds a computed ","type":"text"},{"code":"description","type":"codeVoice"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"type":"text","text":"which provides a textual description of a "},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":" instance:"}],"type":"paragraph"},{"code":["class ShoppingListItem: RecipeIngredient {","    var purchased = false","    var description: String {","        var output = \"\\(quantity) x \\(name)\"","        output += purchased ? \" ✔\" : \" ✘\"","        return output","    }","}"],"type":"codeListing","syntax":"swift"},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"code":"ShoppingListItem","type":"codeVoice"},{"text":" doesn’t define an initializer to provide","type":"text"},{"text":" ","type":"text"},{"text":"an initial value for ","type":"text"},{"type":"codeVoice","code":"purchased"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"because items in a shopping list (as modeled here) always start out unpurchased."}]}],"name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because it provides a default value for all of the properties it introduces"},{"type":"text","text":" "},{"type":"text","text":"and doesn’t define any initializers itself,"},{"type":"text","text":" "},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":" automatically inherits"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"all","type":"text"}]},{"text":" of the designated and convenience initializers from its superclass.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The figure below shows the overall initializer chain for all three classes:"}]},{"type":"paragraph","inlineContent":[{"identifier":"initializersExample03","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use all three of the inherited initializers"},{"text":" ","type":"text"},{"type":"text","text":"to create a new "},{"type":"codeVoice","code":"ShoppingListItem"},{"type":"text","text":" instance:"}]},{"syntax":"swift","code":["var breakfastList = [","    ShoppingListItem(),","    ShoppingListItem(name: \"Bacon\"),","    ShoppingListItem(name: \"Eggs\", quantity: 6),","]","breakfastList[0].name = \"Orange juice\"","breakfastList[0].purchased = true","for item in breakfastList {","    print(item.description)","}","\/\/ 1 x Orange juice ✔","\/\/ 1 x Bacon ✘","\/\/ 6 x Eggs ✘"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here, a new array called "},{"code":"breakfastList","type":"codeVoice"},{"type":"text","text":" is created from"},{"type":"text","text":" "},{"text":"an array literal containing three new ","type":"text"},{"code":"ShoppingListItem","type":"codeVoice"},{"type":"text","text":" instances."},{"type":"text","text":" "},{"text":"The type of the array is inferred to be ","type":"text"},{"code":"[ShoppingListItem]","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"After the array is created,"},{"type":"text","text":" "},{"type":"text","text":"the name of the "},{"type":"codeVoice","code":"ShoppingListItem"},{"text":" at the start of the array","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is changed from "},{"code":"\"[Unnamed]\"","type":"codeVoice"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"\"Orange juice\""},{"text":" ","type":"text"},{"text":"and it’s marked as having been purchased.","type":"text"},{"type":"text","text":" "},{"text":"Printing the description of each item in the array","type":"text"},{"type":"text","text":" "},{"type":"text","text":"shows that their default states have been set as expected."}]},{"type":"heading","text":"Inicializadores falibles","level":2,"anchor":"Inicializadores-falibles"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s sometimes useful to define a class, structure, or enumeration"},{"text":" ","type":"text"},{"type":"text","text":"for which initialization can fail."},{"type":"text","text":" "},{"text":"This failure might be triggered by invalid initialization parameter values,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the absence of a required external resource,"},{"text":" ","type":"text"},{"type":"text","text":"or some other condition that prevents initialization from succeeding."}]},{"inlineContent":[{"type":"text","text":"To cope with initialization conditions that can fail,"},{"text":" ","type":"text"},{"type":"text","text":"define one or more failable initializers as part of"},{"type":"text","text":" "},{"text":"a class, structure, or enumeration definition.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You write a failable initializer"},{"text":" ","type":"text"},{"text":"by placing a question mark after the ","type":"text"},{"code":"init","type":"codeVoice"},{"text":" keyword (","type":"text"},{"code":"init?","type":"codeVoice"},{"type":"text","text":")."}],"type":"paragraph"},{"style":"note","type":"aside","content":[{"inlineContent":[{"text":"You can’t define a failable and a nonfailable initializer","type":"text"},{"text":" ","type":"text"},{"text":"with the same parameter types and names.","type":"text"}],"type":"paragraph"}],"name":"Note"},{"type":"paragraph","inlineContent":[{"text":"A failable initializer creates an ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional"}]},{"type":"text","text":" value of the type it initializes."},{"type":"text","text":" "},{"type":"text","text":"You write "},{"code":"return nil","type":"codeVoice"},{"text":" within a failable initializer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to indicate a point at which initialization failure can be triggered."}]},{"style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Strictly speaking, initializers don’t return a value."},{"type":"text","text":" "},{"type":"text","text":"Rather, their role is to ensure that "},{"code":"self","type":"codeVoice"},{"type":"text","text":" is fully and correctly initialized"},{"type":"text","text":" "},{"text":"by the time that initialization ends.","type":"text"},{"text":" ","type":"text"},{"text":"Although you write ","type":"text"},{"type":"codeVoice","code":"return nil"},{"type":"text","text":" to trigger an initialization failure,"},{"text":" ","type":"text"},{"text":"you don’t use the ","type":"text"},{"code":"return","type":"codeVoice"},{"type":"text","text":" keyword to indicate initialization success."}]}],"type":"aside"},{"type":"paragraph","inlineContent":[{"text":"For instance, failable initializers are implemented for numeric type conversions.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"To ensure conversion between numeric types maintains the value exactly,"},{"type":"text","text":" "},{"text":"use the ","type":"text"},{"type":"codeVoice","code":"init(exactly:)"},{"text":" initializer.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If the type conversion can’t maintain the value,"},{"type":"text","text":" "},{"text":"the initializer fails.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let wholeNumber: Double = 12345.0","let pi = 3.14159","","if let valueMaintained = Int(exactly: wholeNumber) {","    print(\"\\(wholeNumber) conversion to Int maintains value of \\(valueMaintained)\")","}","\/\/ Prints \"12345.0 conversion to Int maintains value of 12345\"","","let valueChanged = Int(exactly: pi)","\/\/ valueChanged is of type Int?, not Int","","if valueChanged == nil {","    print(\"\\(pi) conversion to Int doesn't maintain value\")","}","\/\/ Prints \"3.14159 conversion to Int doesn't maintain value\""]},{"inlineContent":[{"type":"text","text":"The example below defines a structure called "},{"type":"codeVoice","code":"Animal"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"with a constant ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" property called "},{"code":"species","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"Animal","type":"codeVoice"},{"text":" structure also defines a failable initializer","type":"text"},{"text":" ","type":"text"},{"text":"with a single parameter called ","type":"text"},{"code":"species","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"This initializer checks if the "},{"code":"species","type":"codeVoice"},{"type":"text","text":" value passed to the initializer is an empty string."},{"text":" ","type":"text"},{"type":"text","text":"If an empty string is found, an initialization failure is triggered."},{"type":"text","text":" "},{"text":"Otherwise, the ","type":"text"},{"code":"species","type":"codeVoice"},{"text":" property’s value is set, and initialization succeeds:","type":"text"}],"type":"paragraph"},{"code":["struct Animal {","    let species: String","    init?(species: String) {","        if species.isEmpty { return nil }","        self.species = species","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"You can use this failable initializer to try to initialize a new ","type":"text"},{"type":"codeVoice","code":"Animal"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"and to check if initialization succeeded:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let someCreature = Animal(species: \"Giraffe\")","\/\/ someCreature is of type Animal?, not Animal","","if let giraffe = someCreature {","    print(\"An animal was initialized with a species of \\(giraffe.species)\")","}","\/\/ Prints \"An animal was initialized with a species of Giraffe\""]},{"inlineContent":[{"text":"If you pass an empty string value to the failable initializer’s ","type":"text"},{"type":"codeVoice","code":"species"},{"type":"text","text":" parameter,"},{"type":"text","text":" "},{"text":"the initializer triggers an initialization failure:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let anonymousCreature = Animal(species: \"\")","\/\/ anonymousCreature is of type Animal?, not Animal","","if anonymousCreature == nil {","    print(\"The anonymous creature couldn't be initialized\")","}","\/\/ Prints \"The anonymous creature couldn't be initialized\""]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Checking for an empty string value (such as "},{"type":"codeVoice","code":"\"\""},{"type":"text","text":" rather than "},{"code":"\"Giraffe\"","type":"codeVoice"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"isn’t the same as checking for "},{"code":"nil","type":"codeVoice"},{"text":" to indicate the absence of an ","type":"text"},{"inlineContent":[{"text":"optional","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"code":"String","type":"codeVoice"},{"text":" value.","type":"text"},{"text":" ","type":"text"},{"text":"In the example above, an empty string (","type":"text"},{"type":"codeVoice","code":"\"\""},{"text":") is a valid, non-optional ","type":"text"},{"type":"codeVoice","code":"String"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"However, it’s not appropriate for an animal","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to have an empty string as the value of its "},{"type":"codeVoice","code":"species"},{"type":"text","text":" property."},{"text":" ","type":"text"},{"text":"To model this restriction,","type":"text"},{"text":" ","type":"text"},{"text":"the failable initializer triggers an initialization failure if an empty string is found.","type":"text"}]}],"name":"Note","style":"note"},{"level":3,"anchor":"Inicializadores-falibles-para-enumeraciones","text":"Inicializadores falibles para enumeraciones","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use a failable initializer to select an appropriate enumeration case"},{"type":"text","text":" "},{"type":"text","text":"based on one or more parameters."},{"type":"text","text":" "},{"type":"text","text":"The initializer can then fail if the provided parameters"},{"type":"text","text":" "},{"text":"don’t match an appropriate enumeration case.","type":"text"}]},{"inlineContent":[{"text":"The example below defines an enumeration called ","type":"text"},{"type":"codeVoice","code":"TemperatureUnit"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with three possible states ("},{"code":"kelvin","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"celsius"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"fahrenheit"},{"text":").","type":"text"},{"text":" ","type":"text"},{"text":"A failable initializer is used to find an appropriate enumeration case","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for a "},{"code":"Character","type":"codeVoice"},{"type":"text","text":" value representing a temperature symbol:"}],"type":"paragraph"},{"code":["enum TemperatureUnit {","    case kelvin, celsius, fahrenheit","    init?(symbol: Character) {","        switch symbol {","        case \"K\":","            self = .kelvin","        case \"C\":","            self = .celsius","        case \"F\":","            self = .fahrenheit","        default:","            return nil","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can use this failable initializer to choose","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"an appropriate enumeration case for the three possible states"},{"text":" ","type":"text"},{"text":"and to cause initialization to fail if the parameter doesn’t match one of these","type":"text"},{"type":"text","text":" "},{"text":"states:","type":"text"}]},{"syntax":"swift","code":["let fahrenheitUnit = TemperatureUnit(symbol: \"F\")","if fahrenheitUnit != nil {","    print(\"This is a defined temperature unit, so initialization succeeded.\")","}","\/\/ Prints \"This is a defined temperature unit, so initialization succeeded.\"","","let unknownUnit = TemperatureUnit(symbol: \"X\")","if unknownUnit == nil {","    print(\"This isn't a defined temperature unit, so initialization failed.\")","}","\/\/ Prints \"This isn't a defined temperature unit, so initialization failed.\""],"type":"codeListing"},{"text":"Inicializadores falibles para enumeraciones con valores brutos","type":"heading","anchor":"Inicializadores-falibles-para-enumeraciones-con-valores-brutos","level":3},{"type":"paragraph","inlineContent":[{"text":"Enumerations with raw values automatically receive a failable initializer,","type":"text"},{"text":" ","type":"text"},{"code":"init?(rawValue:)","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"that takes a parameter called "},{"code":"rawValue","type":"codeVoice"},{"type":"text","text":" of the appropriate raw-value type"},{"text":" ","type":"text"},{"type":"text","text":"and selects a matching enumeration case if one is found,"},{"text":" ","type":"text"},{"type":"text","text":"or triggers an initialization failure if no matching value exists."}]},{"type":"paragraph","inlineContent":[{"text":"You can rewrite the ","type":"text"},{"code":"TemperatureUnit","type":"codeVoice"},{"text":" example from above","type":"text"},{"text":" ","type":"text"},{"text":"to use raw values of type ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"and to take advantage of the "},{"code":"init?(rawValue:)","type":"codeVoice"},{"type":"text","text":" initializer:"}]},{"code":["enum TemperatureUnit: Character {","    case kelvin = \"K\", celsius = \"C\", fahrenheit = \"F\"","}","","let fahrenheitUnit = TemperatureUnit(rawValue: \"F\")","if fahrenheitUnit != nil {","    print(\"This is a defined temperature unit, so initialization succeeded.\")","}","\/\/ Prints \"This is a defined temperature unit, so initialization succeeded.\"","","let unknownUnit = TemperatureUnit(rawValue: \"X\")","if unknownUnit == nil {","    print(\"This isn't a defined temperature unit, so initialization failed.\")","}","\/\/ Prints \"This isn't a defined temperature unit, so initialization failed.\""],"syntax":"swift","type":"codeListing"},{"anchor":"Propagaci%C3%B3n-de-fallas-de-inicializaci%C3%B3n","text":"Propagación de fallas de inicialización","type":"heading","level":3},{"inlineContent":[{"text":"A failable initializer of a class, structure, or enumeration","type":"text"},{"type":"text","text":" "},{"text":"can delegate across to another failable initializer from the same class, structure, or enumeration.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Similarly, a subclass failable initializer can delegate up to a superclass failable initializer."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In either case, if you delegate to another initializer that causes initialization to fail,","type":"text"},{"text":" ","type":"text"},{"text":"the entire initialization process fails immediately,","type":"text"},{"text":" ","type":"text"},{"text":"and no further initialization code is executed.","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A failable initializer can also delegate to a nonfailable initializer.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Use this approach if you need to add a potential failure state"},{"type":"text","text":" "},{"text":"to an existing initialization process that doesn’t otherwise fail.","type":"text"}]}],"style":"note","name":"Note","type":"aside"},{"inlineContent":[{"text":"The example below defines a subclass of ","type":"text"},{"type":"codeVoice","code":"Product"},{"type":"text","text":" called "},{"code":"CartItem","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"CartItem","type":"codeVoice"},{"type":"text","text":" class models an item in an online shopping cart."},{"text":" ","type":"text"},{"type":"codeVoice","code":"CartItem"},{"type":"text","text":" introduces a stored constant property called "},{"code":"quantity","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ensures that this property always has a value of at least ","type":"text"},{"type":"codeVoice","code":"1"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class Product {","    let name: String","    init?(name: String) {","        if name.isEmpty { return nil }","        self.name = name","    }","}","","class CartItem: Product {","    let quantity: Int","    init?(name: String, quantity: Int) {","        if quantity < 1 { return nil }","        self.quantity = quantity","        super.init(name: name)","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The failable initializer for "},{"type":"codeVoice","code":"CartItem"},{"text":" starts by","type":"text"},{"type":"text","text":" "},{"text":"validating that it has received a ","type":"text"},{"type":"codeVoice","code":"quantity"},{"text":" value of ","type":"text"},{"type":"codeVoice","code":"1"},{"text":" or more.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If the "},{"code":"quantity","type":"codeVoice"},{"text":" is invalid,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the entire initialization process fails immediately"},{"type":"text","text":" "},{"type":"text","text":"and no further initialization code is executed."},{"text":" ","type":"text"},{"type":"text","text":"Likewise, the failable initializer for "},{"type":"codeVoice","code":"Product"},{"text":" ","type":"text"},{"type":"text","text":"checks the "},{"code":"name","type":"codeVoice"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"type":"text","text":"and the initializer process fails immediately"},{"text":" ","type":"text"},{"text":"if ","type":"text"},{"code":"name","type":"codeVoice"},{"type":"text","text":" is the empty string."}],"type":"paragraph"},{"inlineContent":[{"text":"If you create a ","type":"text"},{"type":"codeVoice","code":"CartItem"},{"type":"text","text":" instance with a nonempty name and a quantity of "},{"type":"codeVoice","code":"1"},{"type":"text","text":" or more,"},{"type":"text","text":" "},{"type":"text","text":"initialization succeeds:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["if let twoSocks = CartItem(name: \"sock\", quantity: 2) {","    print(\"Item: \\(twoSocks.name), quantity: \\(twoSocks.quantity)\")","}","\/\/ Prints \"Item: sock, quantity: 2\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you try to create a "},{"type":"codeVoice","code":"CartItem"},{"type":"text","text":" instance with a "},{"code":"quantity","type":"codeVoice"},{"text":" value of ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"CartItem","type":"codeVoice"},{"type":"text","text":" initializer causes initialization to fail:"}]},{"type":"codeListing","syntax":"swift","code":["if let zeroShirts = CartItem(name: \"shirt\", quantity: 0) {","    print(\"Item: \\(zeroShirts.name), quantity: \\(zeroShirts.quantity)\")","} else {","    print(\"Unable to initialize zero shirts\")","}","\/\/ Prints \"Unable to initialize zero shirts\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly, if you try to create a "},{"type":"codeVoice","code":"CartItem"},{"text":" instance with an empty ","type":"text"},{"code":"name","type":"codeVoice"},{"text":" value,","type":"text"},{"type":"text","text":" "},{"text":"the superclass ","type":"text"},{"code":"Product","type":"codeVoice"},{"text":" initializer causes initialization to fail:","type":"text"}]},{"type":"codeListing","code":["if let oneUnnamed = CartItem(name: \"\", quantity: 1) {","    print(\"Item: \\(oneUnnamed.name), quantity: \\(oneUnnamed.quantity)\")","} else {","    print(\"Unable to initialize one unnamed product\")","}","\/\/ Prints \"Unable to initialize one unnamed product\""],"syntax":"swift"},{"anchor":"Sustituci%C3%B3n-de-un-inicializador-falible","level":3,"type":"heading","text":"Sustitución de un inicializador falible"},{"inlineContent":[{"type":"text","text":"You can override a superclass failable initializer in a subclass,"},{"type":"text","text":" "},{"type":"text","text":"just like any other initializer."},{"type":"text","text":" "},{"text":"Alternatively, you can override a superclass failable initializer","type":"text"},{"text":" ","type":"text"},{"text":"with a subclass ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"nonfailable","type":"text"}]},{"type":"text","text":" initializer."},{"text":" ","type":"text"},{"text":"This enables you to define a subclass for which initialization can’t fail,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"even though initialization of the superclass is allowed to fail."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Note that if you override a failable superclass initializer with a nonfailable subclass initializer,"},{"type":"text","text":" "},{"text":"the only way to delegate up to the superclass initializer","type":"text"},{"type":"text","text":" "},{"text":"is to force-unwrap the result of the failable superclass initializer.","type":"text"}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"You can override a failable initializer with a nonfailable initializer"},{"type":"text","text":" "},{"text":"but not the other way around.","type":"text"}],"type":"paragraph"}],"name":"Note","type":"aside","style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a class called "},{"type":"codeVoice","code":"Document"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This class models a document that can be initialized with"},{"type":"text","text":" "},{"type":"text","text":"a "},{"code":"name","type":"codeVoice"},{"text":" property that’s either a nonempty string value or ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"but can’t be an empty string:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["class Document {","    var name: String?","    \/\/ this initializer creates a document with a nil name value","    init() {}","    \/\/ this initializer creates a document with a nonempty name value","    init?(name: String) {","        if name.isEmpty { return nil }","        self.name = name","    }","}"]},{"inlineContent":[{"type":"text","text":"The next example defines a subclass of "},{"code":"Document","type":"codeVoice"},{"type":"text","text":" called "},{"type":"codeVoice","code":"AutomaticallyNamedDocument"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"AutomaticallyNamedDocument"},{"type":"text","text":" subclass overrides"},{"text":" ","type":"text"},{"text":"both of the designated initializers introduced by ","type":"text"},{"type":"codeVoice","code":"Document"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"These overrides ensure that an ","type":"text"},{"type":"codeVoice","code":"AutomaticallyNamedDocument"},{"type":"text","text":" instance has"},{"type":"text","text":" "},{"type":"text","text":"an initial "},{"type":"codeVoice","code":"name"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"\"[Untitled]\""},{"type":"text","text":" "},{"text":"if the instance is initialized without a name,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or if an empty string is passed to the "},{"type":"codeVoice","code":"init(name:)"},{"type":"text","text":" initializer:"}],"type":"paragraph"},{"code":["class AutomaticallyNamedDocument: Document {","    override init() {","        super.init()","        self.name = \"[Untitled]\"","    }","    override init(name: String) {","        super.init()","        if name.isEmpty {","            self.name = \"[Untitled]\"","        } else {","            self.name = name","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"AutomaticallyNamedDocument"},{"type":"text","text":" overrides its superclass’s"},{"text":" ","type":"text"},{"type":"text","text":"failable "},{"type":"codeVoice","code":"init?(name:)"},{"text":" initializer with a nonfailable ","type":"text"},{"type":"codeVoice","code":"init(name:)"},{"type":"text","text":" initializer."},{"text":" ","type":"text"},{"type":"text","text":"Because "},{"type":"codeVoice","code":"AutomaticallyNamedDocument"},{"type":"text","text":" copes with the empty string case"},{"type":"text","text":" "},{"type":"text","text":"in a different way than its superclass,"},{"type":"text","text":" "},{"text":"its initializer doesn’t need to fail,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and so it provides a nonfailable version of the initializer instead."}],"type":"paragraph"},{"inlineContent":[{"text":"You can use forced unwrapping in an initializer","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to call a failable initializer from the superclass"},{"text":" ","type":"text"},{"text":"as part of the implementation of a subclass’s nonfailable initializer.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, the "},{"type":"codeVoice","code":"UntitledDocument"},{"text":" subclass below is always named ","type":"text"},{"type":"codeVoice","code":"\"[Untitled]\""},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and it uses the failable ","type":"text"},{"type":"codeVoice","code":"init(name:)"},{"text":" initializer","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"from its superclass during initialization."}],"type":"paragraph"},{"code":["class UntitledDocument: Document {","    override init() {","        super.init(name: \"[Untitled]\")!","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this case, if the "},{"code":"init(name:)","type":"codeVoice"},{"type":"text","text":" initializer of the superclass"},{"type":"text","text":" "},{"type":"text","text":"were ever called with an empty string as the name,"},{"type":"text","text":" "},{"text":"the forced unwrapping operation would result in a runtime error.","type":"text"},{"type":"text","text":" "},{"text":"However, because it’s called with a string constant,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can see that the initializer won’t fail,"},{"text":" ","type":"text"},{"type":"text","text":"so no runtime error can occur in this case."}]},{"level":3,"text":"El inicializador falible init!","anchor":"El-inicializador-falible-init","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You typically define a failable initializer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that creates an optional instance of the appropriate type"},{"type":"text","text":" "},{"text":"by placing a question mark after the ","type":"text"},{"code":"init","type":"codeVoice"},{"type":"text","text":" keyword ("},{"code":"init?","type":"codeVoice"},{"text":").","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Alternatively, you can define a failable initializer that creates"},{"type":"text","text":" "},{"type":"text","text":"an implicitly unwrapped optional instance of the appropriate type."},{"type":"text","text":" "},{"type":"text","text":"Do this by placing an exclamation point after the "},{"type":"codeVoice","code":"init"},{"text":" keyword (","type":"text"},{"type":"codeVoice","code":"init!"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"instead of a question mark."}]},{"inlineContent":[{"text":"You can delegate from ","type":"text"},{"type":"codeVoice","code":"init?"},{"type":"text","text":" to "},{"code":"init!","type":"codeVoice"},{"type":"text","text":" and vice versa,"},{"text":" ","type":"text"},{"type":"text","text":"and you can override "},{"code":"init?","type":"codeVoice"},{"type":"text","text":" with "},{"type":"codeVoice","code":"init!"},{"type":"text","text":" and vice versa."},{"type":"text","text":" "},{"type":"text","text":"You can also delegate from "},{"type":"codeVoice","code":"init"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"init!"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"although doing so will trigger an assertion","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"if the "},{"type":"codeVoice","code":"init!"},{"type":"text","text":" initializer causes initialization to fail."}],"type":"paragraph"},{"type":"heading","text":"Inicializadores obligatorios","level":2,"anchor":"Inicializadores-obligatorios"},{"inlineContent":[{"text":"Write the ","type":"text"},{"code":"required","type":"codeVoice"},{"type":"text","text":" modifier before the definition of a class initializer"},{"type":"text","text":" "},{"type":"text","text":"to indicate that every subclass of the class must implement that initializer:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class SomeClass {","    required init() {","        \/\/ initializer implementation goes here","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You must also write the "},{"type":"codeVoice","code":"required"},{"type":"text","text":" modifier before"},{"text":" ","type":"text"},{"text":"every subclass implementation of a required initializer,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to indicate that the initializer requirement applies to further subclasses in the chain."},{"type":"text","text":" "},{"text":"You don’t write the ","type":"text"},{"type":"codeVoice","code":"override"},{"type":"text","text":" modifier when overriding a required designated initializer:"}]},{"syntax":"swift","code":["class SomeSubclass: SomeClass {","    required init() {","        \/\/ subclass implementation of the required initializer goes here","    }","}"],"type":"codeListing"},{"content":[{"inlineContent":[{"text":"You don’t have to provide an explicit implementation of a required initializer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"if you can satisfy the requirement with an inherited initializer."}],"type":"paragraph"}],"name":"Note","style":"note","type":"aside"},{"level":2,"type":"heading","text":"Asignación de un valor predeterminado a una propiedad mediante una clausura o función","anchor":"Asignaci%C3%B3n-de-un-valor-predeterminado-a-una-propiedad-mediante-una-clausura-o-funci%C3%B3n"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a stored property’s default value requires some customization or setup,"},{"text":" ","type":"text"},{"type":"text","text":"you can use a closure or global function to provide"},{"type":"text","text":" "},{"text":"a customized default value for that property.","type":"text"},{"text":" ","type":"text"},{"text":"Whenever a new instance of the type that the property belongs to is initialized,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the closure or function is called,"},{"text":" ","type":"text"},{"text":"and its return value is assigned as the property’s default value.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"These kinds of closures or functions typically create","type":"text"},{"type":"text","text":" "},{"text":"a temporary value of the same type as the property,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"tailor that value to represent the desired initial state,"},{"text":" ","type":"text"},{"text":"and then return that temporary value to be used as the property’s default value.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Here’s a skeleton outline of how a closure can be used","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to provide a default property value:"}]},{"type":"codeListing","syntax":"swift","code":["class SomeClass {","    let someProperty: SomeType = {","        \/\/ create a default value for someProperty inside this closure","        \/\/ someValue must be of the same type as SomeType","        return someValue","    }()","}"]},{"type":"paragraph","inlineContent":[{"text":"Note that the closure’s end curly brace is followed by an empty pair of parentheses.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This tells Swift to execute the closure immediately."},{"text":" ","type":"text"},{"type":"text","text":"If you omit these parentheses,"},{"type":"text","text":" "},{"type":"text","text":"you are trying to assign the closure itself to the property,"},{"text":" ","type":"text"},{"type":"text","text":"and not the return value of the closure."}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"If you use a closure to initialize a property,","type":"text"},{"text":" ","type":"text"},{"text":"remember that the rest of the instance hasn’t yet been initialized","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"at the point that the closure is executed."},{"type":"text","text":" "},{"text":"This means that you can’t access any other property values from within your closure,","type":"text"},{"type":"text","text":" "},{"text":"even if those properties have default values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You also can’t use the implicit "},{"type":"codeVoice","code":"self"},{"text":" property,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or call any of the instance’s methods."}]}],"type":"aside","style":"note"},{"inlineContent":[{"type":"text","text":"The example below defines a structure called "},{"type":"codeVoice","code":"Chessboard"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which models a board for the game of chess.","type":"text"},{"type":"text","text":" "},{"text":"Chess is played on an 8 x 8 board,","type":"text"},{"type":"text","text":" "},{"text":"with alternating black and white squares.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"identifier":"chessBoard","type":"image"}],"type":"paragraph"},{"inlineContent":[{"text":"To represent this game board,","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"Chessboard"},{"type":"text","text":" structure has a single property called "},{"type":"codeVoice","code":"boardColors"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which is an array of 64 ","type":"text"},{"type":"codeVoice","code":"Bool"},{"text":" values.","type":"text"},{"type":"text","text":" "},{"text":"A value of ","type":"text"},{"type":"codeVoice","code":"true"},{"text":" in the array represents a black square","type":"text"},{"type":"text","text":" "},{"text":"and a value of ","type":"text"},{"type":"codeVoice","code":"false"},{"text":" represents a white square.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The first item in the array represents the top left square on the board"},{"type":"text","text":" "},{"type":"text","text":"and the last item in the array represents the bottom right square on the board."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"boardColors"},{"text":" array is initialized with a closure to set up its color values:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct Chessboard {","    let boardColors: [Bool] = {","        var temporaryBoard: [Bool] = []","        var isBlack = false","        for i in 1...8 {","            for j in 1...8 {","                temporaryBoard.append(isBlack)","                isBlack = !isBlack","            }","            isBlack = !isBlack","        }","        return temporaryBoard","    }()","    func squareIsBlackAt(row: Int, column: Int) -> Bool {","        return boardColors[(row * 8) + column]","    }","}"]},{"inlineContent":[{"type":"text","text":"Whenever a new "},{"type":"codeVoice","code":"Chessboard"},{"type":"text","text":" instance is created, the closure is executed,"},{"type":"text","text":" "},{"type":"text","text":"and the default value of "},{"type":"codeVoice","code":"boardColors"},{"text":" is calculated and returned.","type":"text"},{"type":"text","text":" "},{"text":"The closure in the example above calculates and sets","type":"text"},{"type":"text","text":" "},{"text":"the appropriate color for each square on the board","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in a temporary array called "},{"type":"codeVoice","code":"temporaryBoard"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and returns this temporary array as the closure’s return value"},{"text":" ","type":"text"},{"type":"text","text":"once its setup is complete."},{"type":"text","text":" "},{"type":"text","text":"The returned array value is stored in "},{"code":"boardColors","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and can be queried with the ","type":"text"},{"type":"codeVoice","code":"squareIsBlackAt(row:column:)"},{"text":" utility function:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let board = Chessboard()","print(board.squareIsBlackAt(row: 0, column: 1))","\/\/ Prints \"true\"","print(board.squareIsBlackAt(row: 7, column: 7))","\/\/ Prints \"false\""],"syntax":"swift"},{"content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Conoce más acerca del uso del ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"reference","isActive":true},{"type":"text","text":"."}]}],"type":"aside","name":"Software Beta","style":"note"}]}],"sections":[],"metadata":{"title":"Inicialización"},"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization"},"abstract":[{"type":"text","text":"Set the initial values for a type’s stored properties and perform one-time setup."}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Inicializadores-predeterminados":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Inicializadores-predeterminados","abstract":[],"title":"Inicializadores predeterminados","url":"\/documentation\/the-swift-programming-language\/initialization#Inicializadores-predeterminados","kind":"section","type":"topic"},"https://developer.apple.com/es/support/beta-software/":{"titleInlineContent":[{"type":"text","text":"software beta de Apple"}],"title":"software beta de Apple","url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"link"},"initializersExample03":{"alt":null,"variants":[{"url":"\/images\/org.swift.tspl\/initializersExample03@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/initializersExample03~dark@2x.png","traits":["2x","dark"]}],"identifier":"initializersExample03","type":"image"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Herencia-autom%C3%A1tica-de-inicializadores":{"url":"\/documentation\/the-swift-programming-language\/initialization#Herencia-autom%C3%A1tica-de-inicializadores","title":"Herencia automática de inicializadores","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Herencia-autom%C3%A1tica-de-inicializadores","type":"topic"},"chessBoard":{"alt":null,"variants":[{"url":"\/images\/org.swift.tspl\/chessBoard@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/chessBoard~dark@2x.png","traits":["2x","dark"]}],"identifier":"chessBoard","type":"image"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Herencia-y-sustituci%C3%B3n-de-inicializadores":{"url":"\/documentation\/the-swift-programming-language\/initialization#Herencia-y-sustituci%C3%B3n-de-inicializadores","title":"Herencia y sustitución de inicializadores","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Herencia-y-sustituci%C3%B3n-de-inicializadores","type":"topic"},"twoPhaseInitialization02":{"alt":null,"variants":[{"url":"\/images\/org.swift.tspl\/twoPhaseInitialization02@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/twoPhaseInitialization02~dark@2x.png","traits":["2x","dark"]}],"identifier":"twoPhaseInitialization02","type":"image"},"initializersExample01":{"alt":null,"variants":[{"url":"\/images\/org.swift.tspl\/initializersExample01@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/initializersExample01~dark@2x.png","traits":["2x","dark"]}],"identifier":"initializersExample01","type":"image"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","url":"\/documentation\/the-swift-programming-language","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","type":"topic","role":"collection","title":"The Swift Programming Language (5.9)","abstract":[]},"twoPhaseInitialization01":{"alt":null,"variants":[{"url":"\/images\/org.swift.tspl\/twoPhaseInitialization01@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/twoPhaseInitialization01~dark@2x.png","traits":["2x","dark"]}],"identifier":"twoPhaseInitialization01","type":"image"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Delegaci%C3%B3n-de-inicializadores-para-tipos-de-clase":{"url":"\/documentation\/the-swift-programming-language\/initialization#Delegaci%C3%B3n-de-inicializadores-para-tipos-de-clase","title":"Delegación de inicializadores para tipos de clase","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Delegaci%C3%B3n-de-inicializadores-para-tipos-de-clase","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Par%C3%A1metros-de-inicializaci%C3%B3n":{"url":"\/documentation\/the-swift-programming-language\/initialization#Par%C3%A1metros-de-inicializaci%C3%B3n","title":"Parámetros de inicialización","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Par%C3%A1metros-de-inicializaci%C3%B3n","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"type":"topic","abstract":[{"type":"text","text":"Release resources that require custom cleanup."}],"title":"Desinicialización","role":"article","url":"\/documentation\/the-swift-programming-language\/deinitialization","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization"},"initializerDelegation01":{"identifier":"initializerDelegation01","variants":[{"url":"\/images\/org.swift.tspl\/initializerDelegation01@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/initializerDelegation01~dark@2x.png","traits":["2x","dark"]}],"type":"image","alt":null},"initializerDelegation02":{"identifier":"initializerDelegation02","variants":[{"url":"\/images\/org.swift.tspl\/initializerDelegation02@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/initializerDelegation02~dark@2x.png","traits":["2x","dark"]}],"type":"image","alt":null},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Inicializaci%C3%B3n-de-dos-fases":{"title":"Inicialización de dos fases","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Inicializaci%C3%B3n-de-dos-fases","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization#Inicializaci%C3%B3n-de-dos-fases","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"abstract":[{"type":"text","text":"Subclass to add or override functionality."}],"kind":"article","type":"topic","role":"article","title":"Herencia","url":"\/documentation\/the-swift-programming-language\/inheritance","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","role":"article","type":"topic","title":"Extensiones","url":"\/documentation\/the-swift-programming-language\/extensions","abstract":[{"text":"Add functionality to an existing type.","type":"text"}],"kind":"article"},"initializersExample02":{"identifier":"initializersExample02","variants":[{"url":"\/images\/org.swift.tspl\/initializersExample02@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/initializersExample02~dark@2x.png","traits":["2x","dark"]}],"type":"image","alt":null}}}