{"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"kind":"article","abstract":[{"text":"Structure code with branches, loops, and early exits.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"type":"text","text":"Swift provides a variety of control flow statements."},{"text":" ","type":"text"},{"type":"text","text":"These include "},{"code":"while","type":"codeVoice"},{"type":"text","text":" loops to perform a task multiple times;"},{"type":"text","text":" "},{"code":"if","type":"codeVoice"},{"text":", ","type":"text"},{"code":"guard","type":"codeVoice"},{"type":"text","text":", and "},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statements"},{"text":" ","type":"text"},{"type":"text","text":"to execute different branches of code based on certain conditions;"},{"text":" ","type":"text"},{"text":"and statements such as ","type":"text"},{"code":"break","type":"codeVoice"},{"type":"text","text":" and "},{"code":"continue","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"to transfer the flow of execution to another point in your code."},{"type":"text","text":" "},{"text":"Swift provides a ","type":"text"},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"type":"codeVoice","code":"in"},{"text":" loop that makes it easy to iterate over","type":"text"},{"text":" ","type":"text"},{"text":"arrays, dictionaries, ranges, strings, and other sequences.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift also provides "},{"type":"codeVoice","code":"defer"},{"text":" statements,","type":"text"},{"type":"text","text":" "},{"text":"which wrap code to be executed when leaving the current scope.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statement is considerably more powerful"},{"text":" ","type":"text"},{"type":"text","text":"than its counterpart in many C-like languages."},{"type":"text","text":" "},{"type":"text","text":"Cases can match many different patterns,"},{"text":" ","type":"text"},{"text":"including interval matches, tuples, and casts to a specific type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Matched values in a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" case can be bound to temporary constants or variables"},{"type":"text","text":" "},{"text":"for use within the case’s body,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and complex matching conditions can be expressed with a "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause for each case."}]},{"type":"heading","text":"Ciclos for-in","anchor":"Ciclos-for-in","level":2},{"inlineContent":[{"type":"text","text":"You use the "},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"code":"in","type":"codeVoice"},{"type":"text","text":" loop to iterate over a sequence,"},{"text":" ","type":"text"},{"type":"text","text":"such as items in an array, ranges of numbers, or characters in a string."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This example uses a "},{"code":"for","type":"codeVoice"},{"text":"-","type":"text"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop to iterate over the items in an array:"}],"type":"paragraph"},{"code":["let names = [\"Anna\", \"Alex\", \"Brian\", \"Jack\"]","for name in names {","    print(\"Hello, \\(name)!\")","}","\/\/ Hello, Anna!","\/\/ Hello, Alex!","\/\/ Hello, Brian!","\/\/ Hello, Jack!"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also iterate over a dictionary to access its key-value pairs."},{"text":" ","type":"text"},{"text":"Each item in the dictionary is returned as a ","type":"text"},{"type":"codeVoice","code":"(key, value)"},{"type":"text","text":" tuple"},{"text":" ","type":"text"},{"type":"text","text":"when the dictionary is iterated,"},{"type":"text","text":" "},{"text":"and you can decompose the ","type":"text"},{"type":"codeVoice","code":"(key, value)"},{"type":"text","text":" tuple’s members as explicitly named constants"},{"type":"text","text":" "},{"type":"text","text":"for use within the body of the "},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop."},{"text":" ","type":"text"},{"text":"In the code example below, the dictionary’s keys are decomposed into a constant called ","type":"text"},{"code":"animalName","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the dictionary’s values are decomposed into a constant called "},{"code":"legCount","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"codeListing","code":["let numberOfLegs = [\"spider\": 8, \"ant\": 6, \"cat\": 4]","for (animalName, legCount) in numberOfLegs {","    print(\"\\(animalName)s have \\(legCount) legs\")","}","\/\/ cats have 4 legs","\/\/ ants have 6 legs","\/\/ spiders have 8 legs"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The contents of a ","type":"text"},{"code":"Dictionary","type":"codeVoice"},{"text":" are inherently unordered,","type":"text"},{"text":" ","type":"text"},{"text":"and iterating over them doesn’t guarantee the order","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in which they will be retrieved."},{"text":" ","type":"text"},{"text":"In particular,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the order you insert items into a "},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":" "},{"text":"doesn’t define the order they’re iterated.","type":"text"},{"text":" ","type":"text"},{"text":"For more about arrays and dictionaries, see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","type":"reference","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also use "},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"code":"in","type":"codeVoice"},{"type":"text","text":" loops with numeric ranges."},{"text":" ","type":"text"},{"text":"This example prints the first few entries in a five-times table:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["for index in 1...5 {","    print(\"\\(index) times 5 is \\(index * 5)\")","}","\/\/ 1 times 5 is 5","\/\/ 2 times 5 is 10","\/\/ 3 times 5 is 15","\/\/ 4 times 5 is 20","\/\/ 5 times 5 is 25"]},{"inlineContent":[{"type":"text","text":"The sequence being iterated over is"},{"type":"text","text":" "},{"type":"text","text":"a range of numbers from "},{"code":"1","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"5","type":"codeVoice"},{"text":", inclusive,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as indicated by the use of the closed range operator ("},{"code":"...","type":"codeVoice"},{"type":"text","text":")."},{"type":"text","text":" "},{"text":"The value of ","type":"text"},{"code":"index","type":"codeVoice"},{"type":"text","text":" is set to the first number in the range ("},{"code":"1","type":"codeVoice"},{"text":"),","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the statements inside the loop are executed."},{"text":" ","type":"text"},{"text":"In this case, the loop contains only one statement,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which prints an entry from the five-times table for the current value of "},{"type":"codeVoice","code":"index"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"After the statement is executed,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the value of "},{"type":"codeVoice","code":"index"},{"type":"text","text":" is updated to contain the second value in the range ("},{"code":"2","type":"codeVoice"},{"type":"text","text":"),"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"code":"print(_:separator:terminator:)","type":"codeVoice"},{"text":" function is called again.","type":"text"},{"type":"text","text":" "},{"text":"This process continues until the end of the range is reached.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"In the example above, ","type":"text"},{"type":"codeVoice","code":"index"},{"text":" is a constant whose value is automatically set","type":"text"},{"type":"text","text":" "},{"text":"at the start of each iteration of the loop.","type":"text"},{"type":"text","text":" "},{"text":"As such, ","type":"text"},{"code":"index","type":"codeVoice"},{"type":"text","text":" doesn’t have to be declared before it’s used."},{"type":"text","text":" "},{"type":"text","text":"It’s implicitly declared simply by its inclusion in the loop declaration,"},{"text":" ","type":"text"},{"text":"without the need for a ","type":"text"},{"type":"codeVoice","code":"let"},{"text":" declaration keyword.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If you don’t need each value from a sequence,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can ignore the values by using an underscore in place of a variable name."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let base = 3","let power = 10","var answer = 1","for _ in 1...power {","    answer *= base","}","print(\"\\(base) to the power of \\(power) is \\(answer)\")","\/\/ Prints \"3 to the power of 10 is 59049\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above calculates the value of one number to the power of another"},{"type":"text","text":" "},{"type":"text","text":"(in this case, "},{"type":"codeVoice","code":"3"},{"type":"text","text":" to the power of "},{"type":"codeVoice","code":"10"},{"text":").","type":"text"},{"type":"text","text":" "},{"text":"It multiplies a starting value of ","type":"text"},{"code":"1","type":"codeVoice"},{"text":" ","type":"text"},{"text":"(that is, ","type":"text"},{"type":"codeVoice","code":"3"},{"type":"text","text":" to the power of "},{"code":"0","type":"codeVoice"},{"text":")","type":"text"},{"text":" ","type":"text"},{"text":"by ","type":"text"},{"code":"3","type":"codeVoice"},{"text":", ten times,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"using a closed range that starts with "},{"code":"1","type":"codeVoice"},{"text":" and ends with ","type":"text"},{"code":"10","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"For this calculation, the individual counter values each time through the loop are unnecessary —"},{"text":" ","type":"text"},{"type":"text","text":"the code simply executes the loop the correct number of times."},{"text":" ","type":"text"},{"text":"The underscore character (","type":"text"},{"type":"codeVoice","code":"_"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"used in place of a loop variable"},{"type":"text","text":" "},{"type":"text","text":"causes the individual values to be ignored"},{"text":" ","type":"text"},{"type":"text","text":"and doesn’t provide access to the current value during each iteration of the loop."}]},{"inlineContent":[{"text":"In some situations, you might not want to use closed ranges,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which include both endpoints."},{"text":" ","type":"text"},{"text":"Consider drawing the tick marks for every minute on a watch face.","type":"text"},{"type":"text","text":" "},{"text":"You want to draw ","type":"text"},{"code":"60","type":"codeVoice"},{"text":" tick marks, starting with the ","type":"text"},{"type":"codeVoice","code":"0"},{"text":" minute.","type":"text"},{"text":" ","type":"text"},{"text":"Use the half-open range operator (","type":"text"},{"code":"..<","type":"codeVoice"},{"type":"text","text":") to include the"},{"type":"text","text":" "},{"type":"text","text":"lower bound but not the upper bound."},{"text":" ","type":"text"},{"text":"For more about ranges, see ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Operadores-de-rango","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["let minutes = 60","for tickMark in 0..<minutes {","    \/\/ render the tick mark each minute (60 times)","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some users might want fewer tick marks in their UI."},{"type":"text","text":" "},{"text":"They could prefer one mark every ","type":"text"},{"type":"codeVoice","code":"5"},{"text":" minutes instead.","type":"text"},{"type":"text","text":" "},{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"stride(from:to:by:)"},{"type":"text","text":" function to skip the unwanted marks."}]},{"type":"codeListing","syntax":"swift","code":["let minuteInterval = 5","for tickMark in stride(from: 0, to: minutes, by: minuteInterval) {","    \/\/ render the tick mark every 5 minutes (0, 5, 10, 15 ... 45, 50, 55)","}"]},{"inlineContent":[{"type":"text","text":"Closed ranges are also available, by using "},{"code":"stride(from:through:by:)","type":"codeVoice"},{"type":"text","text":" instead:"}],"type":"paragraph"},{"syntax":"swift","code":["let hours = 12","let hourInterval = 3","for tickMark in stride(from: 3, through: hours, by: hourInterval) {","    \/\/ render the tick mark every 3 hours (3, 6, 9, 12)","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The examples above use a "},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop to iterate"},{"text":" ","type":"text"},{"type":"text","text":"ranges, arrays, dictionaries, and strings."},{"type":"text","text":" "},{"text":"However, you can use this syntax to iterate ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"any","type":"text"}]},{"type":"text","text":" collection,"},{"text":" ","type":"text"},{"text":"including your own classes and collection types,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as long as those types conform to the "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence"},{"text":" protocol.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Ciclos while","type":"heading","anchor":"Ciclos-while"},{"inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"while"},{"text":" loop performs a set of statements until a condition becomes ","type":"text"},{"code":"false","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"These kinds of loops are best used when","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the number of iterations isn’t known before the first iteration begins."},{"text":" ","type":"text"},{"type":"text","text":"Swift provides two kinds of "},{"code":"while","type":"codeVoice"},{"type":"text","text":" loops:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"while","type":"codeVoice"},{"text":" evaluates its condition at the start of each pass through the loop.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"repeat","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"while"},{"text":" evaluates its condition at the end of each pass through the loop.","type":"text"}]}]}]},{"text":"while","type":"heading","level":3,"anchor":"while"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"code":"while","type":"codeVoice"},{"text":" loop starts by evaluating a single condition.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If the condition is "},{"type":"codeVoice","code":"true"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a set of statements is repeated until the condition becomes "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s the general form of a "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop:"}]},{"type":"codeListing","syntax":"swift","code":["while <#condition#> {","   <#statements#>","}"]},{"type":"paragraph","inlineContent":[{"text":"This example plays a simple game of ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Snakes and Ladders"}]},{"type":"text","text":" "},{"type":"text","text":"(also known as "},{"inlineContent":[{"type":"text","text":"Chutes and Ladders"}],"type":"emphasis"},{"text":"):","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"snakesAndLadders","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"The rules of the game are as follows:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The board has 25 squares, and the aim is to land on or beyond square 25."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The player’s starting square is “square zero”,"},{"type":"text","text":" "},{"text":"which is just off the bottom-left corner of the board.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Each turn, you roll a six-sided dice and move by that number of squares,","type":"text"},{"type":"text","text":" "},{"text":"following the horizontal path indicated by the dotted arrow above.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If your turn ends at the bottom of a ladder, you move up that ladder."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If your turn ends at the head of a snake, you move down that snake.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The game board is represented by an array of "},{"type":"codeVoice","code":"Int"},{"text":" values.","type":"text"},{"text":" ","type":"text"},{"text":"Its size is based on a constant called ","type":"text"},{"code":"finalSquare","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which is used to initialize the array"},{"type":"text","text":" "},{"type":"text","text":"and also to check for a win condition later in the example."},{"text":" ","type":"text"},{"type":"text","text":"Because the players start off the board, on “square zero”,"},{"text":" ","type":"text"},{"text":"the board is initialized with 26 zero ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" values, not 25.","type":"text"}]},{"code":["let finalSquare = 25","var board = [Int](repeating: 0, count: finalSquare + 1)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Some squares are then set to have more specific values for the snakes and ladders.","type":"text"},{"text":" ","type":"text"},{"text":"Squares with a ladder base have a positive number to move you up the board,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"whereas squares with a snake head have a negative number to move you back down the board."}]},{"type":"codeListing","syntax":"swift","code":["board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02","board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Square 3 contains the bottom of a ladder that moves you up to square 11."},{"text":" ","type":"text"},{"text":"To represent this, ","type":"text"},{"code":"board[03]","type":"codeVoice"},{"text":" is equal to ","type":"text"},{"code":"+08","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which is equivalent to an integer value of "},{"code":"8","type":"codeVoice"},{"type":"text","text":" "},{"text":"(the difference between ","type":"text"},{"type":"codeVoice","code":"3"},{"text":" and ","type":"text"},{"code":"11","type":"codeVoice"},{"text":").","type":"text"},{"type":"text","text":" "},{"type":"text","text":"To align the values and statements,"},{"type":"text","text":" "},{"text":"the unary plus operator (","type":"text"},{"code":"+i","type":"codeVoice"},{"text":") is explicitly used with","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the unary minus operator ("},{"type":"codeVoice","code":"-i"},{"text":")","type":"text"},{"type":"text","text":" "},{"text":"and numbers lower than ","type":"text"},{"type":"codeVoice","code":"10"},{"text":" are padded with zeros.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(Neither stylistic technique is strictly necessary,"},{"text":" ","type":"text"},{"type":"text","text":"but they lead to neater code.)"}]},{"syntax":"swift","code":["var square = 0","var diceRoll = 0","while square < finalSquare {","    \/\/ roll the dice","    diceRoll += 1","    if diceRoll == 7 { diceRoll = 1 }","    \/\/ move by the rolled amount","    square += diceRoll","    if square < board.count {","        \/\/ if we're still on the board, move up or down for a snake or a ladder","        square += board[square]","    }","}","print(\"Game over!\")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The example above uses a very simple approach to dice rolling.","type":"text"},{"type":"text","text":" "},{"text":"Instead of generating a random number,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it starts with a "},{"type":"codeVoice","code":"diceRoll"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"0"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Each time through the "},{"type":"codeVoice","code":"while"},{"text":" loop,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"diceRoll"},{"type":"text","text":" is incremented by one"},{"text":" ","type":"text"},{"text":"and is then checked to see whether it has become too large.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Whenever this return value equals "},{"type":"codeVoice","code":"7"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the dice roll has become too large and is reset to a value of "},{"type":"codeVoice","code":"1"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"The result is a sequence of ","type":"text"},{"type":"codeVoice","code":"diceRoll"},{"type":"text","text":" values that’s always"},{"type":"text","text":" "},{"code":"1","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"2"},{"text":", ","type":"text"},{"code":"3","type":"codeVoice"},{"text":", ","type":"text"},{"code":"4","type":"codeVoice"},{"type":"text","text":", "},{"code":"5","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"6"},{"type":"text","text":", "},{"type":"codeVoice","code":"1"},{"text":", ","type":"text"},{"type":"codeVoice","code":"2"},{"type":"text","text":" and so on."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"After rolling the dice, the player moves forward by "},{"type":"codeVoice","code":"diceRoll"},{"text":" squares.","type":"text"},{"text":" ","type":"text"},{"text":"It’s possible that the dice roll may have moved the player beyond square 25,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in which case the game is over."},{"text":" ","type":"text"},{"text":"To cope with this scenario,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the code checks that "},{"type":"codeVoice","code":"square"},{"type":"text","text":" is less than the "},{"type":"codeVoice","code":"board"},{"text":" array’s ","type":"text"},{"type":"codeVoice","code":"count"},{"text":" property.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If "},{"type":"codeVoice","code":"square"},{"text":" is valid, the value stored in ","type":"text"},{"code":"board[square]","type":"codeVoice"},{"type":"text","text":" is added"},{"text":" ","type":"text"},{"type":"text","text":"to the current "},{"type":"codeVoice","code":"square"},{"text":" value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to move the player up or down any ladders or snakes."}]},{"name":"Note","style":"note","type":"aside","content":[{"inlineContent":[{"text":"If this check isn’t performed,","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"board[square]"},{"type":"text","text":" might try to access a value outside the bounds of the "},{"code":"board","type":"codeVoice"},{"text":" array,","type":"text"},{"text":" ","type":"text"},{"text":"which would trigger a runtime error.","type":"text"}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"text":"The current ","type":"text"},{"code":"while","type":"codeVoice"},{"type":"text","text":" loop execution then ends,"},{"text":" ","type":"text"},{"type":"text","text":"and the loop’s condition is checked to see if the loop should be executed again."},{"type":"text","text":" "},{"type":"text","text":"If the player has moved on or beyond square number "},{"type":"codeVoice","code":"25"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"the loop’s condition evaluates to "},{"type":"codeVoice","code":"false"},{"text":" and the game ends.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"code":"while","type":"codeVoice"},{"type":"text","text":" loop is appropriate in this case,"},{"text":" ","type":"text"},{"type":"text","text":"because the length of the game isn’t clear at the start of the "},{"code":"while","type":"codeVoice"},{"type":"text","text":" loop."},{"type":"text","text":" "},{"type":"text","text":"Instead, the loop is executed until a particular condition is satisfied."}]},{"anchor":"repeat-while","type":"heading","text":"repeat-while","level":3},{"inlineContent":[{"text":"The other variation of the ","type":"text"},{"code":"while","type":"codeVoice"},{"text":" loop,","type":"text"},{"type":"text","text":" "},{"text":"known as the ","type":"text"},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"-"},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop,"},{"type":"text","text":" "},{"type":"text","text":"performs a single pass through the loop block first,"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"before","type":"text"}]},{"text":" considering the loop’s condition.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It then continues to repeat the loop until the condition is "},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"repeat"},{"text":"-","type":"text"},{"type":"codeVoice","code":"while"},{"text":" loop in Swift is analogous to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"do"},{"type":"text","text":"-"},{"code":"while","type":"codeVoice"},{"text":" loop in other languages.","type":"text"}]}]},{"inlineContent":[{"text":"Here’s the general form of a ","type":"text"},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"-"},{"type":"codeVoice","code":"while"},{"text":" loop:","type":"text"}],"type":"paragraph"},{"code":["repeat {","   <#statements#>","} while <#condition#>"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Here’s the ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Snakes and Ladders"}]},{"text":" example again,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"written as a "},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"-"},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop rather than a "},{"code":"while","type":"codeVoice"},{"text":" loop.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The values of "},{"code":"finalSquare","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"board"},{"type":"text","text":", "},{"code":"square","type":"codeVoice"},{"type":"text","text":", and "},{"code":"diceRoll","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"are initialized in exactly the same way as with a "},{"type":"codeVoice","code":"while"},{"text":" loop.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let finalSquare = 25","var board = [Int](repeating: 0, count: finalSquare + 1)","board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02","board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08","var square = 0","var diceRoll = 0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this version of the game,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"inlineContent":[{"type":"text","text":"first"}],"type":"emphasis"},{"type":"text","text":" action in the loop is to check for a ladder or a snake."},{"text":" ","type":"text"},{"type":"text","text":"No ladder on the board takes the player straight to square 25,"},{"text":" ","type":"text"},{"type":"text","text":"and so it isn’t possible to win the game by moving up a ladder."},{"text":" ","type":"text"},{"text":"Therefore, it’s safe to check for a snake or a ladder as the first action in the loop.","type":"text"}]},{"inlineContent":[{"text":"At the start of the game, the player is on “square zero”.","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"board[0]"},{"text":" always equals ","type":"text"},{"code":"0","type":"codeVoice"},{"type":"text","text":" and has no effect."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["repeat {","    \/\/ move up or down for a snake or ladder","    square += board[square]","    \/\/ roll the dice","    diceRoll += 1","    if diceRoll == 7 { diceRoll = 1 }","    \/\/ move by the rolled amount","    square += diceRoll","} while square < finalSquare","print(\"Game over!\")"]},{"type":"paragraph","inlineContent":[{"text":"After the code checks for snakes and ladders,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the dice is rolled and the player is moved forward by "},{"type":"codeVoice","code":"diceRoll"},{"type":"text","text":" squares."},{"text":" ","type":"text"},{"type":"text","text":"The current loop execution then ends."}]},{"type":"paragraph","inlineContent":[{"text":"The loop’s condition (","type":"text"},{"type":"codeVoice","code":"while square < finalSquare"},{"type":"text","text":") is the same as before,"},{"text":" ","type":"text"},{"type":"text","text":"but this time it’s not evaluated until the "},{"type":"emphasis","inlineContent":[{"text":"end","type":"text"}]},{"text":" of the first run through the loop.","type":"text"},{"text":" ","type":"text"},{"text":"The structure of the ","type":"text"},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"-"},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop is better suited to this game"},{"type":"text","text":" "},{"text":"than the ","type":"text"},{"type":"codeVoice","code":"while"},{"text":" loop in the previous example.","type":"text"},{"text":" ","type":"text"},{"text":"In the ","type":"text"},{"code":"repeat","type":"codeVoice"},{"text":"-","type":"text"},{"type":"codeVoice","code":"while"},{"text":" loop above,","type":"text"},{"text":" ","type":"text"},{"code":"square += board[square]","type":"codeVoice"},{"type":"text","text":" is always executed "},{"type":"emphasis","inlineContent":[{"text":"immediately after","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"the loop’s "},{"code":"while","type":"codeVoice"},{"type":"text","text":" condition confirms that "},{"code":"square","type":"codeVoice"},{"type":"text","text":" is still on the board."},{"type":"text","text":" "},{"type":"text","text":"This behavior removes the need for the array bounds check"},{"text":" ","type":"text"},{"text":"seen in the ","type":"text"},{"code":"while","type":"codeVoice"},{"type":"text","text":" loop version of the game described earlier."}]},{"text":"Instrucciones condicionales","anchor":"Instrucciones-condicionales","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"It’s often useful to execute different pieces of code based on certain conditions.","type":"text"},{"text":" ","type":"text"},{"text":"You might want to run an extra piece of code when an error occurs,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or to display a message when a value becomes too high or too low."},{"type":"text","text":" "},{"type":"text","text":"To do this, you make parts of your code "},{"inlineContent":[{"type":"text","text":"conditional"}],"type":"emphasis"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"Swift provides two ways to add conditional branches to your code:","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"if","type":"codeVoice"},{"text":" statement and the ","type":"text"},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"Typically, you use the "},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"to evaluate simple conditions with only a few possible outcomes."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement is better suited to"},{"type":"text","text":" "},{"type":"text","text":"more complex conditions with multiple possible permutations"},{"type":"text","text":" "},{"type":"text","text":"and is useful in situations where pattern matching can help select"},{"type":"text","text":" "},{"type":"text","text":"an appropriate code branch to execute."}],"type":"paragraph"},{"level":3,"text":"if","anchor":"if","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"In its simplest form,","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" statement has a single ","type":"text"},{"code":"if","type":"codeVoice"},{"text":" condition.","type":"text"},{"text":" ","type":"text"},{"text":"It executes a set of statements only if that condition is ","type":"text"},{"type":"codeVoice","code":"true"},{"text":".","type":"text"}]},{"syntax":"swift","code":["var temperatureInFahrenheit = 30","if temperatureInFahrenheit <= 32 {","    print(\"It's very cold. Consider wearing a scarf.\")","}","\/\/ Prints \"It's very cold. Consider wearing a scarf.\""],"type":"codeListing"},{"inlineContent":[{"text":"The example above checks whether the temperature","type":"text"},{"type":"text","text":" "},{"text":"is less than or equal to 32 degrees Fahrenheit","type":"text"},{"text":" ","type":"text"},{"text":"(the freezing point of water).","type":"text"},{"type":"text","text":" "},{"text":"If it is, a message is printed.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Otherwise, no message is printed,"},{"text":" ","type":"text"},{"text":"and code execution continues after the ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement’s closing brace."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"if"},{"text":" statement can provide an alternative set of statements,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"known as an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"else clause"}]},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for situations when the "},{"type":"codeVoice","code":"if"},{"text":" condition is ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"These statements are indicated by the "},{"type":"codeVoice","code":"else"},{"text":" keyword.","type":"text"}],"type":"paragraph"},{"code":["temperatureInFahrenheit = 40","if temperatureInFahrenheit <= 32 {","    print(\"It's very cold. Consider wearing a scarf.\")","} else {","    print(\"It's not that cold. Wear a T-shirt.\")","}","\/\/ Prints \"It's not that cold. Wear a T-shirt.\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"One of these two branches is always executed."},{"type":"text","text":" "},{"text":"Because the temperature has increased to ","type":"text"},{"code":"40","type":"codeVoice"},{"type":"text","text":" degrees Fahrenheit,"},{"type":"text","text":" "},{"type":"text","text":"it’s no longer cold enough to advise wearing a scarf"},{"type":"text","text":" "},{"type":"text","text":"and so the "},{"code":"else","type":"codeVoice"},{"type":"text","text":" branch is triggered instead."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can chain multiple "},{"type":"codeVoice","code":"if"},{"text":" statements together","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to consider additional clauses."}]},{"code":["temperatureInFahrenheit = 90","if temperatureInFahrenheit <= 32 {","    print(\"It's very cold. Consider wearing a scarf.\")","} else if temperatureInFahrenheit >= 86 {","    print(\"It's really warm. Don't forget to wear sunscreen.\")","} else {","    print(\"It's not that cold. Wear a T-shirt.\")","}","\/\/ Prints \"It's really warm. Don't forget to wear sunscreen.\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here, an additional "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement was added to respond to particularly warm temperatures."},{"type":"text","text":" "},{"type":"text","text":"The final "},{"code":"else","type":"codeVoice"},{"text":" clause remains,","type":"text"},{"text":" ","type":"text"},{"text":"and it prints a response for any temperatures that aren’t too warm or too cold.","type":"text"}]},{"inlineContent":[{"text":"The final ","type":"text"},{"type":"codeVoice","code":"else"},{"text":" clause is optional, however,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and can be excluded if the set of conditions doesn’t need to be complete."}],"type":"paragraph"},{"syntax":"swift","code":["temperatureInFahrenheit = 72","if temperatureInFahrenheit <= 32 {","    print(\"It's very cold. Consider wearing a scarf.\")","} else if temperatureInFahrenheit >= 86 {","    print(\"It's really warm. Don't forget to wear sunscreen.\")","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Because the temperature isn’t cold enough to trigger the "},{"code":"if","type":"codeVoice"},{"type":"text","text":" condition"},{"type":"text","text":" "},{"type":"text","text":"or warm enough to trigger the "},{"type":"codeVoice","code":"else if"},{"text":" condition,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"no message is printed."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift provides a shorthand spelling of "},{"code":"if","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"that you can use when setting values."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"text":"consider the following code:","type":"text"}]},{"code":["let temperatureInCelsius = 25","let weatherAdvice: String","","if temperatureInCelsius <= 0 {","    weatherAdvice = \"It's very cold. Consider wearing a scarf.\"","} else if temperatureInCelsius >= 30 {","    weatherAdvice = \"It's really warm. Don't forget to wear sunscreen.\"","} else {","    weatherAdvice = \"It's not that cold. Wear a T-shirt.\"","}","","print(weatherAdvice)","\/\/ Prints \"It's not that cold. Wear a T-shirt.\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here, each of the branches sets a value for the "},{"code":"weatherAdvice","type":"codeVoice"},{"type":"text","text":" constant,"},{"type":"text","text":" "},{"text":"which is printed after the ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" statement.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Using the alternate syntax,"},{"type":"text","text":" "},{"type":"text","text":"known as an "},{"code":"if","type":"codeVoice"},{"type":"text","text":" expression,"},{"type":"text","text":" "},{"type":"text","text":"you can write this code more concisely:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let weatherAdvice = if temperatureInCelsius <= 0 {","    \"It's very cold. Consider wearing a scarf.\"","} else if temperatureInCelsius >= 30 {","    \"It's really warm. Don't forget to wear sunscreen.\"","} else {","    \"It's not that cold. Wear a T-shirt.\"","}","","print(weatherAdvice)","\/\/ Prints \"It's not that cold. Wear a T-shirt.\""]},{"type":"paragraph","inlineContent":[{"text":"In this ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" expression version,","type":"text"},{"type":"text","text":" "},{"text":"each branch contains a single value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If a branch’s condition is true,"},{"text":" ","type":"text"},{"text":"then that branch’s value is used as the value for the whole ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":" expression"},{"type":"text","text":" "},{"text":"in the assignment of ","type":"text"},{"type":"codeVoice","code":"weatherAdvice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Every "},{"type":"codeVoice","code":"if"},{"text":" branch has a corresponding ","type":"text"},{"type":"codeVoice","code":"else if"},{"type":"text","text":" branch or "},{"code":"else","type":"codeVoice"},{"text":" branch,","type":"text"},{"text":" ","type":"text"},{"text":"ensuring that one of the branches always matches","type":"text"},{"text":" ","type":"text"},{"text":"and that the ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":" expression always produces a value,"},{"text":" ","type":"text"},{"text":"regardless of which conditions are true.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the syntax for the assignment starts outside the "},{"type":"codeVoice","code":"if"},{"text":" expression,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"there’s no need to repeat "},{"code":"weatherAdvice =","type":"codeVoice"},{"text":" inside each branch.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Instead,"},{"type":"text","text":" "},{"type":"text","text":"each branch of the "},{"type":"codeVoice","code":"if"},{"text":" expression","type":"text"},{"type":"text","text":" "},{"text":"produces one of the three possible values for ","type":"text"},{"type":"codeVoice","code":"weatherAdvice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the assignment uses that value."}]},{"inlineContent":[{"type":"text","text":"All of the branches of an "},{"code":"if","type":"codeVoice"},{"text":" expression","type":"text"},{"type":"text","text":" "},{"type":"text","text":"need to contain values of the same type."},{"text":" ","type":"text"},{"text":"Because Swift checks the type of each branch separately,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values like "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" that can be used with more than one type"},{"type":"text","text":" "},{"text":"prevent Swift from determining the ","type":"text"},{"code":"if","type":"codeVoice"},{"text":" expression’s type automatically.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Instead, you need to specify the type explicitly —"},{"text":" ","type":"text"},{"text":"for example:","type":"text"}],"type":"paragraph"},{"code":["let freezeWarning: String? = if temperatureInCelsius <= 0 {","    \"It's below freezing. Watch for ice!\"","} else {","    nil","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"In the code above,","type":"text"},{"text":" ","type":"text"},{"text":"one branch of the ","type":"text"},{"code":"if","type":"codeVoice"},{"text":" expression has a string value","type":"text"},{"text":" ","type":"text"},{"text":"and the other branch has a ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" value."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"nil","type":"codeVoice"},{"text":" value could be used as a value for any optional type,","type":"text"},{"text":" ","type":"text"},{"text":"so you have to explicitly write that ","type":"text"},{"code":"freezeWarning","type":"codeVoice"},{"text":" is an optional string,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Anotaciones-de-tipo","isActive":true},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"An alternate way to provide this type information"},{"type":"text","text":" "},{"type":"text","text":"is to provide an explicit type for "},{"code":"nil","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"instead of providing an explicit type for "},{"code":"freezeWarning","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["let freezeWarning = if temperatureInCelsius <= 0 {","    \"It's below freezing. Watch for ice!\"","} else {","    nil as String?","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"An ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":" expression can respond to unexpected failures by throwing an error"},{"type":"text","text":" "},{"text":"or calling a function like ","type":"text"},{"type":"codeVoice","code":"fatalError(_:file:line:)"},{"text":" that never returns.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example:"}],"type":"paragraph"},{"code":["let weatherAdvice = if temperatureInCelsius > 100 {","    throw TemperatureError.boiling","} else {","    \"It's a reasonable temperature.\"","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example,"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"if"},{"text":" expression checks whether the forecast temperature","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is hotter than 100° C — the boiling point of water."},{"type":"text","text":" "},{"text":"A temperature this hot causes the ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" expression to throw a ","type":"text"},{"code":".boiling","type":"codeVoice"},{"type":"text","text":" error"},{"text":" ","type":"text"},{"type":"text","text":"instead of returning a textual summary."},{"type":"text","text":" "},{"type":"text","text":"Even though this "},{"type":"codeVoice","code":"if"},{"type":"text","text":" expression can throw an error,"},{"text":" ","type":"text"},{"type":"text","text":"you don’t write "},{"type":"codeVoice","code":"try"},{"type":"text","text":" before it."},{"type":"text","text":" "},{"text":"For information about working with errors, see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In addition to using ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":" expressions"},{"text":" ","type":"text"},{"text":"on the right-hand side of an assignment,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as shown in the examples above,"},{"text":" ","type":"text"},{"type":"text","text":"you can also use them as the value that a function or closure returns."}]},{"type":"heading","anchor":"switch","text":"switch","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statement considers a value"},{"text":" ","type":"text"},{"type":"text","text":"and compares it against several possible matching patterns."},{"type":"text","text":" "},{"type":"text","text":"It then executes an appropriate block of code,"},{"type":"text","text":" "},{"type":"text","text":"based on the first pattern that matches successfully."},{"type":"text","text":" "},{"text":"A ","type":"text"},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement provides an alternative to the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"type":"text","text":"for responding to multiple potential states."}]},{"inlineContent":[{"text":"In its simplest form, a ","type":"text"},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement compares a value against"},{"type":"text","text":" "},{"type":"text","text":"one or more values of the same type."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["switch <#some value to consider#> {","case <#value 1#>:","    <#respond to value 1#>","case <#value 2#>,","    <#value 3#>:","    <#respond to value 2 or 3#>","default:","    <#otherwise, do something else#>","}"]},{"type":"paragraph","inlineContent":[{"text":"Every ","type":"text"},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statement consists of multiple possible "},{"inlineContent":[{"type":"text","text":"cases"}],"type":"emphasis"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"each of which begins with the ","type":"text"},{"type":"codeVoice","code":"case"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"text":"In addition to comparing against specific values,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift provides several ways for each case to specify"},{"type":"text","text":" "},{"type":"text","text":"more complex matching patterns."},{"text":" ","type":"text"},{"type":"text","text":"These options are described later in this chapter."}]},{"inlineContent":[{"text":"Like the body of an ","type":"text"},{"code":"if","type":"codeVoice"},{"text":" statement, each ","type":"text"},{"code":"case","type":"codeVoice"},{"type":"text","text":" is a separate branch of code execution."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"switch"},{"text":" statement determines which branch should be selected.","type":"text"},{"text":" ","type":"text"},{"text":"This procedure is known as ","type":"text"},{"inlineContent":[{"text":"switching","type":"text"}],"type":"emphasis"},{"text":" on the value that’s being considered.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every "},{"type":"codeVoice","code":"switch"},{"text":" statement must be ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"exhaustive"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"That is, every possible value of the type being considered"},{"text":" ","type":"text"},{"text":"must be matched by one of the ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" cases.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If it’s not appropriate to provide a case for every possible value,"},{"text":" ","type":"text"},{"text":"you can define a default case to cover any values that aren’t addressed explicitly.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This default case is indicated by the "},{"code":"default","type":"codeVoice"},{"text":" keyword,","type":"text"},{"type":"text","text":" "},{"text":"and must always appear last.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This example uses a "},{"type":"codeVoice","code":"switch"},{"text":" statement to consider","type":"text"},{"type":"text","text":" "},{"text":"a single lowercase character called ","type":"text"},{"type":"codeVoice","code":"someCharacter"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let someCharacter: Character = \"z\"","switch someCharacter {","case \"a\":","    print(\"The first letter of the Latin alphabet\")","case \"z\":","    print(\"The last letter of the Latin alphabet\")","default:","    print(\"Some other character\")","}","\/\/ Prints \"The last letter of the Latin alphabet\""]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" statement’s first case matches","type":"text"},{"text":" ","type":"text"},{"text":"the first letter of the English alphabet, ","type":"text"},{"code":"a","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and its second case matches the last letter, ","type":"text"},{"code":"z","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Because the ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" must have a case for every possible character,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"not just every alphabetic character,"},{"type":"text","text":" "},{"text":"this ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" statement uses a ","type":"text"},{"code":"default","type":"codeVoice"},{"text":" case","type":"text"},{"text":" ","type":"text"},{"text":"to match all characters other than ","type":"text"},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"code":"z","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This provision ensures that the "},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statement is exhaustive."}]},{"inlineContent":[{"text":"Like ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":" statements,"},{"type":"text","text":" "},{"code":"switch","type":"codeVoice"},{"text":" statements also have an expression form:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let anotherCharacter: Character = \"a\"","let message = switch anotherCharacter {","case \"a\":","    \"The first letter of the Latin alphabet\"","case \"z\":","    \"The last letter of the Latin alphabet\"","default:","    \"Some other character\"","}","","print(message)","\/\/ Prints \"The first letter of the Latin alphabet\""]},{"inlineContent":[{"text":"In this example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"each case in the "},{"code":"switch","type":"codeVoice"},{"type":"text","text":" expression"},{"type":"text","text":" "},{"type":"text","text":"contains the value for "},{"type":"codeVoice","code":"message"},{"type":"text","text":" "},{"type":"text","text":"to be used when that case matches "},{"code":"anotherCharacter","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Because ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" is always exhaustive,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"there is always a value to assign."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"As with "},{"type":"codeVoice","code":"if"},{"text":" expressions,","type":"text"},{"text":" ","type":"text"},{"text":"you can throw an error","type":"text"},{"type":"text","text":" "},{"text":"or call a function like ","type":"text"},{"code":"fatalError(_:file:line:)","type":"codeVoice"},{"text":" that never returns","type":"text"},{"type":"text","text":" "},{"type":"text","text":"instead of providing a value for a given case."},{"type":"text","text":" "},{"type":"text","text":"You can use "},{"code":"switch","type":"codeVoice"},{"type":"text","text":" expressions"},{"text":" ","type":"text"},{"text":"on the right-hand side of an assignment,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as shown in the example above,"},{"type":"text","text":" "},{"text":"and as the value that a function or closure returns.","type":"text"}],"type":"paragraph"},{"type":"heading","level":4,"text":"Ausencia de fallthrough implícito","anchor":"Ausencia-de-fallthrough-impl%C3%ADcito"},{"type":"paragraph","inlineContent":[{"text":"In contrast with ","type":"text"},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements in C and Objective-C,"},{"text":" ","type":"text"},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statements in Swift don’t"},{"type":"text","text":" "},{"type":"text","text":"fall through the bottom of each case and into the next one by default."},{"type":"text","text":" "},{"text":"Instead, the entire ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" statement finishes its execution","type":"text"},{"type":"text","text":" "},{"text":"as soon as the first matching ","type":"text"},{"code":"switch","type":"codeVoice"},{"type":"text","text":" case is completed,"},{"text":" ","type":"text"},{"type":"text","text":"without requiring an explicit "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"This makes the "},{"type":"codeVoice","code":"switch"},{"text":" statement safer and easier to use than the one in C","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and avoids executing more than one "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" case by mistake."}]},{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Although ","type":"text"},{"type":"codeVoice","code":"break"},{"type":"text","text":" isn’t required in Swift,"},{"type":"text","text":" "},{"type":"text","text":"you can use a "},{"code":"break","type":"codeVoice"},{"type":"text","text":" statement to match and ignore a particular case"},{"type":"text","text":" "},{"text":"or to break out of a matched case before that case has completed its execution.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For details, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Uso-de-break-en-una-instrucci%C3%B3n-switch","isActive":true},{"type":"text","text":"."}]}]},{"inlineContent":[{"type":"text","text":"The body of each case "},{"inlineContent":[{"text":"must","type":"text"}],"type":"emphasis"},{"type":"text","text":" contain at least one executable statement."},{"text":" ","type":"text"},{"text":"It isn’t valid to write the following code, because the first case is empty:","type":"text"}],"type":"paragraph"},{"code":["let anotherCharacter: Character = \"a\"","switch anotherCharacter {","case \"a\": \/\/ Invalid, the case has an empty body","case \"A\":","    print(\"The letter A\")","default:","    print(\"Not the letter A\")","}","\/\/ This will report a compile-time error."],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike a "},{"code":"switch","type":"codeVoice"},{"text":" statement in C,","type":"text"},{"type":"text","text":" "},{"text":"this ","type":"text"},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement doesn’t match both "},{"type":"codeVoice","code":"\"a\""},{"text":" and ","type":"text"},{"type":"codeVoice","code":"\"A\""},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Rather, it reports a compile-time error that "},{"type":"codeVoice","code":"case \"a\":"},{"type":"text","text":" "},{"text":"doesn’t contain any executable statements.","type":"text"},{"type":"text","text":" "},{"text":"This approach avoids accidental fallthrough from one case to another","type":"text"},{"text":" ","type":"text"},{"text":"and makes for safer code that’s clearer in its intent.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To make a ","type":"text"},{"code":"switch","type":"codeVoice"},{"type":"text","text":" with a single case that"},{"text":" ","type":"text"},{"type":"text","text":"matches both "},{"type":"codeVoice","code":"\"a\""},{"type":"text","text":" and "},{"code":"\"A\"","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"combine the two values into a compound case,","type":"text"},{"text":" ","type":"text"},{"text":"separating the values with commas.","type":"text"}]},{"code":["let anotherCharacter: Character = \"a\"","switch anotherCharacter {","case \"a\", \"A\":","    print(\"The letter A\")","default:","    print(\"Not the letter A\")","}","\/\/ Prints \"The letter A\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"For readability,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a compound case can also be written over multiple lines."},{"type":"text","text":" "},{"type":"text","text":"For more information about compound cases,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Casos-compuestos"},{"type":"text","text":"."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"text":"To explicitly fall through at the end of a particular ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" case,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"use the "},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":" keyword,"},{"text":" ","type":"text"},{"text":"as described in ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#fallthrough","isActive":true},{"type":"text","text":"."}]}],"style":"note","name":"Note","type":"aside"},{"level":4,"text":"Coincidencia de intervalos","type":"heading","anchor":"Coincidencia-de-intervalos"},{"inlineContent":[{"type":"text","text":"Values in "},{"code":"switch","type":"codeVoice"},{"type":"text","text":" cases can be checked for their inclusion in an interval."},{"text":" ","type":"text"},{"text":"This example uses number intervals","type":"text"},{"type":"text","text":" "},{"text":"to provide a natural-language count for numbers of any size:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let approximateCount = 62","let countedThings = \"moons orbiting Saturn\"","let naturalCount: String","switch approximateCount {","case 0:","    naturalCount = \"no\"","case 1..<5:","    naturalCount = \"a few\"","case 5..<12:","    naturalCount = \"several\"","case 12..<100:","    naturalCount = \"dozens of\"","case 100..<1000:","    naturalCount = \"hundreds of\"","default:","    naturalCount = \"many\"","}","print(\"There are \\(naturalCount) \\(countedThings).\")","\/\/ Prints \"There are dozens of moons orbiting Saturn.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the above example, "},{"type":"codeVoice","code":"approximateCount"},{"text":" is evaluated in a ","type":"text"},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"text":"Each ","type":"text"},{"code":"case","type":"codeVoice"},{"type":"text","text":" compares that value to a number or interval."},{"type":"text","text":" "},{"text":"Because the value of ","type":"text"},{"code":"approximateCount","type":"codeVoice"},{"text":" falls between 12 and 100,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"naturalCount"},{"type":"text","text":" is assigned the value "},{"code":"\"dozens of\"","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and execution is transferred out of the ","type":"text"},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statement."}]},{"anchor":"Tuplas","text":"Tuplas","type":"heading","level":4},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use tuples to test multiple values in the same "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement."},{"text":" ","type":"text"},{"type":"text","text":"Each element of the tuple can be tested against a different value or interval of values."},{"text":" ","type":"text"},{"type":"text","text":"Alternatively, use the underscore character ("},{"code":"_","type":"codeVoice"},{"type":"text","text":"),"},{"text":" ","type":"text"},{"type":"text","text":"also known as the wildcard pattern,"},{"type":"text","text":" "},{"type":"text","text":"to match any possible value."}]},{"inlineContent":[{"text":"The example below takes an (x, y) point,","type":"text"},{"type":"text","text":" "},{"text":"expressed as a simple tuple of type ","type":"text"},{"code":"(Int, Int)","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"and categorizes it on the graph that follows the example.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let somePoint = (1, 1)","switch somePoint {","case (0, 0):","    print(\"\\(somePoint) is at the origin\")","case (_, 0):","    print(\"\\(somePoint) is on the x-axis\")","case (0, _):","    print(\"\\(somePoint) is on the y-axis\")","case (-2...2, -2...2):","    print(\"\\(somePoint) is inside the box\")","default:","    print(\"\\(somePoint) is outside of the box\")","}","\/\/ Prints \"(1, 1) is inside the box\""]},{"inlineContent":[{"identifier":"coordinateGraphSimple","type":"image"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statement determines whether the point is"},{"type":"text","text":" "},{"type":"text","text":"at the origin (0, 0),"},{"type":"text","text":" "},{"text":"on the red x-axis,","type":"text"},{"text":" ","type":"text"},{"text":"on the green y-axis,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"inside the blue 4-by-4 box centered on the origin,"},{"type":"text","text":" "},{"text":"or outside of the box.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Unlike C, Swift allows multiple ","type":"text"},{"code":"switch","type":"codeVoice"},{"type":"text","text":" cases to consider the same value or values."},{"text":" ","type":"text"},{"text":"In fact, the point (0, 0) could match all ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"four"}]},{"type":"text","text":" of the cases in this example."},{"text":" ","type":"text"},{"type":"text","text":"However, if multiple matches are possible,"},{"type":"text","text":" "},{"type":"text","text":"the first matching case is always used."},{"type":"text","text":" "},{"text":"The point (0, 0) would match ","type":"text"},{"code":"case (0, 0)","type":"codeVoice"},{"type":"text","text":" first,"},{"type":"text","text":" "},{"text":"and so all other matching cases would be ignored.","type":"text"}],"type":"paragraph"},{"text":"Vinculación de valores","level":4,"type":"heading","anchor":"Vinculaci%C3%B3n-de-valores"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" case can name the value or values it matches to temporary constants or variables,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for use in the body of the case."},{"text":" ","type":"text"},{"text":"This behavior is known as ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"value binding"}]},{"type":"text","text":","},{"type":"text","text":" "},{"text":"because the values are bound to temporary constants or variables within the case’s body.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The example below takes an (x, y) point,"},{"type":"text","text":" "},{"text":"expressed as a tuple of type ","type":"text"},{"code":"(Int, Int)","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and categorizes it on the graph that follows:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let anotherPoint = (2, 0)","switch anotherPoint {","case (let x, 0):","    print(\"on the x-axis with an x value of \\(x)\")","case (0, let y):","    print(\"on the y-axis with a y value of \\(y)\")","case let (x, y):","    print(\"somewhere else at (\\(x), \\(y))\")","}","\/\/ Prints \"on the x-axis with an x value of 2\""]},{"inlineContent":[{"type":"image","identifier":"coordinateGraphMedium"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" statement determines whether the point is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"on the red x-axis,"},{"text":" ","type":"text"},{"type":"text","text":"on the green y-axis,"},{"text":" ","type":"text"},{"text":"or elsewhere (on neither axis).","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The three "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" cases declare placeholder constants "},{"type":"codeVoice","code":"x"},{"type":"text","text":" and "},{"type":"codeVoice","code":"y"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which temporarily take on one or both tuple values from "},{"code":"anotherPoint","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"The first case, ","type":"text"},{"type":"codeVoice","code":"case (let x, 0)"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"matches any point with a "},{"type":"codeVoice","code":"y"},{"text":" value of ","type":"text"},{"type":"codeVoice","code":"0"},{"text":" ","type":"text"},{"type":"text","text":"and assigns the point’s "},{"code":"x","type":"codeVoice"},{"type":"text","text":" value to the temporary constant "},{"code":"x","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Similarly, the second case, "},{"type":"codeVoice","code":"case (0, let y)"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"matches any point with an ","type":"text"},{"code":"x","type":"codeVoice"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"0"},{"type":"text","text":" "},{"type":"text","text":"and assigns the point’s "},{"type":"codeVoice","code":"y"},{"type":"text","text":" value to the temporary constant "},{"type":"codeVoice","code":"y"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"After the temporary constants are declared,"},{"type":"text","text":" "},{"type":"text","text":"they can be used within the case’s code block."},{"type":"text","text":" "},{"text":"Here, they’re used to print the categorization of the point.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement doesn’t have a "},{"code":"default","type":"codeVoice"},{"text":" case.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The final case, "},{"code":"case let (x, y)","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"declares a tuple of two placeholder constants that can match any value."},{"type":"text","text":" "},{"type":"text","text":"Because "},{"type":"codeVoice","code":"anotherPoint"},{"type":"text","text":" is always a tuple of two values,"},{"text":" ","type":"text"},{"text":"this case matches all possible remaining values,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and a "},{"type":"codeVoice","code":"default"},{"type":"text","text":" case isn’t needed to make the "},{"code":"switch","type":"codeVoice"},{"text":" statement exhaustive.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"where","level":4,"anchor":"where"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"code":"switch","type":"codeVoice"},{"type":"text","text":" case can use a "},{"code":"where","type":"codeVoice"},{"text":" clause to check for additional conditions.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below categorizes an (x, y) point on the following graph:"}]},{"syntax":"swift","type":"codeListing","code":["let yetAnotherPoint = (1, -1)","switch yetAnotherPoint {","case let (x, y) where x == y:","    print(\"(\\(x), \\(y)) is on the line x == y\")","case let (x, y) where x == -y:","    print(\"(\\(x), \\(y)) is on the line x == -y\")","case let (x, y):","    print(\"(\\(x), \\(y)) is just some arbitrary point\")","}","\/\/ Prints \"(1, -1) is on the line x == -y\""]},{"inlineContent":[{"identifier":"coordinateGraphComplex","type":"image"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"switch","type":"codeVoice"},{"text":" statement determines whether the point is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"on the green diagonal line where "},{"type":"codeVoice","code":"x == y"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"on the purple diagonal line where "},{"type":"codeVoice","code":"x == -y"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or neither."}]},{"type":"paragraph","inlineContent":[{"text":"The three ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" cases declare placeholder constants ","type":"text"},{"code":"x","type":"codeVoice"},{"type":"text","text":" and "},{"code":"y","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which temporarily take on the two tuple values from ","type":"text"},{"code":"yetAnotherPoint","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"These constants are used as part of a "},{"code":"where","type":"codeVoice"},{"text":" clause,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to create a dynamic filter."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"switch","type":"codeVoice"},{"type":"text","text":" case matches the current value of "},{"code":"point","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"only if the "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause’s condition evaluates to "},{"code":"true","type":"codeVoice"},{"text":" for that value.","type":"text"}]},{"inlineContent":[{"type":"text","text":"As in the previous example, the final case matches all possible remaining values,"},{"text":" ","type":"text"},{"text":"and so a ","type":"text"},{"code":"default","type":"codeVoice"},{"type":"text","text":" case isn’t needed to make the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement exhaustive."}],"type":"paragraph"},{"text":"Casos compuestos","anchor":"Casos-compuestos","level":4,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Multiple switch cases that share the same body","type":"text"},{"text":" ","type":"text"},{"text":"can be combined by writing several patterns after ","type":"text"},{"type":"codeVoice","code":"case"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"with a comma between each of the patterns.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If any of the patterns match, then the case is considered to match."},{"type":"text","text":" "},{"type":"text","text":"The patterns can be written over multiple lines if the list is long."},{"text":" ","type":"text"},{"type":"text","text":"For example:"}]},{"type":"codeListing","syntax":"swift","code":["let someCharacter: Character = \"e\"","switch someCharacter {","case \"a\", \"e\", \"i\", \"o\", \"u\":","    print(\"\\(someCharacter) is a vowel\")","case \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",","    \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\":","    print(\"\\(someCharacter) is a consonant\")","default:","    print(\"\\(someCharacter) isn't a vowel or a consonant\")","}","\/\/ Prints \"e is a vowel\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement’s first case matches"},{"text":" ","type":"text"},{"text":"all five lowercase vowels in the English language.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Similarly, its second case matches all lowercase English consonants."},{"type":"text","text":" "},{"text":"Finally, the ","type":"text"},{"type":"codeVoice","code":"default"},{"type":"text","text":" case matches any other character."}]},{"inlineContent":[{"text":"Compound cases can also include value bindings.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"All of the patterns of a compound case"},{"type":"text","text":" "},{"text":"have to include the same set of value bindings,","type":"text"},{"text":" ","type":"text"},{"text":"and each binding has to get a value of the same type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"from all of the patterns in the compound case."},{"type":"text","text":" "},{"type":"text","text":"This ensures that,"},{"text":" ","type":"text"},{"type":"text","text":"no matter which part of the compound case matched,"},{"text":" ","type":"text"},{"text":"the code in the body of the case","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can always access a value for the bindings"},{"text":" ","type":"text"},{"text":"and that the value always has the same type.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let stillAnotherPoint = (9, 0)","switch stillAnotherPoint {","case (let distance, 0), (0, let distance):","    print(\"On an axis, \\(distance) from the origin\")","default:","    print(\"Not on an axis\")","}","\/\/ Prints \"On an axis, 9 from the origin\""],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"case"},{"type":"text","text":" above has two patterns:"},{"text":" ","type":"text"},{"type":"codeVoice","code":"(let distance, 0)"},{"type":"text","text":" matches points on the x-axis"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"(0, let distance)","type":"codeVoice"},{"text":" matches points on the y-axis.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Both patterns include a binding for "},{"type":"codeVoice","code":"distance"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"distance"},{"text":" is an integer in both patterns —","type":"text"},{"type":"text","text":" "},{"text":"which means that the code in the body of the ","type":"text"},{"type":"codeVoice","code":"case"},{"type":"text","text":" "},{"type":"text","text":"can always access a value for "},{"code":"distance","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"text":"Instrucciones de transferencia de control","anchor":"Instrucciones-de-transferencia-de-control"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Control transfer statements"}]},{"type":"text","text":" change the order in which your code is executed,"},{"type":"text","text":" "},{"text":"by transferring control from one piece of code to another.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift has five control transfer statements:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"continue"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"break"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"fallthrough","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"code":"return","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"throw"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"continue","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"break"},{"type":"text","text":", and "},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":" statements are described below."},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"code":"return","type":"codeVoice"},{"type":"text","text":" statement is described in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the "},{"code":"throw","type":"codeVoice"},{"type":"text","text":" statement is described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Propagaci%C3%B3n-de-errores-mediante-funciones-que-arrojan-errores"},{"text":".","type":"text"}]},{"type":"heading","level":3,"text":"continue","anchor":"continue"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"continue","type":"codeVoice"},{"type":"text","text":" statement tells a loop to stop what it’s doing"},{"text":" ","type":"text"},{"type":"text","text":"and start again at the beginning of the next iteration through the loop."},{"text":" ","type":"text"},{"text":"It says “I am done with the current loop iteration”","type":"text"},{"type":"text","text":" "},{"text":"without leaving the loop altogether.","type":"text"}]},{"inlineContent":[{"text":"The following example removes all vowels and spaces from a lowercase string","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to create a cryptic puzzle phrase:"}],"type":"paragraph"},{"code":["let puzzleInput = \"great minds think alike\"","var puzzleOutput = \"\"","let charactersToRemove: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\", \" \"]","for character in puzzleInput {","    if charactersToRemove.contains(character) {","        continue","    }","    puzzleOutput.append(character)","}","print(puzzleOutput)","\/\/ Prints \"grtmndsthnklk\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The code above calls the "},{"code":"continue","type":"codeVoice"},{"text":" keyword whenever it matches a vowel or a space,","type":"text"},{"text":" ","type":"text"},{"text":"causing the current iteration of the loop to end immediately","type":"text"},{"type":"text","text":" "},{"text":"and to jump straight to the start of the next iteration.","type":"text"}],"type":"paragraph"},{"level":3,"text":"break","type":"heading","anchor":"break"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement ends execution of an entire control flow statement immediately."},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"code":"break","type":"codeVoice"},{"type":"text","text":" statement can be used inside a "},{"code":"switch","type":"codeVoice"},{"type":"text","text":" or loop statement"},{"type":"text","text":" "},{"text":"when you want to terminate the execution of the ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" or loop statement","type":"text"},{"type":"text","text":" "},{"type":"text","text":"earlier than would otherwise be the case."}]},{"text":"Uso de `break` en un ciclo","type":"heading","level":4,"anchor":"Uso-de-break-en-un-ciclo"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When used inside a loop statement,"},{"type":"text","text":" "},{"type":"codeVoice","code":"break"},{"type":"text","text":" ends the loop’s execution immediately"},{"text":" ","type":"text"},{"text":"and transfers control to the code after the loop’s closing brace (","type":"text"},{"type":"codeVoice","code":"}"},{"text":").","type":"text"},{"type":"text","text":" "},{"text":"No further code from the current iteration of the loop is executed,","type":"text"},{"type":"text","text":" "},{"text":"and no further iterations of the loop are started.","type":"text"}]},{"type":"heading","text":"Uso de `break` en una instrucción `switch`","anchor":"Uso-de-break-en-una-instrucci%C3%B3n-switch","level":4},{"inlineContent":[{"text":"When used inside a ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" statement,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"break"},{"type":"text","text":" causes the "},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statement to end its execution immediately"},{"text":" ","type":"text"},{"type":"text","text":"and to transfer control to the code after"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"switch","type":"codeVoice"},{"text":" statement’s closing brace (","type":"text"},{"type":"codeVoice","code":"}"},{"text":").","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This behavior can be used to match and ignore one or more cases in a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"text":"Because Swift’s ","type":"text"},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement is exhaustive"},{"type":"text","text":" "},{"text":"and doesn’t allow empty cases,","type":"text"},{"type":"text","text":" "},{"text":"it’s sometimes necessary to deliberately match and ignore a case","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in order to make your intentions explicit."},{"type":"text","text":" "},{"type":"text","text":"You do this by writing the "},{"code":"break","type":"codeVoice"},{"type":"text","text":" statement as the entire body of the case you want to ignore."},{"text":" ","type":"text"},{"text":"When that case is matched by the ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" statement,","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"code":"break","type":"codeVoice"},{"type":"text","text":" statement inside the case ends the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement’s execution immediately."}],"type":"paragraph"},{"name":"Note","content":[{"inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" case that contains only a comment is reported as a compile-time error.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Comments aren’t statements and don’t cause a "},{"type":"codeVoice","code":"switch"},{"text":" case to be ignored.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Always use a "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement to ignore a "},{"code":"switch","type":"codeVoice"},{"type":"text","text":" case."}],"type":"paragraph"}],"type":"aside","style":"note"},{"inlineContent":[{"type":"text","text":"The following example switches on a "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value"},{"text":" ","type":"text"},{"text":"and determines whether it represents a number symbol in one of four languages.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For brevity, multiple values are covered in a single "},{"code":"switch","type":"codeVoice"},{"type":"text","text":" case."}],"type":"paragraph"},{"code":["let numberSymbol: Character = \"三\"  \/\/ Chinese symbol for the number 3","var possibleIntegerValue: Int?","switch numberSymbol {","case \"1\", \"١\", \"一\", \"๑\":","    possibleIntegerValue = 1","case \"2\", \"٢\", \"二\", \"๒\":","    possibleIntegerValue = 2","case \"3\", \"٣\", \"三\", \"๓\":","    possibleIntegerValue = 3","case \"4\", \"٤\", \"四\", \"๔\":","    possibleIntegerValue = 4","default:","    break","}","if let integerValue = possibleIntegerValue {","    print(\"The integer value of \\(numberSymbol) is \\(integerValue).\")","} else {","    print(\"An integer value couldn't be found for \\(numberSymbol).\")","}","\/\/ Prints \"The integer value of 三 is 3.\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example checks "},{"type":"codeVoice","code":"numberSymbol"},{"type":"text","text":" to determine whether it’s"},{"text":" ","type":"text"},{"type":"text","text":"a Latin, Arabic, Chinese, or Thai symbol for"},{"text":" ","type":"text"},{"text":"the numbers ","type":"text"},{"type":"codeVoice","code":"1"},{"type":"text","text":" to "},{"code":"4","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"If a match is found,","type":"text"},{"type":"text","text":" "},{"text":"one of the ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" statement’s cases sets","type":"text"},{"text":" ","type":"text"},{"text":"an optional ","type":"text"},{"type":"codeVoice","code":"Int?"},{"text":" variable called ","type":"text"},{"type":"codeVoice","code":"possibleIntegerValue"},{"text":" ","type":"text"},{"text":"to an appropriate integer value.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"After the "},{"code":"switch","type":"codeVoice"},{"text":" statement completes its execution,","type":"text"},{"text":" ","type":"text"},{"text":"the example uses optional binding to determine whether a value was found.","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"possibleIntegerValue"},{"text":" variable has an implicit initial value of ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"type":"text","text":"by virtue of being an optional type,"},{"text":" ","type":"text"},{"text":"and so the optional binding will succeed only","type":"text"},{"type":"text","text":" "},{"text":"if ","type":"text"},{"code":"possibleIntegerValue","type":"codeVoice"},{"type":"text","text":" was set to an actual value"},{"type":"text","text":" "},{"type":"text","text":"by one of the "},{"type":"codeVoice","code":"switch"},{"text":" statement’s first four cases.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Because it’s not practical to list every possible "},{"code":"Character","type":"codeVoice"},{"text":" value in the example above,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a "},{"code":"default","type":"codeVoice"},{"text":" case handles any characters that aren’t matched.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This "},{"code":"default","type":"codeVoice"},{"type":"text","text":" case doesn’t need to perform any action,"},{"type":"text","text":" "},{"text":"and so it’s written with a single ","type":"text"},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement as its body."},{"text":" ","type":"text"},{"text":"As soon as the ","type":"text"},{"code":"default","type":"codeVoice"},{"type":"text","text":" case is matched,"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"break"},{"text":" statement ends the ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" statement’s execution,","type":"text"},{"type":"text","text":" "},{"text":"and code execution continues from the ","type":"text"},{"type":"codeVoice","code":"if let"},{"text":" statement.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"fallthrough","level":3,"text":"fallthrough"},{"inlineContent":[{"text":"In Swift, ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" statements don’t fall through the bottom of each case and into the next one.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"That is, the entire "},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statement completes its execution as soon as the first matching case is completed."},{"type":"text","text":" "},{"type":"text","text":"By contrast, C requires you to insert an explicit "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"at the end of every "},{"type":"codeVoice","code":"switch"},{"text":" case to prevent fallthrough.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Avoiding default fallthrough means that Swift "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements are"},{"text":" ","type":"text"},{"text":"much more concise and predictable than their counterparts in C,","type":"text"},{"text":" ","type":"text"},{"text":"and thus they avoid executing multiple ","type":"text"},{"type":"codeVoice","code":"switch"},{"type":"text","text":" cases by mistake."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you need C-style fallthrough behavior,"},{"type":"text","text":" "},{"type":"text","text":"you can opt in to this behavior on a case-by-case basis with the "},{"code":"fallthrough","type":"codeVoice"},{"type":"text","text":" keyword."},{"text":" ","type":"text"},{"type":"text","text":"The example below uses "},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":" to create a textual description of a number."}],"type":"paragraph"},{"syntax":"swift","code":["let integerToDescribe = 5","var description = \"The number \\(integerToDescribe) is\"","switch integerToDescribe {","case 2, 3, 5, 7, 11, 13, 17, 19:","    description += \" a prime number, and also\"","    fallthrough","default:","    description += \" an integer.\"","}","print(description)","\/\/ Prints \"The number 5 is a prime number, and also an integer.\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"This example declares a new ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" variable called "},{"type":"codeVoice","code":"description"},{"type":"text","text":" "},{"type":"text","text":"and assigns it an initial value."},{"type":"text","text":" "},{"text":"The function then considers the value of ","type":"text"},{"type":"codeVoice","code":"integerToDescribe"},{"type":"text","text":" using a "},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"If the value of "},{"type":"codeVoice","code":"integerToDescribe"},{"type":"text","text":" is one of the prime numbers in the list,"},{"type":"text","text":" "},{"type":"text","text":"the function appends text to the end of "},{"type":"codeVoice","code":"description"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"to note that the number is prime."},{"text":" ","type":"text"},{"text":"It then uses the ","type":"text"},{"type":"codeVoice","code":"fallthrough"},{"text":" keyword to “fall into” the ","type":"text"},{"code":"default","type":"codeVoice"},{"text":" case as well.","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"default","type":"codeVoice"},{"type":"text","text":" case adds some extra text to the end of the description,"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"codeVoice","code":"switch"},{"text":" statement is complete.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Unless the value of "},{"type":"codeVoice","code":"integerToDescribe"},{"text":" is in the list of known prime numbers,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it isn’t matched by the first "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" case at all."},{"text":" ","type":"text"},{"type":"text","text":"Because there are no other specific cases,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"integerToDescribe"},{"type":"text","text":" is matched by the "},{"type":"codeVoice","code":"default"},{"text":" case.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"After the "},{"code":"switch","type":"codeVoice"},{"text":" statement has finished executing,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the number’s description is printed using the "},{"type":"codeVoice","code":"print(_:separator:terminator:)"},{"type":"text","text":" function."},{"text":" ","type":"text"},{"text":"In this example,","type":"text"},{"text":" ","type":"text"},{"text":"the number ","type":"text"},{"type":"codeVoice","code":"5"},{"text":" is correctly identified as a prime number.","type":"text"}]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"fallthrough"},{"type":"text","text":" keyword doesn’t check the case conditions"},{"text":" ","type":"text"},{"type":"text","text":"for the "},{"code":"switch","type":"codeVoice"},{"type":"text","text":" case that it causes execution to fall into."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"fallthrough","type":"codeVoice"},{"text":" keyword simply causes code execution to move","type":"text"},{"type":"text","text":" "},{"text":"directly to the statements inside the next case (or ","type":"text"},{"code":"default","type":"codeVoice"},{"text":" case) block,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as in C’s standard "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement behavior."}]}],"name":"Note"},{"type":"heading","anchor":"Instrucciones-etiquetadas","text":"Instrucciones etiquetadas","level":3},{"inlineContent":[{"type":"text","text":"In Swift, you can nest loops and conditional statements"},{"text":" ","type":"text"},{"type":"text","text":"inside other loops and conditional statements"},{"type":"text","text":" "},{"text":"to create complex control flow structures.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, loops and conditional statements can both use the "},{"code":"break","type":"codeVoice"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"text":"to end their execution prematurely.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Therefore, it’s sometimes useful to be explicit about"},{"type":"text","text":" "},{"type":"text","text":"which loop or conditional statement you want a "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement to terminate."},{"type":"text","text":" "},{"type":"text","text":"Similarly, if you have multiple nested loops,"},{"type":"text","text":" "},{"type":"text","text":"it can be useful to be explicit about which loop the "},{"type":"codeVoice","code":"continue"},{"text":" statement","type":"text"},{"type":"text","text":" "},{"type":"text","text":"should affect."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To achieve these aims,","type":"text"},{"type":"text","text":" "},{"text":"you can mark a loop statement or conditional statement with a ","type":"text"},{"inlineContent":[{"type":"text","text":"statement label"}],"type":"emphasis"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"With a conditional statement,"},{"text":" ","type":"text"},{"text":"you can use a statement label with the ","type":"text"},{"type":"codeVoice","code":"break"},{"text":" statement","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to end the execution of the labeled statement."},{"type":"text","text":" "},{"text":"With a loop statement,","type":"text"},{"text":" ","type":"text"},{"text":"you can use a statement label with the ","type":"text"},{"code":"break","type":"codeVoice"},{"type":"text","text":" or "},{"code":"continue","type":"codeVoice"},{"text":" statement","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to end or continue the execution of the labeled statement."}]},{"inlineContent":[{"text":"A labeled statement is indicated by placing","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a label on the same line as the statement’s introducer keyword, followed by a colon."},{"type":"text","text":" "},{"type":"text","text":"Here’s an example of this syntax for a "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop,"},{"text":" ","type":"text"},{"type":"text","text":"although the principle is the same for all loops and "},{"type":"codeVoice","code":"switch"},{"text":" statements:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["<#label name#>: while <#condition#> {","   <#statements#>","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The following example uses the "},{"code":"break","type":"codeVoice"},{"type":"text","text":" and "},{"code":"continue","type":"codeVoice"},{"type":"text","text":" statements"},{"text":" ","type":"text"},{"text":"with a labeled ","type":"text"},{"code":"while","type":"codeVoice"},{"text":" loop for an adapted version of the ","type":"text"},{"inlineContent":[{"text":"Snakes and Ladders","type":"text"}],"type":"emphasis"},{"type":"text","text":" game"},{"text":" ","type":"text"},{"text":"that you saw earlier in this chapter.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This time around, the game has an extra rule:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"To win, you must land ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"exactly"}]},{"type":"text","text":" on square 25."}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"If a particular dice roll would take you beyond square 25,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you must roll again until you roll the exact number needed to land on square 25."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The game board is the same as before."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"identifier":"snakesAndLadders","type":"image"}]},{"inlineContent":[{"type":"text","text":"The values of "},{"code":"finalSquare","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"board"},{"type":"text","text":", "},{"code":"square","type":"codeVoice"},{"type":"text","text":", and "},{"code":"diceRoll","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"are initialized in the same way as before:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let finalSquare = 25","var board = [Int](repeating: 0, count: finalSquare + 1)","board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02","board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08","var square = 0","var diceRoll = 0"]},{"inlineContent":[{"type":"text","text":"This version of the game uses a "},{"code":"while","type":"codeVoice"},{"type":"text","text":" loop and a "},{"type":"codeVoice","code":"switch"},{"text":" statement","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to implement the game’s logic."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"while","type":"codeVoice"},{"type":"text","text":" loop has a statement label called "},{"type":"codeVoice","code":"gameLoop"},{"type":"text","text":" "},{"type":"text","text":"to indicate that it’s the main game loop for the Snakes and Ladders game."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop’s condition is "},{"code":"while square != finalSquare","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"to reflect that you must land exactly on square 25."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["gameLoop: while square != finalSquare {","    diceRoll += 1","    if diceRoll == 7 { diceRoll = 1 }","    switch square + diceRoll {","    case finalSquare:","        \/\/ diceRoll will move us to the final square, so the game is over","        break gameLoop","    case let newSquare where newSquare > finalSquare:","        \/\/ diceRoll will move us beyond the final square, so roll again","        continue gameLoop","    default:","        \/\/ this is a valid move, so find out its effect","        square += diceRoll","        square += board[square]","    }","}","print(\"Game over!\")"]},{"type":"paragraph","inlineContent":[{"text":"The dice is rolled at the start of each loop.","type":"text"},{"text":" ","type":"text"},{"text":"Rather than moving the player immediately,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the loop uses a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement to consider the result of the move"},{"type":"text","text":" "},{"text":"and to determine whether the move is allowed:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"If the dice roll will move the player onto the final square,","type":"text"},{"text":" ","type":"text"},{"text":"the game is over.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"break gameLoop"},{"type":"text","text":" statement transfers control to"},{"type":"text","text":" "},{"type":"text","text":"the first line of code outside of the "},{"code":"while","type":"codeVoice"},{"text":" loop, which ends the game.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If the dice roll will move the player ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"beyond","type":"text"}]},{"type":"text","text":" the final square,"},{"type":"text","text":" "},{"type":"text","text":"the move is invalid and the player needs to roll again."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"continue gameLoop","type":"codeVoice"},{"type":"text","text":" statement ends the current "},{"code":"while","type":"codeVoice"},{"text":" loop iteration","type":"text"},{"text":" ","type":"text"},{"text":"and begins the next iteration of the loop.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"In all other cases, the dice roll is a valid move."},{"type":"text","text":" "},{"text":"The player moves forward by ","type":"text"},{"type":"codeVoice","code":"diceRoll"},{"text":" squares,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the game logic checks for any snakes and ladders."},{"text":" ","type":"text"},{"type":"text","text":"The loop then ends, and control returns to the "},{"code":"while","type":"codeVoice"},{"text":" condition","type":"text"},{"type":"text","text":" "},{"text":"to decide whether another turn is required.","type":"text"}],"type":"paragraph"}]}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the "},{"type":"codeVoice","code":"break"},{"type":"text","text":" statement above didn’t use the "},{"type":"codeVoice","code":"gameLoop"},{"text":" label,","type":"text"},{"text":" ","type":"text"},{"text":"it would break out of the ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" statement, not the ","type":"text"},{"type":"codeVoice","code":"while"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"text":"Using the ","type":"text"},{"code":"gameLoop","type":"codeVoice"},{"type":"text","text":" label makes it clear which control statement should be terminated."}]},{"inlineContent":[{"text":"It isn’t strictly necessary to use the ","type":"text"},{"type":"codeVoice","code":"gameLoop"},{"type":"text","text":" label"},{"type":"text","text":" "},{"type":"text","text":"when calling "},{"code":"continue gameLoop","type":"codeVoice"},{"type":"text","text":" to jump to the next iteration of the loop."},{"type":"text","text":" "},{"text":"There’s only one loop in the game,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and therefore no ambiguity as to which loop the "},{"code":"continue","type":"codeVoice"},{"type":"text","text":" statement will affect."},{"type":"text","text":" "},{"text":"However, there’s no harm in using the ","type":"text"},{"type":"codeVoice","code":"gameLoop"},{"text":" label with the ","type":"text"},{"code":"continue","type":"codeVoice"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"text":"Doing so is consistent with the label’s use alongside the ","type":"text"},{"code":"break","type":"codeVoice"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"and helps make the game’s logic clearer to read and understand."}],"type":"paragraph"}],"name":"Note","style":"note"},{"type":"heading","level":2,"anchor":"Salida-temprana","text":"Salida temprana"},{"inlineContent":[{"type":"text","text":"A "},{"code":"guard","type":"codeVoice"},{"text":" statement, like an ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" statement,","type":"text"},{"type":"text","text":" "},{"text":"executes statements depending on the Boolean value of an expression.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You use a "},{"code":"guard","type":"codeVoice"},{"text":" statement to require that a condition must be true","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in order for the code after the "},{"type":"codeVoice","code":"guard"},{"text":" statement to be executed.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Unlike an "},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"text":"a ","type":"text"},{"code":"guard","type":"codeVoice"},{"type":"text","text":" statement always has an "},{"type":"codeVoice","code":"else"},{"text":" clause —","type":"text"},{"text":" ","type":"text"},{"text":"the code inside the ","type":"text"},{"type":"codeVoice","code":"else"},{"text":" clause is executed if the condition isn’t true.","type":"text"}],"type":"paragraph"},{"code":["func greet(person: [String: String]) {","    guard let name = person[\"name\"] else {","        return","    }","","    print(\"Hello \\(name)!\")","","    guard let location = person[\"location\"] else {","        print(\"I hope the weather is nice near you.\")","        return","    }","","    print(\"I hope the weather is nice in \\(location).\")","}","","greet(person: [\"name\": \"John\"])","\/\/ Prints \"Hello John!\"","\/\/ Prints \"I hope the weather is nice near you.\"","greet(person: [\"name\": \"Jane\", \"location\": \"Cupertino\"])","\/\/ Prints \"Hello Jane!\"","\/\/ Prints \"I hope the weather is nice in Cupertino.\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the "},{"code":"guard","type":"codeVoice"},{"text":" statement’s condition is met,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"code execution continues after the "},{"type":"codeVoice","code":"guard"},{"text":" statement’s closing brace.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Any variables or constants that were assigned values"},{"type":"text","text":" "},{"text":"using an optional binding as part of the condition","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are available for the rest of the code block"},{"type":"text","text":" "},{"text":"that the ","type":"text"},{"code":"guard","type":"codeVoice"},{"type":"text","text":" statement appears in."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If that condition isn’t met,"},{"type":"text","text":" "},{"type":"text","text":"the code inside the "},{"type":"codeVoice","code":"else"},{"text":" branch is executed.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"That branch must transfer control to exit the code block"},{"type":"text","text":" "},{"text":"in which the ","type":"text"},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement appears."},{"text":" ","type":"text"},{"text":"It can do this with a control transfer statement","type":"text"},{"text":" ","type":"text"},{"text":"such as ","type":"text"},{"code":"return","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"break"},{"type":"text","text":", "},{"code":"continue","type":"codeVoice"},{"type":"text","text":", or "},{"type":"codeVoice","code":"throw"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"or it can call a function or method","type":"text"},{"text":" ","type":"text"},{"text":"that doesn’t return, such as ","type":"text"},{"type":"codeVoice","code":"fatalError(_:file:line:)"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"Using a "},{"code":"guard","type":"codeVoice"},{"text":" statement for requirements","type":"text"},{"text":" ","type":"text"},{"text":"improves the readability of your code,","type":"text"},{"type":"text","text":" "},{"text":"compared to doing the same check with an ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement."},{"text":" ","type":"text"},{"type":"text","text":"It lets you write the code that’s typically executed"},{"text":" ","type":"text"},{"text":"without wrapping it in an ","type":"text"},{"type":"codeVoice","code":"else"},{"type":"text","text":" block,"},{"type":"text","text":" "},{"type":"text","text":"and it lets you keep the code that handles a violated requirement"},{"text":" ","type":"text"},{"type":"text","text":"next to the requirement."}],"type":"paragraph"},{"type":"heading","anchor":"Acciones-Diferidas","text":"Acciones Diferidas","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike control-flow constructs like "},{"code":"if","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"while"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which let you control whether part of your code is executed","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or how many times it gets executed,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"defer"},{"type":"text","text":" controls "},{"type":"emphasis","inlineContent":[{"text":"when","type":"text"}]},{"text":" a piece of code is executed.","type":"text"},{"type":"text","text":" "},{"text":"You use a ","type":"text"},{"code":"defer","type":"codeVoice"},{"text":" block to write code that will be executed later,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when your program reaches the end of the current scope."},{"text":" ","type":"text"},{"text":"For example:","type":"text"}]},{"code":["var score = 1","if score < 10 {","    defer {","        print(score)","    }","    score += 5","}","\/\/ Prints \"6\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"In the example above,"},{"type":"text","text":" "},{"text":"the code inside of the ","type":"text"},{"type":"codeVoice","code":"defer"},{"type":"text","text":" block is executed"},{"text":" ","type":"text"},{"text":"before exiting the body of the ","type":"text"},{"code":"if","type":"codeVoice"},{"text":" statement.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"First, the code in the "},{"code":"if","type":"codeVoice"},{"text":" statement runs,","type":"text"},{"text":" ","type":"text"},{"text":"which increments ","type":"text"},{"type":"codeVoice","code":"score"},{"text":" by five.","type":"text"},{"type":"text","text":" "},{"text":"Then, before exiting the ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" statement’s scope,","type":"text"},{"text":" ","type":"text"},{"text":"the deferred code is run, which prints ","type":"text"},{"code":"score","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The code inside of the ","type":"text"},{"type":"codeVoice","code":"defer"},{"text":" always runs,","type":"text"},{"type":"text","text":" "},{"text":"regardless of how the program exits that scope.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"That includes code like an early exit from a function,"},{"type":"text","text":" "},{"type":"text","text":"breaking out of a "},{"type":"codeVoice","code":"for"},{"type":"text","text":" loop,"},{"type":"text","text":" "},{"type":"text","text":"or throwing an error."},{"text":" ","type":"text"},{"text":"This behavior makes ","type":"text"},{"code":"defer","type":"codeVoice"},{"text":" useful for operations","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"where you need to guarantee a pair of actions happen —"},{"type":"text","text":" "},{"type":"text","text":"like manually allocating and freeing memory,"},{"text":" ","type":"text"},{"type":"text","text":"opening and closing low-level file descriptors,"},{"text":" ","type":"text"},{"text":"and beginning and ending transactions in a database —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because you can write both actions next to each other in your code."},{"text":" ","type":"text"},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"text":"the following code gives a temporary bonus to the score,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by adding and subtracting 100 inside a chunk of code:"}]},{"code":["var score = 3","if score < 100 {","    score += 100","    defer {","        score -= 100","    }","    \/\/ Other code that uses the score with its bonus goes here.","    print(score)","}","\/\/ Prints \"103\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you write more than one "},{"type":"codeVoice","code":"defer"},{"text":" block in the same scope,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the first one you specify is the last one to run."}]},{"type":"codeListing","code":["if score < 10 {","    defer {","        print(score)","    }","    defer {","        print(\"The score is:\")","    }","    score += 5","}","\/\/ Prints \"The score is:\"","\/\/ Prints \"6\""],"syntax":"swift"},{"inlineContent":[{"text":"If your program stops running —","type":"text"},{"text":" ","type":"text"},{"text":"for example, because of a runtime error or a crash —","type":"text"},{"type":"text","text":" "},{"text":"deferred code doesn’t execute.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, deferred code does execute after an error is thrown;"},{"type":"text","text":" "},{"text":"for information about using ","type":"text"},{"type":"codeVoice","code":"defer"},{"type":"text","text":" with error handling,"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"type":"text","text":"doc:ErrorHandling#Especificando-Acciones-de-Limpieza"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Comprobaci%C3%B3n-de-la-Disponibilidad-de-APIs","level":2,"text":"Comprobación de la Disponibilidad de APIs"},{"type":"paragraph","inlineContent":[{"text":"Swift has built-in support for checking API availability,","type":"text"},{"text":" ","type":"text"},{"text":"which ensures that you don’t accidentally use APIs that are unavailable","type":"text"},{"text":" ","type":"text"},{"text":"on a given deployment target.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The compiler uses availability information in the SDK"},{"text":" ","type":"text"},{"type":"text","text":"to verify that all of the APIs used in your code"},{"type":"text","text":" "},{"type":"text","text":"are available on the deployment target specified by your project."},{"type":"text","text":" "},{"text":"Swift reports an error at compile time","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"if you try to use an API that isn’t available."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You use an "},{"inlineContent":[{"text":"availability condition","type":"text"}],"type":"emphasis"},{"type":"text","text":" in an "},{"code":"if","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"guard","type":"codeVoice"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"text":"to conditionally execute a block of code,","type":"text"},{"type":"text","text":" "},{"text":"depending on whether the APIs you want to use are available at runtime.","type":"text"},{"text":" ","type":"text"},{"text":"The compiler uses the information from the availability condition","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when it verifies that the APIs in that block of code are available."}],"type":"paragraph"},{"code":["if #available(iOS 10, macOS 10.12, *) {","    \/\/ Use iOS 10 APIs on iOS, and use macOS 10.12 APIs on macOS","} else {","    \/\/ Fall back to earlier iOS and macOS APIs","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The availability condition above specifies that in iOS,"},{"text":" ","type":"text"},{"type":"text","text":"the body of the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement executes only in iOS 10 and later;"},{"type":"text","text":" "},{"type":"text","text":"in macOS, only in macOS 10.12 and later."},{"text":" ","type":"text"},{"text":"The last argument, ","type":"text"},{"type":"codeVoice","code":"*"},{"type":"text","text":", is required and specifies that on any other platform,"},{"text":" ","type":"text"},{"text":"the body of the ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":" executes on the minimum deployment target specified by your target."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In its general form,","type":"text"},{"text":" ","type":"text"},{"text":"the availability condition takes a list of platform names and versions.","type":"text"},{"type":"text","text":" "},{"text":"You use platform names such as ","type":"text"},{"type":"codeVoice","code":"iOS"},{"text":", ","type":"text"},{"type":"codeVoice","code":"macOS"},{"type":"text","text":", "},{"code":"watchOS","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"tvOS","type":"codeVoice"},{"text":" —","type":"text"},{"type":"text","text":" "},{"text":"for the full list, see ","type":"text"},{"text":"doc:Attributes#Atributos-de-Declaración","type":"text"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In addition to specifying major version numbers like iOS 8 or macOS 10.10,"},{"type":"text","text":" "},{"type":"text","text":"you can specify minor versions numbers like iOS 11.2.6 and macOS 10.13.3."}]},{"syntax":"swift","type":"codeListing","code":["if #available(<#platform name#> <#version#>, <#...#>, *) {","    <#statements to execute if the APIs are available#>","} else {","    <#fallback statements to execute if the APIs are unavailable#>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you use an availability condition with a "},{"code":"guard","type":"codeVoice"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"type":"text","text":"it refines the availability information that’s used"},{"text":" ","type":"text"},{"type":"text","text":"for the rest of the code in that code block."}]},{"code":["@available(macOS 10.12, *)","struct ColorPreference {","    var bestColor = \"blue\"","}","","func chooseBestColor() -> String {","    guard #available(macOS 10.12, *) else {","       return \"gray\"","    }","    let colors = ColorPreference()","    return colors.bestColor","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"ColorPreference","type":"codeVoice"},{"text":" structure requires macOS 10.12 or later.","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"chooseBestColor()"},{"text":" function begins with an availability guard.","type":"text"},{"type":"text","text":" "},{"text":"If the platform version is too old to use ","type":"text"},{"code":"ColorPreference","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it falls back to behavior that’s always available."},{"text":" ","type":"text"},{"type":"text","text":"After the "},{"code":"guard","type":"codeVoice"},{"text":" statement,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can use APIs that require macOS 10.12 or later."}]},{"inlineContent":[{"text":"In addition to ","type":"text"},{"code":"#available","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"Swift also supports the opposite check using an unavailability condition."},{"text":" ","type":"text"},{"type":"text","text":"For example, the following two checks do the same thing:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["if #available(iOS 10, *) {","} else {","    \/\/ Fallback code","}","","if #unavailable(iOS 10) {","    \/\/ Fallback code","}"]},{"type":"paragraph","inlineContent":[{"text":"Using the ","type":"text"},{"type":"codeVoice","code":"#unavailable"},{"type":"text","text":" form helps make your code more readable"},{"type":"text","text":" "},{"text":"when the check contains only fallback code.","type":"text"}]},{"style":"note","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Conoce más acerca del uso del ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/"},{"type":"text","text":"."}]}],"type":"aside","name":"Software Beta"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","interfaceLanguage":"swift"},"metadata":{"title":"Flujo de control"},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Uso-de-break-en-una-instrucci%C3%B3n-switch":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Uso-de-break-en-una-instrucci%C3%B3n-switch","kind":"section","type":"topic","title":"Uso de `break` en una instrucción `switch`","url":"\/documentation\/the-swift-programming-language\/controlflow#Uso-de-break-en-una-instrucci%C3%B3n-switch","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","role":"collection","url":"\/documentation\/the-swift-programming-language","abstract":[],"title":"The Swift Programming Language (6)","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Anotaciones-de-tipo":{"type":"topic","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Anotaciones-de-tipo","title":"Anotaciones de tipo","url":"\/documentation\/the-swift-programming-language\/thebasics#Anotaciones-de-tipo","abstract":[]},"https://developer.apple.com/es/support/beta-software/":{"type":"link","titleInlineContent":[{"type":"text","text":"software beta de Apple"}],"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","title":"software beta de Apple","url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/"},"snakesAndLadders":{"variants":[{"url":"\/images\/org.swift.tspl\/snakesAndLadders@2x.png","traits":["2x","light"]},{"traits":["2x","dark"],"url":"\/images\/org.swift.tspl\/snakesAndLadders~dark@2x.png"}],"type":"image","identifier":"snakesAndLadders","alt":null},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling#Propagaci%C3%B3n-de-errores-mediante-funciones-que-arrojan-errores":{"type":"topic","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Propagaci%C3%B3n-de-errores-mediante-funciones-que-arrojan-errores","title":"Propagación de errores mediante funciones que arrojan errores","url":"\/documentation\/the-swift-programming-language\/errorhandling#Propagaci%C3%B3n-de-errores-mediante-funciones-que-arrojan-errores","abstract":[]},"coordinateGraphComplex":{"variants":[{"url":"\/images\/org.swift.tspl\/coordinateGraphComplex@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/coordinateGraphComplex~dark@2x.png","traits":["2x","dark"]}],"type":"image","identifier":"coordinateGraphComplex","alt":null},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"kind":"article","abstract":[{"type":"text","text":"Define and call functions, label their arguments, and use their return values."}],"role":"article","type":"topic","title":"Funciones","url":"\/documentation\/the-swift-programming-language\/functions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Casos-compuestos":{"type":"topic","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Casos-compuestos","title":"Casos compuestos","url":"\/documentation\/the-swift-programming-language\/controlflow#Casos-compuestos","abstract":[]},"coordinateGraphMedium":{"variants":[{"url":"\/images\/org.swift.tspl\/coordinateGraphMedium@2x.png","traits":["2x","light"]},{"traits":["2x","dark"],"url":"\/images\/org.swift.tspl\/coordinateGraphMedium~dark@2x.png"}],"type":"image","identifier":"coordinateGraphMedium","alt":null},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators#Operadores-de-rango":{"type":"topic","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Operadores-de-rango","title":"Operadores de rango","url":"\/documentation\/the-swift-programming-language\/basicoperators#Operadores-de-rango","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"kind":"article","abstract":[{"type":"text","text":"Respond to and recover from errors."}],"role":"article","type":"topic","title":"Manejo de errores","url":"\/documentation\/the-swift-programming-language\/errorhandling","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#fallthrough":{"type":"topic","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#fallthrough","title":"fallthrough","url":"\/documentation\/the-swift-programming-language\/controlflow#fallthrough","abstract":[]},"https://developer.apple.com/documentation/swift/sequence":{"type":"link","titleInlineContent":[{"code":"Sequence","type":"codeVoice"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence","title":"Sequence","url":"https:\/\/developer.apple.com\/documentation\/swift\/sequence"},"coordinateGraphSimple":{"variants":[{"traits":["2x","light"],"url":"\/images\/org.swift.tspl\/coordinateGraphSimple@2x.png"},{"url":"\/images\/org.swift.tspl\/coordinateGraphSimple~dark@2x.png","traits":["2x","dark"]}],"type":"image","identifier":"coordinateGraphSimple","alt":null},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes":{"kind":"article","abstract":[{"type":"text","text":"Organize data using arrays, sets, and dictionaries."}],"role":"article","type":"topic","title":"Tipos de colecciones","url":"\/documentation\/the-swift-programming-language\/collectiontypes","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes"}}}