<<<<<<< HEAD
{"abstract":[{"type":"text","text":"Define and call functions, label their arguments, and use their return values."}],"kind":"article","metadata":{"title":"Funciones"},"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"text":" are self-contained chunks of code that perform a specific task.","type":"text"},{"type":"text","text":" "},{"text":"You give a function a name that identifies what it does,","type":"text"},{"text":" ","type":"text"},{"text":"and this name is used to “call” the function to perform its task when needed.","type":"text"}]},{"inlineContent":[{"text":"Swift’s unified function syntax is flexible enough to express anything from","type":"text"},{"text":" ","type":"text"},{"text":"a simple C-style function with no parameter names","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to a complex Objective-C-style method"},{"type":"text","text":" "},{"text":"with names and argument labels for each parameter.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Parameters can provide default values to simplify function calls"},{"type":"text","text":" "},{"text":"and can be passed as in-out parameters,","type":"text"},{"type":"text","text":" "},{"text":"which modify a passed variable once the function has completed its execution.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every function in Swift has a type,"},{"text":" ","type":"text"},{"type":"text","text":"consisting of the function’s parameter types and return type."},{"type":"text","text":" "},{"type":"text","text":"You can use this type like any other type in Swift,"},{"text":" ","type":"text"},{"text":"which makes it easy to pass functions as parameters to other functions,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and to return functions from functions."},{"text":" ","type":"text"},{"type":"text","text":"Functions can also be written within other functions"},{"text":" ","type":"text"},{"text":"to encapsulate useful functionality within a nested function scope.","type":"text"}]},{"level":2,"type":"heading","anchor":"Definici%C3%B3n-e-Invocaci%C3%B3n-de-Funciones","text":"Definición e Invocación de Funciones"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you define a function,"},{"text":" ","type":"text"},{"type":"text","text":"you can optionally define one or more named, typed values that the function takes as input,"},{"text":" ","type":"text"},{"text":"known as ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"parameters","type":"text"}]},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"You can also optionally define","type":"text"},{"text":" ","type":"text"},{"text":"a type of value that the function will pass back as output when it’s done,","type":"text"},{"type":"text","text":" "},{"text":"known as its ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"return type","type":"text"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Every function has a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"function name","type":"text"}]},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which describes the task that the function performs."},{"text":" ","type":"text"},{"text":"To use a function, you “call” that function with its name","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and pass it input values (known as "},{"inlineContent":[{"type":"text","text":"arguments"}],"type":"emphasis"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"that match the types of the function’s parameters.","type":"text"},{"type":"text","text":" "},{"text":"A function’s arguments must always be provided in the same order","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as the function’s parameter list."}]},{"inlineContent":[{"text":"The function in the example below is called ","type":"text"},{"type":"codeVoice","code":"greet(person:)"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"because that’s what it does —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it takes a person’s name as input and returns a greeting for that person."},{"type":"text","text":" "},{"type":"text","text":"To accomplish this, you define one input parameter —"},{"text":" ","type":"text"},{"type":"text","text":"a "},{"code":"String","type":"codeVoice"},{"text":" value called ","type":"text"},{"type":"codeVoice","code":"person"},{"type":"text","text":" —"},{"type":"text","text":" "},{"type":"text","text":"and a return type of "},{"code":"String","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which will contain a greeting for that person:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func greet(person: String) -> String {","    let greeting = \"Hello, \" + person + \"!\"","    return greeting","}"]},{"type":"paragraph","inlineContent":[{"text":"All of this information is rolled up into the function’s ","type":"text"},{"inlineContent":[{"type":"text","text":"definition"}],"type":"emphasis"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which is prefixed with the ","type":"text"},{"type":"codeVoice","code":"func"},{"type":"text","text":" keyword."},{"text":" ","type":"text"},{"type":"text","text":"You indicate the function’s return type with the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"return arrow"}]},{"text":" ","type":"text"},{"code":"->","type":"codeVoice"},{"text":" ","type":"text"},{"text":"(a hyphen followed by a right angle bracket),","type":"text"},{"type":"text","text":" "},{"text":"which is followed by the name of the type to return.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The definition describes what the function does,","type":"text"},{"type":"text","text":" "},{"text":"what it expects to receive,","type":"text"},{"type":"text","text":" "},{"text":"and what it returns when it’s done.","type":"text"},{"text":" ","type":"text"},{"text":"The definition makes it easy for the function to be called unambiguously","type":"text"},{"text":" ","type":"text"},{"text":"from elsewhere in your code:","type":"text"}]},{"code":["print(greet(person: \"Anna\"))","\/\/ Prints \"Hello, Anna!\"","print(greet(person: \"Brian\"))","\/\/ Prints \"Hello, Brian!\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"You call the "},{"code":"greet(person:)","type":"codeVoice"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"by passing it a "},{"type":"codeVoice","code":"String"},{"text":" value after the ","type":"text"},{"type":"codeVoice","code":"person"},{"text":" argument label,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"such as "},{"code":"greet(person: \"Anna\")","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because the function returns a "},{"code":"String","type":"codeVoice"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":" can be wrapped in a call to the "},{"type":"codeVoice","code":"print(_:separator:terminator:)"},{"text":" function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to print that string and see its return value, as shown above."}],"type":"paragraph"},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"print(_:separator:terminator:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"doesn’t have a label for its first argument,"},{"type":"text","text":" "},{"text":"and its other arguments are optional because they have a default value.","type":"text"},{"type":"text","text":" "},{"text":"These variations on function syntax are discussed below","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Etiquetas-de-Argumentos-y-Nombres-de-Par%C3%A1metros-de-Funciones","isActive":true},{"type":"text","text":" "},{"text":"and ","type":"text"},{"text":"doc:Functions#Parámetros-Con-Valores-Predeterminados","type":"text"},{"type":"text","text":"."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The body of the "},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":" function starts by"},{"text":" ","type":"text"},{"type":"text","text":"defining a new "},{"type":"codeVoice","code":"String"},{"type":"text","text":" constant called "},{"type":"codeVoice","code":"greeting"},{"type":"text","text":" "},{"type":"text","text":"and setting it to a simple greeting message."},{"type":"text","text":" "},{"text":"This greeting is then passed back out of the function using the ","type":"text"},{"type":"codeVoice","code":"return"},{"text":" keyword.","type":"text"},{"text":" ","type":"text"},{"text":"In the line of code that says ","type":"text"},{"code":"return greeting","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the function finishes its execution and returns the current value of "},{"code":"greeting","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You can call the ","type":"text"},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":" function multiple times with different input values."},{"type":"text","text":" "},{"text":"The example above shows what happens if it’s called with an input value of ","type":"text"},{"type":"codeVoice","code":"\"Anna\""},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and an input value of "},{"code":"\"Brian\"","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"The function returns a tailored greeting in each case."}]},{"type":"paragraph","inlineContent":[{"text":"To make the body of this function shorter,","type":"text"},{"text":" ","type":"text"},{"text":"you can combine the message creation and the return statement into one line:","type":"text"}]},{"code":["func greetAgain(person: String) -> String {","    return \"Hello again, \" + person + \"!\"","}","print(greetAgain(person: \"Anna\"))","\/\/ Prints \"Hello again, Anna!\""],"type":"codeListing","syntax":"swift"},{"type":"heading","anchor":"Par%C3%A1metros-de-Funciones-y-Valores-de-Devoluci%C3%B3n","level":2,"text":"Parámetros de Funciones y Valores de Devolución"},{"type":"paragraph","inlineContent":[{"text":"Function parameters and return values are extremely flexible in Swift.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You can define anything from a simple utility function with a single unnamed parameter"},{"text":" ","type":"text"},{"type":"text","text":"to a complex function with expressive parameter names and different parameter options."}]},{"text":"Funciones Sin Parámetros","type":"heading","anchor":"Funciones-Sin-Par%C3%A1metros","level":3},{"inlineContent":[{"type":"text","text":"Functions aren’t required to define input parameters."},{"text":" ","type":"text"},{"text":"Here’s a function with no input parameters,","type":"text"},{"type":"text","text":" "},{"text":"which always returns the same ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" message whenever it’s called:"}],"type":"paragraph"},{"code":["func sayHelloWorld() -> String {","    return \"hello, world\"","}","print(sayHelloWorld())","\/\/ Prints \"hello, world\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The function definition still needs parentheses after the function’s name,"},{"text":" ","type":"text"},{"text":"even though it doesn’t take any parameters.","type":"text"},{"type":"text","text":" "},{"text":"The function name is also followed by","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"an empty pair of parentheses when the function is called."}],"type":"paragraph"},{"text":"Funciones Con Múltiples Parámetros","type":"heading","anchor":"Funciones-Con-M%C3%BAltiples-Par%C3%A1metros","level":3},{"type":"paragraph","inlineContent":[{"text":"Functions can have multiple input parameters,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which are written within the function’s parentheses, separated by commas."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function takes a person’s name"},{"text":" ","type":"text"},{"text":"and whether they have already been greeted as input,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and returns an appropriate greeting for that person:"}]},{"syntax":"swift","type":"codeListing","code":["func greet(person: String, alreadyGreeted: Bool) -> String {","    if alreadyGreeted {","        return greetAgain(person: person)","    } else {","        return greet(person: person)","    }","}","print(greet(person: \"Tim\", alreadyGreeted: true))","\/\/ Prints \"Hello again, Tim!\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You call the "},{"type":"codeVoice","code":"greet(person:alreadyGreeted:)"},{"type":"text","text":" function"},{"text":" ","type":"text"},{"type":"text","text":"by passing it both a "},{"type":"codeVoice","code":"String"},{"text":" argument value labeled ","type":"text"},{"code":"person","type":"codeVoice"},{"type":"text","text":" "},{"text":"and a ","type":"text"},{"type":"codeVoice","code":"Bool"},{"text":" argument value labeled ","type":"text"},{"type":"codeVoice","code":"alreadyGreeted"},{"type":"text","text":" "},{"type":"text","text":"in parentheses, separated by commas."},{"type":"text","text":" "},{"text":"Note that this function is distinct from the ","type":"text"},{"code":"greet(person:)","type":"codeVoice"},{"type":"text","text":" function"},{"text":" ","type":"text"},{"type":"text","text":"shown in an earlier section."},{"type":"text","text":" "},{"text":"Although both functions have names that begin with ","type":"text"},{"type":"codeVoice","code":"greet"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"the ","type":"text"},{"code":"greet(person:alreadyGreeted:)","type":"codeVoice"},{"type":"text","text":" function takes two arguments"},{"type":"text","text":" "},{"text":"but the ","type":"text"},{"code":"greet(person:)","type":"codeVoice"},{"type":"text","text":" function takes only one."}]},{"type":"heading","text":"Funciones Sin Valores de Devolución","level":3,"anchor":"Funciones-Sin-Valores-de-Devoluci%C3%B3n"},{"inlineContent":[{"text":"Functions aren’t required to define a return type.","type":"text"},{"type":"text","text":" "},{"text":"Here’s a version of the ","type":"text"},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":" function,"},{"text":" ","type":"text"},{"type":"text","text":"which prints its own "},{"code":"String","type":"codeVoice"},{"type":"text","text":" value rather than returning it:"}],"type":"paragraph"},{"code":["func greet(person: String) {","    print(\"Hello, \\(person)!\")","}","greet(person: \"Dave\")","\/\/ Prints \"Hello, Dave!\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Because it doesn’t need to return a value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the function’s definition doesn’t include the return arrow ("},{"type":"codeVoice","code":"->"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"or a return type.","type":"text"}]},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Strictly speaking, this version of the "},{"type":"codeVoice","code":"greet(person:)"},{"text":" function ","type":"text"},{"inlineContent":[{"text":"does","type":"text"}],"type":"emphasis"},{"text":" still return a value,","type":"text"},{"text":" ","type":"text"},{"text":"even though no return value is defined.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Functions without a defined return type return a special value of type "},{"type":"codeVoice","code":"Void"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"This is simply an empty tuple,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which is written as "},{"type":"codeVoice","code":"()"},{"type":"text","text":"."}]}],"name":"Note"},{"inlineContent":[{"text":"The return value of a function can be ignored when it’s called:","type":"text"}],"type":"paragraph"},{"code":["func printAndCount(string: String) -> Int {","    print(string)","    return string.count","}","func printWithoutCounting(string: String) {","    let _ = printAndCount(string: string)","}","printAndCount(string: \"hello, world\")","\/\/ prints \"hello, world\" and returns a value of 12","printWithoutCounting(string: \"hello, world\")","\/\/ prints \"hello, world\" but doesn't return a value"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first function, "},{"type":"codeVoice","code":"printAndCount(string:)"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"prints a string, and then returns its character count as an ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The second function, "},{"type":"codeVoice","code":"printWithoutCounting(string:)"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"calls the first function, but ignores its return value."},{"type":"text","text":" "},{"text":"When the second function is called,","type":"text"},{"type":"text","text":" "},{"text":"the message is still printed by the first function,","type":"text"},{"type":"text","text":" "},{"text":"but the returned value isn’t used.","type":"text"}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Return values can be ignored,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but a function that says it will return a value must always do so."},{"type":"text","text":" "},{"text":"A function with a defined return type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can’t allow control to fall out of the bottom of the function"},{"type":"text","text":" "},{"text":"without returning a value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and attempting to do so will result in a compile-time error."}]}],"style":"note","name":"Note"},{"anchor":"Funciones-que-devuelven-m%C3%BAltiples-valores","type":"heading","text":"Funciones que devuelven múltiples valores","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use a tuple type as the return type for a function"},{"text":" ","type":"text"},{"type":"text","text":"to return multiple values as part of one compound return value."}]},{"inlineContent":[{"text":"The example below defines a function called ","type":"text"},{"type":"codeVoice","code":"minMax(array:)"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which finds the smallest and largest numbers in an array of ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" values:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func minMax(array: [Int]) -> (min: Int, max: Int) {","    var currentMin = array[0]","    var currentMax = array[0]","    for value in array[1..<array.count] {","        if value < currentMin {","            currentMin = value","        } else if value > currentMax {","            currentMax = value","        }","    }","    return (currentMin, currentMax)","}"]},{"inlineContent":[{"text":"The ","type":"text"},{"code":"minMax(array:)","type":"codeVoice"},{"type":"text","text":" function returns a tuple containing two "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"These values are labeled "},{"code":"min","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"max"},{"type":"text","text":" "},{"type":"text","text":"so that they can be accessed by name when querying the function’s return value."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The body of the "},{"code":"minMax(array:)","type":"codeVoice"},{"text":" function starts by setting","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"two working variables called "},{"type":"codeVoice","code":"currentMin"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"currentMax"},{"type":"text","text":" "},{"type":"text","text":"to the value of the first integer in the array."},{"type":"text","text":" "},{"text":"The function then iterates over the remaining values in the array","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and checks each value to see if it’s smaller or larger than"},{"text":" ","type":"text"},{"text":"the values of ","type":"text"},{"type":"codeVoice","code":"currentMin"},{"type":"text","text":" and "},{"type":"codeVoice","code":"currentMax"},{"text":" respectively.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Finally, the overall minimum and maximum values are returned as"},{"text":" ","type":"text"},{"type":"text","text":"a tuple of two "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the tuple’s member values are named as part of the function’s return type,"},{"text":" ","type":"text"},{"type":"text","text":"they can be accessed with dot syntax to retrieve the minimum and maximum found values:"}]},{"code":["let bounds = minMax(array: [8, -6, 2, 109, 3, 71])","print(\"min is \\(bounds.min) and max is \\(bounds.max)\")","\/\/ Prints \"min is -6 and max is 109\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Note that the tuple’s members don’t need to be named","type":"text"},{"type":"text","text":" "},{"type":"text","text":"at the point that the tuple is returned from the function,"},{"text":" ","type":"text"},{"text":"because their names are already specified as part of the function’s return type.","type":"text"}]},{"anchor":"Tipos-Tupla-de-Devoluci%C3%B3n-Opcionales","text":"Tipos Tupla de Devolución Opcionales","type":"heading","level":4},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the tuple type to be returned from a function"},{"type":"text","text":" "},{"text":"has the potential to have “no value” for the entire tuple,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can use an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional"}]},{"type":"text","text":" tuple return type to reflect the fact that"},{"type":"text","text":" "},{"type":"text","text":"the entire tuple can be "},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"You write an optional tuple return type by placing a question mark","type":"text"},{"type":"text","text":" "},{"text":"after the tuple type’s closing parenthesis,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"such as "},{"type":"codeVoice","code":"(Int, Int)?"},{"type":"text","text":" or "},{"type":"codeVoice","code":"(String, Int, Bool)?"},{"type":"text","text":"."}]},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An optional tuple type such as "},{"type":"codeVoice","code":"(Int, Int)?"},{"type":"text","text":" "},{"text":"is different from a tuple that contains optional types","type":"text"},{"type":"text","text":" "},{"text":"such as ","type":"text"},{"type":"codeVoice","code":"(Int?, Int?)"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"With an optional tuple type, the entire tuple is optional,","type":"text"},{"type":"text","text":" "},{"text":"not just each individual value within the tuple.","type":"text"}]}],"name":"Note"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"minMax(array:)"},{"type":"text","text":" function above returns a tuple containing two "},{"type":"codeVoice","code":"Int"},{"text":" values.","type":"text"},{"type":"text","text":" "},{"text":"However, the function doesn’t perform any safety checks on the array it’s passed.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If the "},{"code":"array","type":"codeVoice"},{"type":"text","text":" argument contains an empty array,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"minMax(array:)"},{"type":"text","text":" function, as defined above,"},{"type":"text","text":" "},{"type":"text","text":"will trigger a runtime error when attempting to access "},{"type":"codeVoice","code":"array[0]"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To handle an empty array safely,"},{"text":" ","type":"text"},{"type":"text","text":"write the "},{"code":"minMax(array:)","type":"codeVoice"},{"text":" function with an optional tuple return type","type":"text"},{"type":"text","text":" "},{"text":"and return a value of ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" when the array is empty:","type":"text"}]},{"code":["func minMax(array: [Int]) -> (min: Int, max: Int)? {","    if array.isEmpty { return nil }","    var currentMin = array[0]","    var currentMax = array[0]","    for value in array[1..<array.count] {","        if value < currentMin {","            currentMin = value","        } else if value > currentMax {","            currentMax = value","        }","    }","    return (currentMin, currentMax)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use optional binding to check whether this version of the "},{"code":"minMax(array:)","type":"codeVoice"},{"text":" function","type":"text"},{"text":" ","type":"text"},{"text":"returns an actual tuple value or ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["if let bounds = minMax(array: [8, -6, 2, 109, 3, 71]) {","    print(\"min is \\(bounds.min) and max is \\(bounds.max)\")","}","\/\/ Prints \"min is -6 and max is 109\""]},{"anchor":"Funciones-Con-Devoluci%C3%B3n-Impl%C3%ADcita","type":"heading","text":"Funciones Con Devolución Implícita","level":3},{"type":"paragraph","inlineContent":[{"text":"If the entire body of the function is a single expression,","type":"text"},{"text":" ","type":"text"},{"text":"the function implicitly returns that expression.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"both functions below have the same behavior:"}]},{"code":["func greeting(for person: String) -> String {","    \"Hello, \" + person + \"!\"","}","print(greeting(for: \"Dave\"))","\/\/ Prints \"Hello, Dave!\"","","func anotherGreeting(for person: String) -> String {","    return \"Hello, \" + person + \"!\"","}","print(anotherGreeting(for: \"Dave\"))","\/\/ Prints \"Hello, Dave!\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The entire definition of the "},{"type":"codeVoice","code":"greeting(for:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"is the greeting message that it returns,"},{"text":" ","type":"text"},{"text":"which means it can use this shorter form.","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"anotherGreeting(for:)"},{"text":" function returns the same greeting message,","type":"text"},{"text":" ","type":"text"},{"text":"using the ","type":"text"},{"code":"return","type":"codeVoice"},{"type":"text","text":" keyword like a longer function."},{"text":" ","type":"text"},{"type":"text","text":"Any function that you write as just one "},{"code":"return","type":"codeVoice"},{"type":"text","text":" line can omit the "},{"type":"codeVoice","code":"return"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"As you’ll see in ","type":"text"},{"text":"doc:Properties#Declaración-Concisa-de-getters","type":"text"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"property getters can also use an implicit return."}],"type":"paragraph"},{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The code you write as an implicit return value"},{"text":" ","type":"text"},{"type":"text","text":"needs to return some value."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"text":"you can’t use ","type":"text"},{"type":"codeVoice","code":"print(13)"},{"type":"text","text":" "},{"text":"as an implicit return value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, you can use a function that never returns"},{"type":"text","text":" "},{"type":"text","text":"like "},{"code":"fatalError(\"Oh no!\")","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"as an implicit return value,"},{"type":"text","text":" "},{"type":"text","text":"because Swift knows that the implicit return doesn’t happen."}]}],"style":"note"},{"level":2,"text":"Etiquetas de Argumentos y Nombres de Parámetros de Funciones","type":"heading","anchor":"Etiquetas-de-Argumentos-y-Nombres-de-Par%C3%A1metros-de-Funciones"},{"inlineContent":[{"type":"text","text":"Each function parameter has both an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"argument label"}]},{"text":" ","type":"text"},{"type":"text","text":"and a "},{"type":"emphasis","inlineContent":[{"text":"parameter name","type":"text"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The argument label is used when calling the function;"},{"text":" ","type":"text"},{"text":"each argument is written in the function call with its argument label before it.","type":"text"},{"text":" ","type":"text"},{"text":"The parameter name is used in the implementation of the function.","type":"text"},{"type":"text","text":" "},{"text":"By default, parameters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"use their parameter name as their argument label."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func someFunction(firstParameterName: Int, secondParameterName: Int) {","    \/\/ In the function body, firstParameterName and secondParameterName","    \/\/ refer to the argument values for the first and second parameters.","}","someFunction(firstParameterName: 1, secondParameterName: 2)"]},{"inlineContent":[{"text":"All parameters must have unique names.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Although it’s possible for multiple parameters"},{"text":" ","type":"text"},{"type":"text","text":"to have the same argument label,"},{"type":"text","text":" "},{"type":"text","text":"unique argument labels help make your code more readable."}],"type":"paragraph"},{"type":"heading","text":"Especificando Etiquetas de Argumentos","anchor":"Especificando-Etiquetas-de-Argumentos","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"You write an argument label before the parameter name,"},{"text":" ","type":"text"},{"type":"text","text":"separated by a space:"}]},{"type":"codeListing","syntax":"swift","code":["func someFunction(argumentLabel parameterName: Int) {","    \/\/ In the function body, parameterName refers to the argument value","    \/\/ for that parameter.","}"]},{"type":"paragraph","inlineContent":[{"text":"Here’s a variation of the ","type":"text"},{"code":"greet(person:)","type":"codeVoice"},{"text":" function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that takes a person’s name and hometown"},{"text":" ","type":"text"},{"text":"and returns a greeting:","type":"text"}]},{"code":["func greet(person: String, from hometown: String) -> String {","    return \"Hello \\(person)!  Glad you could visit from \\(hometown).\"","}","print(greet(person: \"Bill\", from: \"Cupertino\"))","\/\/ Prints \"Hello Bill!  Glad you could visit from Cupertino.\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The use of argument labels can allow a function","type":"text"},{"text":" ","type":"text"},{"text":"to be called in an expressive, sentence-like manner,","type":"text"},{"text":" ","type":"text"},{"text":"while still providing a function body that’s readable and clear in intent.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"Omitiendo-Etiquetas-de-Argumentos","text":"Omitiendo Etiquetas de Argumentos","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"If you don’t want an argument label for a parameter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"write an underscore ("},{"type":"codeVoice","code":"_"},{"type":"text","text":") instead of an explicit argument label for that parameter."}]},{"syntax":"swift","code":["func someFunction(_ firstParameterName: Int, secondParameterName: Int) {","    \/\/ In the function body, firstParameterName and secondParameterName","    \/\/ refer to the argument values for the first and second parameters.","}","someFunction(1, secondParameterName: 2)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If a parameter has an argument label,","type":"text"},{"type":"text","text":" "},{"text":"the argument ","type":"text"},{"inlineContent":[{"type":"text","text":"must"}],"type":"emphasis"},{"type":"text","text":" be labeled when you call the function."}]},{"text":"Parámetros con valores predeterminados","level":3,"type":"heading","anchor":"Par%C3%A1metros-con-valores-predeterminados"},{"type":"paragraph","inlineContent":[{"text":"You can define a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"default value","type":"text"}]},{"type":"text","text":" for any parameter in a function"},{"type":"text","text":" "},{"type":"text","text":"by assigning a value to the parameter after that parameter’s type."},{"type":"text","text":" "},{"text":"If a default value is defined, you can omit that parameter when calling the function.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func someFunction(parameterWithoutDefault: Int, parameterWithDefault: Int = 12) {","    \/\/ If you omit the second argument when calling this function, then","    \/\/ the value of parameterWithDefault is 12 inside the function body.","}","someFunction(parameterWithoutDefault: 3, parameterWithDefault: 6) \/\/ parameterWithDefault is 6","someFunction(parameterWithoutDefault: 4) \/\/ parameterWithDefault is 12"]},{"type":"paragraph","inlineContent":[{"text":"Place parameters that don’t have default values","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"at the beginning of a function’s parameter list,"},{"type":"text","text":" "},{"type":"text","text":"before the parameters that have default values."},{"type":"text","text":" "},{"type":"text","text":"Parameters that don’t have default values"},{"text":" ","type":"text"},{"type":"text","text":"are usually more important to the function’s meaning —"},{"text":" ","type":"text"},{"type":"text","text":"writing them first makes it easier to recognize"},{"text":" ","type":"text"},{"type":"text","text":"that the same function is being called,"},{"type":"text","text":" "},{"text":"regardless of whether any default parameters are omitted.","type":"text"}]},{"level":3,"text":"Parámetros Variádicos","anchor":"Par%C3%A1metros-Vari%C3%A1dicos","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"variadic parameter"}]},{"type":"text","text":" accepts zero or more values of a specified type."},{"type":"text","text":" "},{"type":"text","text":"You use a variadic parameter to specify that the parameter can be passed"},{"text":" ","type":"text"},{"type":"text","text":"a varying number of input values when the function is called."},{"type":"text","text":" "},{"type":"text","text":"Write variadic parameters by inserting three period characters ("},{"code":"...","type":"codeVoice"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"after the parameter’s type name."}]},{"type":"paragraph","inlineContent":[{"text":"The values passed to a variadic parameter are made available within the function’s body","type":"text"},{"type":"text","text":" "},{"text":"as an array of the appropriate type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, a variadic parameter with a name of "},{"code":"numbers","type":"codeVoice"},{"type":"text","text":" and a type of "},{"code":"Double...","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"is made available within the function’s body as"},{"type":"text","text":" "},{"text":"a constant array called ","type":"text"},{"code":"numbers","type":"codeVoice"},{"type":"text","text":" of type "},{"type":"codeVoice","code":"[Double]"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"The example below calculates the "},{"inlineContent":[{"text":"arithmetic mean","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"(also known as the ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"average"}]},{"type":"text","text":") for a list of numbers of any length:"}],"type":"paragraph"},{"type":"codeListing","code":["func arithmeticMean(_ numbers: Double...) -> Double {","    var total: Double = 0","    for number in numbers {","        total += number","    }","    return total \/ Double(numbers.count)","}","arithmeticMean(1, 2, 3, 4, 5)","\/\/ returns 3.0, which is the arithmetic mean of these five numbers","arithmeticMean(3, 8.25, 18.75)","\/\/ returns 10.0, which is the arithmetic mean of these three numbers"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"A function can have multiple variadic parameters."},{"text":" ","type":"text"},{"type":"text","text":"The first parameter that comes after a variadic parameter"},{"type":"text","text":" "},{"type":"text","text":"must have an argument label."},{"type":"text","text":" "},{"text":"The argument label makes it unambiguous","type":"text"},{"text":" ","type":"text"},{"text":"which arguments are passed to the variadic parameter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and which arguments are passed to the parameters"},{"type":"text","text":" "},{"text":"that come after the variadic parameter.","type":"text"}],"type":"paragraph"},{"text":"Parámetros in-out","anchor":"Par%C3%A1metros-in-out","type":"heading","level":3},{"inlineContent":[{"text":"Function parameters are constants by default.","type":"text"},{"type":"text","text":" "},{"text":"Trying to change the value of a function parameter","type":"text"},{"text":" ","type":"text"},{"text":"from within the body of that function results in a compile-time error.","type":"text"},{"text":" ","type":"text"},{"text":"This means that you can’t change the value of a parameter by mistake.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you want a function to modify a parameter’s value,"},{"type":"text","text":" "},{"type":"text","text":"and you want those changes to persist after the function call has ended,"},{"type":"text","text":" "},{"type":"text","text":"define that parameter as an "},{"inlineContent":[{"text":"in-out parameter","type":"text"}],"type":"emphasis"},{"type":"text","text":" instead."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You write an in-out parameter by placing the ","type":"text"},{"code":"inout","type":"codeVoice"},{"text":" keyword","type":"text"},{"type":"text","text":" "},{"type":"text","text":"right before a parameter’s type."},{"text":" ","type":"text"},{"type":"text","text":"An in-out parameter has a value that’s passed "},{"inlineContent":[{"text":"in","type":"text"}],"type":"emphasis"},{"text":" to the function,","type":"text"},{"type":"text","text":" "},{"text":"is modified by the function,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and is passed back "},{"type":"emphasis","inlineContent":[{"text":"out","type":"text"}]},{"type":"text","text":" of the function to replace the original value."},{"type":"text","text":" "},{"text":"For a detailed discussion of the behavior of in-out parameters","type":"text"},{"text":" ","type":"text"},{"text":"and associated compiler optimizations,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Par%C3%A1metros-in-out","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"You can only pass a variable as the argument for an in-out parameter.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can’t pass a constant or a literal value as the argument,"},{"type":"text","text":" "},{"type":"text","text":"because constants and literals can’t be modified."},{"type":"text","text":" "},{"type":"text","text":"You place an ampersand ("},{"code":"&","type":"codeVoice"},{"text":") directly before a variable’s name","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when you pass it as an argument to an in-out parameter,"},{"text":" ","type":"text"},{"type":"text","text":"to indicate that it can be modified by the function."}]},{"style":"note","type":"aside","name":"Note","content":[{"inlineContent":[{"text":"In-out parameters can’t have default values,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and variadic parameters can’t be marked as "},{"code":"inout","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"inlineContent":[{"text":"Here’s an example of a function called ","type":"text"},{"code":"swapTwoInts(_:_:)","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which has two in-out integer parameters called "},{"code":"a","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"b"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["func swapTwoInts(_ a: inout Int, _ b: inout Int) {","    let temporaryA = a","    a = b","    b = temporaryA","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"swapTwoInts(_:_:)"},{"type":"text","text":" function simply swaps the value of "},{"code":"b","type":"codeVoice"},{"text":" into ","type":"text"},{"type":"codeVoice","code":"a"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the value of "},{"type":"codeVoice","code":"a"},{"type":"text","text":" into "},{"type":"codeVoice","code":"b"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The function performs this swap by storing the value of "},{"type":"codeVoice","code":"a"},{"text":" in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a temporary constant called "},{"code":"temporaryA","type":"codeVoice"},{"type":"text","text":", assigning the value of "},{"type":"codeVoice","code":"b"},{"type":"text","text":" to "},{"type":"codeVoice","code":"a"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and then assigning "},{"type":"codeVoice","code":"temporaryA"},{"type":"text","text":" to "},{"type":"codeVoice","code":"b"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You can call the ","type":"text"},{"code":"swapTwoInts(_:_:)","type":"codeVoice"},{"text":" function with two variables of type ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" ","type":"text"},{"text":"to swap their values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Note that the names of "},{"type":"codeVoice","code":"someInt"},{"type":"text","text":" and "},{"code":"anotherInt","type":"codeVoice"},{"type":"text","text":" are prefixed with an ampersand"},{"text":" ","type":"text"},{"type":"text","text":"when they’re passed to the "},{"type":"codeVoice","code":"swapTwoInts(_:_:)"},{"type":"text","text":" function:"}]},{"type":"codeListing","syntax":"swift","code":["var someInt = 3","var anotherInt = 107","swapTwoInts(&someInt, &anotherInt)","print(\"someInt is now \\(someInt), and anotherInt is now \\(anotherInt)\")","\/\/ Prints \"someInt is now 107, and anotherInt is now 3\""]},{"inlineContent":[{"text":"The example above shows that","type":"text"},{"type":"text","text":" "},{"text":"the original values of ","type":"text"},{"type":"codeVoice","code":"someInt"},{"text":" and ","type":"text"},{"code":"anotherInt","type":"codeVoice"},{"type":"text","text":" "},{"text":"are modified by the ","type":"text"},{"type":"codeVoice","code":"swapTwoInts(_:_:)"},{"type":"text","text":" function,"},{"type":"text","text":" "},{"type":"text","text":"even though they were originally defined outside of the function."}],"type":"paragraph"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In-out parameters aren’t the same as returning a value from a function."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"swapTwoInts"},{"text":" example above doesn’t define a return type or return a value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but it still modifies the values of "},{"code":"someInt","type":"codeVoice"},{"type":"text","text":" and "},{"code":"anotherInt","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"In-out parameters are an alternative way for a function to have an effect"},{"text":" ","type":"text"},{"text":"outside of the scope of its function body.","type":"text"}]}],"name":"Note","style":"note"},{"text":"Tipos de Funciones","type":"heading","level":2,"anchor":"Tipos-de-Funciones"},{"type":"paragraph","inlineContent":[{"text":"Every function has a specific ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"function type","type":"text"}]},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"made up of the parameter types and the return type of the function.","type":"text"}]},{"inlineContent":[{"type":"text","text":"For example:"}],"type":"paragraph"},{"syntax":"swift","code":["func addTwoInts(_ a: Int, _ b: Int) -> Int {","    return a + b","}","func multiplyTwoInts(_ a: Int, _ b: Int) -> Int {","    return a * b","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example defines two simple mathematical functions"},{"text":" ","type":"text"},{"text":"called ","type":"text"},{"type":"codeVoice","code":"addTwoInts"},{"type":"text","text":" and "},{"code":"multiplyTwoInts","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"These functions each take two "},{"code":"Int","type":"codeVoice"},{"text":" values,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and return an "},{"type":"codeVoice","code":"Int"},{"text":" value, which is the result of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"performing an appropriate mathematical operation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of both of these functions is "},{"type":"codeVoice","code":"(Int, Int) -> Int"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"This can be read as:"}]},{"inlineContent":[{"text":"“A function that has two parameters, both of type ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and that returns a value of type "},{"code":"Int","type":"codeVoice"},{"text":".”","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s another example, for a function with no parameters or return value:"}]},{"type":"codeListing","syntax":"swift","code":["func printHelloWorld() {","    print(\"hello, world\")","}"]},{"type":"paragraph","inlineContent":[{"text":"The type of this function is ","type":"text"},{"type":"codeVoice","code":"() -> Void"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or “a function that has no parameters, and returns "},{"type":"codeVoice","code":"Void"},{"type":"text","text":".”"}]},{"text":"Usando Tipos de Funciones","anchor":"Usando-Tipos-de-Funciones","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"You use function types just like any other types in Swift."},{"type":"text","text":" "},{"type":"text","text":"For example, you can define a constant or variable to be of a function type"},{"type":"text","text":" "},{"type":"text","text":"and assign an appropriate function to that variable:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var mathFunction: (Int, Int) -> Int = addTwoInts"]},{"inlineContent":[{"text":"This can be read as:","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"“Define a variable called ","type":"text"},{"code":"mathFunction","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which has a type of ‘a function that takes two "},{"type":"codeVoice","code":"Int"},{"text":" values,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and returns an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value.’"},{"text":" ","type":"text"},{"type":"text","text":"Set this new variable to refer to the function called "},{"type":"codeVoice","code":"addTwoInts"},{"type":"text","text":".”"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"addTwoInts(_:_:)"},{"type":"text","text":" function has the same type as the "},{"type":"codeVoice","code":"mathFunction"},{"text":" variable,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and so this assignment is allowed by Swift’s type-checker."}],"type":"paragraph"},{"inlineContent":[{"text":"You can now call the assigned function with the name ","type":"text"},{"code":"mathFunction","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["print(\"Result: \\(mathFunction(2, 3))\")","\/\/ Prints \"Result: 5\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"A different function with the same matching type can be assigned to the same variable,","type":"text"},{"text":" ","type":"text"},{"text":"in the same way as for nonfunction types:","type":"text"}],"type":"paragraph"},{"code":["mathFunction = multiplyTwoInts","print(\"Result: \\(mathFunction(2, 3))\")","\/\/ Prints \"Result: 6\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"As with any other type,","type":"text"},{"text":" ","type":"text"},{"text":"you can leave it to Swift to infer the function type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when you assign a function to a constant or variable:"}]},{"code":["let anotherMathFunction = addTwoInts","\/\/ anotherMathFunction is inferred to be of type (Int, Int) -> Int"],"type":"codeListing","syntax":"swift"},{"anchor":"Tipos-de-Funciones-Como-Tipos-de-Par%C3%A1metros","level":3,"type":"heading","text":"Tipos de Funciones Como Tipos de Parámetros"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use a function type such as "},{"type":"codeVoice","code":"(Int, Int) -> Int"},{"text":" ","type":"text"},{"text":"as a parameter type for another function.","type":"text"},{"type":"text","text":" "},{"text":"This enables you to leave some aspects of a function’s implementation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for the function’s caller to provide when the function is called."}]},{"inlineContent":[{"type":"text","text":"Here’s an example to print the results of the math functions from above:"}],"type":"paragraph"},{"type":"codeListing","code":["func printMathResult(_ mathFunction: (Int, Int) -> Int, _ a: Int, _ b: Int) {","    print(\"Result: \\(mathFunction(a, b))\")","}","printMathResult(addTwoInts, 3, 5)","\/\/ Prints \"Result: 8\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example defines a function called "},{"type":"codeVoice","code":"printMathResult(_:_:_:)"},{"text":", which has three parameters.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The first parameter is called "},{"code":"mathFunction","type":"codeVoice"},{"type":"text","text":", and is of type "},{"type":"codeVoice","code":"(Int, Int) -> Int"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"You can pass any function of that type as the argument for this first parameter."},{"text":" ","type":"text"},{"type":"text","text":"The second and third parameters are called "},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"code":"b","type":"codeVoice"},{"type":"text","text":", and are both of type "},{"code":"Int","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"These are used as the two input values for the provided math function.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"When ","type":"text"},{"code":"printMathResult(_:_:_:)","type":"codeVoice"},{"type":"text","text":" is called,"},{"type":"text","text":" "},{"type":"text","text":"it’s passed the "},{"type":"codeVoice","code":"addTwoInts(_:_:)"},{"type":"text","text":" function, and the integer values "},{"type":"codeVoice","code":"3"},{"type":"text","text":" and "},{"code":"5","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"It calls the provided function with the values ","type":"text"},{"code":"3","type":"codeVoice"},{"type":"text","text":" and "},{"code":"5","type":"codeVoice"},{"type":"text","text":", and prints the result of "},{"code":"8","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"The role of ","type":"text"},{"type":"codeVoice","code":"printMathResult(_:_:_:)"},{"type":"text","text":" is to print the result of"},{"text":" ","type":"text"},{"text":"a call to a math function of an appropriate type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It doesn’t matter what that function’s implementation actually does —"},{"type":"text","text":" "},{"type":"text","text":"it matters only that the function is of the correct type."},{"text":" ","type":"text"},{"text":"This enables ","type":"text"},{"type":"codeVoice","code":"printMathResult(_:_:_:)"},{"text":" to hand off some of its functionality","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the caller of the function in a type-safe way."}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"Tipos-de-Funciones-Como-Tipos-de-Devoluci%C3%B3n","text":"Tipos de Funciones Como Tipos de Devolución"},{"type":"paragraph","inlineContent":[{"text":"You can use a function type as the return type of another function.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You do this by writing a complete function type"},{"type":"text","text":" "},{"text":"immediately after the return arrow (","type":"text"},{"type":"codeVoice","code":"->"},{"text":") of the returning function.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The next example defines two simple functions called "},{"code":"stepForward(_:)","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"stepBackward(_:)","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"stepForward(_:)","type":"codeVoice"},{"text":" function returns a value one more than its input value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"type":"codeVoice","code":"stepBackward(_:)"},{"type":"text","text":" function returns a value one less than its input value."},{"type":"text","text":" "},{"type":"text","text":"Both functions have a type of "},{"code":"(Int) -> Int","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["func stepForward(_ input: Int) -> Int {","    return input + 1","}","func stepBackward(_ input: Int) -> Int {","    return input - 1","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s a function called "},{"code":"chooseStepFunction(backward:)","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"whose return type is "},{"code":"(Int) -> Int","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"chooseStepFunction(backward:)","type":"codeVoice"},{"type":"text","text":" function returns the "},{"type":"codeVoice","code":"stepForward(_:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"or the "},{"type":"codeVoice","code":"stepBackward(_:)"},{"text":" function based on a Boolean parameter called ","type":"text"},{"type":"codeVoice","code":"backward"},{"text":":","type":"text"}]},{"syntax":"swift","code":["func chooseStepFunction(backward: Bool) -> (Int) -> Int {","    return backward ? stepBackward : stepForward","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can now use ","type":"text"},{"type":"codeVoice","code":"chooseStepFunction(backward:)"},{"type":"text","text":" to obtain a function"},{"type":"text","text":" "},{"text":"that will step in one direction or the other:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["var currentValue = 3","let moveNearerToZero = chooseStepFunction(backward: currentValue > 0)","\/\/ moveNearerToZero now refers to the stepBackward() function"]},{"inlineContent":[{"type":"text","text":"The example above determines whether a positive or negative step is needed"},{"type":"text","text":" "},{"type":"text","text":"to move a variable called "},{"type":"codeVoice","code":"currentValue"},{"text":" progressively closer to zero.","type":"text"},{"type":"text","text":" "},{"code":"currentValue","type":"codeVoice"},{"text":" has an initial value of ","type":"text"},{"code":"3","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which means that "},{"type":"codeVoice","code":"currentValue > 0"},{"text":" returns ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"causing ","type":"text"},{"code":"chooseStepFunction(backward:)","type":"codeVoice"},{"text":" to return the ","type":"text"},{"code":"stepBackward(_:)","type":"codeVoice"},{"type":"text","text":" function."},{"type":"text","text":" "},{"text":"A reference to the returned function is stored in a constant called ","type":"text"},{"code":"moveNearerToZero","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"Now that ","type":"text"},{"type":"codeVoice","code":"moveNearerToZero"},{"type":"text","text":" refers to the correct function,"},{"text":" ","type":"text"},{"type":"text","text":"it can be used to count to zero:"}],"type":"paragraph"},{"code":["print(\"Counting to zero:\")","\/\/ Counting to zero:","while currentValue != 0 {","    print(\"\\(currentValue)... \")","    currentValue = moveNearerToZero(currentValue)","}","print(\"zero!\")","\/\/ 3...","\/\/ 2...","\/\/ 1...","\/\/ zero!"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"Funciones Anidadas","anchor":"Funciones-Anidadas","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of the functions you have encountered so far in this chapter"},{"text":" ","type":"text"},{"text":"have been examples of ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"global functions","type":"text"}]},{"text":", which are defined at a global scope.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can also define functions inside the bodies of other functions,"},{"type":"text","text":" "},{"text":"known as ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"nested functions","type":"text"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Nested functions are hidden from the outside world by default,","type":"text"},{"text":" ","type":"text"},{"text":"but can still be called and used by their enclosing function.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"An enclosing function can also return one of its nested functions"},{"type":"text","text":" "},{"text":"to allow the nested function to be used in another scope.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You can rewrite the ","type":"text"},{"type":"codeVoice","code":"chooseStepFunction(backward:)"},{"type":"text","text":" example above"},{"type":"text","text":" "},{"text":"to use and return nested functions:","type":"text"}]},{"type":"codeListing","code":["func chooseStepFunction(backward: Bool) -> (Int) -> Int {","    func stepForward(input: Int) -> Int { return input + 1 }","    func stepBackward(input: Int) -> Int { return input - 1 }","    return backward ? stepBackward : stepForward","}","var currentValue = -4","let moveNearerToZero = chooseStepFunction(backward: currentValue > 0)","\/\/ moveNearerToZero now refers to the nested stepForward() function","while currentValue != 0 {","    print(\"\\(currentValue)... \")","    currentValue = moveNearerToZero(currentValue)","}","print(\"zero!\")","\/\/ -4...","\/\/ -3...","\/\/ -2...","\/\/ -1...","\/\/ zero!"],"syntax":"swift"},{"name":"Software Beta","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"inlineContent":[{"type":"text","text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo."}],"type":"paragraph"},{"inlineContent":[{"text":"Conoce más acerca del uso del ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]}]}],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","interfaceLanguage":"swift"},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Par%C3%A1metros-in-out":{"kind":"section","title":"Parámetros in-out","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Par%C3%A1metros-in-out","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Par%C3%A1metros-in-out"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Etiquetas-de-Argumentos-y-Nombres-de-Par%C3%A1metros-de-Funciones":{"kind":"section","title":"Etiquetas de Argumentos y Nombres de Parámetros de Funciones","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Etiquetas-de-Argumentos-y-Nombres-de-Par%C3%A1metros-de-Funciones","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions#Etiquetas-de-Argumentos-y-Nombres-de-Par%C3%A1metros-de-Funciones"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"role":"collection","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","url":"\/documentation\/the-swift-programming-language","title":"The Swift Programming Language (6)","abstract":[],"type":"topic"},"https://developer.apple.com/es/support/beta-software/":{"titleInlineContent":[{"type":"text","text":"software beta de Apple"}],"title":"software beta de Apple","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"link","url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/"}}}
||||||| parent of 2fa5d86d (yet one more fix attempt)
{"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"title":"Funciones"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Define and call functions, label their arguments, and use their return values."}],"primaryContentSections":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Functions"}],"type":"emphasis"},{"type":"text","text":" are self-contained chunks of code that perform a specific task."},{"text":" ","type":"text"},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"text":"and this name is used to “call” the function to perform its task when needed.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Swift’s unified function syntax is flexible enough to express anything from"},{"text":" ","type":"text"},{"type":"text","text":"a simple C-style function with no parameter names"},{"text":" ","type":"text"},{"text":"to a complex Objective-C-style method","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with names and argument labels for each parameter."},{"text":" ","type":"text"},{"type":"text","text":"Parameters can provide default values to simplify function calls"},{"text":" ","type":"text"},{"type":"text","text":"and can be passed as in-out parameters,"},{"type":"text","text":" "},{"type":"text","text":"which modify a passed variable once the function has completed its execution."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Every function in Swift has a type,","type":"text"},{"type":"text","text":" "},{"text":"consisting of the function’s parameter types and return type.","type":"text"},{"text":" ","type":"text"},{"text":"You can use this type like any other type in Swift,","type":"text"},{"type":"text","text":" "},{"text":"which makes it easy to pass functions as parameters to other functions,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and to return functions from functions."},{"text":" ","type":"text"},{"text":"Functions can also be written within other functions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to encapsulate useful functionality within a nested function scope."}]},{"level":2,"text":"Definición e Invocación de Funciones","type":"heading","anchor":"Definici%C3%B3n-e-Invocaci%C3%B3n-de-Funciones"},{"inlineContent":[{"text":"When you define a function,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can optionally define one or more named, typed values that the function takes as input,"},{"type":"text","text":" "},{"text":"known as ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"parameters"}]},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"You can also optionally define"},{"text":" ","type":"text"},{"type":"text","text":"a type of value that the function will pass back as output when it’s done,"},{"type":"text","text":" "},{"type":"text","text":"known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"return type"}]},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"Every function has a ","type":"text"},{"inlineContent":[{"text":"function name","type":"text"}],"type":"emphasis"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which describes the task that the function performs."},{"type":"text","text":" "},{"type":"text","text":"To use a function, you “call” that function with its name"},{"text":" ","type":"text"},{"text":"and pass it input values (known as ","type":"text"},{"inlineContent":[{"type":"text","text":"arguments"}],"type":"emphasis"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"that match the types of the function’s parameters."},{"text":" ","type":"text"},{"text":"A function’s arguments must always be provided in the same order","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as the function’s parameter list."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The function in the example below is called "},{"type":"codeVoice","code":"greet(person:)"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"because that’s what it does —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it takes a person’s name as input and returns a greeting for that person."},{"text":" ","type":"text"},{"text":"To accomplish this, you define one input parameter —","type":"text"},{"type":"text","text":" "},{"text":"a ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" value called "},{"code":"person","type":"codeVoice"},{"text":" —","type":"text"},{"type":"text","text":" "},{"text":"and a return type of ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which will contain a greeting for that person:"}],"type":"paragraph"},{"code":["func greet(person: String) -> String {","    let greeting = \"Hello, \" + person + \"!\"","    return greeting","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"All of this information is rolled up into the function’s ","type":"text"},{"inlineContent":[{"text":"definition","type":"text"}],"type":"emphasis"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which is prefixed with the ","type":"text"},{"type":"codeVoice","code":"func"},{"text":" keyword.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You indicate the function’s return type with the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"return arrow"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"->"},{"type":"text","text":" "},{"type":"text","text":"(a hyphen followed by a right angle bracket),"},{"text":" ","type":"text"},{"type":"text","text":"which is followed by the name of the type to return."}]},{"type":"paragraph","inlineContent":[{"text":"The definition describes what the function does,","type":"text"},{"text":" ","type":"text"},{"text":"what it expects to receive,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and what it returns when it’s done."},{"text":" ","type":"text"},{"text":"The definition makes it easy for the function to be called unambiguously","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from elsewhere in your code:"}]},{"code":["print(greet(person: \"Anna\"))","\/\/ Prints \"Hello, Anna!\"","print(greet(person: \"Brian\"))","\/\/ Prints \"Hello, Brian!\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"You call the ","type":"text"},{"code":"greet(person:)","type":"codeVoice"},{"type":"text","text":" function"},{"text":" ","type":"text"},{"text":"by passing it a ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" value after the ","type":"text"},{"type":"codeVoice","code":"person"},{"type":"text","text":" argument label,"},{"text":" ","type":"text"},{"type":"text","text":"such as "},{"code":"greet(person: \"Anna\")","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Because the function returns a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value,"},{"text":" ","type":"text"},{"code":"greet(person:)","type":"codeVoice"},{"text":" can be wrapped in a call to the ","type":"text"},{"type":"codeVoice","code":"print(_:separator:terminator:)"},{"text":" function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to print that string and see its return value, as shown above."}],"type":"paragraph"},{"style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"print(_:separator:terminator:)","type":"codeVoice"},{"text":" function","type":"text"},{"type":"text","text":" "},{"text":"doesn’t have a label for its first argument,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and its other arguments are optional because they have a default value."},{"type":"text","text":" "},{"type":"text","text":"These variations on function syntax are discussed below"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Etiquetas-de-Argumentos-y-Nombres-de-Par%C3%A1metros-de-Funciones","isActive":true},{"type":"text","text":" "},{"text":"and ","type":"text"},{"text":"doc:Functions#Parámetros-Con-Valores-Predeterminados","type":"text"},{"type":"text","text":"."}]}],"type":"aside"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The body of the "},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":" function starts by"},{"text":" ","type":"text"},{"type":"text","text":"defining a new "},{"type":"codeVoice","code":"String"},{"text":" constant called ","type":"text"},{"code":"greeting","type":"codeVoice"},{"type":"text","text":" "},{"text":"and setting it to a simple greeting message.","type":"text"},{"text":" ","type":"text"},{"text":"This greeting is then passed back out of the function using the ","type":"text"},{"type":"codeVoice","code":"return"},{"text":" keyword.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In the line of code that says "},{"code":"return greeting","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"the function finishes its execution and returns the current value of "},{"code":"greeting","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can call the "},{"code":"greet(person:)","type":"codeVoice"},{"type":"text","text":" function multiple times with different input values."},{"type":"text","text":" "},{"type":"text","text":"The example above shows what happens if it’s called with an input value of "},{"type":"codeVoice","code":"\"Anna\""},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and an input value of ","type":"text"},{"code":"\"Brian\"","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"The function returns a tailored greeting in each case."}]},{"type":"paragraph","inlineContent":[{"text":"To make the body of this function shorter,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can combine the message creation and the return statement into one line:"}]},{"type":"codeListing","code":["func greetAgain(person: String) -> String {","    return \"Hello again, \" + person + \"!\"","}","print(greetAgain(person: \"Anna\"))","\/\/ Prints \"Hello again, Anna!\""],"syntax":"swift"},{"type":"heading","level":2,"anchor":"Par%C3%A1metros-de-Funciones-y-Valores-de-Devoluci%C3%B3n","text":"Parámetros de Funciones y Valores de Devolución"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Function parameters and return values are extremely flexible in Swift."},{"type":"text","text":" "},{"text":"You can define anything from a simple utility function with a single unnamed parameter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to a complex function with expressive parameter names and different parameter options."}]},{"level":3,"type":"heading","anchor":"Funciones-Sin-Par%C3%A1metros","text":"Funciones Sin Parámetros"},{"inlineContent":[{"text":"Functions aren’t required to define input parameters.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Here’s a function with no input parameters,"},{"text":" ","type":"text"},{"text":"which always returns the same ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" message whenever it’s called:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func sayHelloWorld() -> String {","    return \"hello, world\"","}","print(sayHelloWorld())","\/\/ Prints \"hello, world\""]},{"type":"paragraph","inlineContent":[{"text":"The function definition still needs parentheses after the function’s name,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"even though it doesn’t take any parameters."},{"type":"text","text":" "},{"text":"The function name is also followed by","type":"text"},{"type":"text","text":" "},{"text":"an empty pair of parentheses when the function is called.","type":"text"}]},{"type":"heading","anchor":"Funciones-Con-M%C3%BAltiples-Par%C3%A1metros","level":3,"text":"Funciones Con Múltiples Parámetros"},{"inlineContent":[{"type":"text","text":"Functions can have multiple input parameters,"},{"text":" ","type":"text"},{"text":"which are written within the function’s parentheses, separated by commas.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function takes a person’s name","type":"text"},{"type":"text","text":" "},{"text":"and whether they have already been greeted as input,","type":"text"},{"type":"text","text":" "},{"text":"and returns an appropriate greeting for that person:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func greet(person: String, alreadyGreeted: Bool) -> String {","    if alreadyGreeted {","        return greetAgain(person: person)","    } else {","        return greet(person: person)","    }","}","print(greet(person: \"Tim\", alreadyGreeted: true))","\/\/ Prints \"Hello again, Tim!\""]},{"type":"paragraph","inlineContent":[{"text":"You call the ","type":"text"},{"code":"greet(person:alreadyGreeted:)","type":"codeVoice"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"by passing it both a "},{"code":"String","type":"codeVoice"},{"text":" argument value labeled ","type":"text"},{"type":"codeVoice","code":"person"},{"text":" ","type":"text"},{"type":"text","text":"and a "},{"code":"Bool","type":"codeVoice"},{"text":" argument value labeled ","type":"text"},{"code":"alreadyGreeted","type":"codeVoice"},{"text":" ","type":"text"},{"text":"in parentheses, separated by commas.","type":"text"},{"type":"text","text":" "},{"text":"Note that this function is distinct from the ","type":"text"},{"code":"greet(person:)","type":"codeVoice"},{"type":"text","text":" function"},{"text":" ","type":"text"},{"type":"text","text":"shown in an earlier section."},{"text":" ","type":"text"},{"text":"Although both functions have names that begin with ","type":"text"},{"code":"greet","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"greet(person:alreadyGreeted:)","type":"codeVoice"},{"text":" function takes two arguments","type":"text"},{"type":"text","text":" "},{"text":"but the ","type":"text"},{"type":"codeVoice","code":"greet(person:)"},{"text":" function takes only one.","type":"text"}]},{"text":"Funciones Sin Valores de Devolución","type":"heading","level":3,"anchor":"Funciones-Sin-Valores-de-Devoluci%C3%B3n"},{"inlineContent":[{"type":"text","text":"Functions aren’t required to define a return type."},{"type":"text","text":" "},{"type":"text","text":"Here’s a version of the "},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":" function,"},{"type":"text","text":" "},{"text":"which prints its own ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" value rather than returning it:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["func greet(person: String) {","    print(\"Hello, \\(person)!\")","}","greet(person: \"Dave\")","\/\/ Prints \"Hello, Dave!\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Because it doesn’t need to return a value,"},{"type":"text","text":" "},{"type":"text","text":"the function’s definition doesn’t include the return arrow ("},{"code":"->","type":"codeVoice"},{"text":")","type":"text"},{"type":"text","text":" "},{"text":"or a return type.","type":"text"}],"type":"paragraph"},{"name":"Note","type":"aside","content":[{"inlineContent":[{"text":"Strictly speaking, this version of the ","type":"text"},{"code":"greet(person:)","type":"codeVoice"},{"type":"text","text":" function "},{"type":"emphasis","inlineContent":[{"text":"does","type":"text"}]},{"text":" still return a value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"even though no return value is defined."},{"type":"text","text":" "},{"type":"text","text":"Functions without a defined return type return a special value of type "},{"code":"Void","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"This is simply an empty tuple,"},{"text":" ","type":"text"},{"type":"text","text":"which is written as "},{"code":"()","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"style":"note"},{"inlineContent":[{"type":"text","text":"The return value of a function can be ignored when it’s called:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func printAndCount(string: String) -> Int {","    print(string)","    return string.count","}","func printWithoutCounting(string: String) {","    let _ = printAndCount(string: string)","}","printAndCount(string: \"hello, world\")","\/\/ prints \"hello, world\" and returns a value of 12","printWithoutCounting(string: \"hello, world\")","\/\/ prints \"hello, world\" but doesn't return a value"]},{"type":"paragraph","inlineContent":[{"text":"The first function, ","type":"text"},{"type":"codeVoice","code":"printAndCount(string:)"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"prints a string, and then returns its character count as an "},{"code":"Int","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The second function, "},{"code":"printWithoutCounting(string:)","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"calls the first function, but ignores its return value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When the second function is called,"},{"text":" ","type":"text"},{"type":"text","text":"the message is still printed by the first function,"},{"text":" ","type":"text"},{"type":"text","text":"but the returned value isn’t used."}]},{"name":"Note","type":"aside","content":[{"inlineContent":[{"text":"Return values can be ignored,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but a function that says it will return a value must always do so."},{"type":"text","text":" "},{"text":"A function with a defined return type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can’t allow control to fall out of the bottom of the function"},{"text":" ","type":"text"},{"text":"without returning a value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and attempting to do so will result in a compile-time error."}],"type":"paragraph"}],"style":"note"},{"anchor":"Funciones-que-devuelven-m%C3%BAltiples-valores","type":"heading","text":"Funciones que devuelven múltiples valores","level":3},{"type":"paragraph","inlineContent":[{"text":"You can use a tuple type as the return type for a function","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to return multiple values as part of one compound return value."}]},{"type":"paragraph","inlineContent":[{"text":"The example below defines a function called ","type":"text"},{"type":"codeVoice","code":"minMax(array:)"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which finds the smallest and largest numbers in an array of ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":" values:"}]},{"code":["func minMax(array: [Int]) -> (min: Int, max: Int) {","    var currentMin = array[0]","    var currentMax = array[0]","    for value in array[1..<array.count] {","        if value < currentMin {","            currentMin = value","        } else if value > currentMax {","            currentMax = value","        }","    }","    return (currentMin, currentMax)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"minMax(array:)","type":"codeVoice"},{"text":" function returns a tuple containing two ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"These values are labeled "},{"code":"min","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"max","type":"codeVoice"},{"type":"text","text":" "},{"text":"so that they can be accessed by name when querying the function’s return value.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The body of the "},{"type":"codeVoice","code":"minMax(array:)"},{"text":" function starts by setting","type":"text"},{"type":"text","text":" "},{"text":"two working variables called ","type":"text"},{"type":"codeVoice","code":"currentMin"},{"type":"text","text":" and "},{"type":"codeVoice","code":"currentMax"},{"type":"text","text":" "},{"type":"text","text":"to the value of the first integer in the array."},{"type":"text","text":" "},{"text":"The function then iterates over the remaining values in the array","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and checks each value to see if it’s smaller or larger than"},{"text":" ","type":"text"},{"type":"text","text":"the values of "},{"type":"codeVoice","code":"currentMin"},{"type":"text","text":" and "},{"code":"currentMax","type":"codeVoice"},{"text":" respectively.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Finally, the overall minimum and maximum values are returned as"},{"type":"text","text":" "},{"type":"text","text":"a tuple of two "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" values."}]},{"inlineContent":[{"type":"text","text":"Because the tuple’s member values are named as part of the function’s return type,"},{"type":"text","text":" "},{"text":"they can be accessed with dot syntax to retrieve the minimum and maximum found values:","type":"text"}],"type":"paragraph"},{"code":["let bounds = minMax(array: [8, -6, 2, 109, 3, 71])","print(\"min is \\(bounds.min) and max is \\(bounds.max)\")","\/\/ Prints \"min is -6 and max is 109\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the tuple’s members don’t need to be named"},{"type":"text","text":" "},{"text":"at the point that the tuple is returned from the function,","type":"text"},{"text":" ","type":"text"},{"text":"because their names are already specified as part of the function’s return type.","type":"text"}]},{"text":"Tipos Tupla de Devolución Opcionales","level":4,"anchor":"Tipos-Tupla-de-Devoluci%C3%B3n-Opcionales","type":"heading"},{"inlineContent":[{"text":"If the tuple type to be returned from a function","type":"text"},{"text":" ","type":"text"},{"text":"has the potential to have “no value” for the entire tuple,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can use an "},{"inlineContent":[{"text":"optional","type":"text"}],"type":"emphasis"},{"type":"text","text":" tuple return type to reflect the fact that"},{"type":"text","text":" "},{"text":"the entire tuple can be ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"You write an optional tuple return type by placing a question mark","type":"text"},{"type":"text","text":" "},{"text":"after the tuple type’s closing parenthesis,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"such as "},{"type":"codeVoice","code":"(Int, Int)?"},{"type":"text","text":" or "},{"code":"(String, Int, Bool)?","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"An optional tuple type such as ","type":"text"},{"type":"codeVoice","code":"(Int, Int)?"},{"text":" ","type":"text"},{"type":"text","text":"is different from a tuple that contains optional types"},{"type":"text","text":" "},{"text":"such as ","type":"text"},{"type":"codeVoice","code":"(Int?, Int?)"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"With an optional tuple type, the entire tuple is optional,"},{"type":"text","text":" "},{"type":"text","text":"not just each individual value within the tuple."}]}]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"minMax(array:)"},{"type":"text","text":" function above returns a tuple containing two "},{"code":"Int","type":"codeVoice"},{"text":" values.","type":"text"},{"text":" ","type":"text"},{"text":"However, the function doesn’t perform any safety checks on the array it’s passed.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If the "},{"code":"array","type":"codeVoice"},{"text":" argument contains an empty array,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"minMax(array:)","type":"codeVoice"},{"type":"text","text":" function, as defined above,"},{"text":" ","type":"text"},{"text":"will trigger a runtime error when attempting to access ","type":"text"},{"type":"codeVoice","code":"array[0]"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"To handle an empty array safely,","type":"text"},{"type":"text","text":" "},{"text":"write the ","type":"text"},{"type":"codeVoice","code":"minMax(array:)"},{"type":"text","text":" function with an optional tuple return type"},{"text":" ","type":"text"},{"text":"and return a value of ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" when the array is empty:"}],"type":"paragraph"},{"code":["func minMax(array: [Int]) -> (min: Int, max: Int)? {","    if array.isEmpty { return nil }","    var currentMin = array[0]","    var currentMax = array[0]","    for value in array[1..<array.count] {","        if value < currentMin {","            currentMin = value","        } else if value > currentMax {","            currentMax = value","        }","    }","    return (currentMin, currentMax)","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"You can use optional binding to check whether this version of the "},{"code":"minMax(array:)","type":"codeVoice"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"returns an actual tuple value or "},{"type":"codeVoice","code":"nil"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["if let bounds = minMax(array: [8, -6, 2, 109, 3, 71]) {","    print(\"min is \\(bounds.min) and max is \\(bounds.max)\")","}","\/\/ Prints \"min is -6 and max is 109\""]},{"anchor":"Funciones-Con-Devoluci%C3%B3n-Impl%C3%ADcita","text":"Funciones Con Devolución Implícita","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"If the entire body of the function is a single expression,"},{"text":" ","type":"text"},{"type":"text","text":"the function implicitly returns that expression."},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"both functions below have the same behavior:"}],"type":"paragraph"},{"code":["func greeting(for person: String) -> String {","    \"Hello, \" + person + \"!\"","}","print(greeting(for: \"Dave\"))","\/\/ Prints \"Hello, Dave!\"","","func anotherGreeting(for person: String) -> String {","    return \"Hello, \" + person + \"!\"","}","print(anotherGreeting(for: \"Dave\"))","\/\/ Prints \"Hello, Dave!\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The entire definition of the "},{"type":"codeVoice","code":"greeting(for:)"},{"type":"text","text":" function"},{"text":" ","type":"text"},{"text":"is the greeting message that it returns,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which means it can use this shorter form."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"anotherGreeting(for:)"},{"text":" function returns the same greeting message,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"using the "},{"type":"codeVoice","code":"return"},{"type":"text","text":" keyword like a longer function."},{"text":" ","type":"text"},{"text":"Any function that you write as just one ","type":"text"},{"type":"codeVoice","code":"return"},{"type":"text","text":" line can omit the "},{"type":"codeVoice","code":"return"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"As you’ll see in "},{"type":"text","text":"doc:Properties#Declaración-Concisa-de-getters"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"property getters can also use an implicit return.","type":"text"}],"type":"paragraph"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The code you write as an implicit return value"},{"text":" ","type":"text"},{"text":"needs to return some value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"you can’t use "},{"type":"codeVoice","code":"print(13)"},{"text":" ","type":"text"},{"type":"text","text":"as an implicit return value."},{"type":"text","text":" "},{"type":"text","text":"However, you can use a function that never returns"},{"type":"text","text":" "},{"type":"text","text":"like "},{"type":"codeVoice","code":"fatalError(\"Oh no!\")"},{"text":" ","type":"text"},{"text":"as an implicit return value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"because Swift knows that the implicit return doesn’t happen."}]}],"style":"note","name":"Note"},{"text":"Etiquetas de Argumentos y Nombres de Parámetros de Funciones","level":2,"type":"heading","anchor":"Etiquetas-de-Argumentos-y-Nombres-de-Par%C3%A1metros-de-Funciones"},{"type":"paragraph","inlineContent":[{"text":"Each function parameter has both an ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"argument label","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"and a "},{"type":"emphasis","inlineContent":[{"text":"parameter name","type":"text"}]},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The argument label is used when calling the function;"},{"type":"text","text":" "},{"text":"each argument is written in the function call with its argument label before it.","type":"text"},{"text":" ","type":"text"},{"text":"The parameter name is used in the implementation of the function.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"By default, parameters"},{"text":" ","type":"text"},{"type":"text","text":"use their parameter name as their argument label."}]},{"code":["func someFunction(firstParameterName: Int, secondParameterName: Int) {","    \/\/ In the function body, firstParameterName and secondParameterName","    \/\/ refer to the argument values for the first and second parameters.","}","someFunction(firstParameterName: 1, secondParameterName: 2)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"All parameters must have unique names.","type":"text"},{"type":"text","text":" "},{"text":"Although it’s possible for multiple parameters","type":"text"},{"type":"text","text":" "},{"text":"to have the same argument label,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"unique argument labels help make your code more readable."}]},{"level":3,"anchor":"Especificando-Etiquetas-de-Argumentos","text":"Especificando Etiquetas de Argumentos","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You write an argument label before the parameter name,"},{"type":"text","text":" "},{"type":"text","text":"separated by a space:"}]},{"type":"codeListing","syntax":"swift","code":["func someFunction(argumentLabel parameterName: Int) {","    \/\/ In the function body, parameterName refers to the argument value","    \/\/ for that parameter.","}"]},{"type":"paragraph","inlineContent":[{"text":"Here’s a variation of the ","type":"text"},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"that takes a person’s name and hometown"},{"type":"text","text":" "},{"text":"and returns a greeting:","type":"text"}]},{"code":["func greet(person: String, from hometown: String) -> String {","    return \"Hello \\(person)!  Glad you could visit from \\(hometown).\"","}","print(greet(person: \"Bill\", from: \"Cupertino\"))","\/\/ Prints \"Hello Bill!  Glad you could visit from Cupertino.\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The use of argument labels can allow a function","type":"text"},{"text":" ","type":"text"},{"text":"to be called in an expressive, sentence-like manner,","type":"text"},{"type":"text","text":" "},{"text":"while still providing a function body that’s readable and clear in intent.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Omitiendo-Etiquetas-de-Argumentos","text":"Omitiendo Etiquetas de Argumentos","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you don’t want an argument label for a parameter,"},{"text":" ","type":"text"},{"text":"write an underscore (","type":"text"},{"type":"codeVoice","code":"_"},{"text":") instead of an explicit argument label for that parameter.","type":"text"}]},{"code":["func someFunction(_ firstParameterName: Int, secondParameterName: Int) {","    \/\/ In the function body, firstParameterName and secondParameterName","    \/\/ refer to the argument values for the first and second parameters.","}","someFunction(1, secondParameterName: 2)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a parameter has an argument label,"},{"type":"text","text":" "},{"text":"the argument ","type":"text"},{"inlineContent":[{"text":"must","type":"text"}],"type":"emphasis"},{"type":"text","text":" be labeled when you call the function."}]},{"text":"Parámetros con valores predeterminados","type":"heading","level":3,"anchor":"Par%C3%A1metros-con-valores-predeterminados"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can define a "},{"inlineContent":[{"type":"text","text":"default value"}],"type":"emphasis"},{"text":" for any parameter in a function","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by assigning a value to the parameter after that parameter’s type."},{"type":"text","text":" "},{"type":"text","text":"If a default value is defined, you can omit that parameter when calling the function."}]},{"type":"codeListing","syntax":"swift","code":["func someFunction(parameterWithoutDefault: Int, parameterWithDefault: Int = 12) {","    \/\/ If you omit the second argument when calling this function, then","    \/\/ the value of parameterWithDefault is 12 inside the function body.","}","someFunction(parameterWithoutDefault: 3, parameterWithDefault: 6) \/\/ parameterWithDefault is 6","someFunction(parameterWithoutDefault: 4) \/\/ parameterWithDefault is 12"]},{"inlineContent":[{"type":"text","text":"Place parameters that don’t have default values"},{"type":"text","text":" "},{"text":"at the beginning of a function’s parameter list,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"before the parameters that have default values."},{"type":"text","text":" "},{"text":"Parameters that don’t have default values","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are usually more important to the function’s meaning —"},{"text":" ","type":"text"},{"type":"text","text":"writing them first makes it easier to recognize"},{"text":" ","type":"text"},{"text":"that the same function is being called,","type":"text"},{"text":" ","type":"text"},{"text":"regardless of whether any default parameters are omitted.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"Parámetros Variádicos","anchor":"Par%C3%A1metros-Vari%C3%A1dicos"},{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"variadic parameter"}]},{"type":"text","text":" accepts zero or more values of a specified type."},{"text":" ","type":"text"},{"type":"text","text":"You use a variadic parameter to specify that the parameter can be passed"},{"type":"text","text":" "},{"text":"a varying number of input values when the function is called.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Write variadic parameters by inserting three period characters ("},{"type":"codeVoice","code":"..."},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"after the parameter’s type name.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The values passed to a variadic parameter are made available within the function’s body"},{"type":"text","text":" "},{"type":"text","text":"as an array of the appropriate type."},{"text":" ","type":"text"},{"type":"text","text":"For example, a variadic parameter with a name of "},{"code":"numbers","type":"codeVoice"},{"type":"text","text":" and a type of "},{"type":"codeVoice","code":"Double..."},{"type":"text","text":" "},{"text":"is made available within the function’s body as","type":"text"},{"text":" ","type":"text"},{"text":"a constant array called ","type":"text"},{"type":"codeVoice","code":"numbers"},{"text":" of type ","type":"text"},{"code":"[Double]","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The example below calculates the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"arithmetic mean"}]},{"text":" ","type":"text"},{"type":"text","text":"(also known as the "},{"inlineContent":[{"type":"text","text":"average"}],"type":"emphasis"},{"type":"text","text":") for a list of numbers of any length:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func arithmeticMean(_ numbers: Double...) -> Double {","    var total: Double = 0","    for number in numbers {","        total += number","    }","    return total \/ Double(numbers.count)","}","arithmeticMean(1, 2, 3, 4, 5)","\/\/ returns 3.0, which is the arithmetic mean of these five numbers","arithmeticMean(3, 8.25, 18.75)","\/\/ returns 10.0, which is the arithmetic mean of these three numbers"]},{"inlineContent":[{"type":"text","text":"A function can have multiple variadic parameters."},{"type":"text","text":" "},{"text":"The first parameter that comes after a variadic parameter","type":"text"},{"text":" ","type":"text"},{"text":"must have an argument label.","type":"text"},{"type":"text","text":" "},{"text":"The argument label makes it unambiguous","type":"text"},{"text":" ","type":"text"},{"text":"which arguments are passed to the variadic parameter","type":"text"},{"type":"text","text":" "},{"text":"and which arguments are passed to the parameters","type":"text"},{"type":"text","text":" "},{"text":"that come after the variadic parameter.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Parámetros in-out","anchor":"Par%C3%A1metros-in-out","level":3},{"type":"paragraph","inlineContent":[{"text":"Function parameters are constants by default.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Trying to change the value of a function parameter"},{"type":"text","text":" "},{"text":"from within the body of that function results in a compile-time error.","type":"text"},{"text":" ","type":"text"},{"text":"This means that you can’t change the value of a parameter by mistake.","type":"text"},{"text":" ","type":"text"},{"text":"If you want a function to modify a parameter’s value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and you want those changes to persist after the function call has ended,"},{"type":"text","text":" "},{"type":"text","text":"define that parameter as an "},{"inlineContent":[{"type":"text","text":"in-out parameter"}],"type":"emphasis"},{"text":" instead.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You write an in-out parameter by placing the "},{"code":"inout","type":"codeVoice"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"right before a parameter’s type."},{"type":"text","text":" "},{"type":"text","text":"An in-out parameter has a value that’s passed "},{"inlineContent":[{"text":"in","type":"text"}],"type":"emphasis"},{"text":" to the function,","type":"text"},{"type":"text","text":" "},{"text":"is modified by the function,","type":"text"},{"type":"text","text":" "},{"text":"and is passed back ","type":"text"},{"inlineContent":[{"text":"out","type":"text"}],"type":"emphasis"},{"type":"text","text":" of the function to replace the original value."},{"type":"text","text":" "},{"text":"For a detailed discussion of the behavior of in-out parameters","type":"text"},{"text":" ","type":"text"},{"text":"and associated compiler optimizations,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Par%C3%A1metros-in-out"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"You can only pass a variable as the argument for an in-out parameter.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You can’t pass a constant or a literal value as the argument,"},{"text":" ","type":"text"},{"text":"because constants and literals can’t be modified.","type":"text"},{"text":" ","type":"text"},{"text":"You place an ampersand (","type":"text"},{"code":"&","type":"codeVoice"},{"type":"text","text":") directly before a variable’s name"},{"type":"text","text":" "},{"text":"when you pass it as an argument to an in-out parameter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to indicate that it can be modified by the function."}]},{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"In-out parameters can’t have default values,"},{"type":"text","text":" "},{"text":"and variadic parameters can’t be marked as ","type":"text"},{"type":"codeVoice","code":"inout"},{"type":"text","text":"."}],"type":"paragraph"}],"style":"note","type":"aside"},{"inlineContent":[{"text":"Here’s an example of a function called ","type":"text"},{"code":"swapTwoInts(_:_:)","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which has two in-out integer parameters called "},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"code":"b","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func swapTwoInts(_ a: inout Int, _ b: inout Int) {","    let temporaryA = a","    a = b","    b = temporaryA","}"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"swapTwoInts(_:_:)"},{"text":" function simply swaps the value of ","type":"text"},{"type":"codeVoice","code":"b"},{"text":" into ","type":"text"},{"type":"codeVoice","code":"a"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and the value of ","type":"text"},{"code":"a","type":"codeVoice"},{"type":"text","text":" into "},{"code":"b","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The function performs this swap by storing the value of ","type":"text"},{"code":"a","type":"codeVoice"},{"type":"text","text":" in"},{"type":"text","text":" "},{"text":"a temporary constant called ","type":"text"},{"type":"codeVoice","code":"temporaryA"},{"text":", assigning the value of ","type":"text"},{"type":"codeVoice","code":"b"},{"type":"text","text":" to "},{"code":"a","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and then assigning ","type":"text"},{"type":"codeVoice","code":"temporaryA"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"b"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"You can call the "},{"code":"swapTwoInts(_:_:)","type":"codeVoice"},{"text":" function with two variables of type ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" ","type":"text"},{"text":"to swap their values.","type":"text"},{"text":" ","type":"text"},{"text":"Note that the names of ","type":"text"},{"code":"someInt","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"anotherInt"},{"text":" are prefixed with an ampersand","type":"text"},{"text":" ","type":"text"},{"text":"when they’re passed to the ","type":"text"},{"code":"swapTwoInts(_:_:)","type":"codeVoice"},{"text":" function:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var someInt = 3","var anotherInt = 107","swapTwoInts(&someInt, &anotherInt)","print(\"someInt is now \\(someInt), and anotherInt is now \\(anotherInt)\")","\/\/ Prints \"someInt is now 107, and anotherInt is now 3\""]},{"inlineContent":[{"text":"The example above shows that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the original values of "},{"code":"someInt","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"anotherInt"},{"type":"text","text":" "},{"text":"are modified by the ","type":"text"},{"type":"codeVoice","code":"swapTwoInts(_:_:)"},{"type":"text","text":" function,"},{"type":"text","text":" "},{"type":"text","text":"even though they were originally defined outside of the function."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"text":"In-out parameters aren’t the same as returning a value from a function.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"swapTwoInts","type":"codeVoice"},{"type":"text","text":" example above doesn’t define a return type or return a value,"},{"type":"text","text":" "},{"type":"text","text":"but it still modifies the values of "},{"code":"someInt","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"anotherInt"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"In-out parameters are an alternative way for a function to have an effect"},{"type":"text","text":" "},{"type":"text","text":"outside of the scope of its function body."}]}],"style":"note","name":"Note","type":"aside"},{"type":"heading","level":2,"anchor":"Tipos-de-Funciones","text":"Tipos de Funciones"},{"inlineContent":[{"type":"text","text":"Every function has a specific "},{"inlineContent":[{"text":"function type","type":"text"}],"type":"emphasis"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"made up of the parameter types and the return type of the function.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example:"}]},{"code":["func addTwoInts(_ a: Int, _ b: Int) -> Int {","    return a + b","}","func multiplyTwoInts(_ a: Int, _ b: Int) -> Int {","    return a * b","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"This example defines two simple mathematical functions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"called "},{"type":"codeVoice","code":"addTwoInts"},{"type":"text","text":" and "},{"type":"codeVoice","code":"multiplyTwoInts"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"These functions each take two "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values,"},{"type":"text","text":" "},{"text":"and return an ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" value, which is the result of","type":"text"},{"text":" ","type":"text"},{"text":"performing an appropriate mathematical operation.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The type of both of these functions is ","type":"text"},{"code":"(Int, Int) -> Int","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"This can be read as:","type":"text"}]},{"inlineContent":[{"text":"“A function that has two parameters, both of type ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and that returns a value of type ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":".”","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s another example, for a function with no parameters or return value:"}]},{"syntax":"swift","type":"codeListing","code":["func printHelloWorld() {","    print(\"hello, world\")","}"]},{"type":"paragraph","inlineContent":[{"text":"The type of this function is ","type":"text"},{"type":"codeVoice","code":"() -> Void"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"or “a function that has no parameters, and returns "},{"code":"Void","type":"codeVoice"},{"type":"text","text":".”"}]},{"anchor":"Usando-Tipos-de-Funciones","type":"heading","text":"Usando Tipos de Funciones","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use function types just like any other types in Swift."},{"type":"text","text":" "},{"type":"text","text":"For example, you can define a constant or variable to be of a function type"},{"text":" ","type":"text"},{"type":"text","text":"and assign an appropriate function to that variable:"}]},{"type":"codeListing","syntax":"swift","code":["var mathFunction: (Int, Int) -> Int = addTwoInts"]},{"type":"paragraph","inlineContent":[{"text":"This can be read as:","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"“Define a variable called "},{"type":"codeVoice","code":"mathFunction"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which has a type of ‘a function that takes two "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values,"},{"type":"text","text":" "},{"type":"text","text":"and returns an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value.’"},{"type":"text","text":" "},{"type":"text","text":"Set this new variable to refer to the function called "},{"type":"codeVoice","code":"addTwoInts"},{"text":".”","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"addTwoInts(_:_:)"},{"text":" function has the same type as the ","type":"text"},{"type":"codeVoice","code":"mathFunction"},{"type":"text","text":" variable,"},{"text":" ","type":"text"},{"text":"and so this assignment is allowed by Swift’s type-checker.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now call the assigned function with the name "},{"type":"codeVoice","code":"mathFunction"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["print(\"Result: \\(mathFunction(2, 3))\")","\/\/ Prints \"Result: 5\""]},{"inlineContent":[{"type":"text","text":"A different function with the same matching type can be assigned to the same variable,"},{"type":"text","text":" "},{"text":"in the same way as for nonfunction types:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["mathFunction = multiplyTwoInts","print(\"Result: \\(mathFunction(2, 3))\")","\/\/ Prints \"Result: 6\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with any other type,"},{"text":" ","type":"text"},{"text":"you can leave it to Swift to infer the function type","type":"text"},{"text":" ","type":"text"},{"text":"when you assign a function to a constant or variable:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let anotherMathFunction = addTwoInts","\/\/ anotherMathFunction is inferred to be of type (Int, Int) -> Int"]},{"anchor":"Tipos-de-Funciones-Como-Tipos-de-Par%C3%A1metros","type":"heading","text":"Tipos de Funciones Como Tipos de Parámetros","level":3},{"type":"paragraph","inlineContent":[{"text":"You can use a function type such as ","type":"text"},{"type":"codeVoice","code":"(Int, Int) -> Int"},{"text":" ","type":"text"},{"text":"as a parameter type for another function.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This enables you to leave some aspects of a function’s implementation"},{"type":"text","text":" "},{"text":"for the function’s caller to provide when the function is called.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Here’s an example to print the results of the math functions from above:"}],"type":"paragraph"},{"syntax":"swift","code":["func printMathResult(_ mathFunction: (Int, Int) -> Int, _ a: Int, _ b: Int) {","    print(\"Result: \\(mathFunction(a, b))\")","}","printMathResult(addTwoInts, 3, 5)","\/\/ Prints \"Result: 8\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example defines a function called "},{"type":"codeVoice","code":"printMathResult(_:_:_:)"},{"type":"text","text":", which has three parameters."},{"type":"text","text":" "},{"type":"text","text":"The first parameter is called "},{"code":"mathFunction","type":"codeVoice"},{"type":"text","text":", and is of type "},{"code":"(Int, Int) -> Int","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"You can pass any function of that type as the argument for this first parameter.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The second and third parameters are called "},{"code":"a","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"b"},{"text":", and are both of type ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These are used as the two input values for the provided math function."}]},{"inlineContent":[{"text":"When ","type":"text"},{"type":"codeVoice","code":"printMathResult(_:_:_:)"},{"text":" is called,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it’s passed the "},{"code":"addTwoInts(_:_:)","type":"codeVoice"},{"type":"text","text":" function, and the integer values "},{"type":"codeVoice","code":"3"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"5"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"It calls the provided function with the values ","type":"text"},{"code":"3","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"5"},{"text":", and prints the result of ","type":"text"},{"type":"codeVoice","code":"8"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The role of "},{"code":"printMathResult(_:_:_:)","type":"codeVoice"},{"text":" is to print the result of","type":"text"},{"text":" ","type":"text"},{"text":"a call to a math function of an appropriate type.","type":"text"},{"text":" ","type":"text"},{"text":"It doesn’t matter what that function’s implementation actually does —","type":"text"},{"type":"text","text":" "},{"text":"it matters only that the function is of the correct type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This enables "},{"type":"codeVoice","code":"printMathResult(_:_:_:)"},{"text":" to hand off some of its functionality","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the caller of the function in a type-safe way."}]},{"anchor":"Tipos-de-Funciones-Como-Tipos-de-Devoluci%C3%B3n","text":"Tipos de Funciones Como Tipos de Devolución","type":"heading","level":3},{"inlineContent":[{"text":"You can use a function type as the return type of another function.","type":"text"},{"text":" ","type":"text"},{"text":"You do this by writing a complete function type","type":"text"},{"text":" ","type":"text"},{"text":"immediately after the return arrow (","type":"text"},{"code":"->","type":"codeVoice"},{"type":"text","text":") of the returning function."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The next example defines two simple functions called "},{"type":"codeVoice","code":"stepForward(_:)"},{"type":"text","text":" and "},{"code":"stepBackward(_:)","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"stepForward(_:)"},{"type":"text","text":" function returns a value one more than its input value,"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"code":"stepBackward(_:)","type":"codeVoice"},{"type":"text","text":" function returns a value one less than its input value."},{"type":"text","text":" "},{"text":"Both functions have a type of ","type":"text"},{"type":"codeVoice","code":"(Int) -> Int"},{"text":":","type":"text"}]},{"code":["func stepForward(_ input: Int) -> Int {","    return input + 1","}","func stepBackward(_ input: Int) -> Int {","    return input - 1","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Here’s a function called "},{"code":"chooseStepFunction(backward:)","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"whose return type is ","type":"text"},{"code":"(Int) -> Int","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"chooseStepFunction(backward:)"},{"text":" function returns the ","type":"text"},{"type":"codeVoice","code":"stepForward(_:)"},{"text":" function","type":"text"},{"text":" ","type":"text"},{"text":"or the ","type":"text"},{"type":"codeVoice","code":"stepBackward(_:)"},{"type":"text","text":" function based on a Boolean parameter called "},{"type":"codeVoice","code":"backward"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["func chooseStepFunction(backward: Bool) -> (Int) -> Int {","    return backward ? stepBackward : stepForward","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"You can now use "},{"code":"chooseStepFunction(backward:)","type":"codeVoice"},{"type":"text","text":" to obtain a function"},{"text":" ","type":"text"},{"text":"that will step in one direction or the other:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var currentValue = 3","let moveNearerToZero = chooseStepFunction(backward: currentValue > 0)","\/\/ moveNearerToZero now refers to the stepBackward() function"]},{"type":"paragraph","inlineContent":[{"text":"The example above determines whether a positive or negative step is needed","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to move a variable called "},{"type":"codeVoice","code":"currentValue"},{"type":"text","text":" progressively closer to zero."},{"type":"text","text":" "},{"type":"codeVoice","code":"currentValue"},{"text":" has an initial value of ","type":"text"},{"code":"3","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which means that "},{"code":"currentValue > 0","type":"codeVoice"},{"type":"text","text":" returns "},{"type":"codeVoice","code":"true"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"causing "},{"type":"codeVoice","code":"chooseStepFunction(backward:)"},{"type":"text","text":" to return the "},{"code":"stepBackward(_:)","type":"codeVoice"},{"text":" function.","type":"text"},{"type":"text","text":" "},{"text":"A reference to the returned function is stored in a constant called ","type":"text"},{"type":"codeVoice","code":"moveNearerToZero"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"Now that "},{"type":"codeVoice","code":"moveNearerToZero"},{"type":"text","text":" refers to the correct function,"},{"text":" ","type":"text"},{"type":"text","text":"it can be used to count to zero:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["print(\"Counting to zero:\")","\/\/ Counting to zero:","while currentValue != 0 {","    print(\"\\(currentValue)... \")","    currentValue = moveNearerToZero(currentValue)","}","print(\"zero!\")","\/\/ 3...","\/\/ 2...","\/\/ 1...","\/\/ zero!"]},{"level":2,"type":"heading","anchor":"Funciones-Anidadas","text":"Funciones Anidadas"},{"type":"paragraph","inlineContent":[{"text":"All of the functions you have encountered so far in this chapter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"have been examples of "},{"type":"emphasis","inlineContent":[{"type":"text","text":"global functions"}]},{"type":"text","text":", which are defined at a global scope."},{"text":" ","type":"text"},{"type":"text","text":"You can also define functions inside the bodies of other functions,"},{"text":" ","type":"text"},{"type":"text","text":"known as "},{"type":"emphasis","inlineContent":[{"text":"nested functions","type":"text"}]},{"type":"text","text":"."}]},{"inlineContent":[{"text":"Nested functions are hidden from the outside world by default,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but can still be called and used by their enclosing function."},{"type":"text","text":" "},{"text":"An enclosing function can also return one of its nested functions","type":"text"},{"text":" ","type":"text"},{"text":"to allow the nested function to be used in another scope.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can rewrite the "},{"code":"chooseStepFunction(backward:)","type":"codeVoice"},{"text":" example above","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to use and return nested functions:"}],"type":"paragraph"},{"syntax":"swift","code":["func chooseStepFunction(backward: Bool) -> (Int) -> Int {","    func stepForward(input: Int) -> Int { return input + 1 }","    func stepBackward(input: Int) -> Int { return input - 1 }","    return backward ? stepBackward : stepForward","}","var currentValue = -4","let moveNearerToZero = chooseStepFunction(backward: currentValue > 0)","\/\/ moveNearerToZero now refers to the nested stepForward() function","while currentValue != 0 {","    print(\"\\(currentValue)... \")","    currentValue = moveNearerToZero(currentValue)","}","print(\"zero!\")","\/\/ -4...","\/\/ -3...","\/\/ -2...","\/\/ -1...","\/\/ zero!"],"type":"codeListing"},{"type":"aside","name":"Software Beta","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Conoce más acerca del uso del "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}],"style":"note"}],"kind":"content"}],"sections":[],"kind":"article","references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Par%C3%A1metros-in-out":{"abstract":[],"type":"topic","title":"Parámetros in-out","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Par%C3%A1metros-in-out","url":"\/documentation\/the-swift-programming-language\/declarations#Par%C3%A1metros-in-out","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","role":"collection","url":"\/documentation\/the-swift-programming-language","abstract":[],"title":"The Swift Programming Language (6)","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Etiquetas-de-Argumentos-y-Nombres-de-Par%C3%A1metros-de-Funciones":{"abstract":[],"type":"topic","title":"Etiquetas de Argumentos y Nombres de Parámetros de Funciones","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Etiquetas-de-Argumentos-y-Nombres-de-Par%C3%A1metros-de-Funciones","url":"\/documentation\/the-swift-programming-language\/functions#Etiquetas-de-Argumentos-y-Nombres-de-Par%C3%A1metros-de-Funciones","kind":"section"},"https://developer.apple.com/es/support/beta-software/":{"type":"link","title":"software beta de Apple","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","titleInlineContent":[{"text":"software beta de Apple","type":"text"}]}}}
=======
{"sections":[],"abstract":[{"type":"text","text":"Define and call functions, label their arguments, and use their return values."}],"primaryContentSections":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Functions"}],"type":"emphasis"},{"text":" are self-contained chunks of code that perform a specific task.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You give a function a name that identifies what it does,"},{"type":"text","text":" "},{"type":"text","text":"and this name is used to “call” the function to perform its task when needed."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s unified function syntax is flexible enough to express anything from"},{"type":"text","text":" "},{"type":"text","text":"a simple C-style function with no parameter names"},{"type":"text","text":" "},{"type":"text","text":"to a complex Objective-C-style method"},{"type":"text","text":" "},{"type":"text","text":"with names and argument labels for each parameter."},{"type":"text","text":" "},{"text":"Parameters can provide default values to simplify function calls","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and can be passed as in-out parameters,"},{"type":"text","text":" "},{"text":"which modify a passed variable once the function has completed its execution.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Every function in Swift has a type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"consisting of the function’s parameter types and return type."},{"type":"text","text":" "},{"text":"You can use this type like any other type in Swift,","type":"text"},{"text":" ","type":"text"},{"text":"which makes it easy to pass functions as parameters to other functions,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and to return functions from functions."},{"type":"text","text":" "},{"text":"Functions can also be written within other functions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to encapsulate useful functionality within a nested function scope."}]},{"anchor":"Definici%C3%B3n-e-Invocaci%C3%B3n-de-Funciones","level":2,"type":"heading","text":"Definición e Invocación de Funciones"},{"type":"paragraph","inlineContent":[{"text":"When you define a function,","type":"text"},{"type":"text","text":" "},{"text":"you can optionally define one or more named, typed values that the function takes as input,","type":"text"},{"text":" ","type":"text"},{"text":"known as ","type":"text"},{"inlineContent":[{"type":"text","text":"parameters"}],"type":"emphasis"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"You can also optionally define","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a type of value that the function will pass back as output when it’s done,"},{"type":"text","text":" "},{"type":"text","text":"known as its "},{"inlineContent":[{"text":"return type","type":"text"}],"type":"emphasis"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"Every function has a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"function name"}]},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which describes the task that the function performs.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"To use a function, you “call” that function with its name"},{"text":" ","type":"text"},{"text":"and pass it input values (known as ","type":"text"},{"inlineContent":[{"text":"arguments","type":"text"}],"type":"emphasis"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"that match the types of the function’s parameters."},{"text":" ","type":"text"},{"type":"text","text":"A function’s arguments must always be provided in the same order"},{"type":"text","text":" "},{"type":"text","text":"as the function’s parameter list."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The function in the example below is called "},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"because that’s what it does —"},{"type":"text","text":" "},{"text":"it takes a person’s name as input and returns a greeting for that person.","type":"text"},{"type":"text","text":" "},{"text":"To accomplish this, you define one input parameter —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value called "},{"code":"person","type":"codeVoice"},{"type":"text","text":" —"},{"text":" ","type":"text"},{"type":"text","text":"and a return type of "},{"type":"codeVoice","code":"String"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which will contain a greeting for that person:"}]},{"code":["func greet(person: String) -> String {","    let greeting = \"Hello, \" + person + \"!\"","    return greeting","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"All of this information is rolled up into the function’s ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"definition"}]},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which is prefixed with the "},{"type":"codeVoice","code":"func"},{"text":" keyword.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You indicate the function’s return type with the "},{"inlineContent":[{"text":"return arrow","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"code":"->","type":"codeVoice"},{"type":"text","text":" "},{"text":"(a hyphen followed by a right angle bracket),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which is followed by the name of the type to return."}]},{"type":"paragraph","inlineContent":[{"text":"The definition describes what the function does,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"what it expects to receive,"},{"type":"text","text":" "},{"type":"text","text":"and what it returns when it’s done."},{"text":" ","type":"text"},{"type":"text","text":"The definition makes it easy for the function to be called unambiguously"},{"text":" ","type":"text"},{"type":"text","text":"from elsewhere in your code:"}]},{"code":["print(greet(person: \"Anna\"))","\/\/ Prints \"Hello, Anna!\"","print(greet(person: \"Brian\"))","\/\/ Prints \"Hello, Brian!\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You call the "},{"type":"codeVoice","code":"greet(person:)"},{"text":" function","type":"text"},{"text":" ","type":"text"},{"text":"by passing it a ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" value after the "},{"type":"codeVoice","code":"person"},{"text":" argument label,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"greet(person: \"Anna\")"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Because the function returns a ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" value,"},{"type":"text","text":" "},{"type":"codeVoice","code":"greet(person:)"},{"text":" can be wrapped in a call to the ","type":"text"},{"code":"print(_:separator:terminator:)","type":"codeVoice"},{"text":" function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to print that string and see its return value, as shown above."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"print(_:separator:terminator:)"},{"text":" function","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"doesn’t have a label for its first argument,"},{"type":"text","text":" "},{"text":"and its other arguments are optional because they have a default value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"These variations on function syntax are discussed below"},{"type":"text","text":" "},{"type":"text","text":"in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Etiquetas-de-Argumentos-y-Nombres-de-Par%C3%A1metros-de-Funciones","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"text","text":"doc:Functions#Parámetros-Con-Valores-Predeterminados"},{"type":"text","text":"."}]}],"type":"aside","name":"Note"},{"inlineContent":[{"type":"text","text":"The body of the "},{"code":"greet(person:)","type":"codeVoice"},{"type":"text","text":" function starts by"},{"type":"text","text":" "},{"type":"text","text":"defining a new "},{"type":"codeVoice","code":"String"},{"text":" constant called ","type":"text"},{"code":"greeting","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"and setting it to a simple greeting message."},{"text":" ","type":"text"},{"text":"This greeting is then passed back out of the function using the ","type":"text"},{"type":"codeVoice","code":"return"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"In the line of code that says "},{"type":"codeVoice","code":"return greeting"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the function finishes its execution and returns the current value of "},{"code":"greeting","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can call the "},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":" function multiple times with different input values."},{"type":"text","text":" "},{"type":"text","text":"The example above shows what happens if it’s called with an input value of "},{"type":"codeVoice","code":"\"Anna\""},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and an input value of "},{"type":"codeVoice","code":"\"Brian\""},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The function returns a tailored greeting in each case."}]},{"inlineContent":[{"type":"text","text":"To make the body of this function shorter,"},{"type":"text","text":" "},{"type":"text","text":"you can combine the message creation and the return statement into one line:"}],"type":"paragraph"},{"syntax":"swift","code":["func greetAgain(person: String) -> String {","    return \"Hello again, \" + person + \"!\"","}","print(greetAgain(person: \"Anna\"))","\/\/ Prints \"Hello again, Anna!\""],"type":"codeListing"},{"level":2,"text":"Parámetros de Funciones y Valores de Devolución","type":"heading","anchor":"Par%C3%A1metros-de-Funciones-y-Valores-de-Devoluci%C3%B3n"},{"type":"paragraph","inlineContent":[{"text":"Function parameters and return values are extremely flexible in Swift.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You can define anything from a simple utility function with a single unnamed parameter"},{"text":" ","type":"text"},{"text":"to a complex function with expressive parameter names and different parameter options.","type":"text"}]},{"level":3,"text":"Funciones Sin Parámetros","type":"heading","anchor":"Funciones-Sin-Par%C3%A1metros"},{"type":"paragraph","inlineContent":[{"text":"Functions aren’t required to define input parameters.","type":"text"},{"type":"text","text":" "},{"text":"Here’s a function with no input parameters,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which always returns the same "},{"type":"codeVoice","code":"String"},{"type":"text","text":" message whenever it’s called:"}]},{"type":"codeListing","syntax":"swift","code":["func sayHelloWorld() -> String {","    return \"hello, world\"","}","print(sayHelloWorld())","\/\/ Prints \"hello, world\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The function definition still needs parentheses after the function’s name,"},{"type":"text","text":" "},{"text":"even though it doesn’t take any parameters.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The function name is also followed by"},{"type":"text","text":" "},{"type":"text","text":"an empty pair of parentheses when the function is called."}]},{"text":"Funciones Con Múltiples Parámetros","type":"heading","level":3,"anchor":"Funciones-Con-M%C3%BAltiples-Par%C3%A1metros"},{"inlineContent":[{"type":"text","text":"Functions can have multiple input parameters,"},{"type":"text","text":" "},{"type":"text","text":"which are written within the function’s parentheses, separated by commas."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This function takes a person’s name","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and whether they have already been greeted as input,"},{"type":"text","text":" "},{"type":"text","text":"and returns an appropriate greeting for that person:"}]},{"syntax":"swift","type":"codeListing","code":["func greet(person: String, alreadyGreeted: Bool) -> String {","    if alreadyGreeted {","        return greetAgain(person: person)","    } else {","        return greet(person: person)","    }","}","print(greet(person: \"Tim\", alreadyGreeted: true))","\/\/ Prints \"Hello again, Tim!\""]},{"type":"paragraph","inlineContent":[{"text":"You call the ","type":"text"},{"type":"codeVoice","code":"greet(person:alreadyGreeted:)"},{"type":"text","text":" function"},{"text":" ","type":"text"},{"text":"by passing it both a ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" argument value labeled "},{"type":"codeVoice","code":"person"},{"type":"text","text":" "},{"type":"text","text":"and a "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":" argument value labeled "},{"type":"codeVoice","code":"alreadyGreeted"},{"text":" ","type":"text"},{"type":"text","text":"in parentheses, separated by commas."},{"text":" ","type":"text"},{"type":"text","text":"Note that this function is distinct from the "},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":" function"},{"text":" ","type":"text"},{"type":"text","text":"shown in an earlier section."},{"text":" ","type":"text"},{"type":"text","text":"Although both functions have names that begin with "},{"code":"greet","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"greet(person:alreadyGreeted:)","type":"codeVoice"},{"type":"text","text":" function takes two arguments"},{"type":"text","text":" "},{"text":"but the ","type":"text"},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":" function takes only one."}]},{"level":3,"text":"Funciones Sin Valores de Devolución","type":"heading","anchor":"Funciones-Sin-Valores-de-Devoluci%C3%B3n"},{"type":"paragraph","inlineContent":[{"text":"Functions aren’t required to define a return type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Here’s a version of the "},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":" function,"},{"type":"text","text":" "},{"type":"text","text":"which prints its own "},{"code":"String","type":"codeVoice"},{"type":"text","text":" value rather than returning it:"}]},{"type":"codeListing","code":["func greet(person: String) {","    print(\"Hello, \\(person)!\")","}","greet(person: \"Dave\")","\/\/ Prints \"Hello, Dave!\""],"syntax":"swift"},{"inlineContent":[{"text":"Because it doesn’t need to return a value,","type":"text"},{"type":"text","text":" "},{"text":"the function’s definition doesn’t include the return arrow (","type":"text"},{"code":"->","type":"codeVoice"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"or a return type."}],"type":"paragraph"},{"name":"Note","type":"aside","content":[{"inlineContent":[{"text":"Strictly speaking, this version of the ","type":"text"},{"type":"codeVoice","code":"greet(person:)"},{"type":"text","text":" function "},{"type":"emphasis","inlineContent":[{"text":"does","type":"text"}]},{"text":" still return a value,","type":"text"},{"text":" ","type":"text"},{"text":"even though no return value is defined.","type":"text"},{"text":" ","type":"text"},{"text":"Functions without a defined return type return a special value of type ","type":"text"},{"type":"codeVoice","code":"Void"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"This is simply an empty tuple,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which is written as "},{"type":"codeVoice","code":"()"},{"text":".","type":"text"}],"type":"paragraph"}],"style":"note"},{"type":"paragraph","inlineContent":[{"text":"The return value of a function can be ignored when it’s called:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func printAndCount(string: String) -> Int {","    print(string)","    return string.count","}","func printWithoutCounting(string: String) {","    let _ = printAndCount(string: string)","}","printAndCount(string: \"hello, world\")","\/\/ prints \"hello, world\" and returns a value of 12","printWithoutCounting(string: \"hello, world\")","\/\/ prints \"hello, world\" but doesn't return a value"]},{"type":"paragraph","inlineContent":[{"text":"The first function, ","type":"text"},{"code":"printAndCount(string:)","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"prints a string, and then returns its character count as an "},{"code":"Int","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The second function, "},{"type":"codeVoice","code":"printWithoutCounting(string:)"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"calls the first function, but ignores its return value."},{"type":"text","text":" "},{"type":"text","text":"When the second function is called,"},{"text":" ","type":"text"},{"type":"text","text":"the message is still printed by the first function,"},{"type":"text","text":" "},{"type":"text","text":"but the returned value isn’t used."}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"Return values can be ignored,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but a function that says it will return a value must always do so."},{"type":"text","text":" "},{"type":"text","text":"A function with a defined return type"},{"text":" ","type":"text"},{"text":"can’t allow control to fall out of the bottom of the function","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"without returning a value,"},{"type":"text","text":" "},{"type":"text","text":"and attempting to do so will result in a compile-time error."}]}],"style":"note","type":"aside"},{"level":3,"text":"Funciones que devuelven múltiples valores","anchor":"Funciones-que-devuelven-m%C3%BAltiples-valores","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You can use a tuple type as the return type for a function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to return multiple values as part of one compound return value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a function called "},{"type":"codeVoice","code":"minMax(array:)"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which finds the smallest and largest numbers in an array of ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" values:","type":"text"}]},{"code":["func minMax(array: [Int]) -> (min: Int, max: Int) {","    var currentMin = array[0]","    var currentMax = array[0]","    for value in array[1..<array.count] {","        if value < currentMin {","            currentMin = value","        } else if value > currentMax {","            currentMax = value","        }","    }","    return (currentMin, currentMax)","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"minMax(array:)"},{"type":"text","text":" function returns a tuple containing two "},{"code":"Int","type":"codeVoice"},{"text":" values.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"These values are labeled "},{"type":"codeVoice","code":"min"},{"type":"text","text":" and "},{"code":"max","type":"codeVoice"},{"type":"text","text":" "},{"text":"so that they can be accessed by name when querying the function’s return value.","type":"text"}]},{"inlineContent":[{"text":"The body of the ","type":"text"},{"type":"codeVoice","code":"minMax(array:)"},{"text":" function starts by setting","type":"text"},{"text":" ","type":"text"},{"text":"two working variables called ","type":"text"},{"code":"currentMin","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"currentMax"},{"type":"text","text":" "},{"text":"to the value of the first integer in the array.","type":"text"},{"type":"text","text":" "},{"text":"The function then iterates over the remaining values in the array","type":"text"},{"type":"text","text":" "},{"text":"and checks each value to see if it’s smaller or larger than","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the values of "},{"type":"codeVoice","code":"currentMin"},{"type":"text","text":" and "},{"type":"codeVoice","code":"currentMax"},{"type":"text","text":" respectively."},{"type":"text","text":" "},{"type":"text","text":"Finally, the overall minimum and maximum values are returned as"},{"text":" ","type":"text"},{"type":"text","text":"a tuple of two "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Because the tuple’s member values are named as part of the function’s return type,","type":"text"},{"text":" ","type":"text"},{"text":"they can be accessed with dot syntax to retrieve the minimum and maximum found values:","type":"text"}]},{"code":["let bounds = minMax(array: [8, -6, 2, 109, 3, 71])","print(\"min is \\(bounds.min) and max is \\(bounds.max)\")","\/\/ Prints \"min is -6 and max is 109\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Note that the tuple’s members don’t need to be named"},{"text":" ","type":"text"},{"type":"text","text":"at the point that the tuple is returned from the function,"},{"type":"text","text":" "},{"type":"text","text":"because their names are already specified as part of the function’s return type."}],"type":"paragraph"},{"type":"heading","level":4,"text":"Tipos Tupla de Devolución Opcionales","anchor":"Tipos-Tupla-de-Devoluci%C3%B3n-Opcionales"},{"inlineContent":[{"text":"If the tuple type to be returned from a function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"has the potential to have “no value” for the entire tuple,"},{"text":" ","type":"text"},{"type":"text","text":"you can use an "},{"inlineContent":[{"text":"optional","type":"text"}],"type":"emphasis"},{"type":"text","text":" tuple return type to reflect the fact that"},{"type":"text","text":" "},{"text":"the entire tuple can be ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You write an optional tuple return type by placing a question mark"},{"type":"text","text":" "},{"text":"after the tuple type’s closing parenthesis,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"such as "},{"type":"codeVoice","code":"(Int, Int)?"},{"type":"text","text":" or "},{"type":"codeVoice","code":"(String, Int, Bool)?"},{"type":"text","text":"."}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"An optional tuple type such as "},{"type":"codeVoice","code":"(Int, Int)?"},{"text":" ","type":"text"},{"text":"is different from a tuple that contains optional types","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"such as "},{"type":"codeVoice","code":"(Int?, Int?)"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"With an optional tuple type, the entire tuple is optional,","type":"text"},{"type":"text","text":" "},{"text":"not just each individual value within the tuple.","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Note","style":"note"},{"inlineContent":[{"type":"text","text":"The "},{"code":"minMax(array:)","type":"codeVoice"},{"type":"text","text":" function above returns a tuple containing two "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"However, the function doesn’t perform any safety checks on the array it’s passed."},{"text":" ","type":"text"},{"text":"If the ","type":"text"},{"type":"codeVoice","code":"array"},{"type":"text","text":" argument contains an empty array,"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"minMax(array:)"},{"type":"text","text":" function, as defined above,"},{"type":"text","text":" "},{"type":"text","text":"will trigger a runtime error when attempting to access "},{"type":"codeVoice","code":"array[0]"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To handle an empty array safely,","type":"text"},{"text":" ","type":"text"},{"text":"write the ","type":"text"},{"code":"minMax(array:)","type":"codeVoice"},{"text":" function with an optional tuple return type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and return a value of "},{"type":"codeVoice","code":"nil"},{"text":" when the array is empty:","type":"text"}]},{"type":"codeListing","code":["func minMax(array: [Int]) -> (min: Int, max: Int)? {","    if array.isEmpty { return nil }","    var currentMin = array[0]","    var currentMax = array[0]","    for value in array[1..<array.count] {","        if value < currentMin {","            currentMin = value","        } else if value > currentMax {","            currentMax = value","        }","    }","    return (currentMin, currentMax)","}"],"syntax":"swift"},{"inlineContent":[{"text":"You can use optional binding to check whether this version of the ","type":"text"},{"code":"minMax(array:)","type":"codeVoice"},{"type":"text","text":" function"},{"text":" ","type":"text"},{"type":"text","text":"returns an actual tuple value or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["if let bounds = minMax(array: [8, -6, 2, 109, 3, 71]) {","    print(\"min is \\(bounds.min) and max is \\(bounds.max)\")","}","\/\/ Prints \"min is -6 and max is 109\""],"type":"codeListing"},{"type":"heading","anchor":"Funciones-Con-Devoluci%C3%B3n-Impl%C3%ADcita","text":"Funciones Con Devolución Implícita","level":3},{"inlineContent":[{"text":"If the entire body of the function is a single expression,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the function implicitly returns that expression."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"text":"both functions below have the same behavior:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func greeting(for person: String) -> String {","    \"Hello, \" + person + \"!\"","}","print(greeting(for: \"Dave\"))","\/\/ Prints \"Hello, Dave!\"","","func anotherGreeting(for person: String) -> String {","    return \"Hello, \" + person + \"!\"","}","print(anotherGreeting(for: \"Dave\"))","\/\/ Prints \"Hello, Dave!\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The entire definition of the "},{"type":"codeVoice","code":"greeting(for:)"},{"type":"text","text":" function"},{"text":" ","type":"text"},{"type":"text","text":"is the greeting message that it returns,"},{"type":"text","text":" "},{"type":"text","text":"which means it can use this shorter form."},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"code":"anotherGreeting(for:)","type":"codeVoice"},{"type":"text","text":" function returns the same greeting message,"},{"text":" ","type":"text"},{"type":"text","text":"using the "},{"code":"return","type":"codeVoice"},{"text":" keyword like a longer function.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Any function that you write as just one "},{"code":"return","type":"codeVoice"},{"text":" line can omit the ","type":"text"},{"code":"return","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"As you’ll see in ","type":"text"},{"type":"text","text":"doc:Properties#Declaración-Concisa-de-getters"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"property getters can also use an implicit return."}]},{"name":"Note","style":"note","type":"aside","content":[{"inlineContent":[{"text":"The code you write as an implicit return value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"needs to return some value."},{"text":" ","type":"text"},{"text":"For example,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can’t use "},{"type":"codeVoice","code":"print(13)"},{"text":" ","type":"text"},{"type":"text","text":"as an implicit return value."},{"text":" ","type":"text"},{"type":"text","text":"However, you can use a function that never returns"},{"text":" ","type":"text"},{"type":"text","text":"like "},{"code":"fatalError(\"Oh no!\")","type":"codeVoice"},{"type":"text","text":" "},{"text":"as an implicit return value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because Swift knows that the implicit return doesn’t happen."}],"type":"paragraph"}]},{"text":"Etiquetas de Argumentos y Nombres de Parámetros de Funciones","level":2,"anchor":"Etiquetas-de-Argumentos-y-Nombres-de-Par%C3%A1metros-de-Funciones","type":"heading"},{"inlineContent":[{"text":"Each function parameter has both an ","type":"text"},{"inlineContent":[{"type":"text","text":"argument label"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"and a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"parameter name"}]},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"The argument label is used when calling the function;","type":"text"},{"type":"text","text":" "},{"type":"text","text":"each argument is written in the function call with its argument label before it."},{"type":"text","text":" "},{"text":"The parameter name is used in the implementation of the function.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"By default, parameters"},{"text":" ","type":"text"},{"type":"text","text":"use their parameter name as their argument label."}],"type":"paragraph"},{"code":["func someFunction(firstParameterName: Int, secondParameterName: Int) {","    \/\/ In the function body, firstParameterName and secondParameterName","    \/\/ refer to the argument values for the first and second parameters.","}","someFunction(firstParameterName: 1, secondParameterName: 2)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"All parameters must have unique names."},{"type":"text","text":" "},{"text":"Although it’s possible for multiple parameters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to have the same argument label,"},{"text":" ","type":"text"},{"text":"unique argument labels help make your code more readable.","type":"text"}],"type":"paragraph"},{"text":"Especificando Etiquetas de Argumentos","type":"heading","anchor":"Especificando-Etiquetas-de-Argumentos","level":3},{"type":"paragraph","inlineContent":[{"text":"You write an argument label before the parameter name,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"separated by a space:"}]},{"type":"codeListing","syntax":"swift","code":["func someFunction(argumentLabel parameterName: Int) {","    \/\/ In the function body, parameterName refers to the argument value","    \/\/ for that parameter.","}"]},{"inlineContent":[{"text":"Here’s a variation of the ","type":"text"},{"code":"greet(person:)","type":"codeVoice"},{"type":"text","text":" function"},{"text":" ","type":"text"},{"text":"that takes a person’s name and hometown","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and returns a greeting:"}],"type":"paragraph"},{"code":["func greet(person: String, from hometown: String) -> String {","    return \"Hello \\(person)!  Glad you could visit from \\(hometown).\"","}","print(greet(person: \"Bill\", from: \"Cupertino\"))","\/\/ Prints \"Hello Bill!  Glad you could visit from Cupertino.\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The use of argument labels can allow a function"},{"type":"text","text":" "},{"type":"text","text":"to be called in an expressive, sentence-like manner,"},{"text":" ","type":"text"},{"type":"text","text":"while still providing a function body that’s readable and clear in intent."}]},{"text":"Omitiendo Etiquetas de Argumentos","level":3,"type":"heading","anchor":"Omitiendo-Etiquetas-de-Argumentos"},{"inlineContent":[{"text":"If you don’t want an argument label for a parameter,","type":"text"},{"type":"text","text":" "},{"text":"write an underscore (","type":"text"},{"code":"_","type":"codeVoice"},{"type":"text","text":") instead of an explicit argument label for that parameter."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func someFunction(_ firstParameterName: Int, secondParameterName: Int) {","    \/\/ In the function body, firstParameterName and secondParameterName","    \/\/ refer to the argument values for the first and second parameters.","}","someFunction(1, secondParameterName: 2)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a parameter has an argument label,"},{"text":" ","type":"text"},{"type":"text","text":"the argument "},{"type":"emphasis","inlineContent":[{"text":"must","type":"text"}]},{"text":" be labeled when you call the function.","type":"text"}]},{"type":"heading","text":"Parámetros con valores predeterminados","level":3,"anchor":"Par%C3%A1metros-con-valores-predeterminados"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can define a "},{"inlineContent":[{"text":"default value","type":"text"}],"type":"emphasis"},{"type":"text","text":" for any parameter in a function"},{"type":"text","text":" "},{"type":"text","text":"by assigning a value to the parameter after that parameter’s type."},{"type":"text","text":" "},{"type":"text","text":"If a default value is defined, you can omit that parameter when calling the function."}]},{"type":"codeListing","syntax":"swift","code":["func someFunction(parameterWithoutDefault: Int, parameterWithDefault: Int = 12) {","    \/\/ If you omit the second argument when calling this function, then","    \/\/ the value of parameterWithDefault is 12 inside the function body.","}","someFunction(parameterWithoutDefault: 3, parameterWithDefault: 6) \/\/ parameterWithDefault is 6","someFunction(parameterWithoutDefault: 4) \/\/ parameterWithDefault is 12"]},{"inlineContent":[{"text":"Place parameters that don’t have default values","type":"text"},{"text":" ","type":"text"},{"text":"at the beginning of a function’s parameter list,","type":"text"},{"text":" ","type":"text"},{"text":"before the parameters that have default values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Parameters that don’t have default values"},{"type":"text","text":" "},{"type":"text","text":"are usually more important to the function’s meaning —"},{"type":"text","text":" "},{"type":"text","text":"writing them first makes it easier to recognize"},{"type":"text","text":" "},{"type":"text","text":"that the same function is being called,"},{"type":"text","text":" "},{"text":"regardless of whether any default parameters are omitted.","type":"text"}],"type":"paragraph"},{"anchor":"Par%C3%A1metros-Vari%C3%A1dicos","type":"heading","level":3,"text":"Parámetros Variádicos"},{"inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"text":"variadic parameter","type":"text"}],"type":"emphasis"},{"type":"text","text":" accepts zero or more values of a specified type."},{"type":"text","text":" "},{"type":"text","text":"You use a variadic parameter to specify that the parameter can be passed"},{"type":"text","text":" "},{"text":"a varying number of input values when the function is called.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Write variadic parameters by inserting three period characters ("},{"code":"...","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"after the parameter’s type name.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The values passed to a variadic parameter are made available within the function’s body"},{"text":" ","type":"text"},{"type":"text","text":"as an array of the appropriate type."},{"type":"text","text":" "},{"type":"text","text":"For example, a variadic parameter with a name of "},{"code":"numbers","type":"codeVoice"},{"text":" and a type of ","type":"text"},{"type":"codeVoice","code":"Double..."},{"text":" ","type":"text"},{"type":"text","text":"is made available within the function’s body as"},{"type":"text","text":" "},{"text":"a constant array called ","type":"text"},{"code":"numbers","type":"codeVoice"},{"type":"text","text":" of type "},{"code":"[Double]","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below calculates the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"arithmetic mean"}]},{"type":"text","text":" "},{"type":"text","text":"(also known as the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"average"}]},{"type":"text","text":") for a list of numbers of any length:"}]},{"code":["func arithmeticMean(_ numbers: Double...) -> Double {","    var total: Double = 0","    for number in numbers {","        total += number","    }","    return total \/ Double(numbers.count)","}","arithmeticMean(1, 2, 3, 4, 5)","\/\/ returns 3.0, which is the arithmetic mean of these five numbers","arithmeticMean(3, 8.25, 18.75)","\/\/ returns 10.0, which is the arithmetic mean of these three numbers"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"A function can have multiple variadic parameters."},{"type":"text","text":" "},{"type":"text","text":"The first parameter that comes after a variadic parameter"},{"type":"text","text":" "},{"type":"text","text":"must have an argument label."},{"type":"text","text":" "},{"type":"text","text":"The argument label makes it unambiguous"},{"text":" ","type":"text"},{"type":"text","text":"which arguments are passed to the variadic parameter"},{"type":"text","text":" "},{"type":"text","text":"and which arguments are passed to the parameters"},{"type":"text","text":" "},{"text":"that come after the variadic parameter.","type":"text"}],"type":"paragraph"},{"anchor":"Par%C3%A1metros-in-out","level":3,"type":"heading","text":"Parámetros in-out"},{"type":"paragraph","inlineContent":[{"text":"Function parameters are constants by default.","type":"text"},{"text":" ","type":"text"},{"text":"Trying to change the value of a function parameter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from within the body of that function results in a compile-time error."},{"type":"text","text":" "},{"text":"This means that you can’t change the value of a parameter by mistake.","type":"text"},{"type":"text","text":" "},{"text":"If you want a function to modify a parameter’s value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and you want those changes to persist after the function call has ended,"},{"text":" ","type":"text"},{"type":"text","text":"define that parameter as an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"in-out parameter"}]},{"text":" instead.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You write an in-out parameter by placing the "},{"code":"inout","type":"codeVoice"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"right before a parameter’s type."},{"type":"text","text":" "},{"text":"An in-out parameter has a value that’s passed ","type":"text"},{"inlineContent":[{"text":"in","type":"text"}],"type":"emphasis"},{"type":"text","text":" to the function,"},{"text":" ","type":"text"},{"type":"text","text":"is modified by the function,"},{"type":"text","text":" "},{"type":"text","text":"and is passed back "},{"type":"emphasis","inlineContent":[{"text":"out","type":"text"}]},{"text":" of the function to replace the original value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For a detailed discussion of the behavior of in-out parameters"},{"type":"text","text":" "},{"text":"and associated compiler optimizations,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Par%C3%A1metros-in-out","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can only pass a variable as the argument for an in-out parameter."},{"text":" ","type":"text"},{"text":"You can’t pass a constant or a literal value as the argument,","type":"text"},{"type":"text","text":" "},{"text":"because constants and literals can’t be modified.","type":"text"},{"text":" ","type":"text"},{"text":"You place an ampersand (","type":"text"},{"code":"&","type":"codeVoice"},{"text":") directly before a variable’s name","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when you pass it as an argument to an in-out parameter,"},{"type":"text","text":" "},{"text":"to indicate that it can be modified by the function.","type":"text"}]},{"content":[{"inlineContent":[{"text":"In-out parameters can’t have default values,","type":"text"},{"text":" ","type":"text"},{"text":"and variadic parameters can’t be marked as ","type":"text"},{"code":"inout","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"name":"Note","type":"aside","style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of a function called "},{"type":"codeVoice","code":"swapTwoInts(_:_:)"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which has two in-out integer parameters called ","type":"text"},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"type":"codeVoice","code":"b"},{"type":"text","text":":"}]},{"code":["func swapTwoInts(_ a: inout Int, _ b: inout Int) {","    let temporaryA = a","    a = b","    b = temporaryA","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"swapTwoInts(_:_:)"},{"text":" function simply swaps the value of ","type":"text"},{"code":"b","type":"codeVoice"},{"type":"text","text":" into "},{"code":"a","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the value of "},{"type":"codeVoice","code":"a"},{"text":" into ","type":"text"},{"code":"b","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The function performs this swap by storing the value of "},{"code":"a","type":"codeVoice"},{"text":" in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a temporary constant called "},{"code":"temporaryA","type":"codeVoice"},{"type":"text","text":", assigning the value of "},{"code":"b","type":"codeVoice"},{"type":"text","text":" to "},{"code":"a","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and then assigning ","type":"text"},{"type":"codeVoice","code":"temporaryA"},{"text":" to ","type":"text"},{"code":"b","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can call the "},{"code":"swapTwoInts(_:_:)","type":"codeVoice"},{"type":"text","text":" function with two variables of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" "},{"type":"text","text":"to swap their values."},{"text":" ","type":"text"},{"text":"Note that the names of ","type":"text"},{"code":"someInt","type":"codeVoice"},{"type":"text","text":" and "},{"code":"anotherInt","type":"codeVoice"},{"text":" are prefixed with an ampersand","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when they’re passed to the "},{"code":"swapTwoInts(_:_:)","type":"codeVoice"},{"type":"text","text":" function:"}]},{"syntax":"swift","type":"codeListing","code":["var someInt = 3","var anotherInt = 107","swapTwoInts(&someInt, &anotherInt)","print(\"someInt is now \\(someInt), and anotherInt is now \\(anotherInt)\")","\/\/ Prints \"someInt is now 107, and anotherInt is now 3\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above shows that"},{"text":" ","type":"text"},{"type":"text","text":"the original values of "},{"code":"someInt","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"anotherInt"},{"type":"text","text":" "},{"text":"are modified by the ","type":"text"},{"code":"swapTwoInts(_:_:)","type":"codeVoice"},{"type":"text","text":" function,"},{"type":"text","text":" "},{"type":"text","text":"even though they were originally defined outside of the function."}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"In-out parameters aren’t the same as returning a value from a function.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"swapTwoInts"},{"text":" example above doesn’t define a return type or return a value,","type":"text"},{"text":" ","type":"text"},{"text":"but it still modifies the values of ","type":"text"},{"type":"codeVoice","code":"someInt"},{"type":"text","text":" and "},{"type":"codeVoice","code":"anotherInt"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"In-out parameters are an alternative way for a function to have an effect","type":"text"},{"type":"text","text":" "},{"type":"text","text":"outside of the scope of its function body."}]}],"style":"note","type":"aside","name":"Note"},{"anchor":"Tipos-de-Funciones","level":2,"text":"Tipos de Funciones","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Every function has a specific ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"function type"}]},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"made up of the parameter types and the return type of the function.","type":"text"}]},{"inlineContent":[{"text":"For example:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func addTwoInts(_ a: Int, _ b: Int) -> Int {","    return a + b","}","func multiplyTwoInts(_ a: Int, _ b: Int) -> Int {","    return a * b","}"]},{"inlineContent":[{"text":"This example defines two simple mathematical functions","type":"text"},{"type":"text","text":" "},{"text":"called ","type":"text"},{"code":"addTwoInts","type":"codeVoice"},{"type":"text","text":" and "},{"code":"multiplyTwoInts","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These functions each take two "},{"code":"Int","type":"codeVoice"},{"text":" values,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and return an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value, which is the result of"},{"text":" ","type":"text"},{"text":"performing an appropriate mathematical operation.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of both of these functions is "},{"type":"codeVoice","code":"(Int, Int) -> Int"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"This can be read as:","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"“A function that has two parameters, both of type "},{"type":"codeVoice","code":"Int"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and that returns a value of type "},{"code":"Int","type":"codeVoice"},{"type":"text","text":".”"}]},{"type":"paragraph","inlineContent":[{"text":"Here’s another example, for a function with no parameters or return value:","type":"text"}]},{"type":"codeListing","code":["func printHelloWorld() {","    print(\"hello, world\")","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of this function is "},{"code":"() -> Void","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"or “a function that has no parameters, and returns ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":".”","type":"text"}]},{"text":"Usando Tipos de Funciones","level":3,"anchor":"Usando-Tipos-de-Funciones","type":"heading"},{"inlineContent":[{"type":"text","text":"You use function types just like any other types in Swift."},{"text":" ","type":"text"},{"text":"For example, you can define a constant or variable to be of a function type","type":"text"},{"text":" ","type":"text"},{"text":"and assign an appropriate function to that variable:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var mathFunction: (Int, Int) -> Int = addTwoInts"]},{"type":"paragraph","inlineContent":[{"text":"This can be read as:","type":"text"}]},{"inlineContent":[{"text":"“Define a variable called ","type":"text"},{"code":"mathFunction","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which has a type of ‘a function that takes two ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values,"},{"type":"text","text":" "},{"type":"text","text":"and returns an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value.’"},{"type":"text","text":" "},{"type":"text","text":"Set this new variable to refer to the function called "},{"code":"addTwoInts","type":"codeVoice"},{"type":"text","text":".”"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"addTwoInts(_:_:)"},{"type":"text","text":" function has the same type as the "},{"code":"mathFunction","type":"codeVoice"},{"text":" variable,","type":"text"},{"text":" ","type":"text"},{"text":"and so this assignment is allowed by Swift’s type-checker.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now call the assigned function with the name "},{"code":"mathFunction","type":"codeVoice"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["print(\"Result: \\(mathFunction(2, 3))\")","\/\/ Prints \"Result: 5\""]},{"inlineContent":[{"text":"A different function with the same matching type can be assigned to the same variable,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the same way as for nonfunction types:"}],"type":"paragraph"},{"syntax":"swift","code":["mathFunction = multiplyTwoInts","print(\"Result: \\(mathFunction(2, 3))\")","\/\/ Prints \"Result: 6\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with any other type,"},{"text":" ","type":"text"},{"text":"you can leave it to Swift to infer the function type","type":"text"},{"text":" ","type":"text"},{"text":"when you assign a function to a constant or variable:","type":"text"}]},{"type":"codeListing","code":["let anotherMathFunction = addTwoInts","\/\/ anotherMathFunction is inferred to be of type (Int, Int) -> Int"],"syntax":"swift"},{"type":"heading","text":"Tipos de Funciones Como Tipos de Parámetros","level":3,"anchor":"Tipos-de-Funciones-Como-Tipos-de-Par%C3%A1metros"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use a function type such as "},{"type":"codeVoice","code":"(Int, Int) -> Int"},{"type":"text","text":" "},{"text":"as a parameter type for another function.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This enables you to leave some aspects of a function’s implementation"},{"type":"text","text":" "},{"type":"text","text":"for the function’s caller to provide when the function is called."}]},{"type":"paragraph","inlineContent":[{"text":"Here’s an example to print the results of the math functions from above:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func printMathResult(_ mathFunction: (Int, Int) -> Int, _ a: Int, _ b: Int) {","    print(\"Result: \\(mathFunction(a, b))\")","}","printMathResult(addTwoInts, 3, 5)","\/\/ Prints \"Result: 8\""]},{"inlineContent":[{"type":"text","text":"This example defines a function called "},{"code":"printMathResult(_:_:_:)","type":"codeVoice"},{"text":", which has three parameters.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The first parameter is called "},{"code":"mathFunction","type":"codeVoice"},{"text":", and is of type ","type":"text"},{"code":"(Int, Int) -> Int","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can pass any function of that type as the argument for this first parameter."},{"type":"text","text":" "},{"type":"text","text":"The second and third parameters are called "},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"type":"codeVoice","code":"b"},{"type":"text","text":", and are both of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"These are used as the two input values for the provided math function.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"When ","type":"text"},{"type":"codeVoice","code":"printMathResult(_:_:_:)"},{"type":"text","text":" is called,"},{"type":"text","text":" "},{"text":"it’s passed the ","type":"text"},{"code":"addTwoInts(_:_:)","type":"codeVoice"},{"type":"text","text":" function, and the integer values "},{"type":"codeVoice","code":"3"},{"type":"text","text":" and "},{"type":"codeVoice","code":"5"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It calls the provided function with the values "},{"type":"codeVoice","code":"3"},{"type":"text","text":" and "},{"code":"5","type":"codeVoice"},{"text":", and prints the result of ","type":"text"},{"type":"codeVoice","code":"8"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"The role of "},{"type":"codeVoice","code":"printMathResult(_:_:_:)"},{"text":" is to print the result of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a call to a math function of an appropriate type."},{"type":"text","text":" "},{"text":"It doesn’t matter what that function’s implementation actually does —","type":"text"},{"text":" ","type":"text"},{"text":"it matters only that the function is of the correct type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This enables "},{"code":"printMathResult(_:_:_:)","type":"codeVoice"},{"type":"text","text":" to hand off some of its functionality"},{"type":"text","text":" "},{"type":"text","text":"to the caller of the function in a type-safe way."}],"type":"paragraph"},{"level":3,"type":"heading","text":"Tipos de Funciones Como Tipos de Devolución","anchor":"Tipos-de-Funciones-Como-Tipos-de-Devoluci%C3%B3n"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use a function type as the return type of another function."},{"type":"text","text":" "},{"text":"You do this by writing a complete function type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"immediately after the return arrow ("},{"code":"->","type":"codeVoice"},{"type":"text","text":") of the returning function."}]},{"inlineContent":[{"text":"The next example defines two simple functions called ","type":"text"},{"type":"codeVoice","code":"stepForward(_:)"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"stepBackward(_:)"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"stepForward(_:)"},{"text":" function returns a value one more than its input value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"code":"stepBackward(_:)","type":"codeVoice"},{"text":" function returns a value one less than its input value.","type":"text"},{"text":" ","type":"text"},{"text":"Both functions have a type of ","type":"text"},{"type":"codeVoice","code":"(Int) -> Int"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["func stepForward(_ input: Int) -> Int {","    return input + 1","}","func stepBackward(_ input: Int) -> Int {","    return input - 1","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Here’s a function called ","type":"text"},{"type":"codeVoice","code":"chooseStepFunction(backward:)"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"whose return type is "},{"type":"codeVoice","code":"(Int) -> Int"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"chooseStepFunction(backward:)"},{"type":"text","text":" function returns the "},{"type":"codeVoice","code":"stepForward(_:)"},{"text":" function","type":"text"},{"type":"text","text":" "},{"text":"or the ","type":"text"},{"code":"stepBackward(_:)","type":"codeVoice"},{"text":" function based on a Boolean parameter called ","type":"text"},{"code":"backward","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["func chooseStepFunction(backward: Bool) -> (Int) -> Int {","    return backward ? stepBackward : stepForward","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"You can now use ","type":"text"},{"code":"chooseStepFunction(backward:)","type":"codeVoice"},{"type":"text","text":" to obtain a function"},{"text":" ","type":"text"},{"text":"that will step in one direction or the other:","type":"text"}],"type":"paragraph"},{"code":["var currentValue = 3","let moveNearerToZero = chooseStepFunction(backward: currentValue > 0)","\/\/ moveNearerToZero now refers to the stepBackward() function"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The example above determines whether a positive or negative step is needed","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to move a variable called "},{"code":"currentValue","type":"codeVoice"},{"type":"text","text":" progressively closer to zero."},{"type":"text","text":" "},{"type":"codeVoice","code":"currentValue"},{"type":"text","text":" has an initial value of "},{"type":"codeVoice","code":"3"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which means that "},{"type":"codeVoice","code":"currentValue > 0"},{"type":"text","text":" returns "},{"type":"codeVoice","code":"true"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"causing ","type":"text"},{"type":"codeVoice","code":"chooseStepFunction(backward:)"},{"text":" to return the ","type":"text"},{"type":"codeVoice","code":"stepBackward(_:)"},{"text":" function.","type":"text"},{"text":" ","type":"text"},{"text":"A reference to the returned function is stored in a constant called ","type":"text"},{"code":"moveNearerToZero","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that "},{"type":"codeVoice","code":"moveNearerToZero"},{"type":"text","text":" refers to the correct function,"},{"text":" ","type":"text"},{"text":"it can be used to count to zero:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["print(\"Counting to zero:\")","\/\/ Counting to zero:","while currentValue != 0 {","    print(\"\\(currentValue)... \")","    currentValue = moveNearerToZero(currentValue)","}","print(\"zero!\")","\/\/ 3...","\/\/ 2...","\/\/ 1...","\/\/ zero!"]},{"text":"Funciones Anidadas","level":2,"anchor":"Funciones-Anidadas","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of the functions you have encountered so far in this chapter"},{"type":"text","text":" "},{"text":"have been examples of ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"global functions","type":"text"}]},{"text":", which are defined at a global scope.","type":"text"},{"type":"text","text":" "},{"text":"You can also define functions inside the bodies of other functions,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"known as "},{"inlineContent":[{"type":"text","text":"nested functions"}],"type":"emphasis"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Nested functions are hidden from the outside world by default,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but can still be called and used by their enclosing function."},{"text":" ","type":"text"},{"type":"text","text":"An enclosing function can also return one of its nested functions"},{"text":" ","type":"text"},{"type":"text","text":"to allow the nested function to be used in another scope."}]},{"inlineContent":[{"text":"You can rewrite the ","type":"text"},{"type":"codeVoice","code":"chooseStepFunction(backward:)"},{"type":"text","text":" example above"},{"text":" ","type":"text"},{"type":"text","text":"to use and return nested functions:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func chooseStepFunction(backward: Bool) -> (Int) -> Int {","    func stepForward(input: Int) -> Int { return input + 1 }","    func stepBackward(input: Int) -> Int { return input - 1 }","    return backward ? stepBackward : stepForward","}","var currentValue = -4","let moveNearerToZero = chooseStepFunction(backward: currentValue > 0)","\/\/ moveNearerToZero now refers to the nested stepForward() function","while currentValue != 0 {","    print(\"\\(currentValue)... \")","    currentValue = moveNearerToZero(currentValue)","}","print(\"zero!\")","\/\/ -4...","\/\/ -3...","\/\/ -2...","\/\/ -1...","\/\/ zero!"]},{"name":"Software Beta","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"inlineContent":[{"type":"text","text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Conoce más acerca del uso del ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","isActive":true},{"type":"text","text":"."}]}]}],"kind":"content"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","interfaceLanguage":"swift"},"metadata":{"title":"Funciones"},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"role":"collection","type":"topic","url":"\/documentation\/the-swift-programming-language","abstract":[],"title":"The Swift Programming Language (6)","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Etiquetas-de-Argumentos-y-Nombres-de-Par%C3%A1metros-de-Funciones":{"kind":"section","url":"\/documentation\/the-swift-programming-language\/functions#Etiquetas-de-Argumentos-y-Nombres-de-Par%C3%A1metros-de-Funciones","title":"Etiquetas de Argumentos y Nombres de Parámetros de Funciones","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Etiquetas-de-Argumentos-y-Nombres-de-Par%C3%A1metros-de-Funciones","type":"topic","abstract":[]},"https://developer.apple.com/es/support/beta-software/":{"url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","title":"software beta de Apple","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"link","titleInlineContent":[{"text":"software beta de Apple","type":"text"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Par%C3%A1metros-in-out":{"kind":"section","url":"\/documentation\/the-swift-programming-language\/declarations#Par%C3%A1metros-in-out","title":"Parámetros in-out","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Par%C3%A1metros-in-out","type":"topic","abstract":[]}}}
>>>>>>> 2fa5d86d (yet one more fix attempt)
