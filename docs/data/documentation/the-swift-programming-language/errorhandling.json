{"abstract":[{"text":"Respond to and recover from errors.","type":"text"}],"kind":"article","primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Error handling","type":"text"}],"type":"emphasis"},{"text":" is the process of responding to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and recovering from error conditions in your program."},{"type":"text","text":" "},{"text":"Swift provides first-class support for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"throwing, catching, propagating, and manipulating"},{"text":" ","type":"text"},{"type":"text","text":"recoverable errors at runtime."}]},{"type":"paragraph","inlineContent":[{"text":"Some operations","type":"text"},{"type":"text","text":" "},{"text":"aren’t guaranteed to always complete execution or produce a useful output.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Optionals are used to represent the absence of a value,"},{"text":" ","type":"text"},{"type":"text","text":"but when an operation fails,"},{"text":" ","type":"text"},{"text":"it’s often useful to understand what caused the failure,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so that your code can respond accordingly."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an example, consider the task of reading and processing data from a file on disk."},{"text":" ","type":"text"},{"type":"text","text":"There are a number of ways this task can fail, including"},{"type":"text","text":" "},{"text":"the file not existing at the specified path,","type":"text"},{"text":" ","type":"text"},{"text":"the file not having read permissions, or","type":"text"},{"type":"text","text":" "},{"text":"the file not being encoded in a compatible format.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Distinguishing among these different situations"},{"type":"text","text":" "},{"type":"text","text":"allows a program to resolve some errors"},{"text":" ","type":"text"},{"type":"text","text":"and to communicate to the user any errors it can’t resolve."}]},{"name":"Note","content":[{"inlineContent":[{"text":"Error handling in Swift interoperates with error handling patterns","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that use the "},{"type":"codeVoice","code":"NSError"},{"type":"text","text":" class in Cocoa and Objective-C."},{"type":"text","text":" "},{"text":"For more information about this class,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/cocoa_design_patterns\/handling_cocoa_errors_in_swift","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside","style":"note"},{"text":"Representar y arrojar errores","level":2,"type":"heading","anchor":"Representar-y-arrojar-errores"},{"inlineContent":[{"text":"In Swift, errors are represented by","type":"text"},{"text":" ","type":"text"},{"text":"values of types that conform to the ","type":"text"},{"type":"codeVoice","code":"Error"},{"type":"text","text":" protocol."},{"type":"text","text":" "},{"text":"This empty protocol indicates that a type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can be used for error handling."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift enumerations are particularly well suited to modeling"},{"text":" ","type":"text"},{"text":"a group of related error conditions,","type":"text"},{"text":" ","type":"text"},{"text":"with associated values allowing for additional information","type":"text"},{"type":"text","text":" "},{"text":"about the nature of an error to be communicated.","type":"text"},{"text":" ","type":"text"},{"text":"For example, here’s how you might represent the error conditions","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of operating a vending machine inside a game:"}]},{"code":["enum VendingMachineError: Error {","    case invalidSelection","    case insufficientFunds(coinsNeeded: Int)","    case outOfStock","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Throwing an error lets you indicate that something unexpected happened"},{"text":" ","type":"text"},{"type":"text","text":"and the normal flow of execution can’t continue."},{"text":" ","type":"text"},{"text":"You use a ","type":"text"},{"code":"throw","type":"codeVoice"},{"text":" statement to throw an error.","type":"text"},{"text":" ","type":"text"},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"text":"the following code throws an error to indicate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that five additional coins are needed by the vending machine:"}]},{"type":"codeListing","syntax":"swift","code":["throw VendingMachineError.insufficientFunds(coinsNeeded: 5)"]},{"type":"heading","text":"Manejo de errores","anchor":"Manejo-de-errores","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"When an error is thrown,"},{"type":"text","text":" "},{"type":"text","text":"some surrounding piece of code must be responsible"},{"text":" ","type":"text"},{"type":"text","text":"for handling the error —"},{"text":" ","type":"text"},{"type":"text","text":"for example, by correcting the problem,"},{"type":"text","text":" "},{"text":"trying an alternative approach,","type":"text"},{"text":" ","type":"text"},{"text":"or informing the user of the failure.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are four ways to handle errors in Swift."},{"text":" ","type":"text"},{"text":"You can propagate the error from a function to the code that calls that function,","type":"text"},{"text":" ","type":"text"},{"text":"handle the error using a ","type":"text"},{"code":"do","type":"codeVoice"},{"text":"-","type":"text"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"text":"handle the error as an optional value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or assert that the error will not occur."},{"type":"text","text":" "},{"text":"Each approach is described in a section below.","type":"text"}]},{"inlineContent":[{"type":"text","text":"When a function throws an error,"},{"text":" ","type":"text"},{"text":"it changes the flow of your program,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so it’s important that you can quickly identify places in your code that can throw errors."},{"type":"text","text":" "},{"type":"text","text":"To identify these places in your code, write the "},{"type":"codeVoice","code":"try"},{"text":" keyword —","type":"text"},{"type":"text","text":" "},{"text":"or the ","type":"text"},{"code":"try?","type":"codeVoice"},{"type":"text","text":" or "},{"code":"try!","type":"codeVoice"},{"text":" variation —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"before a piece of code that calls a function, method, or initializer that can throw an error."},{"text":" ","type":"text"},{"text":"These keywords are described in the sections below.","type":"text"}],"type":"paragraph"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Error handling in Swift resembles exception handling in other languages,","type":"text"},{"text":" ","type":"text"},{"text":"with the use of the ","type":"text"},{"code":"try","type":"codeVoice"},{"type":"text","text":", "},{"code":"catch","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"throw"},{"text":" keywords.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Unlike exception handling in many languages —"},{"text":" ","type":"text"},{"text":"including Objective-C —","type":"text"},{"type":"text","text":" "},{"text":"error handling in Swift doesn’t involve unwinding the call stack,","type":"text"},{"text":" ","type":"text"},{"text":"a process that can be computationally expensive.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"As such, the performance characteristics"},{"type":"text","text":" "},{"text":"of a ","type":"text"},{"type":"codeVoice","code":"throw"},{"text":" statement","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are comparable to those of a "},{"type":"codeVoice","code":"return"},{"type":"text","text":" statement."}]}],"type":"aside","name":"Note"},{"anchor":"Propagaci%C3%B3n-de-errores-mediante-funciones-que-arrojan-errores","text":"Propagación de errores mediante funciones que arrojan errores","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"To indicate that a function, method, or initializer can throw an error,"},{"text":" ","type":"text"},{"text":"you write the ","type":"text"},{"code":"throws","type":"codeVoice"},{"type":"text","text":" keyword in the function’s declaration"},{"type":"text","text":" "},{"text":"after its parameters.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"A function marked with "},{"type":"codeVoice","code":"throws"},{"type":"text","text":" is called a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"throwing function"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the function specifies a return type,"},{"type":"text","text":" "},{"type":"text","text":"you write the "},{"type":"codeVoice","code":"throws"},{"type":"text","text":" keyword before the return arrow ("},{"code":"->","type":"codeVoice"},{"text":").","type":"text"}]},{"code":["func canThrowErrors() throws -> String","","func cannotThrowErrors() -> String"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A throwing function propagates errors that are thrown inside of it"},{"text":" ","type":"text"},{"text":"to the scope from which it’s called.","type":"text"}]},{"style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"Only throwing functions can propagate errors."},{"text":" ","type":"text"},{"text":"Any errors thrown inside a nonthrowing function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"must be handled inside the function."}],"type":"paragraph"}],"name":"Note"},{"type":"paragraph","inlineContent":[{"text":"In the example below,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"VendingMachine"},{"text":" class has a ","type":"text"},{"code":"vend(itemNamed:)","type":"codeVoice"},{"type":"text","text":" method"},{"text":" ","type":"text"},{"type":"text","text":"that throws an appropriate "},{"code":"VendingMachineError","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"if the requested item isn’t available,"},{"text":" ","type":"text"},{"text":"is out of stock,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or has a cost that exceeds the current deposited amount:"}]},{"syntax":"swift","type":"codeListing","code":["struct Item {","    var price: Int","    var count: Int","}","","class VendingMachine {","    var inventory = [","        \"Candy Bar\": Item(price: 12, count: 7),","        \"Chips\": Item(price: 10, count: 4),","        \"Pretzels\": Item(price: 7, count: 11)","    ]","    var coinsDeposited = 0","","    func vend(itemNamed name: String) throws {","        guard let item = inventory[name] else {","            throw VendingMachineError.invalidSelection","        }","","        guard item.count > 0 else {","            throw VendingMachineError.outOfStock","        }","","        guard item.price <= coinsDeposited else {","            throw VendingMachineError.insufficientFunds(coinsNeeded: item.price - coinsDeposited)","        }","","        coinsDeposited -= item.price","","        var newItem = item","        newItem.count -= 1","        inventory[name] = newItem","","        print(\"Dispensing \\(name)\")","    }","}"]},{"inlineContent":[{"type":"text","text":"The implementation of the "},{"code":"vend(itemNamed:)","type":"codeVoice"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"uses "},{"code":"guard","type":"codeVoice"},{"type":"text","text":" statements to exit the method early and throw appropriate errors"},{"type":"text","text":" "},{"type":"text","text":"if any of the requirements for purchasing a snack aren’t met."},{"type":"text","text":" "},{"text":"Because a ","type":"text"},{"code":"throw","type":"codeVoice"},{"text":" statement immediately transfers program control,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an item will be vended only if all of these requirements are met."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Because the ","type":"text"},{"type":"codeVoice","code":"vend(itemNamed:)"},{"type":"text","text":" method propagates any errors it throws,"},{"type":"text","text":" "},{"type":"text","text":"any code that calls this method must either handle the errors —"},{"type":"text","text":" "},{"type":"text","text":"using a "},{"code":"do","type":"codeVoice"},{"type":"text","text":"-"},{"code":"catch","type":"codeVoice"},{"text":" statement, ","type":"text"},{"type":"codeVoice","code":"try?"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"try!"},{"type":"text","text":"—"},{"type":"text","text":" "},{"type":"text","text":"or continue to propagate them."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"buyFavoriteSnack(person:vendingMachine:)"},{"type":"text","text":" in the example below"},{"type":"text","text":" "},{"text":"is also a throwing function,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and any errors that the "},{"code":"vend(itemNamed:)","type":"codeVoice"},{"text":" method throws will","type":"text"},{"type":"text","text":" "},{"type":"text","text":"propagate up to the point where the "},{"code":"buyFavoriteSnack(person:vendingMachine:)","type":"codeVoice"},{"text":" function is called.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let favoriteSnacks = [","    \"Alice\": \"Chips\",","    \"Bob\": \"Licorice\",","    \"Eve\": \"Pretzels\",","]","func buyFavoriteSnack(person: String, vendingMachine: VendingMachine) throws {","    let snackName = favoriteSnacks[person] ?? \"Candy Bar\"","    try vendingMachine.vend(itemNamed: snackName)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"buyFavoriteSnack(person: vendingMachine:)","type":"codeVoice"},{"type":"text","text":" function looks up a given person’s favorite snack"},{"text":" ","type":"text"},{"type":"text","text":"and tries to buy it for them by calling the "},{"code":"vend(itemNamed:)","type":"codeVoice"},{"type":"text","text":" method."},{"type":"text","text":" "},{"type":"text","text":"Because the "},{"type":"codeVoice","code":"vend(itemNamed:)"},{"type":"text","text":" method can throw an error,"},{"type":"text","text":" "},{"text":"it’s called with the ","type":"text"},{"code":"try","type":"codeVoice"},{"text":" keyword in front of it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Throwing initializers can propagate errors in the same way as throwing functions.","type":"text"},{"text":" ","type":"text"},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the initializer for the "},{"code":"PurchasedSnack","type":"codeVoice"},{"text":" structure in the listing below","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"calls a throwing function as part of the initialization process,"},{"type":"text","text":" "},{"type":"text","text":"and it handles any errors that it encounters by propagating them to its caller."}]},{"code":["struct PurchasedSnack {","    let name: String","    init(name: String, vendingMachine: VendingMachine) throws {","        try vendingMachine.vend(itemNamed: name)","        self.name = name","    }","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Manejo-de-errores-mediante-do-catch","type":"heading","level":3,"text":"Manejo de errores mediante do-catch"},{"inlineContent":[{"text":"You use a ","type":"text"},{"type":"codeVoice","code":"do"},{"type":"text","text":"-"},{"code":"catch","type":"codeVoice"},{"type":"text","text":" statement to handle errors"},{"text":" ","type":"text"},{"type":"text","text":"by running a block of code."},{"type":"text","text":" "},{"text":"If an error is thrown by the code in the ","type":"text"},{"code":"do","type":"codeVoice"},{"text":" clause,","type":"text"},{"type":"text","text":" "},{"text":"it’s matched against the ","type":"text"},{"type":"codeVoice","code":"catch"},{"text":" clauses","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to determine which one of them can handle the error."}],"type":"paragraph"},{"inlineContent":[{"text":"Here is the general form of a ","type":"text"},{"type":"codeVoice","code":"do"},{"text":"-","type":"text"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" statement:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["do {","    try <#expression#>","    <#statements#>","} catch <#pattern 1#> {","    <#statements#>","} catch <#pattern 2#> where <#condition#> {","    <#statements#>","} catch <#pattern 3#>, <#pattern 4#> where <#condition#> {","    <#statements#>","} catch {","    <#statements#>","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You write a pattern after "},{"type":"codeVoice","code":"catch"},{"text":" to indicate what errors","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that clause can handle."},{"type":"text","text":" "},{"text":"If a ","type":"text"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause doesn’t have a pattern,"},{"type":"text","text":" "},{"text":"the clause matches any error","type":"text"},{"text":" ","type":"text"},{"text":"and binds the error to a local constant named ","type":"text"},{"code":"error","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"For more information about pattern matching,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the following code matches against all three cases"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"code":"VendingMachineError","type":"codeVoice"},{"type":"text","text":" enumeration."}]},{"type":"codeListing","code":["var vendingMachine = VendingMachine()","vendingMachine.coinsDeposited = 8","do {","    try buyFavoriteSnack(person: \"Alice\", vendingMachine: vendingMachine)","    print(\"Success! Yum.\")","} catch VendingMachineError.invalidSelection {","    print(\"Invalid Selection.\")","} catch VendingMachineError.outOfStock {","    print(\"Out of Stock.\")","} catch VendingMachineError.insufficientFunds(let coinsNeeded) {","    print(\"Insufficient funds. Please insert an additional \\(coinsNeeded) coins.\")","} catch {","    print(\"Unexpected error: \\(error).\")","}","\/\/ Prints \"Insufficient funds. Please insert an additional 2 coins.\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the above example,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"buyFavoriteSnack(person:vendingMachine:)"},{"type":"text","text":" function is called in a "},{"type":"codeVoice","code":"try"},{"text":" expression,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because it can throw an error."},{"type":"text","text":" "},{"type":"text","text":"If an error is thrown,"},{"text":" ","type":"text"},{"type":"text","text":"execution immediately transfers to the "},{"code":"catch","type":"codeVoice"},{"text":" clauses,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which decide whether to allow propagation to continue."},{"text":" ","type":"text"},{"text":"If no pattern is matched, the error gets caught by the final ","type":"text"},{"code":"catch","type":"codeVoice"},{"type":"text","text":" "},{"text":"clause and is bound to a local ","type":"text"},{"type":"codeVoice","code":"error"},{"text":" constant.","type":"text"},{"type":"text","text":" "},{"text":"If no error is thrown,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the remaining statements in the "},{"type":"codeVoice","code":"do"},{"text":" statement are executed.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clauses don’t have to handle every possible error"},{"type":"text","text":" "},{"type":"text","text":"that the code in the "},{"type":"codeVoice","code":"do"},{"text":" clause can throw.","type":"text"},{"type":"text","text":" "},{"text":"If none of the ","type":"text"},{"code":"catch","type":"codeVoice"},{"text":" clauses handle the error,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the error propagates to the surrounding scope."},{"text":" ","type":"text"},{"type":"text","text":"However, the propagated error"},{"type":"text","text":" "},{"type":"text","text":"must be handled by "},{"inlineContent":[{"type":"text","text":"some"}],"type":"emphasis"},{"text":" surrounding scope.","type":"text"},{"type":"text","text":" "},{"text":"In a nonthrowing function,","type":"text"},{"text":" ","type":"text"},{"text":"an enclosing ","type":"text"},{"code":"do","type":"codeVoice"},{"text":"-","type":"text"},{"type":"codeVoice","code":"catch"},{"text":" statement","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"must handle the error."},{"type":"text","text":" "},{"text":"In a throwing function,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"either an enclosing "},{"type":"codeVoice","code":"do"},{"type":"text","text":"-"},{"code":"catch","type":"codeVoice"},{"text":" statement","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or the caller"},{"type":"text","text":" "},{"type":"text","text":"must handle the error."},{"text":" ","type":"text"},{"type":"text","text":"If the error propagates to the top-level scope"},{"text":" ","type":"text"},{"type":"text","text":"without being handled,"},{"text":" ","type":"text"},{"text":"you’ll get a runtime error.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the above example can be written so any"},{"type":"text","text":" "},{"type":"text","text":"error that isn’t a "},{"type":"codeVoice","code":"VendingMachineError"},{"type":"text","text":" is instead"},{"type":"text","text":" "},{"text":"caught by the calling function:","type":"text"}]},{"code":["func nourish(with item: String) throws {","    do {","        try vendingMachine.vend(itemNamed: item)","    } catch is VendingMachineError {","        print(\"Couldn't buy that from the vending machine.\")","    }","}","","do {","    try nourish(with: \"Beet-Flavored Chips\")","} catch {","    print(\"Unexpected non-vending-machine-related error: \\(error)\")","}","\/\/ Prints \"Couldn't buy that from the vending machine.\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"In the "},{"code":"nourish(with:)","type":"codeVoice"},{"text":" function,","type":"text"},{"type":"text","text":" "},{"text":"if ","type":"text"},{"code":"vend(itemNamed:)","type":"codeVoice"},{"text":" throws an error that’s","type":"text"},{"text":" ","type":"text"},{"text":"one of the cases of the ","type":"text"},{"type":"codeVoice","code":"VendingMachineError"},{"type":"text","text":" enumeration,"},{"type":"text","text":" "},{"code":"nourish(with:)","type":"codeVoice"},{"text":" handles the error by printing a message.","type":"text"},{"type":"text","text":" "},{"text":"Otherwise,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"nourish(with:)"},{"type":"text","text":" propagates the error to its call site."},{"text":" ","type":"text"},{"type":"text","text":"The error is then caught by the general "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause."}],"type":"paragraph"},{"inlineContent":[{"text":"Another way to catch several related errors","type":"text"},{"text":" ","type":"text"},{"text":"is to list them after ","type":"text"},{"code":"catch","type":"codeVoice"},{"type":"text","text":", separated by commas."},{"text":" ","type":"text"},{"type":"text","text":"For example:"}],"type":"paragraph"},{"type":"codeListing","code":["func eat(item: String) throws {","    do {","        try vendingMachine.vend(itemNamed: item)","    } catch VendingMachineError.invalidSelection, VendingMachineError.insufficientFunds, VendingMachineError.outOfStock {","        print(\"Invalid selection, out of stock, or not enough money.\")","    }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"code":"eat(item:)","type":"codeVoice"},{"type":"text","text":" function lists the vending machine errors to catch,"},{"type":"text","text":" "},{"type":"text","text":"and its error text corresponds to the items in that list."},{"type":"text","text":" "},{"type":"text","text":"If any of the three listed errors are thrown,"},{"type":"text","text":" "},{"text":"this ","type":"text"},{"code":"catch","type":"codeVoice"},{"type":"text","text":" clause handles them by printing a message."},{"type":"text","text":" "},{"text":"Any other errors are propagated to the surrounding scope,","type":"text"},{"text":" ","type":"text"},{"text":"including any vending-machine errors that might be added later.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"Conversión de errores en valores opcionales","anchor":"Conversi%C3%B3n-de-errores-en-valores-opcionales"},{"inlineContent":[{"text":"You use ","type":"text"},{"type":"codeVoice","code":"try?"},{"text":" to handle an error by converting it to an optional value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If an error is thrown while evaluating the "},{"code":"try?","type":"codeVoice"},{"text":" expression,","type":"text"},{"type":"text","text":" "},{"text":"the value of the expression is ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"type":"text","text":"in the following code "},{"type":"codeVoice","code":"x"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"y"},{"type":"text","text":" have the same value and behavior:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func someThrowingFunction() throws -> Int {","    \/\/ ...","}","","let x = try? someThrowingFunction()","","let y: Int?","do {","    y = try someThrowingFunction()","} catch {","    y = nil","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"code":"someThrowingFunction()","type":"codeVoice"},{"type":"text","text":" throws an error,"},{"text":" ","type":"text"},{"type":"text","text":"the value of "},{"type":"codeVoice","code":"x"},{"text":" and ","type":"text"},{"code":"y","type":"codeVoice"},{"type":"text","text":" is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Otherwise, the value of ","type":"text"},{"code":"x","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"y"},{"text":" is the value that the function returned.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Note that "},{"type":"codeVoice","code":"x"},{"type":"text","text":" and "},{"type":"codeVoice","code":"y"},{"text":" are an optional of whatever type ","type":"text"},{"type":"codeVoice","code":"someThrowingFunction()"},{"type":"text","text":" returns."},{"text":" ","type":"text"},{"text":"Here the function returns an integer, so ","type":"text"},{"code":"x","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"y"},{"type":"text","text":" are optional integers."}]},{"type":"paragraph","inlineContent":[{"text":"Using ","type":"text"},{"type":"codeVoice","code":"try?"},{"type":"text","text":" lets you write concise error handling code"},{"text":" ","type":"text"},{"type":"text","text":"when you want to handle all errors in the same way."},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"text":"the following code","type":"text"},{"type":"text","text":" "},{"type":"text","text":"uses several approaches to fetch data,"},{"type":"text","text":" "},{"text":"or returns ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" if all of the approaches fail.","type":"text"}]},{"code":["func fetchData() -> Data? {","    if let data = try? fetchDataFromDisk() { return data }","    if let data = try? fetchDataFromServer() { return data }","    return nil","}"],"type":"codeListing","syntax":"swift"},{"text":"Inhabilitar la propagación de errores","level":3,"type":"heading","anchor":"Inhabilitar-la-propagaci%C3%B3n-de-errores"},{"inlineContent":[{"type":"text","text":"Sometimes you know a throwing function or method"},{"text":" ","type":"text"},{"text":"won’t, in fact, throw an error at runtime.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"On those occasions,"},{"type":"text","text":" "},{"type":"text","text":"you can write "},{"type":"codeVoice","code":"try!"},{"text":" before the expression to disable error propagation","type":"text"},{"type":"text","text":" "},{"text":"and wrap the call in a runtime assertion that no error will be thrown.","type":"text"},{"type":"text","text":" "},{"text":"If an error actually is thrown, you’ll get a runtime error.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the following code uses a "},{"type":"codeVoice","code":"loadImage(atPath:)"},{"type":"text","text":" function,"},{"text":" ","type":"text"},{"type":"text","text":"which loads the image resource at a given path"},{"text":" ","type":"text"},{"type":"text","text":"or throws an error if the image can’t be loaded."},{"text":" ","type":"text"},{"text":"In this case, because the image is shipped with the application,","type":"text"},{"text":" ","type":"text"},{"text":"no error will be thrown at runtime,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so it’s appropriate to disable error propagation."}]},{"type":"codeListing","syntax":"swift","code":["let photo = try! loadImage(atPath: \".\/Resources\/John Appleseed.jpg\")"]},{"level":2,"text":"Especificando acciones de limpieza","anchor":"Especificando-acciones-de-limpieza","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You use a ","type":"text"},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement to execute a set of statements"},{"type":"text","text":" "},{"type":"text","text":"just before code execution leaves the current block of code."},{"type":"text","text":" "},{"type":"text","text":"This statement lets you do any necessary cleanup"},{"type":"text","text":" "},{"text":"that should be performed regardless","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of "},{"type":"emphasis","inlineContent":[{"text":"how","type":"text"}]},{"type":"text","text":" execution leaves the current block of code —"},{"type":"text","text":" "},{"type":"text","text":"whether it leaves because an error was thrown"},{"text":" ","type":"text"},{"text":"or because of a statement such as ","type":"text"},{"type":"codeVoice","code":"return"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"break"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"For example, you can use a ","type":"text"},{"code":"defer","type":"codeVoice"},{"text":" statement","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to ensure that file descriptors are closed"},{"text":" ","type":"text"},{"type":"text","text":"and manually allocated memory is freed."}]},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement defers execution until the current scope is exited."},{"type":"text","text":" "},{"type":"text","text":"This statement consists of the "},{"code":"defer","type":"codeVoice"},{"type":"text","text":" keyword and the statements to be executed later."},{"text":" ","type":"text"},{"type":"text","text":"The deferred statements may not contain any code"},{"text":" ","type":"text"},{"type":"text","text":"that would transfer control out of the statements,"},{"type":"text","text":" "},{"text":"such as a ","type":"text"},{"type":"codeVoice","code":"break"},{"type":"text","text":" or a "},{"code":"return","type":"codeVoice"},{"type":"text","text":" statement,"},{"type":"text","text":" "},{"text":"or by throwing an error.","type":"text"},{"text":" ","type":"text"},{"text":"Deferred actions are executed in the reverse of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the order that they’re written in your source code."},{"type":"text","text":" "},{"text":"That is, the code in the first ","type":"text"},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement executes last,"},{"text":" ","type":"text"},{"text":"the code in the second ","type":"text"},{"code":"defer","type":"codeVoice"},{"type":"text","text":" statement executes second to last,"},{"type":"text","text":" "},{"text":"and so on.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The last "},{"code":"defer","type":"codeVoice"},{"type":"text","text":" statement in source code order executes first."}]},{"type":"codeListing","syntax":"swift","code":["func processFile(filename: String) throws {","    if exists(filename) {","        let file = open(filename)","        defer {","            close(file)","        }","        while let line = try file.readline() {","            \/\/ Work with the file.","        }","        \/\/ close(file) is called here, at the end of the scope.","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The above example uses a "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"text":"to ensure that the ","type":"text"},{"code":"open(_:)","type":"codeVoice"},{"text":" function","type":"text"},{"type":"text","text":" "},{"text":"has a corresponding call to ","type":"text"},{"code":"close(_:)","type":"codeVoice"},{"text":".","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use a "},{"code":"defer","type":"codeVoice"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"type":"text","text":"even when no error handling code is involved."}]}],"style":"note","type":"aside","name":"Note"},{"type":"aside","style":"note","name":"Software Beta","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo."}]},{"type":"paragraph","inlineContent":[{"text":"Conoce más acerca del uso del ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/"},{"type":"text","text":"."}]}]}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"title":"Manejo de errores"},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Patterns":{"url":"\/documentation\/the-swift-programming-language\/patterns","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","type":"topic","role":"article","abstract":[{"type":"text","text":"Match and destructure values."}],"title":"Patrones","kind":"article"},"https://developer.apple.com/es/support/beta-software/":{"titleInlineContent":[{"text":"software beta de Apple","type":"text"}],"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"link","title":"software beta de Apple"},"https://developer.apple.com/documentation/swift/cocoa_design_patterns/handling_cocoa_errors_in_swift":{"titleInlineContent":[{"text":"Handling Cocoa Errors in Swift","type":"text"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/cocoa_design_patterns\/handling_cocoa_errors_in_swift","url":"https:\/\/developer.apple.com\/documentation\/swift\/cocoa_design_patterns\/handling_cocoa_errors_in_swift","type":"link","title":"Handling Cocoa Errors in Swift"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"url":"\/documentation\/the-swift-programming-language","kind":"article","type":"topic","title":"The Swift Programming Language (6)","role":"collection","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","abstract":[]}}}