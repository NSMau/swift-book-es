{"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Methods"}],"type":"emphasis"},{"type":"text","text":" are functions that are associated with a particular type."},{"text":" ","type":"text"},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"text":" ","type":"text"},{"text":"which encapsulate specific tasks and functionality for working with an instance of a given type.","type":"text"},{"text":" ","type":"text"},{"text":"Classes, structures, and enumerations can also define type methods,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which are associated with the type itself."},{"text":" ","type":"text"},{"text":"Type methods are similar to class methods in Objective-C.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The fact that structures and enumerations can define methods in Swift"},{"type":"text","text":" "},{"text":"is a major difference from C and Objective-C.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In Objective-C, classes are the only types that can define methods."},{"type":"text","text":" "},{"type":"text","text":"In Swift, you can choose whether to define a class, structure, or enumeration,"},{"text":" ","type":"text"},{"type":"text","text":"and still have the flexibility to define methods on the type you create."}]},{"type":"heading","level":2,"anchor":"M%C3%A9todos-de-instancia","text":"Métodos de instancia"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Instance methods","type":"text"}]},{"type":"text","text":" are functions that belong to instances of"},{"text":" ","type":"text"},{"type":"text","text":"a particular class, structure, or enumeration."},{"text":" ","type":"text"},{"text":"They support the functionality of those instances,","type":"text"},{"text":" ","type":"text"},{"text":"either by providing ways to access and modify instance properties,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or by providing functionality related to the instance’s purpose."},{"type":"text","text":" "},{"type":"text","text":"Instance methods have exactly the same syntax as functions,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"You write an instance method within the opening and closing braces of the type it belongs to.","type":"text"},{"text":" ","type":"text"},{"text":"An instance method has implicit access to all other instance methods and properties of that type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"An instance method can be called only on a specific instance of the type it belongs to."},{"text":" ","type":"text"},{"text":"It can’t be called in isolation without an existing instance.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Here’s an example that defines a simple "},{"code":"Counter","type":"codeVoice"},{"type":"text","text":" class,"},{"type":"text","text":" "},{"type":"text","text":"which can be used to count the number of times an action occurs:"}],"type":"paragraph"},{"type":"codeListing","code":["class Counter {","    var count = 0","    func increment() {","        count += 1","    }","    func increment(by amount: Int) {","        count += amount","    }","    func reset() {","        count = 0","    }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"code":"Counter","type":"codeVoice"},{"type":"text","text":" class defines three instance methods:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"increment()","type":"codeVoice"},{"text":" increments the counter by ","type":"text"},{"code":"1","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"increment(by: Int)","type":"codeVoice"},{"text":" increments the counter by a specified integer amount.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"reset()","type":"codeVoice"},{"type":"text","text":" resets the counter to zero."}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"The "},{"code":"Counter","type":"codeVoice"},{"type":"text","text":" class also declares a variable property, "},{"type":"codeVoice","code":"count"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to keep track of the current counter value."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You call instance methods with the same dot syntax as properties:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let counter = Counter()","\/\/ the initial counter value is 0","counter.increment()","\/\/ the counter's value is now 1","counter.increment(by: 5)","\/\/ the counter's value is now 6","counter.reset()","\/\/ the counter's value is now 0"]},{"inlineContent":[{"type":"text","text":"Function parameters can have both a name (for use within the function’s body)"},{"type":"text","text":" "},{"type":"text","text":"and an argument label (for use when calling the function),"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"text","text":"doc:Functions#Etiquetas-de-argumentos-y-nombres-de-parámetros-de-funciones"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The same is true for method parameters,"},{"text":" ","type":"text"},{"type":"text","text":"because methods are just functions that are associated with a type."}],"type":"paragraph"},{"text":"La propiedad self","anchor":"La-propiedad-self","type":"heading","level":3},{"inlineContent":[{"text":"Every instance of a type has an implicit property called ","type":"text"},{"code":"self","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which is exactly equivalent to the instance itself."},{"text":" ","type":"text"},{"text":"You use the ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":" property to refer to the current instance"},{"text":" ","type":"text"},{"type":"text","text":"within its own instance methods."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"increment()"},{"text":" method in the example above could have been written like this:","type":"text"}]},{"code":["func increment() {","    self.count += 1","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"In practice, you don’t need to write ","type":"text"},{"code":"self","type":"codeVoice"},{"text":" in your code very often.","type":"text"},{"text":" ","type":"text"},{"text":"If you don’t explicitly write ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"Swift assumes that you are referring to a property or method of the current instance"},{"type":"text","text":" "},{"text":"whenever you use a known property or method name within a method.","type":"text"},{"text":" ","type":"text"},{"text":"This assumption is demonstrated by the use of ","type":"text"},{"type":"codeVoice","code":"count"},{"text":" (rather than ","type":"text"},{"code":"self.count","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"inside the three instance methods for "},{"code":"Counter","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"The main exception to this rule occurs when a parameter name for an instance method","type":"text"},{"text":" ","type":"text"},{"text":"has the same name as a property of that instance.","type":"text"},{"type":"text","text":" "},{"text":"In this situation, the parameter name takes precedence,","type":"text"},{"text":" ","type":"text"},{"text":"and it becomes necessary to refer to the property in a more qualified way.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You use the "},{"type":"codeVoice","code":"self"},{"type":"text","text":" property to"},{"type":"text","text":" "},{"type":"text","text":"distinguish between the parameter name and the property name."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Here, ","type":"text"},{"type":"codeVoice","code":"self"},{"text":" disambiguates between","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a method parameter called "},{"type":"codeVoice","code":"x"},{"text":" and an instance property that’s also called ","type":"text"},{"code":"x","type":"codeVoice"},{"type":"text","text":":"}]},{"code":["struct Point {","    var x = 0.0, y = 0.0","    func isToTheRightOf(x: Double) -> Bool {","        return self.x > x","    }","}","let somePoint = Point(x: 4.0, y: 5.0)","if somePoint.isToTheRightOf(x: 1.0) {","    print(\"This point is to the right of the line where x == 1.0\")","}","\/\/ Prints \"This point is to the right of the line where x == 1.0\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Without the ","type":"text"},{"code":"self","type":"codeVoice"},{"text":" prefix,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift would assume that both uses of "},{"type":"codeVoice","code":"x"},{"text":" referred to the method parameter called ","type":"text"},{"type":"codeVoice","code":"x"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Modificando tipos de valor desde adentro de métodos de instancia","level":3,"anchor":"Modificando-tipos-de-valor-desde-adentro-de-m%C3%A9todos-de-instancia","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Structures and enumerations are "},{"type":"emphasis","inlineContent":[{"text":"value types","type":"text"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"By default, the properties of a value type can’t be modified from within its instance methods."}]},{"inlineContent":[{"text":"However, if you need to modify the properties of your structure or enumeration","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"within a particular method,"},{"text":" ","type":"text"},{"type":"text","text":"you can opt in to "},{"type":"emphasis","inlineContent":[{"text":"mutating","type":"text"}]},{"text":" behavior for that method.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The method can then mutate (that is, change)"},{"type":"text","text":" "},{"type":"text","text":"its properties from within the method,"},{"type":"text","text":" "},{"type":"text","text":"and any changes that it makes are written back to the original structure when the method ends."},{"text":" ","type":"text"},{"type":"text","text":"The method can also assign a completely new instance to its implicit "},{"code":"self","type":"codeVoice"},{"type":"text","text":" property,"},{"text":" ","type":"text"},{"type":"text","text":"and this new instance will replace the existing one when the method ends."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can opt in to this behavior by placing the "},{"code":"mutating","type":"codeVoice"},{"type":"text","text":" keyword"},{"text":" ","type":"text"},{"type":"text","text":"before the "},{"type":"codeVoice","code":"func"},{"text":" keyword for that method:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct Point {","    var x = 0.0, y = 0.0","    mutating func moveBy(x deltaX: Double, y deltaY: Double) {","        x += deltaX","        y += deltaY","    }","}","var somePoint = Point(x: 1.0, y: 1.0)","somePoint.moveBy(x: 2.0, y: 3.0)","print(\"The point is now at (\\(somePoint.x), \\(somePoint.y))\")","\/\/ Prints \"The point is now at (3.0, 4.0)\""]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Point","type":"codeVoice"},{"type":"text","text":" structure above defines a mutating "},{"code":"moveBy(x:y:)","type":"codeVoice"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"which moves a "},{"type":"codeVoice","code":"Point"},{"type":"text","text":" instance by a certain amount."},{"text":" ","type":"text"},{"text":"Instead of returning a new point,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"this method actually modifies the point on which it’s called."},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"code":"mutating","type":"codeVoice"},{"type":"text","text":" keyword is added to its definition"},{"type":"text","text":" "},{"text":"to enable it to modify its properties.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Note that you can’t call a mutating method on a constant of structure type,"},{"type":"text","text":" "},{"text":"because its properties can’t be changed, even if they’re variable properties,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Propiedades-almacenadas-de-instancias-de-estructuras-constantes","isActive":true},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let fixedPoint = Point(x: 3.0, y: 3.0)","fixedPoint.moveBy(x: 2.0, y: 3.0)","\/\/ this will report an error"]},{"type":"heading","text":"Asignación a self dentro de un método modificador","level":3,"anchor":"Asignaci%C3%B3n-a-self-dentro-de-un-m%C3%A9todo-modificador"},{"inlineContent":[{"text":"Mutating methods can assign an entirely new instance to the implicit ","type":"text"},{"code":"self","type":"codeVoice"},{"type":"text","text":" property."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"Point","type":"codeVoice"},{"type":"text","text":" example shown above could have been written in the following way instead:"}],"type":"paragraph"},{"type":"codeListing","code":["struct Point {","    var x = 0.0, y = 0.0","    mutating func moveBy(x deltaX: Double, y deltaY: Double) {","        self = Point(x: x + deltaX, y: y + deltaY)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This version of the mutating ","type":"text"},{"code":"moveBy(x:y:)","type":"codeVoice"},{"type":"text","text":" method creates a new structure"},{"text":" ","type":"text"},{"type":"text","text":"whose "},{"code":"x","type":"codeVoice"},{"type":"text","text":" and "},{"code":"y","type":"codeVoice"},{"type":"text","text":" values are set to the target location."},{"text":" ","type":"text"},{"text":"The end result of calling this alternative version of the method","type":"text"},{"type":"text","text":" "},{"type":"text","text":"will be exactly the same as for calling the earlier version."}]},{"type":"paragraph","inlineContent":[{"text":"Mutating methods for enumerations can set the implicit ","type":"text"},{"code":"self","type":"codeVoice"},{"type":"text","text":" parameter to be"},{"text":" ","type":"text"},{"type":"text","text":"a different case from the same enumeration:"}]},{"syntax":"swift","type":"codeListing","code":["enum TriStateSwitch {","    case off, low, high","    mutating func next() {","        switch self {","        case .off:","            self = .low","        case .low:","            self = .high","        case .high:","            self = .off","        }","    }","}","var ovenLight = TriStateSwitch.low","ovenLight.next()","\/\/ ovenLight is now equal to .high","ovenLight.next()","\/\/ ovenLight is now equal to .off"]},{"type":"paragraph","inlineContent":[{"text":"This example defines an enumeration for a three-state switch.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The switch cycles between three different power states"},{"text":" ","type":"text"},{"type":"text","text":"("},{"code":"off","type":"codeVoice"},{"text":", ","type":"text"},{"code":"low","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"high","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"every time its ","type":"text"},{"type":"codeVoice","code":"next()"},{"type":"text","text":" method is called."}]},{"text":"Métodos de tipo","type":"heading","anchor":"M%C3%A9todos-de-tipo","level":2},{"type":"paragraph","inlineContent":[{"text":"Instance methods, as described above,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are methods that you call on an instance of a particular type."},{"text":" ","type":"text"},{"type":"text","text":"You can also define methods that are called on the type itself."},{"type":"text","text":" "},{"type":"text","text":"These kinds of methods are called "},{"inlineContent":[{"type":"text","text":"type methods"}],"type":"emphasis"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"You indicate type methods by writing","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"static"},{"text":" keyword before the method’s ","type":"text"},{"type":"codeVoice","code":"func"},{"type":"text","text":" keyword."},{"text":" ","type":"text"},{"text":"Classes can use the ","type":"text"},{"code":"class","type":"codeVoice"},{"type":"text","text":" keyword instead,"},{"type":"text","text":" "},{"text":"to allow subclasses to override the superclass’s implementation of that method.","type":"text"}]},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Objective-C, you can define type-level methods only for Objective-C classes."},{"type":"text","text":" "},{"type":"text","text":"In Swift, you can define type-level methods for all classes, structures, and enumerations."},{"type":"text","text":" "},{"text":"Each type method is explicitly scoped to the type it supports.","type":"text"}]}]},{"inlineContent":[{"type":"text","text":"Type methods are called with dot syntax, like instance methods."},{"text":" ","type":"text"},{"text":"However, you call type methods on the type, not on an instance of that type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Here’s how you call a type method on a class called "},{"code":"SomeClass","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class SomeClass {","    class func someTypeMethod() {","        \/\/ type method implementation goes here","    }","}","SomeClass.someTypeMethod()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Within the body of a type method,"},{"type":"text","text":" "},{"text":"the implicit ","type":"text"},{"type":"codeVoice","code":"self"},{"text":" property refers to the type itself,","type":"text"},{"text":" ","type":"text"},{"text":"rather than an instance of that type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This means that you can use "},{"type":"codeVoice","code":"self"},{"text":" to disambiguate between","type":"text"},{"type":"text","text":" "},{"text":"type properties and type method parameters,","type":"text"},{"type":"text","text":" "},{"text":"just as you do for instance properties and instance method parameters.","type":"text"}]},{"inlineContent":[{"type":"text","text":"More generally, any unqualified method and property names that you use"},{"type":"text","text":" "},{"text":"within the body of a type method will refer to other type-level methods and properties.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"A type method can call another type method with the other method’s name,"},{"type":"text","text":" "},{"type":"text","text":"without needing to prefix it with the type name."},{"text":" ","type":"text"},{"text":"Similarly, type methods on structures and enumerations can access type properties","type":"text"},{"type":"text","text":" "},{"text":"by using the type property’s name without a type name prefix.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The example below defines a structure called ","type":"text"},{"code":"LevelTracker","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which tracks a player’s progress through the different levels or stages of a game.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It’s a single-player game,"},{"text":" ","type":"text"},{"text":"but can store information for multiple players on a single device.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of the game’s levels (apart from level one) are locked when the game is first played."},{"type":"text","text":" "},{"type":"text","text":"Every time a player finishes a level,"},{"type":"text","text":" "},{"type":"text","text":"that level is unlocked for all players on the device."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"LevelTracker","type":"codeVoice"},{"text":" structure uses type properties and methods","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to keep track of which levels of the game have been unlocked."},{"text":" ","type":"text"},{"text":"It also tracks the current level for an individual player.","type":"text"}]},{"code":["struct LevelTracker {","    static var highestUnlockedLevel = 1","    var currentLevel = 1","","    static func unlock(_ level: Int) {","        if level > highestUnlockedLevel { highestUnlockedLevel = level }","    }","","    static func isUnlocked(_ level: Int) -> Bool {","        return level <= highestUnlockedLevel","    }","","    @discardableResult","    mutating func advance(to level: Int) -> Bool {","        if LevelTracker.isUnlocked(level) {","            currentLevel = level","            return true","        } else {","            return false","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"LevelTracker","type":"codeVoice"},{"type":"text","text":" structure keeps track of the highest level that any player has unlocked."},{"text":" ","type":"text"},{"type":"text","text":"This value is stored in a type property called "},{"type":"codeVoice","code":"highestUnlockedLevel"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"code":"LevelTracker","type":"codeVoice"},{"text":" also defines two type functions to work with","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"highestUnlockedLevel"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"The first is a type function called "},{"type":"codeVoice","code":"unlock(_:)"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which updates the value of "},{"type":"codeVoice","code":"highestUnlockedLevel"},{"text":" whenever a new level is unlocked.","type":"text"},{"text":" ","type":"text"},{"text":"The second is a convenience type function called ","type":"text"},{"type":"codeVoice","code":"isUnlocked(_:)"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which returns ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":" if a particular level number is already unlocked."},{"type":"text","text":" "},{"text":"(Note that these type methods can access the ","type":"text"},{"code":"highestUnlockedLevel","type":"codeVoice"},{"text":" type property","type":"text"},{"type":"text","text":" "},{"type":"text","text":"without your needing to write it as "},{"type":"codeVoice","code":"LevelTracker.highestUnlockedLevel"},{"type":"text","text":".)"}]},{"inlineContent":[{"type":"text","text":"In addition to its type property and type methods,"},{"text":" ","type":"text"},{"code":"LevelTracker","type":"codeVoice"},{"text":" tracks an individual player’s progress through the game.","type":"text"},{"type":"text","text":" "},{"text":"It uses an instance property called ","type":"text"},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" to track"},{"type":"text","text":" "},{"text":"the level that a player is currently playing.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To help manage the "},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"type":"codeVoice","code":"LevelTracker"},{"text":" defines an instance method called ","type":"text"},{"type":"codeVoice","code":"advance(to:)"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Before updating "},{"code":"currentLevel","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"this method checks whether the requested new level is already unlocked."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"advance(to:)","type":"codeVoice"},{"text":" method returns a Boolean value to indicate","type":"text"},{"type":"text","text":" "},{"text":"whether or not it was actually able to set ","type":"text"},{"type":"codeVoice","code":"currentLevel"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because it’s not necessarily a mistake for"},{"text":" ","type":"text"},{"text":"code that calls the ","type":"text"},{"code":"advance(to:)","type":"codeVoice"},{"text":" method","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to ignore the return value,"},{"type":"text","text":" "},{"type":"text","text":"this function is marked with the "},{"type":"codeVoice","code":"@discardableResult"},{"text":" attribute.","type":"text"},{"type":"text","text":" "},{"text":"For more information about this attribute,","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"LevelTracker"},{"text":" structure is used with the ","type":"text"},{"type":"codeVoice","code":"Player"},{"text":" class, shown below,","type":"text"},{"text":" ","type":"text"},{"text":"to track and update the progress of an individual player:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["class Player {","    var tracker = LevelTracker()","    let playerName: String","    func complete(level: Int) {","        LevelTracker.unlock(level + 1)","        tracker.advance(to: level + 1)","    }","    init(name: String) {","        playerName = name","    }","}"],"syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"Player","type":"codeVoice"},{"text":" class creates a new instance of ","type":"text"},{"type":"codeVoice","code":"LevelTracker"},{"type":"text","text":" "},{"text":"to track that player’s progress.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It also provides a method called "},{"type":"codeVoice","code":"complete(level:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is called whenever a player completes a particular level."},{"text":" ","type":"text"},{"type":"text","text":"This method unlocks the next level for all players"},{"type":"text","text":" "},{"type":"text","text":"and updates the player’s progress to move them to the next level."},{"type":"text","text":" "},{"type":"text","text":"(The Boolean return value of "},{"code":"advance(to:)","type":"codeVoice"},{"text":" is ignored,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"because the level is known to have been unlocked"},{"text":" ","type":"text"},{"type":"text","text":"by the call to "},{"type":"codeVoice","code":"LevelTracker.unlock(_:)"},{"text":" on the previous line.)","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"You can create an instance of the ","type":"text"},{"type":"codeVoice","code":"Player"},{"text":" class for a new player,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and see what happens when the player completes level one:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var player = Player(name: \"Argyrios\")","player.complete(level: 1)","print(\"highest unlocked level is now \\(LevelTracker.highestUnlockedLevel)\")","\/\/ Prints \"highest unlocked level is now 2\""]},{"type":"paragraph","inlineContent":[{"text":"If you create a second player, whom you try to move to a level","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that’s not yet unlocked by any player in the game,"},{"type":"text","text":" "},{"type":"text","text":"the attempt to set the player’s current level fails:"}]},{"syntax":"swift","code":["player = Player(name: \"Beto\")","if player.tracker.advance(to: 6) {","    print(\"player is now on level 6\")","} else {","    print(\"level 6 hasn't yet been unlocked\")","}","\/\/ Prints \"level 6 hasn't yet been unlocked\""],"type":"codeListing"},{"name":"Software Beta","type":"aside","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Conoce más acerca del uso del ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"reference"},{"text":".","type":"text"}]}],"style":"note"}]}],"metadata":{"title":"Métodos"},"abstract":[{"text":"Define and call functions that are part of an instance or type.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods"},"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","role":"collection","url":"\/documentation\/the-swift-programming-language","abstract":[],"title":"The Swift Programming Language (6)","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"kind":"article","abstract":[{"type":"text","text":"Define and call functions, label their arguments, and use their return values."}],"role":"article","type":"topic","title":"Funciones","url":"\/documentation\/the-swift-programming-language\/functions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Propiedades-almacenadas-de-instancias-de-estructuras-constantes":{"title":"Propiedades almacenadas de instancias de estructuras constantes","kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties#Propiedades-almacenadas-de-instancias-de-estructuras-constantes","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Propiedades-almacenadas-de-instancias-de-estructuras-constantes","abstract":[]},"https://developer.apple.com/es/support/beta-software/":{"titleInlineContent":[{"text":"software beta de Apple","type":"text"}],"title":"software beta de Apple","type":"link","url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","url":"\/documentation\/the-swift-programming-language\/attributes","type":"topic","role":"article","abstract":[{"text":"Add information to declarations and types.","type":"text"}],"title":"Attributes","kind":"article"}}}