{"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"type":"text","text":"Enumerations are often created to support a specific class or structure’s functionality."},{"type":"text","text":" "},{"type":"text","text":"Similarly, it can be convenient to define utility classes and structures"},{"text":" ","type":"text"},{"type":"text","text":"purely for use within the context of a more complex type."},{"type":"text","text":" "},{"type":"text","text":"To accomplish this, Swift enables you to define "},{"inlineContent":[{"text":"nested types","type":"text"}],"type":"emphasis"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"whereby you nest supporting enumerations, classes, and structures","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"within the definition of the type they support."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To nest a type within another type,"},{"type":"text","text":" "},{"type":"text","text":"write its definition within the outer braces of the type it supports."},{"text":" ","type":"text"},{"type":"text","text":"Types can be nested to as many levels as are required."}],"type":"paragraph"},{"level":2,"text":"Tipos anidados en acción","anchor":"Tipos-anidados-en-acci%C3%B3n","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The example below defines a structure called ","type":"text"},{"code":"BlackjackCard","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which models a playing card as used in the game of Blackjack.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"BlackjackCard"},{"type":"text","text":" structure contains two nested enumeration types"},{"type":"text","text":" "},{"type":"text","text":"called "},{"type":"codeVoice","code":"Suit"},{"type":"text","text":" and "},{"code":"Rank","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Blackjack, the Ace cards have a value of either one or eleven."},{"type":"text","text":" "},{"text":"This feature is represented by a structure called ","type":"text"},{"code":"Values","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is nested within the "},{"code":"Rank","type":"codeVoice"},{"text":" enumeration:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct BlackjackCard {","","    \/\/ nested Suit enumeration","    enum Suit: Character {","        case spades = \"♠\", hearts = \"♡\", diamonds = \"♢\", clubs = \"♣\"","    }","","    \/\/ nested Rank enumeration","    enum Rank: Int {","        case two = 2, three, four, five, six, seven, eight, nine, ten","        case jack, queen, king, ace","        struct Values {","            let first: Int, second: Int?","        }","        var values: Values {","            switch self {","            case .ace:","                return Values(first: 1, second: 11)","            case .jack, .queen, .king:","                return Values(first: 10, second: nil)","            default:","                return Values(first: self.rawValue, second: nil)","            }","        }","    }","","    \/\/ BlackjackCard properties and methods","    let rank: Rank, suit: Suit","    var description: String {","        var output = \"suit is \\(suit.rawValue),\"","        output += \" value is \\(rank.values.first)\"","        if let second = rank.values.second {","            output += \" or \\(second)\"","        }","        return output","    }","}"]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Suit"},{"text":" enumeration describes the four common playing card suits,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"together with a raw "},{"type":"codeVoice","code":"Character"},{"text":" value to represent their symbol.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Rank"},{"text":" enumeration describes the thirteen possible playing card ranks,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"together with a raw "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" value to represent their face value."},{"text":" ","type":"text"},{"text":"(This raw ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value isn’t used for the Jack, Queen, King, and Ace cards.)"}],"type":"paragraph"},{"inlineContent":[{"text":"As mentioned above, the ","type":"text"},{"type":"codeVoice","code":"Rank"},{"type":"text","text":" enumeration defines"},{"text":" ","type":"text"},{"text":"a further nested structure of its own, called ","type":"text"},{"type":"codeVoice","code":"Values"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"This structure encapsulates the fact that most cards have one value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but the Ace card has two values."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"Values"},{"type":"text","text":" structure defines two properties to represent this:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"first","type":"codeVoice"},{"type":"text","text":", of type "},{"type":"codeVoice","code":"Int"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"second","type":"codeVoice"},{"text":", of type ","type":"text"},{"code":"Int?","type":"codeVoice"},{"text":", or “optional ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":"”","type":"text"}]}]}]},{"inlineContent":[{"code":"Rank","type":"codeVoice"},{"text":" also defines a computed property, ","type":"text"},{"code":"values","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which returns an instance of the ","type":"text"},{"code":"Values","type":"codeVoice"},{"type":"text","text":" structure."},{"type":"text","text":" "},{"text":"This computed property considers the rank of the card","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and initializes a new "},{"code":"Values","type":"codeVoice"},{"text":" instance with appropriate values based on its rank.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It uses special values for "},{"code":"jack","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"queen"},{"text":", ","type":"text"},{"code":"king","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"ace"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"For the numeric cards, it uses the rank’s raw ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"BlackjackCard"},{"type":"text","text":" structure itself has two properties — "},{"type":"codeVoice","code":"rank"},{"text":" and ","type":"text"},{"code":"suit","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"It also defines a computed property called ","type":"text"},{"code":"description","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which uses the values stored in "},{"code":"rank","type":"codeVoice"},{"type":"text","text":" and "},{"code":"suit","type":"codeVoice"},{"type":"text","text":" to build"},{"text":" ","type":"text"},{"type":"text","text":"a description of the name and value of the card."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"description","type":"codeVoice"},{"text":" property uses optional binding to check whether there’s","type":"text"},{"type":"text","text":" "},{"text":"a second value to display, and if so,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"inserts additional description detail for that second value."}]},{"type":"paragraph","inlineContent":[{"text":"Because ","type":"text"},{"code":"BlackjackCard","type":"codeVoice"},{"text":" is a structure with no custom initializers,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it has an implicit memberwise initializer,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Inicializadores-a-nivel-de-miembro-para-tipos-de-estructura"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You can use this initializer to initialize a new constant called "},{"code":"theAceOfSpades","type":"codeVoice"},{"type":"text","text":":"}]},{"code":["let theAceOfSpades = BlackjackCard(rank: .ace, suit: .spades)","print(\"theAceOfSpades: \\(theAceOfSpades.description)\")","\/\/ Prints \"theAceOfSpades: suit is ♠, value is 1 or 11\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Even though "},{"type":"codeVoice","code":"Rank"},{"text":" and ","type":"text"},{"code":"Suit","type":"codeVoice"},{"text":" are nested within ","type":"text"},{"type":"codeVoice","code":"BlackjackCard"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"their type can be inferred from context,","type":"text"},{"text":" ","type":"text"},{"text":"and so the initialization of this instance is able to refer to the enumeration cases","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by their case names ("},{"code":".ace","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":".spades"},{"text":") alone.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In the example above, the "},{"code":"description","type":"codeVoice"},{"text":" property correctly reports that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the Ace of Spades has a value of "},{"code":"1","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"11"},{"type":"text","text":"."}]},{"text":"Referencias a tipos anidados","anchor":"Referencias-a-tipos-anidados","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To use a nested type outside of its definition context,"},{"type":"text","text":" "},{"text":"prefix its name with the name of the type it’s nested within:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let heartsSymbol = BlackjackCard.Suit.hearts.rawValue","\/\/ heartsSymbol is \"♡\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For the example above,"},{"type":"text","text":" "},{"type":"text","text":"this enables the names of "},{"type":"codeVoice","code":"Suit"},{"type":"text","text":", "},{"code":"Rank","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Values","type":"codeVoice"},{"text":" to be kept deliberately short,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because their names are naturally qualified by the context in which they’re defined."}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo."}]},{"inlineContent":[{"type":"text","text":"Conoce más acerca del uso del "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"Software Beta","style":"note"}]}],"abstract":[{"type":"text","text":"Define types inside the scope of another type."}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes","interfaceLanguage":"swift"},"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"metadata":{"title":"Tipos anidados"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Inicializadores-a-nivel-de-miembro-para-tipos-de-estructura":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/initialization#Inicializadores-a-nivel-de-miembro-para-tipos-de-estructura","title":"Inicializadores a nivel de miembro para tipos de estructura","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Inicializadores-a-nivel-de-miembro-para-tipos-de-estructura","kind":"section"},"https://developer.apple.com/es/support/beta-software/":{"titleInlineContent":[{"type":"text","text":"software beta de Apple"}],"url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","title":"software beta de Apple","type":"link","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"url":"\/documentation\/the-swift-programming-language","kind":"article","type":"topic","title":"The Swift Programming Language (6)","role":"collection","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","abstract":[]}}}