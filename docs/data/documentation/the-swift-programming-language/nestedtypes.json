{"metadata":{"title":"Tipos anidados"},"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"type":"text","text":"Enumerations are often created to support a specific class or structure’s functionality."},{"text":" ","type":"text"},{"text":"Similarly, it can be convenient to define utility classes and structures","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"purely for use within the context of a more complex type."},{"type":"text","text":" "},{"type":"text","text":"To accomplish this, Swift enables you to define "},{"inlineContent":[{"type":"text","text":"nested types"}],"type":"emphasis"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"whereby you nest supporting enumerations, classes, and structures"},{"text":" ","type":"text"},{"type":"text","text":"within the definition of the type they support."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To nest a type within another type,"},{"type":"text","text":" "},{"text":"write its definition within the outer braces of the type it supports.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Types can be nested to as many levels as are required."}]},{"anchor":"Tipos-anidados-en-acci%C3%B3n","type":"heading","text":"Tipos anidados en acción","level":2},{"type":"paragraph","inlineContent":[{"text":"The example below defines a structure called ","type":"text"},{"code":"BlackjackCard","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which models a playing card as used in the game of Blackjack."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"BlackjackCard"},{"type":"text","text":" structure contains two nested enumeration types"},{"type":"text","text":" "},{"text":"called ","type":"text"},{"type":"codeVoice","code":"Suit"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Rank"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In Blackjack, the Ace cards have a value of either one or eleven.","type":"text"},{"type":"text","text":" "},{"text":"This feature is represented by a structure called ","type":"text"},{"type":"codeVoice","code":"Values"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which is nested within the "},{"code":"Rank","type":"codeVoice"},{"type":"text","text":" enumeration:"}]},{"type":"codeListing","syntax":"swift","code":["struct BlackjackCard {","","    \/\/ nested Suit enumeration","    enum Suit: Character {","        case spades = \"♠\", hearts = \"♡\", diamonds = \"♢\", clubs = \"♣\"","    }","","    \/\/ nested Rank enumeration","    enum Rank: Int {","        case two = 2, three, four, five, six, seven, eight, nine, ten","        case jack, queen, king, ace","        struct Values {","            let first: Int, second: Int?","        }","        var values: Values {","            switch self {","            case .ace:","                return Values(first: 1, second: 11)","            case .jack, .queen, .king:","                return Values(first: 10, second: nil)","            default:","                return Values(first: self.rawValue, second: nil)","            }","        }","    }","","    \/\/ BlackjackCard properties and methods","    let rank: Rank, suit: Suit","    var description: String {","        var output = \"suit is \\(suit.rawValue),\"","        output += \" value is \\(rank.values.first)\"","        if let second = rank.values.second {","            output += \" or \\(second)\"","        }","        return output","    }","}"]},{"inlineContent":[{"text":"The ","type":"text"},{"code":"Suit","type":"codeVoice"},{"type":"text","text":" enumeration describes the four common playing card suits,"},{"type":"text","text":" "},{"text":"together with a raw ","type":"text"},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value to represent their symbol."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Rank","type":"codeVoice"},{"type":"text","text":" enumeration describes the thirteen possible playing card ranks,"},{"type":"text","text":" "},{"text":"together with a raw ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":" value to represent their face value."},{"type":"text","text":" "},{"text":"(This raw ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" value isn’t used for the Jack, Queen, King, and Ace cards.)","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned above, the "},{"type":"codeVoice","code":"Rank"},{"type":"text","text":" enumeration defines"},{"type":"text","text":" "},{"type":"text","text":"a further nested structure of its own, called "},{"code":"Values","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"This structure encapsulates the fact that most cards have one value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but the Ace card has two values."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"Values","type":"codeVoice"},{"type":"text","text":" structure defines two properties to represent this:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"first"},{"type":"text","text":", of type "},{"type":"codeVoice","code":"Int"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"second","type":"codeVoice"},{"type":"text","text":", of type "},{"code":"Int?","type":"codeVoice"},{"text":", or “optional ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":"”","type":"text"}]}]}]},{"inlineContent":[{"type":"codeVoice","code":"Rank"},{"type":"text","text":" also defines a computed property, "},{"type":"codeVoice","code":"values"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which returns an instance of the ","type":"text"},{"code":"Values","type":"codeVoice"},{"type":"text","text":" structure."},{"text":" ","type":"text"},{"type":"text","text":"This computed property considers the rank of the card"},{"type":"text","text":" "},{"text":"and initializes a new ","type":"text"},{"type":"codeVoice","code":"Values"},{"text":" instance with appropriate values based on its rank.","type":"text"},{"type":"text","text":" "},{"text":"It uses special values for ","type":"text"},{"type":"codeVoice","code":"jack"},{"type":"text","text":", "},{"type":"codeVoice","code":"queen"},{"type":"text","text":", "},{"type":"codeVoice","code":"king"},{"type":"text","text":", and "},{"code":"ace","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For the numeric cards, it uses the rank’s raw "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" value."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"BlackjackCard"},{"type":"text","text":" structure itself has two properties — "},{"type":"codeVoice","code":"rank"},{"type":"text","text":" and "},{"type":"codeVoice","code":"suit"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"It also defines a computed property called ","type":"text"},{"code":"description","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which uses the values stored in "},{"code":"rank","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"suit"},{"type":"text","text":" to build"},{"type":"text","text":" "},{"text":"a description of the name and value of the card.","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"description"},{"type":"text","text":" property uses optional binding to check whether there’s"},{"type":"text","text":" "},{"type":"text","text":"a second value to display, and if so,"},{"type":"text","text":" "},{"text":"inserts additional description detail for that second value.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"code":"BlackjackCard","type":"codeVoice"},{"type":"text","text":" is a structure with no custom initializers,"},{"type":"text","text":" "},{"type":"text","text":"it has an implicit memberwise initializer,"},{"type":"text","text":" "},{"text":"as described in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Inicializadores-a-nivel-de-miembro-para-tipos-de-estructura","type":"reference"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"You can use this initializer to initialize a new constant called ","type":"text"},{"code":"theAceOfSpades","type":"codeVoice"},{"type":"text","text":":"}]},{"syntax":"swift","code":["let theAceOfSpades = BlackjackCard(rank: .ace, suit: .spades)","print(\"theAceOfSpades: \\(theAceOfSpades.description)\")","\/\/ Prints \"theAceOfSpades: suit is ♠, value is 1 or 11\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Even though "},{"type":"codeVoice","code":"Rank"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Suit"},{"type":"text","text":" are nested within "},{"type":"codeVoice","code":"BlackjackCard"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"their type can be inferred from context,"},{"type":"text","text":" "},{"text":"and so the initialization of this instance is able to refer to the enumeration cases","type":"text"},{"text":" ","type":"text"},{"text":"by their case names (","type":"text"},{"type":"codeVoice","code":".ace"},{"type":"text","text":" and "},{"type":"codeVoice","code":".spades"},{"text":") alone.","type":"text"},{"text":" ","type":"text"},{"text":"In the example above, the ","type":"text"},{"type":"codeVoice","code":"description"},{"text":" property correctly reports that","type":"text"},{"type":"text","text":" "},{"text":"the Ace of Spades has a value of ","type":"text"},{"code":"1","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"11","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Referencias-a-tipos-anidados","type":"heading","level":2,"text":"Referencias a tipos anidados"},{"inlineContent":[{"text":"To use a nested type outside of its definition context,","type":"text"},{"type":"text","text":" "},{"text":"prefix its name with the name of the type it’s nested within:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let heartsSymbol = BlackjackCard.Suit.hearts.rawValue","\/\/ heartsSymbol is \"♡\""],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"For the example above,"},{"text":" ","type":"text"},{"text":"this enables the names of ","type":"text"},{"type":"codeVoice","code":"Suit"},{"type":"text","text":", "},{"code":"Rank","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Values"},{"type":"text","text":" to be kept deliberately short,"},{"text":" ","type":"text"},{"text":"because their names are naturally qualified by the context in which they’re defined.","type":"text"}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conoce más acerca del uso del "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"reference"},{"text":".","type":"text"}]}],"name":"Software Beta","style":"note","type":"aside"}]}],"kind":"article","schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"abstract":[{"text":"Define types inside the scope of another type.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes"},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Inicializadores-a-nivel-de-miembro-para-tipos-de-estructura":{"url":"\/documentation\/the-swift-programming-language\/initialization#Inicializadores-a-nivel-de-miembro-para-tipos-de-estructura","type":"topic","kind":"section","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Inicializadores-a-nivel-de-miembro-para-tipos-de-estructura","title":"Inicializadores a nivel de miembro para tipos de estructura"},"https://developer.apple.com/es/support/beta-software/":{"url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"link","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","titleInlineContent":[{"text":"software beta de Apple","type":"text"}],"title":"software beta de Apple"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"title":"The Swift Programming Language (5.9)","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","type":"topic","url":"\/documentation\/the-swift-programming-language","abstract":[],"role":"collection"}}}