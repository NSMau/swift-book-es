{"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"text":"Classes, structures, and enumerations can define ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"subscripts","type":"text"}]},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"text":"You use subscripts to set and retrieve values by index without needing","type":"text"},{"type":"text","text":" "},{"text":"separate methods for setting and retrieval.","type":"text"},{"type":"text","text":" "},{"text":"For example, you access elements in an ","type":"text"},{"type":"codeVoice","code":"Array"},{"text":" instance as ","type":"text"},{"code":"someArray[index]","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"text":" instance as ","type":"text"},{"code":"someDictionary[key]","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"You can define multiple subscripts for a single type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the appropriate subscript overload to use is selected"},{"type":"text","text":" "},{"type":"text","text":"based on the type of index value you pass to the subscript."},{"type":"text","text":" "},{"type":"text","text":"Subscripts aren’t limited to a single dimension,"},{"type":"text","text":" "},{"text":"and you can define subscripts with multiple input parameters","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to suit your custom type’s needs."}],"type":"paragraph"},{"anchor":"Sintaxis-de-los-sub%C3%ADndices","type":"heading","level":2,"text":"Sintaxis de los subíndices"},{"inlineContent":[{"text":"Subscripts enable you to query instances of a type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by writing one or more values in square brackets after the instance name."},{"text":" ","type":"text"},{"type":"text","text":"Their syntax is similar to both instance method syntax and computed property syntax."},{"type":"text","text":" "},{"type":"text","text":"You write subscript definitions with the "},{"type":"codeVoice","code":"subscript"},{"text":" keyword,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and specify one or more input parameters and a return type,"},{"type":"text","text":" "},{"type":"text","text":"in the same way as instance methods."},{"type":"text","text":" "},{"type":"text","text":"Unlike instance methods, subscripts can be read-write or read-only."},{"text":" ","type":"text"},{"text":"This behavior is communicated by a getter and setter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the same way as for computed properties:"}],"type":"paragraph"},{"code":["subscript(index: Int) -> Int {","    get {","        \/\/ Return an appropriate subscript value here.","    }","    set(newValue) {","        \/\/ Perform a suitable setting action here.","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The type of ","type":"text"},{"code":"newValue","type":"codeVoice"},{"type":"text","text":" is the same as the return value of the subscript."},{"text":" ","type":"text"},{"type":"text","text":"As with computed properties, you can choose not to specify"},{"type":"text","text":" "},{"text":"the setter’s ","type":"text"},{"code":"(newValue)","type":"codeVoice"},{"text":" parameter.","type":"text"},{"text":" ","type":"text"},{"text":"A default parameter called ","type":"text"},{"code":"newValue","type":"codeVoice"},{"text":" is provided to your setter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"if you don’t provide one yourself."}]},{"inlineContent":[{"text":"As with read-only computed properties,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can simplify the declaration of a read-only subscript"},{"type":"text","text":" "},{"text":"by removing the ","type":"text"},{"code":"get","type":"codeVoice"},{"type":"text","text":" keyword and its braces:"}],"type":"paragraph"},{"code":["subscript(index: Int) -> Int {","    \/\/ Return an appropriate subscript value here.","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Here’s an example of a read-only subscript implementation,"},{"type":"text","text":" "},{"text":"which defines a ","type":"text"},{"type":"codeVoice","code":"TimesTable"},{"text":" structure to represent an ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":"-times-table of integers:"}],"type":"paragraph"},{"code":["struct TimesTable {","    let multiplier: Int","    subscript(index: Int) -> Int {","        return multiplier * index","    }","}","let threeTimesTable = TimesTable(multiplier: 3)","print(\"six times three is \\(threeTimesTable[6])\")","\/\/ Prints \"six times three is 18\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"In this example, a new instance of "},{"type":"codeVoice","code":"TimesTable"},{"text":" is created","type":"text"},{"type":"text","text":" "},{"text":"to represent the three-times-table.","type":"text"},{"text":" ","type":"text"},{"text":"This is indicated by passing a value of ","type":"text"},{"type":"codeVoice","code":"3"},{"text":" to the structure’s ","type":"text"},{"code":"initializer","type":"codeVoice"},{"type":"text","text":" "},{"text":"as the value to use for the instance’s ","type":"text"},{"type":"codeVoice","code":"multiplier"},{"type":"text","text":" parameter."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can query the "},{"type":"codeVoice","code":"threeTimesTable"},{"type":"text","text":" instance by calling its subscript,"},{"text":" ","type":"text"},{"text":"as shown in the call to ","type":"text"},{"type":"codeVoice","code":"threeTimesTable[6]"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"This requests the sixth entry in the three-times-table,","type":"text"},{"text":" ","type":"text"},{"text":"which returns a value of ","type":"text"},{"type":"codeVoice","code":"18"},{"type":"text","text":", or "},{"code":"3","type":"codeVoice"},{"text":" times ","type":"text"},{"code":"6","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"text":"-times-table is based on a fixed mathematical rule.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It isn’t appropriate to set "},{"type":"codeVoice","code":"threeTimesTable[someIndex]"},{"type":"text","text":" to a new value,"},{"type":"text","text":" "},{"type":"text","text":"and so the subscript for "},{"type":"codeVoice","code":"TimesTable"},{"text":" is defined as a read-only subscript.","type":"text"}]}],"style":"note"},{"type":"heading","text":"Uso de subíndices","anchor":"Uso-de-sub%C3%ADndices","level":2},{"type":"paragraph","inlineContent":[{"text":"The exact meaning of “subscript” depends on the context in which it’s used.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Subscripts are typically used as a shortcut for accessing"},{"type":"text","text":" "},{"text":"the member elements in a collection, list, or sequence.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You are free to implement subscripts in the most appropriate way for"},{"type":"text","text":" "},{"type":"text","text":"your particular class or structure’s functionality."}]},{"inlineContent":[{"text":"For example, Swift’s ","type":"text"},{"type":"codeVoice","code":"Dictionary"},{"text":" type implements a subscript","type":"text"},{"text":" ","type":"text"},{"text":"to set and retrieve the values stored in a ","type":"text"},{"type":"codeVoice","code":"Dictionary"},{"text":" instance.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You can set a value in a dictionary"},{"text":" ","type":"text"},{"text":"by providing a key of the dictionary’s key type within subscript brackets,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and assigning a value of the dictionary’s value type to the subscript:"}],"type":"paragraph"},{"type":"codeListing","code":["var numberOfLegs = [\"spider\": 8, \"ant\": 6, \"cat\": 4]","numberOfLegs[\"bird\"] = 2"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The example above defines a variable called "},{"type":"codeVoice","code":"numberOfLegs"},{"type":"text","text":" "},{"type":"text","text":"and initializes it with a dictionary literal containing three key-value pairs."},{"type":"text","text":" "},{"text":"The type of the ","type":"text"},{"type":"codeVoice","code":"numberOfLegs"},{"text":" dictionary is inferred to be ","type":"text"},{"type":"codeVoice","code":"[String: Int]"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"After creating the dictionary,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"this example uses subscript assignment to add"},{"type":"text","text":" "},{"text":"a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" key of ","type":"text"},{"type":"codeVoice","code":"\"bird\""},{"type":"text","text":" and an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value of "},{"code":"2","type":"codeVoice"},{"type":"text","text":" to the dictionary."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For more information about "},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":" subscripting,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Acceso-y-modificaci%C3%B3n-de-un-diccionario","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"Swift’s "},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":" type implements its key-value subscripting"},{"type":"text","text":" "},{"type":"text","text":"as a subscript that takes and returns an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional"}]},{"type":"text","text":" type."},{"type":"text","text":" "},{"type":"text","text":"For the "},{"type":"codeVoice","code":"numberOfLegs"},{"type":"text","text":" dictionary above,"},{"text":" ","type":"text"},{"text":"the key-value subscript takes and returns a value of type ","type":"text"},{"code":"Int?","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or “optional int”."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"Dictionary","type":"codeVoice"},{"text":" type uses an optional subscript type to model the fact that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"not every key will have a value, and to give a way to delete a value for a key"},{"text":" ","type":"text"},{"type":"text","text":"by assigning a "},{"code":"nil","type":"codeVoice"},{"text":" value for that key.","type":"text"}],"type":"paragraph"}],"name":"Note"},{"type":"heading","text":"Opciones de los subíndices","level":2,"anchor":"Opciones-de-los-sub%C3%ADndices"},{"inlineContent":[{"text":"Subscripts can take any number of input parameters,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and these input parameters can be of any type."},{"text":" ","type":"text"},{"type":"text","text":"Subscripts can also return a value of any type."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like functions,"},{"text":" ","type":"text"},{"text":"subscripts can take a varying number of parameters","type":"text"},{"type":"text","text":" "},{"text":"and provide default values for their parameters,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as discussed in "},{"type":"text","text":"doc:Functions#Parámetros-variádicos"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Par%C3%A1metros-con-valores-predeterminados","isActive":true},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"However, unlike functions,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"subscripts can’t use in-out parameters."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A class or structure can provide as many subscript implementations as it needs,"},{"text":" ","type":"text"},{"text":"and the appropriate subscript to be used will be inferred based on","type":"text"},{"type":"text","text":" "},{"text":"the types of the value or values that are contained within the subscript brackets","type":"text"},{"type":"text","text":" "},{"type":"text","text":"at the point that the subscript is used."},{"type":"text","text":" "},{"type":"text","text":"This definition of multiple subscripts is known as "},{"type":"emphasis","inlineContent":[{"text":"subscript overloading","type":"text"}]},{"text":".","type":"text"}]},{"inlineContent":[{"text":"While it’s most common for a subscript to take a single parameter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can also define a subscript with multiple parameters"},{"type":"text","text":" "},{"text":"if it’s appropriate for your type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The following example defines a "},{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" structure,"},{"type":"text","text":" "},{"text":"which represents a two-dimensional matrix of ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":" values.","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" structure’s subscript takes two integer parameters:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct Matrix {","    let rows: Int, columns: Int","    var grid: [Double]","    init(rows: Int, columns: Int) {","        self.rows = rows","        self.columns = columns","        grid = Array(repeating: 0.0, count: rows * columns)","    }","    func indexIsValid(row: Int, column: Int) -> Bool {","        return row >= 0 && row < rows && column >= 0 && column < columns","    }","    subscript(row: Int, column: Int) -> Double {","        get {","            assert(indexIsValid(row: row, column: column), \"Index out of range\")","            return grid[(row * columns) + column]","        }","        set {","            assert(indexIsValid(row: row, column: column), \"Index out of range\")","            grid[(row * columns) + column] = newValue","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"code":"Matrix","type":"codeVoice"},{"text":" provides an initializer that takes two parameters called ","type":"text"},{"type":"codeVoice","code":"rows"},{"type":"text","text":" and "},{"code":"columns","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and creates an array that’s large enough to store "},{"type":"codeVoice","code":"rows * columns"},{"type":"text","text":" values of type "},{"type":"codeVoice","code":"Double"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Each position in the matrix is given an initial value of ","type":"text"},{"code":"0.0","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"To achieve this, the array’s size, and an initial cell value of "},{"code":"0.0","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"are passed to an array initializer that creates and initializes a new array of the correct size.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This initializer is described in more detail"},{"text":" ","type":"text"},{"type":"text","text":"in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Creaci%C3%B3n-de-un-arreglo-con-un-valor-predeterminado","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"You can construct a new "},{"type":"codeVoice","code":"Matrix"},{"text":" instance by passing","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an appropriate row and column count to its initializer:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var matrix = Matrix(rows: 2, columns: 2)"]},{"inlineContent":[{"text":"The example above creates a new ","type":"text"},{"code":"Matrix","type":"codeVoice"},{"text":" instance with two rows and two columns.","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"code":"grid","type":"codeVoice"},{"type":"text","text":" array for this "},{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"is effectively a flattened version of the matrix,"},{"type":"text","text":" "},{"type":"text","text":"as read from top left to bottom right:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"identifier":"subscriptMatrix01","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"Values in the matrix can be set by passing row and column values into the subscript,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"separated by a comma:"}]},{"code":["matrix[0, 1] = 1.5","matrix[1, 0] = 3.2"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"These two statements call the subscript’s setter to set","type":"text"},{"type":"text","text":" "},{"text":"a value of ","type":"text"},{"code":"1.5","type":"codeVoice"},{"type":"text","text":" in the top right position of the matrix"},{"type":"text","text":" "},{"text":"(where ","type":"text"},{"type":"codeVoice","code":"row"},{"type":"text","text":" is "},{"code":"0","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"column"},{"text":" is ","type":"text"},{"code":"1","type":"codeVoice"},{"text":"),","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"codeVoice","code":"3.2"},{"type":"text","text":" in the bottom left position"},{"type":"text","text":" "},{"text":"(where ","type":"text"},{"type":"codeVoice","code":"row"},{"type":"text","text":" is "},{"type":"codeVoice","code":"1"},{"type":"text","text":" and "},{"code":"column","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"0","type":"codeVoice"},{"text":"):","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"subscriptMatrix02"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Matrix"},{"text":" subscript’s getter and setter both contain an assertion","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to check that the subscript’s  "},{"type":"codeVoice","code":"row"},{"text":" and ","type":"text"},{"code":"column","type":"codeVoice"},{"type":"text","text":" values are valid."},{"type":"text","text":" "},{"text":"To assist with these assertions,","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Matrix"},{"text":" includes a convenience method called ","type":"text"},{"type":"codeVoice","code":"indexIsValid(row:column:)"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which checks whether the requested ","type":"text"},{"type":"codeVoice","code":"row"},{"type":"text","text":" and "},{"type":"codeVoice","code":"column"},{"type":"text","text":" "},{"type":"text","text":"are inside the bounds of the matrix:"}]},{"syntax":"swift","type":"codeListing","code":["func indexIsValid(row: Int, column: Int) -> Bool {","    return row >= 0 && row < rows && column >= 0 && column < columns","}"]},{"inlineContent":[{"type":"text","text":"An assertion is triggered if you try to access a subscript"},{"type":"text","text":" "},{"type":"text","text":"that’s outside of the matrix bounds:"}],"type":"paragraph"},{"code":["let someValue = matrix[2, 2]","\/\/ This triggers an assert, because [2, 2] is outside of the matrix bounds."],"type":"codeListing","syntax":"swift"},{"anchor":"Sub%C3%ADndices-de-tipos","level":2,"text":"Subíndices de tipos","type":"heading"},{"inlineContent":[{"type":"text","text":"Instance subscripts, as described above,"},{"type":"text","text":" "},{"type":"text","text":"are subscripts that you call on an instance of a particular type."},{"text":" ","type":"text"},{"text":"You can also define subscripts that are called on the type itself.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This kind of subscript is called a "},{"type":"emphasis","inlineContent":[{"text":"type subscript","type":"text"}]},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You indicate a type subscript"},{"type":"text","text":" "},{"text":"by writing the ","type":"text"},{"type":"codeVoice","code":"static"},{"text":" keyword before the ","type":"text"},{"code":"subscript","type":"codeVoice"},{"text":" keyword.","type":"text"},{"text":" ","type":"text"},{"text":"Classes can use the ","type":"text"},{"type":"codeVoice","code":"class"},{"text":" keyword instead,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to allow subclasses to override the superclass’s implementation of that subscript."},{"type":"text","text":" "},{"type":"text","text":"The example below shows how you define and call a type subscript:"}],"type":"paragraph"},{"code":["enum Planet: Int {","    case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune","    static subscript(n: Int) -> Planet {","        return Planet(rawValue: n)!","    }","}","let mars = Planet[4]","print(mars)"],"type":"codeListing","syntax":"swift"},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"inlineContent":[{"text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Conoce más acerca del uso del ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/"},{"type":"text","text":"."}]}],"name":"Software Beta","style":"note","type":"aside"}]}],"sections":[],"metadata":{"title":"Subíndices"},"abstract":[{"text":"Access the elements of a collection.","type":"text"}],"references":{"https://developer.apple.com/es/support/beta-software/":{"title":"software beta de Apple","type":"link","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","titleInlineContent":[{"text":"software beta de Apple","type":"text"}],"url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"url":"\/documentation\/the-swift-programming-language","type":"topic","abstract":[],"kind":"article","title":"The Swift Programming Language (5.9)","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","role":"collection"},"subscriptMatrix01":{"alt":null,"type":"image","variants":[{"traits":["2x","light"],"url":"\/images\/org.swift.tspl\/subscriptMatrix01@2x.png"},{"traits":["2x","dark"],"url":"\/images\/org.swift.tspl\/subscriptMatrix01~dark@2x.png"}],"identifier":"subscriptMatrix01"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Acceso-y-modificaci%C3%B3n-de-un-diccionario":{"title":"Acceso y modificación de un diccionario","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Acceso-y-modificaci%C3%B3n-de-un-diccionario","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Acceso-y-modificaci%C3%B3n-de-un-diccionario","abstract":[],"kind":"section"},"subscriptMatrix02":{"alt":null,"type":"image","variants":[{"traits":["2x","light"],"url":"\/images\/org.swift.tspl\/subscriptMatrix02@2x.png"},{"traits":["2x","dark"],"url":"\/images\/org.swift.tspl\/subscriptMatrix02~dark@2x.png"}],"identifier":"subscriptMatrix02"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Creaci%C3%B3n-de-un-arreglo-con-un-valor-predeterminado":{"title":"Creación de un arreglo con un valor predeterminado","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Creaci%C3%B3n-de-un-arreglo-con-un-valor-predeterminado","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Creaci%C3%B3n-de-un-arreglo-con-un-valor-predeterminado","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Par%C3%A1metros-con-valores-predeterminados":{"title":"Parámetros con valores predeterminados","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Par%C3%A1metros-con-valores-predeterminados","url":"\/documentation\/the-swift-programming-language\/functions#Par%C3%A1metros-con-valores-predeterminados","abstract":[],"kind":"section"}}}