{"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"inlineContent":[{"text":"subscripts","type":"text"}],"type":"emphasis"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which are shortcuts for accessing the member elements of a collection, list, or sequence.","type":"text"},{"type":"text","text":" "},{"text":"You use subscripts to set and retrieve values by index without needing","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"separate methods for setting and retrieval."},{"text":" ","type":"text"},{"type":"text","text":"For example, you access elements in an "},{"code":"Array","type":"codeVoice"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"text":"and elements in a ","type":"text"},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You can define multiple subscripts for a single type,","type":"text"},{"type":"text","text":" "},{"text":"and the appropriate subscript overload to use is selected","type":"text"},{"type":"text","text":" "},{"type":"text","text":"based on the type of index value you pass to the subscript."},{"type":"text","text":" "},{"text":"Subscripts aren’t limited to a single dimension,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and you can define subscripts with multiple input parameters"},{"type":"text","text":" "},{"type":"text","text":"to suit your custom type’s needs."}]},{"level":2,"text":"Sintaxis de los subíndices","type":"heading","anchor":"Sintaxis-de-los-sub%C3%ADndices"},{"type":"paragraph","inlineContent":[{"text":"Subscripts enable you to query instances of a type","type":"text"},{"text":" ","type":"text"},{"text":"by writing one or more values in square brackets after the instance name.","type":"text"},{"type":"text","text":" "},{"text":"Their syntax is similar to both instance method syntax and computed property syntax.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You write subscript definitions with the "},{"code":"subscript","type":"codeVoice"},{"text":" keyword,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and specify one or more input parameters and a return type,"},{"text":" ","type":"text"},{"type":"text","text":"in the same way as instance methods."},{"type":"text","text":" "},{"type":"text","text":"Unlike instance methods, subscripts can be read-write or read-only."},{"type":"text","text":" "},{"text":"This behavior is communicated by a getter and setter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the same way as for computed properties:"}]},{"type":"codeListing","syntax":"swift","code":["subscript(index: Int) -> Int {","    get {","        \/\/ Return an appropriate subscript value here.","    }","    set(newValue) {","        \/\/ Perform a suitable setting action here.","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of "},{"code":"newValue","type":"codeVoice"},{"text":" is the same as the return value of the subscript.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"As with computed properties, you can choose not to specify"},{"text":" ","type":"text"},{"text":"the setter’s ","type":"text"},{"code":"(newValue)","type":"codeVoice"},{"type":"text","text":" parameter."},{"text":" ","type":"text"},{"type":"text","text":"A default parameter called "},{"type":"codeVoice","code":"newValue"},{"type":"text","text":" is provided to your setter"},{"text":" ","type":"text"},{"type":"text","text":"if you don’t provide one yourself."}]},{"inlineContent":[{"type":"text","text":"As with read-only computed properties,"},{"type":"text","text":" "},{"text":"you can simplify the declaration of a read-only subscript","type":"text"},{"text":" ","type":"text"},{"text":"by removing the ","type":"text"},{"code":"get","type":"codeVoice"},{"text":" keyword and its braces:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["subscript(index: Int) -> Int {","    \/\/ Return an appropriate subscript value here.","}"],"type":"codeListing"},{"inlineContent":[{"text":"Here’s an example of a read-only subscript implementation,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which defines a "},{"code":"TimesTable","type":"codeVoice"},{"type":"text","text":" structure to represent an "},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"text":"-times-table of integers:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct TimesTable {","    let multiplier: Int","    subscript(index: Int) -> Int {","        return multiplier * index","    }","}","let threeTimesTable = TimesTable(multiplier: 3)","print(\"six times three is \\(threeTimesTable[6])\")","\/\/ Prints \"six times three is 18\""]},{"inlineContent":[{"text":"In this example, a new instance of ","type":"text"},{"code":"TimesTable","type":"codeVoice"},{"type":"text","text":" is created"},{"text":" ","type":"text"},{"type":"text","text":"to represent the three-times-table."},{"text":" ","type":"text"},{"text":"This is indicated by passing a value of ","type":"text"},{"type":"codeVoice","code":"3"},{"type":"text","text":" to the structure’s "},{"type":"codeVoice","code":"initializer"},{"text":" ","type":"text"},{"text":"as the value to use for the instance’s ","type":"text"},{"code":"multiplier","type":"codeVoice"},{"text":" parameter.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can query the "},{"code":"threeTimesTable","type":"codeVoice"},{"type":"text","text":" instance by calling its subscript,"},{"text":" ","type":"text"},{"text":"as shown in the call to ","type":"text"},{"type":"codeVoice","code":"threeTimesTable[6]"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This requests the sixth entry in the three-times-table,"},{"type":"text","text":" "},{"text":"which returns a value of ","type":"text"},{"code":"18","type":"codeVoice"},{"type":"text","text":", or "},{"code":"3","type":"codeVoice"},{"type":"text","text":" times "},{"code":"6","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"aside","style":"note","content":[{"inlineContent":[{"text":"An ","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"type":"text","text":"-times-table is based on a fixed mathematical rule."},{"text":" ","type":"text"},{"type":"text","text":"It isn’t appropriate to set "},{"type":"codeVoice","code":"threeTimesTable[someIndex]"},{"text":" to a new value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and so the subscript for "},{"type":"codeVoice","code":"TimesTable"},{"type":"text","text":" is defined as a read-only subscript."}],"type":"paragraph"}],"name":"Note"},{"level":2,"anchor":"Uso-de-sub%C3%ADndices","type":"heading","text":"Uso de subíndices"},{"inlineContent":[{"text":"The exact meaning of “subscript” depends on the context in which it’s used.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Subscripts are typically used as a shortcut for accessing"},{"text":" ","type":"text"},{"type":"text","text":"the member elements in a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You are free to implement subscripts in the most appropriate way for"},{"text":" ","type":"text"},{"type":"text","text":"your particular class or structure’s functionality."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, Swift’s "},{"type":"codeVoice","code":"Dictionary"},{"text":" type implements a subscript","type":"text"},{"text":" ","type":"text"},{"text":"to set and retrieve the values stored in a ","type":"text"},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance."},{"text":" ","type":"text"},{"text":"You can set a value in a dictionary","type":"text"},{"type":"text","text":" "},{"text":"by providing a key of the dictionary’s key type within subscript brackets,","type":"text"},{"type":"text","text":" "},{"text":"and assigning a value of the dictionary’s value type to the subscript:","type":"text"}]},{"syntax":"swift","code":["var numberOfLegs = [\"spider\": 8, \"ant\": 6, \"cat\": 4]","numberOfLegs[\"bird\"] = 2"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above defines a variable called "},{"type":"codeVoice","code":"numberOfLegs"},{"type":"text","text":" "},{"text":"and initializes it with a dictionary literal containing three key-value pairs.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The type of the "},{"type":"codeVoice","code":"numberOfLegs"},{"text":" dictionary is inferred to be ","type":"text"},{"code":"[String: Int]","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"After creating the dictionary,","type":"text"},{"type":"text","text":" "},{"text":"this example uses subscript assignment to add","type":"text"},{"type":"text","text":" "},{"text":"a ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" key of "},{"type":"codeVoice","code":"\"bird\""},{"text":" and an ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"2"},{"text":" to the dictionary.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information about "},{"type":"codeVoice","code":"Dictionary"},{"text":" subscripting,","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Acceso-y-modificaci%C3%B3n-de-un-diccionario"},{"type":"text","text":"."}]},{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"Swift’s "},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":" type implements its key-value subscripting"},{"text":" ","type":"text"},{"text":"as a subscript that takes and returns an ","type":"text"},{"inlineContent":[{"text":"optional","type":"text"}],"type":"emphasis"},{"text":" type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For the "},{"code":"numberOfLegs","type":"codeVoice"},{"type":"text","text":" dictionary above,"},{"type":"text","text":" "},{"text":"the key-value subscript takes and returns a value of type ","type":"text"},{"type":"codeVoice","code":"Int?"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"or “optional int”.","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"code":"Dictionary","type":"codeVoice"},{"text":" type uses an optional subscript type to model the fact that","type":"text"},{"text":" ","type":"text"},{"text":"not every key will have a value, and to give a way to delete a value for a key","type":"text"},{"type":"text","text":" "},{"text":"by assigning a ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" value for that key.","type":"text"}],"type":"paragraph"}]},{"anchor":"Opciones-de-los-sub%C3%ADndices","level":2,"type":"heading","text":"Opciones de los subíndices"},{"inlineContent":[{"type":"text","text":"Subscripts can take any number of input parameters,"},{"type":"text","text":" "},{"type":"text","text":"and these input parameters can be of any type."},{"type":"text","text":" "},{"text":"Subscripts can also return a value of any type.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Like functions,"},{"type":"text","text":" "},{"type":"text","text":"subscripts can take a varying number of parameters"},{"text":" ","type":"text"},{"text":"and provide default values for their parameters,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as discussed in "},{"type":"text","text":"doc:Functions#Parámetros-variádicos"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Par%C3%A1metros-con-valores-predeterminados","isActive":true},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"However, unlike functions,"},{"type":"text","text":" "},{"text":"subscripts can’t use in-out parameters.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"A class or structure can provide as many subscript implementations as it needs,","type":"text"},{"text":" ","type":"text"},{"text":"and the appropriate subscript to be used will be inferred based on","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the types of the value or values that are contained within the subscript brackets"},{"type":"text","text":" "},{"type":"text","text":"at the point that the subscript is used."},{"type":"text","text":" "},{"text":"This definition of multiple subscripts is known as ","type":"text"},{"inlineContent":[{"type":"text","text":"subscript overloading"}],"type":"emphasis"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While it’s most common for a subscript to take a single parameter,"},{"text":" ","type":"text"},{"type":"text","text":"you can also define a subscript with multiple parameters"},{"text":" ","type":"text"},{"type":"text","text":"if it’s appropriate for your type."},{"text":" ","type":"text"},{"type":"text","text":"The following example defines a "},{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" structure,"},{"text":" ","type":"text"},{"text":"which represents a two-dimensional matrix of ","type":"text"},{"type":"codeVoice","code":"Double"},{"text":" values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Matrix"},{"text":" structure’s subscript takes two integer parameters:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct Matrix {","    let rows: Int, columns: Int","    var grid: [Double]","    init(rows: Int, columns: Int) {","        self.rows = rows","        self.columns = columns","        grid = Array(repeating: 0.0, count: rows * columns)","    }","    func indexIsValid(row: Int, column: Int) -> Bool {","        return row >= 0 && row < rows && column >= 0 && column < columns","    }","    subscript(row: Int, column: Int) -> Double {","        get {","            assert(indexIsValid(row: row, column: column), \"Index out of range\")","            return grid[(row * columns) + column]","        }","        set {","            assert(indexIsValid(row: row, column: column), \"Index out of range\")","            grid[(row * columns) + column] = newValue","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Matrix"},{"text":" provides an initializer that takes two parameters called ","type":"text"},{"type":"codeVoice","code":"rows"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"columns"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and creates an array that’s large enough to store "},{"code":"rows * columns","type":"codeVoice"},{"type":"text","text":" values of type "},{"type":"codeVoice","code":"Double"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Each position in the matrix is given an initial value of ","type":"text"},{"code":"0.0","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"To achieve this, the array’s size, and an initial cell value of "},{"type":"codeVoice","code":"0.0"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"are passed to an array initializer that creates and initializes a new array of the correct size.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This initializer is described in more detail"},{"type":"text","text":" "},{"text":"in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Creaci%C3%B3n-de-un-arreglo-con-un-valor-predeterminado","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"You can construct a new "},{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" instance by passing"},{"type":"text","text":" "},{"type":"text","text":"an appropriate row and column count to its initializer:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var matrix = Matrix(rows: 2, columns: 2)"]},{"type":"paragraph","inlineContent":[{"text":"The example above creates a new ","type":"text"},{"type":"codeVoice","code":"Matrix"},{"text":" instance with two rows and two columns.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"grid"},{"text":" array for this ","type":"text"},{"code":"Matrix","type":"codeVoice"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"is effectively a flattened version of the matrix,"},{"text":" ","type":"text"},{"type":"text","text":"as read from top left to bottom right:"}]},{"inlineContent":[{"type":"image","identifier":"subscriptMatrix01"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Values in the matrix can be set by passing row and column values into the subscript,"},{"type":"text","text":" "},{"type":"text","text":"separated by a comma:"}]},{"type":"codeListing","syntax":"swift","code":["matrix[0, 1] = 1.5","matrix[1, 0] = 3.2"]},{"type":"paragraph","inlineContent":[{"text":"These two statements call the subscript’s setter to set","type":"text"},{"type":"text","text":" "},{"text":"a value of ","type":"text"},{"code":"1.5","type":"codeVoice"},{"type":"text","text":" in the top right position of the matrix"},{"text":" ","type":"text"},{"type":"text","text":"(where "},{"type":"codeVoice","code":"row"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"text":" and ","type":"text"},{"code":"column","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"1","type":"codeVoice"},{"text":"),","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"codeVoice","code":"3.2"},{"type":"text","text":" in the bottom left position"},{"type":"text","text":" "},{"text":"(where ","type":"text"},{"code":"row","type":"codeVoice"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"1"},{"type":"text","text":" and "},{"type":"codeVoice","code":"column"},{"type":"text","text":" is "},{"code":"0","type":"codeVoice"},{"text":"):","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"subscriptMatrix02","type":"image"}]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Matrix"},{"text":" subscript’s getter and setter both contain an assertion","type":"text"},{"type":"text","text":" "},{"text":"to check that the subscript’s  ","type":"text"},{"type":"codeVoice","code":"row"},{"type":"text","text":" and "},{"code":"column","type":"codeVoice"},{"type":"text","text":" values are valid."},{"type":"text","text":" "},{"text":"To assist with these assertions,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" includes a convenience method called "},{"type":"codeVoice","code":"indexIsValid(row:column:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which checks whether the requested "},{"code":"row","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"column"},{"type":"text","text":" "},{"type":"text","text":"are inside the bounds of the matrix:"}],"type":"paragraph"},{"code":["func indexIsValid(row: Int, column: Int) -> Bool {","    return row >= 0 && row < rows && column >= 0 && column < columns","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"An assertion is triggered if you try to access a subscript"},{"text":" ","type":"text"},{"type":"text","text":"that’s outside of the matrix bounds:"}],"type":"paragraph"},{"type":"codeListing","code":["let someValue = matrix[2, 2]","\/\/ This triggers an assert, because [2, 2] is outside of the matrix bounds."],"syntax":"swift"},{"anchor":"Sub%C3%ADndices-de-tipos","level":2,"type":"heading","text":"Subíndices de tipos"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instance subscripts, as described above,"},{"type":"text","text":" "},{"type":"text","text":"are subscripts that you call on an instance of a particular type."},{"type":"text","text":" "},{"type":"text","text":"You can also define subscripts that are called on the type itself."},{"type":"text","text":" "},{"type":"text","text":"This kind of subscript is called a "},{"inlineContent":[{"type":"text","text":"type subscript"}],"type":"emphasis"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You indicate a type subscript"},{"text":" ","type":"text"},{"type":"text","text":"by writing the "},{"type":"codeVoice","code":"static"},{"type":"text","text":" keyword before the "},{"code":"subscript","type":"codeVoice"},{"text":" keyword.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Classes can use the "},{"code":"class","type":"codeVoice"},{"type":"text","text":" keyword instead,"},{"text":" ","type":"text"},{"text":"to allow subclasses to override the superclass’s implementation of that subscript.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The example below shows how you define and call a type subscript:"}]},{"code":["enum Planet: Int {","    case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune","    static subscript(n: Int) -> Planet {","        return Planet(rawValue: n)!","    }","}","let mars = Planet[4]","print(mars)"],"type":"codeListing","syntax":"swift"},{"content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Conoce más acerca del uso del "},{"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}],"style":"note","name":"Software Beta","type":"aside"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"Access the elements of a collection."}],"sections":[],"kind":"article","metadata":{"title":"Subíndices"},"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","interfaceLanguage":"swift"},"references":{"https://developer.apple.com/es/support/beta-software/":{"title":"software beta de Apple","url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","titleInlineContent":[{"text":"software beta de Apple","type":"text"}],"type":"link","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Acceso-y-modificaci%C3%B3n-de-un-diccionario":{"title":"Acceso y modificación de un diccionario","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Acceso-y-modificaci%C3%B3n-de-un-diccionario","kind":"section","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Acceso-y-modificaci%C3%B3n-de-un-diccionario"},"subscriptMatrix02":{"alt":null,"variants":[{"url":"\/images\/org.swift.tspl\/subscriptMatrix02@2x.png","traits":["2x","light"]},{"traits":["2x","dark"],"url":"\/images\/org.swift.tspl\/subscriptMatrix02~dark@2x.png"}],"type":"image","identifier":"subscriptMatrix02"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Creaci%C3%B3n-de-un-arreglo-con-un-valor-predeterminado":{"title":"Creación de un arreglo con un valor predeterminado","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Creaci%C3%B3n-de-un-arreglo-con-un-valor-predeterminado","kind":"section","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Creaci%C3%B3n-de-un-arreglo-con-un-valor-predeterminado"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"url":"\/documentation\/the-swift-programming-language","kind":"article","type":"topic","title":"The Swift Programming Language (6)","role":"collection","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Par%C3%A1metros-con-valores-predeterminados":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Par%C3%A1metros-con-valores-predeterminados","url":"\/documentation\/the-swift-programming-language\/functions#Par%C3%A1metros-con-valores-predeterminados","title":"Parámetros con valores predeterminados","kind":"section","abstract":[],"type":"topic"},"subscriptMatrix01":{"alt":null,"variants":[{"url":"\/images\/org.swift.tspl\/subscriptMatrix01@2x.png","traits":["2x","light"]},{"traits":["2x","dark"],"url":"\/images\/org.swift.tspl\/subscriptMatrix01~dark@2x.png"}],"type":"image","identifier":"subscriptMatrix01"}}}