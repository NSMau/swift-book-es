{"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which are shortcuts for accessing the member elements of a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You use subscripts to set and retrieve values by index without needing"},{"type":"text","text":" "},{"type":"text","text":"separate methods for setting and retrieval."},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can define multiple subscripts for a single type,"},{"type":"text","text":" "},{"type":"text","text":"and the appropriate subscript overload to use is selected"},{"type":"text","text":" "},{"type":"text","text":"based on the type of index value you pass to the subscript."},{"type":"text","text":" "},{"type":"text","text":"Subscripts aren’t limited to a single dimension,"},{"type":"text","text":" "},{"type":"text","text":"and you can define subscripts with multiple input parameters"},{"type":"text","text":" "},{"type":"text","text":"to suit your custom type’s needs."}]},{"anchor":"Sintaxis-de-los-Subíndices","level":2,"type":"heading","text":"Sintaxis de los Subíndices"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Subscripts enable you to query instances of a type"},{"type":"text","text":" "},{"type":"text","text":"by writing one or more values in square brackets after the instance name."},{"type":"text","text":" "},{"type":"text","text":"Their syntax is similar to both instance method syntax and computed property syntax."},{"type":"text","text":" "},{"type":"text","text":"You write subscript definitions with the "},{"type":"codeVoice","code":"subscript"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"and specify one or more input parameters and a return type,"},{"type":"text","text":" "},{"type":"text","text":"in the same way as instance methods."},{"type":"text","text":" "},{"type":"text","text":"Unlike instance methods, subscripts can be read-write or read-only."},{"type":"text","text":" "},{"type":"text","text":"This behavior is communicated by a getter and setter"},{"type":"text","text":" "},{"type":"text","text":"in the same way as for computed properties:"}]},{"type":"codeListing","syntax":"swift","code":["subscript(index: Int) -> Int {","    get {","        \/\/ Return an appropriate subscript value here.","    }","    set(newValue) {","        \/\/ Perform a suitable setting action here.","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of "},{"type":"codeVoice","code":"newValue"},{"type":"text","text":" is the same as the return value of the subscript."},{"type":"text","text":" "},{"type":"text","text":"As with computed properties, you can choose not to specify"},{"type":"text","text":" "},{"type":"text","text":"the setter’s "},{"type":"codeVoice","code":"(newValue)"},{"type":"text","text":" parameter."},{"type":"text","text":" "},{"type":"text","text":"A default parameter called "},{"type":"codeVoice","code":"newValue"},{"type":"text","text":" is provided to your setter"},{"type":"text","text":" "},{"type":"text","text":"if you don’t provide one yourself."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with read-only computed properties,"},{"type":"text","text":" "},{"type":"text","text":"you can simplify the declaration of a read-only subscript"},{"type":"text","text":" "},{"type":"text","text":"by removing the "},{"type":"codeVoice","code":"get"},{"type":"text","text":" keyword and its braces:"}]},{"type":"codeListing","syntax":"swift","code":["subscript(index: Int) -> Int {","    \/\/ Return an appropriate subscript value here.","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of a read-only subscript implementation,"},{"type":"text","text":" "},{"type":"text","text":"which defines a "},{"type":"codeVoice","code":"TimesTable"},{"type":"text","text":" structure to represent an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":"-times-table of integers:"}]},{"type":"codeListing","syntax":"swift","code":["struct TimesTable {","    let multiplier: Int","    subscript(index: Int) -> Int {","        return multiplier * index","    }","}","let threeTimesTable = TimesTable(multiplier: 3)","print(\"six times three is \\(threeTimesTable[6])\")","\/\/ Prints \"six times three is 18\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, a new instance of "},{"type":"codeVoice","code":"TimesTable"},{"type":"text","text":" is created"},{"type":"text","text":" "},{"type":"text","text":"to represent the three-times-table."},{"type":"text","text":" "},{"type":"text","text":"This is indicated by passing a value of "},{"type":"codeVoice","code":"3"},{"type":"text","text":" to the structure’s "},{"type":"codeVoice","code":"initializer"},{"type":"text","text":" "},{"type":"text","text":"as the value to use for the instance’s "},{"type":"codeVoice","code":"multiplier"},{"type":"text","text":" parameter."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can query the "},{"type":"codeVoice","code":"threeTimesTable"},{"type":"text","text":" instance by calling its subscript,"},{"type":"text","text":" "},{"type":"text","text":"as shown in the call to "},{"type":"codeVoice","code":"threeTimesTable[6]"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This requests the sixth entry in the three-times-table,"},{"type":"text","text":" "},{"type":"text","text":"which returns a value of "},{"type":"codeVoice","code":"18"},{"type":"text","text":", or "},{"type":"codeVoice","code":"3"},{"type":"text","text":" times "},{"type":"codeVoice","code":"6"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":"-times-table is based on a fixed mathematical rule."},{"type":"text","text":" "},{"type":"text","text":"It isn’t appropriate to set "},{"type":"codeVoice","code":"threeTimesTable[someIndex]"},{"type":"text","text":" to a new value,"},{"type":"text","text":" "},{"type":"text","text":"and so the subscript for "},{"type":"codeVoice","code":"TimesTable"},{"type":"text","text":" is defined as a read-only subscript."}]}],"type":"aside","name":"Note"},{"anchor":"Uso-de-Subíndices","level":2,"type":"heading","text":"Uso de Subíndices"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The exact meaning of “subscript” depends on the context in which it’s used."},{"type":"text","text":" "},{"type":"text","text":"Subscripts are typically used as a shortcut for accessing"},{"type":"text","text":" "},{"type":"text","text":"the member elements in a collection, list, or sequence."},{"type":"text","text":" "},{"type":"text","text":"You are free to implement subscripts in the most appropriate way for"},{"type":"text","text":" "},{"type":"text","text":"your particular class or structure’s functionality."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, Swift’s "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" type implements a subscript"},{"type":"text","text":" "},{"type":"text","text":"to set and retrieve the values stored in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"You can set a value in a dictionary"},{"type":"text","text":" "},{"type":"text","text":"by providing a key of the dictionary’s key type within subscript brackets,"},{"type":"text","text":" "},{"type":"text","text":"and assigning a value of the dictionary’s value type to the subscript:"}]},{"type":"codeListing","syntax":"swift","code":["var numberOfLegs = [\"spider\": 8, \"ant\": 6, \"cat\": 4]","numberOfLegs[\"bird\"] = 2"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above defines a variable called "},{"type":"codeVoice","code":"numberOfLegs"},{"type":"text","text":" "},{"type":"text","text":"and initializes it with a dictionary literal containing three key-value pairs."},{"type":"text","text":" "},{"type":"text","text":"The type of the "},{"type":"codeVoice","code":"numberOfLegs"},{"type":"text","text":" dictionary is inferred to be "},{"type":"codeVoice","code":"[String: Int]"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"After creating the dictionary,"},{"type":"text","text":" "},{"type":"text","text":"this example uses subscript assignment to add"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" key of "},{"type":"codeVoice","code":"\"bird\""},{"type":"text","text":" and an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"2"},{"type":"text","text":" to the dictionary."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information about "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" subscripting,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Acceso-y-Modificaci%C3%B3n-de-un-Diccionario"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" type implements its key-value subscripting"},{"type":"text","text":" "},{"type":"text","text":"as a subscript that takes and returns an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional"}]},{"type":"text","text":" type."},{"type":"text","text":" "},{"type":"text","text":"For the "},{"type":"codeVoice","code":"numberOfLegs"},{"type":"text","text":" dictionary above,"},{"type":"text","text":" "},{"type":"text","text":"the key-value subscript takes and returns a value of type "},{"type":"codeVoice","code":"Int?"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or “optional int”."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" type uses an optional subscript type to model the fact that"},{"type":"text","text":" "},{"type":"text","text":"not every key will have a value, and to give a way to delete a value for a key"},{"type":"text","text":" "},{"type":"text","text":"by assigning a "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value for that key."}]}],"type":"aside","name":"Note"},{"anchor":"Opciones-de-los-Subíndices","level":2,"type":"heading","text":"Opciones de los Subíndices"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Subscripts can take any number of input parameters,"},{"type":"text","text":" "},{"type":"text","text":"and these input parameters can be of any type."},{"type":"text","text":" "},{"type":"text","text":"Subscripts can also return a value of any type."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like functions,"},{"type":"text","text":" "},{"type":"text","text":"subscripts can take a varying number of parameters"},{"type":"text","text":" "},{"type":"text","text":"and provide default values for their parameters,"},{"type":"text","text":" "},{"type":"text","text":"as discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Par%C3%A1metros-Vari%C3%A1dicos"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:Functions#Parámetros-con-Valores-Predeterminados"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"However, unlike functions,"},{"type":"text","text":" "},{"type":"text","text":"subscripts can’t use in-out parameters."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A class or structure can provide as many subscript implementations as it needs,"},{"type":"text","text":" "},{"type":"text","text":"and the appropriate subscript to be used will be inferred based on"},{"type":"text","text":" "},{"type":"text","text":"the types of the value or values that are contained within the subscript brackets"},{"type":"text","text":" "},{"type":"text","text":"at the point that the subscript is used."},{"type":"text","text":" "},{"type":"text","text":"This definition of multiple subscripts is known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscript overloading"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While it’s most common for a subscript to take a single parameter,"},{"type":"text","text":" "},{"type":"text","text":"you can also define a subscript with multiple parameters"},{"type":"text","text":" "},{"type":"text","text":"if it’s appropriate for your type."},{"type":"text","text":" "},{"type":"text","text":"The following example defines a "},{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" structure,"},{"type":"text","text":" "},{"type":"text","text":"which represents a two-dimensional matrix of "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" structure’s subscript takes two integer parameters:"}]},{"type":"codeListing","syntax":"swift","code":["struct Matrix {","    let rows: Int, columns: Int","    var grid: [Double]","    init(rows: Int, columns: Int) {","        self.rows = rows","        self.columns = columns","        grid = Array(repeating: 0.0, count: rows * columns)","    }","    func indexIsValid(row: Int, column: Int) -> Bool {","        return row >= 0 && row < rows && column >= 0 && column < columns","    }","    subscript(row: Int, column: Int) -> Double {","        get {","            assert(indexIsValid(row: row, column: column), \"Index out of range\")","            return grid[(row * columns) + column]","        }","        set {","            assert(indexIsValid(row: row, column: column), \"Index out of range\")","            grid[(row * columns) + column] = newValue","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" provides an initializer that takes two parameters called "},{"type":"codeVoice","code":"rows"},{"type":"text","text":" and "},{"type":"codeVoice","code":"columns"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and creates an array that’s large enough to store "},{"type":"codeVoice","code":"rows * columns"},{"type":"text","text":" values of type "},{"type":"codeVoice","code":"Double"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Each position in the matrix is given an initial value of "},{"type":"codeVoice","code":"0.0"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"To achieve this, the array’s size, and an initial cell value of "},{"type":"codeVoice","code":"0.0"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"are passed to an array initializer that creates and initializes a new array of the correct size."},{"type":"text","text":" "},{"type":"text","text":"This initializer is described in more detail"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Creaci%C3%B3n-de-un-Arreglo-con-un-Valor-Predeterminado"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can construct a new "},{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" instance by passing"},{"type":"text","text":" "},{"type":"text","text":"an appropriate row and column count to its initializer:"}]},{"type":"codeListing","syntax":"swift","code":["var matrix = Matrix(rows: 2, columns: 2)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above creates a new "},{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" instance with two rows and two columns."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"grid"},{"type":"text","text":" array for this "},{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"is effectively a flattened version of the matrix,"},{"type":"text","text":" "},{"type":"text","text":"as read from top left to bottom right:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"subscriptMatrix01"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Values in the matrix can be set by passing row and column values into the subscript,"},{"type":"text","text":" "},{"type":"text","text":"separated by a comma:"}]},{"type":"codeListing","syntax":"swift","code":["matrix[0, 1] = 1.5","matrix[1, 0] = 3.2"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These two statements call the subscript’s setter to set"},{"type":"text","text":" "},{"type":"text","text":"a value of "},{"type":"codeVoice","code":"1.5"},{"type":"text","text":" in the top right position of the matrix"},{"type":"text","text":" "},{"type":"text","text":"(where "},{"type":"codeVoice","code":"row"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":" and "},{"type":"codeVoice","code":"column"},{"type":"text","text":" is "},{"type":"codeVoice","code":"1"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"3.2"},{"type":"text","text":" in the bottom left position"},{"type":"text","text":" "},{"type":"text","text":"(where "},{"type":"codeVoice","code":"row"},{"type":"text","text":" is "},{"type":"codeVoice","code":"1"},{"type":"text","text":" and "},{"type":"codeVoice","code":"column"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":"):"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"subscriptMatrix02"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" subscript’s getter and setter both contain an assertion"},{"type":"text","text":" "},{"type":"text","text":"to check that the subscript’s  "},{"type":"codeVoice","code":"row"},{"type":"text","text":" and "},{"type":"codeVoice","code":"column"},{"type":"text","text":" values are valid."},{"type":"text","text":" "},{"type":"text","text":"To assist with these assertions,"},{"type":"text","text":" "},{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" includes a convenience method called "},{"type":"codeVoice","code":"indexIsValid(row:column:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which checks whether the requested "},{"type":"codeVoice","code":"row"},{"type":"text","text":" and "},{"type":"codeVoice","code":"column"},{"type":"text","text":" "},{"type":"text","text":"are inside the bounds of the matrix:"}]},{"type":"codeListing","syntax":"swift","code":["func indexIsValid(row: Int, column: Int) -> Bool {","    return row >= 0 && row < rows && column >= 0 && column < columns","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An assertion is triggered if you try to access a subscript"},{"type":"text","text":" "},{"type":"text","text":"that’s outside of the matrix bounds:"}]},{"type":"codeListing","syntax":"swift","code":["let someValue = matrix[2, 2]","\/\/ This triggers an assert, because [2, 2] is outside of the matrix bounds."]},{"anchor":"Subíndices-de-Tipos","level":2,"type":"heading","text":"Subíndices de Tipos"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instance subscripts, as described above,"},{"type":"text","text":" "},{"type":"text","text":"are subscripts that you call on an instance of a particular type."},{"type":"text","text":" "},{"type":"text","text":"You can also define subscripts that are called on the type itself."},{"type":"text","text":" "},{"type":"text","text":"This kind of subscript is called a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type subscript"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You indicate a type subscript"},{"type":"text","text":" "},{"type":"text","text":"by writing the "},{"type":"codeVoice","code":"static"},{"type":"text","text":" keyword before the "},{"type":"codeVoice","code":"subscript"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Classes can use the "},{"type":"codeVoice","code":"class"},{"type":"text","text":" keyword instead,"},{"type":"text","text":" "},{"type":"text","text":"to allow subclasses to override the superclass’s implementation of that subscript."},{"type":"text","text":" "},{"type":"text","text":"The example below shows how you define and call a type subscript:"}]},{"type":"codeListing","syntax":"swift","code":["enum Planet: Int {","    case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune","    static subscript(n: Int) -> Planet {","        return Planet(rawValue: n)!","    }","}","let mars = Planet[4]","print(mars)"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conoce más acerca del uso del "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/"},{"type":"text","text":"."}]}],"type":"aside","name":"Software Beta"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Access the elements of a collection."}],"kind":"article","metadata":{"title":"Subíndices"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"role":"article","title":"El Lenguaje de Programación Swift (5.9 beta)","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language"},"https://developer.apple.com/es/support/beta-software/":{"title":"software beta de Apple","titleInlineContent":[{"type":"text","text":"software beta de Apple"}],"type":"link","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Acceso-y-Modificaci%C3%B3n-de-un-Diccionario":{"abstract":[],"title":"Acceso y Modificación de un Diccionario","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Acceso-y-Modificaci%C3%B3n-de-un-Diccionario","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Acceso-y-Modificaci%25C3%25B3n-de-un-Diccionario"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Creaci%C3%B3n-de-un-Arreglo-con-un-Valor-Predeterminado":{"abstract":[],"title":"Creación de un Arreglo con un Valor Predeterminado","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Creaci%C3%B3n-de-un-Arreglo-con-un-Valor-Predeterminado","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Creaci%25C3%25B3n-de-un-Arreglo-con-un-Valor-Predeterminado"},"doc:Functions#Parámetros-con-Valores-Predeterminados":{"title":"doc:Functions#Parámetros-con-Valores-Predeterminados","titleInlineContent":[{"type":"text","text":"doc:Functions#Parámetros-con-Valores-Predeterminados"}],"type":"link","identifier":"doc:Functions#Parámetros-con-Valores-Predeterminados","url":"doc:Functions#Parámetros-con-Valores-Predeterminados"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Par%C3%A1metros-Vari%C3%A1dicos":{"abstract":[],"title":"Parámetros Variádicos","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Par%C3%A1metros-Vari%C3%A1dicos","url":"\/documentation\/the-swift-programming-language\/functions#Par%25C3%25A1metros-Vari%25C3%25A1dicos"},"subscriptMatrix01":{"alt":null,"type":"image","identifier":"subscriptMatrix01","variants":[{"url":"\/images\/subscriptMatrix01@2x.png","traits":["2x","light"]},{"url":"\/images\/subscriptMatrix01~dark@2x.png","traits":["2x","dark"]}]},"subscriptMatrix02":{"alt":null,"type":"image","identifier":"subscriptMatrix02","variants":[{"url":"\/images\/subscriptMatrix02@2x.png","traits":["2x","light"]},{"url":"\/images\/subscriptMatrix02~dark@2x.png","traits":["2x","dark"]}]}}}