{"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"kind":"article","metadata":{"title":"Patrones"},"abstract":[{"type":"text","text":"Match and destructure values."}],"primaryContentSections":[{"content":[{"inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"pattern"}]},{"type":"text","text":" represents the structure of a single value"},{"text":" ","type":"text"},{"text":"or a composite value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example, the structure of a tuple "},{"type":"codeVoice","code":"(1, 2)"},{"type":"text","text":" is a comma-separated list of two"},{"type":"text","text":" "},{"text":"elements. Because patterns represent the structure of a value rather than any","type":"text"},{"type":"text","text":" "},{"text":"one particular value, you can match them with a variety of values.","type":"text"},{"type":"text","text":" "},{"text":"For instance, the pattern ","type":"text"},{"type":"codeVoice","code":"(x, y)"},{"type":"text","text":" matches the tuple "},{"code":"(1, 2)","type":"codeVoice"},{"type":"text","text":" and any other"},{"type":"text","text":" "},{"type":"text","text":"two-element tuple. In addition to matching a pattern with a value,"},{"type":"text","text":" "},{"text":"you can extract part or all of a composite value and bind each part","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to a constant or variable name."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift, there are two basic kinds of patterns:"},{"type":"text","text":" "},{"text":"those that successfully match any kind of value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and those that may fail to match a specified value at runtime."}]},{"inlineContent":[{"text":"The first kind of pattern is used for destructuring values","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in simple variable, constant, and optional bindings."},{"type":"text","text":" "},{"type":"text","text":"These include wildcard patterns, identifier patterns,"},{"type":"text","text":" "},{"type":"text","text":"and any value binding or tuple patterns containing"},{"type":"text","text":" "},{"text":"them. You can specify a type annotation for these patterns","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to constrain them to match only values of a certain type."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second kind of pattern is used for full pattern matching,"},{"type":"text","text":" "},{"text":"where the values you’re trying to match against may not be there at runtime.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"These include enumeration case patterns, optional patterns, expression patterns,"},{"type":"text","text":" "},{"text":"and type-casting patterns. You use these patterns in a case label of a ","type":"text"},{"code":"switch","type":"codeVoice"},{"type":"text","text":" "},{"text":"statement, a ","type":"text"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause of a "},{"code":"do","type":"codeVoice"},{"text":" statement,","type":"text"},{"text":" ","type":"text"},{"text":"or in the case condition of an ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"code":"while","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"guard"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"text":" statement.","type":"text"}]},{"style":"note","name":"Grammar of a pattern","type":"aside","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"pattern","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"wildcard-pattern","type":"text"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-annotation"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"pattern","type":"text"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"identifier-pattern","type":"text"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"type-annotation"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"pattern","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"value-binding-pattern","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"pattern"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"tuple-pattern","type":"text"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-annotation"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"pattern"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"text":"enum-case-pattern","type":"text"}],"type":"emphasis"}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"pattern"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional-pattern"}]}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"pattern","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"type-casting-pattern"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"pattern","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"expression-pattern"}]}]}]},{"level":2,"text":"Patrón Comodín","type":"heading","anchor":"Patr%C3%B3n-Comod%C3%ADn"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"wildcard pattern","type":"text"}]},{"type":"text","text":" matches and ignores any value and consists of an underscore"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"_"},{"type":"text","text":"). Use a wildcard pattern when you don’t care about the values being"},{"type":"text","text":" "},{"text":"matched against. For example, the following code iterates through the closed range ","type":"text"},{"code":"1...3","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"ignoring the current value of the range on each iteration of the loop:"}]},{"code":["for _ in 1...3 {","    \/\/ Do something three times.","}"],"type":"codeListing","syntax":"swift"},{"name":"Grammar of a wildcard pattern","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"wildcard-pattern","type":"text"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"code":"_","type":"codeVoice"}]}],"type":"paragraph"}],"type":"aside","style":"note"},{"text":"Patrón Identificador","level":2,"type":"heading","anchor":"Patr%C3%B3n-Identificador"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"inlineContent":[{"type":"text","text":"identifier pattern"}],"type":"emphasis"},{"text":" matches any value and binds the matched value to a","type":"text"},{"type":"text","text":" "},{"text":"variable or constant name.","type":"text"},{"type":"text","text":" "},{"text":"For example, in the following constant declaration, ","type":"text"},{"type":"codeVoice","code":"someValue"},{"type":"text","text":" is an identifier pattern"},{"type":"text","text":" "},{"type":"text","text":"that matches the value "},{"type":"codeVoice","code":"42"},{"type":"text","text":" of type "},{"code":"Int","type":"codeVoice"},{"text":":","type":"text"}]},{"code":["let someValue = 42"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the match succeeds, the value "},{"type":"codeVoice","code":"42"},{"type":"text","text":" is bound (assigned)"},{"text":" ","type":"text"},{"text":"to the constant name ","type":"text"},{"type":"codeVoice","code":"someValue"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"When the pattern on the left-hand side of a variable or constant declaration","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is an identifier pattern,"},{"type":"text","text":" "},{"type":"text","text":"the identifier pattern is implicitly a subpattern of a value-binding pattern."}]},{"name":"Grammar of an identifier pattern","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"identifier-pattern"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"identifier","type":"text"}]}]}],"type":"aside","style":"note"},{"type":"heading","text":"Patrón de Vinculación de Valores","level":2,"anchor":"Patr%C3%B3n-de-Vinculaci%C3%B3n-de-Valores"},{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"value-binding pattern"}]},{"text":" binds matched values to variable or constant names.","type":"text"},{"type":"text","text":" "},{"text":"Value-binding patterns that bind a matched value to the name of a constant","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"begin with the "},{"type":"codeVoice","code":"let"},{"type":"text","text":" keyword; those that bind to the name of variable"},{"type":"text","text":" "},{"text":"begin with the ","type":"text"},{"code":"var","type":"codeVoice"},{"text":" keyword.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Identifiers patterns within a value-binding pattern"},{"text":" ","type":"text"},{"text":"bind new named variables or constants to their matching values. For example,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can decompose the elements of a tuple and bind the value of each element to a"},{"text":" ","type":"text"},{"text":"corresponding identifier pattern.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let point = (3, 2)","switch point {","\/\/ Bind x and y to the elements of point.","case let (x, y):","    print(\"The point is at (\\(x), \\(y)).\")","}","\/\/ Prints \"The point is at (3, 2).\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above, "},{"code":"let","type":"codeVoice"},{"text":" distributes to each identifier pattern in the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"tuple pattern "},{"type":"codeVoice","code":"(x, y)"},{"text":". Because of this behavior, the ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" cases","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"case let (x, y):"},{"text":" and ","type":"text"},{"code":"case (let x, let y):","type":"codeVoice"},{"type":"text","text":" match the same values."}]},{"name":"Grammar of a value-binding pattern","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"inlineContent":[{"inlineContent":[{"text":"value-binding-pattern","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"code":"var","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"pattern","type":"text"}]},{"type":"text","text":" | "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"let"}]},{"text":" ","type":"text"},{"inlineContent":[{"text":"pattern","type":"text"}],"type":"emphasis"}],"type":"paragraph"}]},{"type":"heading","level":2,"text":"Patrones Tupla","anchor":"Patrones-Tupla"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tuple pattern"}]},{"type":"text","text":" is a comma-separated list of zero or more patterns, enclosed in"},{"text":" ","type":"text"},{"text":"parentheses. Tuple patterns match values of corresponding tuple types.","type":"text"}]},{"inlineContent":[{"text":"You can constrain a tuple pattern to match certain kinds of tuple types","type":"text"},{"text":" ","type":"text"},{"text":"by using type annotations.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example, the tuple pattern "},{"type":"codeVoice","code":"(x, y): (Int, Int)"},{"text":" in the constant declaration","type":"text"},{"type":"text","text":" "},{"code":"let (x, y): (Int, Int) = (1, 2)","type":"codeVoice"},{"type":"text","text":" matches only tuple types in which"},{"type":"text","text":" "},{"type":"text","text":"both elements are of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a tuple pattern is used as the pattern in a "},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"type":"codeVoice","code":"in"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"or in a variable or constant declaration, it can contain only wildcard patterns,"},{"type":"text","text":" "},{"type":"text","text":"identifier patterns, optional patterns, or other tuple patterns that contain those."},{"text":" ","type":"text"},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"text":"the following code isn’t valid because the element ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":" in the tuple pattern "},{"type":"codeVoice","code":"(x, 0)"},{"type":"text","text":" is"},{"type":"text","text":" "},{"text":"an expression pattern:","type":"text"}]},{"code":["let points = [(0, 0), (1, 0), (1, 1), (2, 0), (2, 1)]","\/\/ This code isn't valid.","for (x, 0) in points {","    \/* ... *\/","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The parentheses around a tuple pattern that contains a single element have no effect.","type":"text"},{"type":"text","text":" "},{"text":"The pattern matches values of that single element’s type. For example, the following are","type":"text"},{"type":"text","text":" "},{"type":"text","text":"equivalent:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let a = 2        \/\/ a: Int = 2","let (a) = 2      \/\/ a: Int = 2","let (a): Int = 2 \/\/ a: Int = 2"]},{"style":"note","name":"Grammar of a tuple pattern","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"tuple-pattern"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"("}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tuple-pattern-element-list"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":")"}],"type":"strong"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"tuple-pattern-element-list"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"tuple-pattern-element","type":"text"}]},{"type":"text","text":" | "},{"inlineContent":[{"text":"tuple-pattern-element","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":","}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"tuple-pattern-element-list"}]}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"tuple-pattern-element","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"pattern","type":"text"}]},{"text":" | ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"identifier"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":":"}]},{"text":" ","type":"text"},{"inlineContent":[{"text":"pattern","type":"text"}],"type":"emphasis"}]}],"type":"aside"},{"type":"heading","level":2,"text":"Patrones de Casos de Enumeración","anchor":"Patrones-de-Casos-de-Enumeraci%C3%B3n"},{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"inlineContent":[{"type":"text","text":"enumeration case pattern"}],"type":"emphasis"},{"type":"text","text":" matches a case of an existing enumeration type."},{"text":" ","type":"text"},{"type":"text","text":"Enumeration case patterns appear in "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"text":"case labels and in the case conditions of ","type":"text"},{"code":"if","type":"codeVoice"},{"text":", ","type":"text"},{"code":"while","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"guard"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"code":"in","type":"codeVoice"},{"type":"text","text":" "},{"text":"statements.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the enumeration case you’re trying to match has any associated values,"},{"text":" ","type":"text"},{"type":"text","text":"the corresponding enumeration case pattern must specify a tuple pattern that contains"},{"type":"text","text":" "},{"text":"one element for each associated value. For an example that uses a ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" statement","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to match enumeration cases containing associated values,"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"type":"text","text":"doc:Enumerations#Valores-Asociados"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An enumeration case pattern also matches"},{"type":"text","text":" "},{"type":"text","text":"values of that case wrapped in an optional."},{"type":"text","text":" "},{"type":"text","text":"This simplified syntax lets you omit an optional pattern."},{"text":" ","type":"text"},{"text":"Note that,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because "},{"code":"Optional","type":"codeVoice"},{"type":"text","text":" is implemented as an enumeration,"},{"text":" ","type":"text"},{"type":"codeVoice","code":".none"},{"type":"text","text":" and "},{"type":"codeVoice","code":".some"},{"type":"text","text":" can appear"},{"text":" ","type":"text"},{"text":"in the same switch as the cases of the enumeration type.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["enum SomeEnum { case left, right }","let x: SomeEnum? = .left","switch x {","case .left:","    print(\"Turn left\")","case .right:","    print(\"Turn right\")","case nil:","    print(\"Keep going straight\")","}","\/\/ Prints \"Turn left\""]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"enum-case-pattern"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"text":"type-identifier","type":"text"}],"type":"emphasis"},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"."}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"enum-case-name"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"text":"tuple-pattern","type":"text"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]}]}],"type":"aside","name":"Grammar of an enumeration case pattern"},{"type":"heading","level":2,"text":"Patrón Opcional","anchor":"Patr%C3%B3n-Opcional"},{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"optional pattern","type":"text"}]},{"text":" matches values wrapped in a ","type":"text"},{"type":"codeVoice","code":"some(Wrapped)"},{"text":" case","type":"text"},{"type":"text","text":" "},{"text":"of an ","type":"text"},{"type":"codeVoice","code":"Optional<Wrapped>"},{"text":" enumeration.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Optional patterns consist of an identifier pattern followed immediately by a question mark"},{"text":" ","type":"text"},{"type":"text","text":"and appear in the same places as enumeration case patterns."}]},{"type":"paragraph","inlineContent":[{"text":"Because optional patterns are syntactic sugar for ","type":"text"},{"type":"codeVoice","code":"Optional"},{"type":"text","text":" "},{"type":"text","text":"enumeration case patterns,"},{"text":" ","type":"text"},{"text":"the following are equivalent:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let someOptional: Int? = 42","\/\/ Match using an enumeration case pattern.","if case .some(let x) = someOptional {","    print(x)","}","","\/\/ Match using an optional pattern.","if case let x? = someOptional {","    print(x)","}"]},{"type":"paragraph","inlineContent":[{"text":"The optional pattern provides a convenient way to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"iterate over an array of optional values in a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"text":" statement,","type":"text"},{"text":" ","type":"text"},{"text":"executing the body of the loop only for non-","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" elements."}]},{"syntax":"swift","code":["let arrayOfOptionalInts: [Int?] = [nil, 2, 3, nil, 5]","\/\/ Match only non-nil values.","for case let number? in arrayOfOptionalInts {","    print(\"Found a \\(number)\")","}","\/\/ Found a 2","\/\/ Found a 3","\/\/ Found a 5"],"type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"optional-pattern","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"identifier-pattern"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"?"}]}]}],"type":"aside","name":"Grammar of an optional pattern","style":"note"},{"text":"Patrones de Conversión de Tipos","level":2,"type":"heading","anchor":"Patrones-de-Conversi%C3%B3n-de-Tipos"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are two type-casting patterns, the "},{"code":"is","type":"codeVoice"},{"text":" pattern and the ","type":"text"},{"type":"codeVoice","code":"as"},{"text":" pattern.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"is"},{"type":"text","text":" pattern appears only in "},{"type":"codeVoice","code":"switch"},{"text":" statement","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"case labels. The "},{"type":"codeVoice","code":"is"},{"type":"text","text":" and "},{"type":"codeVoice","code":"as"},{"text":" patterns have the following form:","type":"text"}]},{"code":["is <#type#>","<#pattern#> as <#type#>"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"code":"is","type":"codeVoice"},{"text":" pattern matches a value if the type of that value at runtime is the same as","type":"text"},{"type":"text","text":" "},{"text":"the type specified in the right-hand side of the ","type":"text"},{"code":"is","type":"codeVoice"},{"text":" pattern — or a subclass of that type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"is"},{"type":"text","text":" pattern behaves like the "},{"type":"codeVoice","code":"is"},{"text":" operator in that they both perform a type cast","type":"text"},{"text":" ","type":"text"},{"text":"but discard the returned type.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"as"},{"text":" pattern matches a value if the type of that value at runtime is the same as","type":"text"},{"type":"text","text":" "},{"text":"the type specified in the right-hand side of the ","type":"text"},{"type":"codeVoice","code":"as"},{"text":" pattern — or a subclass of that type.","type":"text"},{"type":"text","text":" "},{"text":"If the match succeeds,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the type of the matched value is cast to the "},{"type":"emphasis","inlineContent":[{"text":"pattern","type":"text"}]},{"text":" specified in the right-hand side","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"codeVoice","code":"as"},{"type":"text","text":" pattern."}]},{"type":"paragraph","inlineContent":[{"text":"For an example that uses a ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" statement","type":"text"},{"type":"text","text":" "},{"text":"to match values with ","type":"text"},{"code":"is","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"as","type":"codeVoice"},{"text":" patterns,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"text","text":"doc:TypeCasting#Conversión-de-Tipos-Para-Any-y-AnyObject"},{"text":".","type":"text"}]},{"name":"Grammar of a type casting pattern","type":"aside","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"type-casting-pattern"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"text":"is-pattern","type":"text"}],"type":"emphasis"},{"type":"text","text":" | "},{"type":"emphasis","inlineContent":[{"text":"as-pattern","type":"text"}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"is-pattern"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"is"}]},{"type":"text","text":" "},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"as-pattern"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"pattern"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":"as","type":"codeVoice"}]},{"type":"text","text":" "},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"}]}],"style":"note"},{"anchor":"Patrones-Expresi%C3%B3n","text":"Patrones Expresión","level":2,"type":"heading"},{"inlineContent":[{"text":"An ","type":"text"},{"inlineContent":[{"text":"expression pattern","type":"text"}],"type":"emphasis"},{"text":" represents the value of an expression.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Expression patterns appear only in "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"type":"text","text":"case labels."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The expression represented by the expression pattern"},{"text":" ","type":"text"},{"text":"is compared with the value of an input expression","type":"text"},{"type":"text","text":" "},{"text":"using the Swift standard library ","type":"text"},{"type":"codeVoice","code":"~="},{"text":" operator.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The matches succeeds"},{"type":"text","text":" "},{"text":"if the ","type":"text"},{"type":"codeVoice","code":"~="},{"type":"text","text":" operator returns "},{"type":"codeVoice","code":"true"},{"text":". By default, the ","type":"text"},{"code":"~=","type":"codeVoice"},{"type":"text","text":" operator compares"},{"type":"text","text":" "},{"type":"text","text":"two values of the same type using the "},{"code":"==","type":"codeVoice"},{"text":" operator.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It can also match a value with a range of values,"},{"text":" ","type":"text"},{"text":"by checking whether the value is contained within the range,","type":"text"},{"text":" ","type":"text"},{"text":"as the following example shows.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let point = (1, 2)","switch point {","case (0, 0):","    print(\"(0, 0) is at the origin.\")","case (-2...2, -2...2):","    print(\"(\\(point.0), \\(point.1)) is near the origin.\")","default:","    print(\"The point is at (\\(point.0), \\(point.1)).\")","}","\/\/ Prints \"(1, 2) is near the origin.\""],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"You can overload the "},{"code":"~=","type":"codeVoice"},{"text":" operator to provide custom expression matching behavior.","type":"text"},{"type":"text","text":" "},{"text":"For example, you can rewrite the above example to compare the ","type":"text"},{"type":"codeVoice","code":"point"},{"text":" expression","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with a string representations of points."}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ Overload the ~= operator to match a string with an integer.","func ~= (pattern: String, value: Int) -> Bool {","    return pattern == \"\\(value)\"","}","switch point {","case (\"0\", \"0\"):","    print(\"(0, 0) is at the origin.\")","default:","    print(\"The point is at (\\(point.0), \\(point.1)).\")","}","\/\/ Prints \"The point is at (1, 2).\""],"syntax":"swift"},{"content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"expression-pattern"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"expression"}]}]}],"style":"note","name":"Grammar of an expression pattern","type":"aside"},{"content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo."}],"type":"paragraph"},{"inlineContent":[{"text":"Conoce más acerca del uso del ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"Software Beta","style":"note","type":"aside"}],"kind":"content"}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"references":{"https://developer.apple.com/es/support/beta-software/":{"titleInlineContent":[{"text":"software beta de Apple","type":"text"}],"title":"software beta de Apple","type":"link","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","url":"\/documentation\/the-swift-programming-language","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","type":"topic","role":"collection","title":"The Swift Programming Language (5.9)","abstract":[]}}}