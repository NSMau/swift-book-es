{"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments"},"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"text":"This chapter describes parameters and arguments for generic types, functions, and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"initializers. When you declare a generic type, function, subscript, or initializer,"},{"text":" ","type":"text"},{"type":"text","text":"you specify the type parameters that the generic type, function, or initializer"},{"type":"text","text":" "},{"text":"can work with. These type parameters act as placeholders that","type":"text"},{"text":" ","type":"text"},{"text":"are replaced by actual concrete type arguments when an instance of a generic type is","type":"text"},{"type":"text","text":" "},{"text":"created or a generic function or initializer is called.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For an overview of generics in Swift, see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics"},{"text":".","type":"text"}]},{"level":2,"text":"Generic Parameter Clause","anchor":"Generic-Parameter-Clause","type":"heading"},{"inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic parameter clause"}]},{"type":"text","text":" specifies the type parameters of a generic"},{"type":"text","text":" "},{"text":"type or function, along with any associated constraints and requirements on those parameters.","type":"text"},{"text":" ","type":"text"},{"text":"A generic parameter clause is enclosed in angle brackets (<>)","type":"text"},{"text":" ","type":"text"},{"text":"and has the following form:","type":"text"}],"type":"paragraph"},{"code":["<<#generic parameter list#>>"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"text":"generic parameter list","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a comma-separated list of generic parameters,"},{"type":"text","text":" "},{"text":"each of which has the following form:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["<#type parameter#>: <#constraint#>"]},{"inlineContent":[{"type":"text","text":"A generic parameter consists of a "},{"inlineContent":[{"text":"type parameter","type":"text"}],"type":"emphasis"},{"type":"text","text":" followed by"},{"type":"text","text":" "},{"type":"text","text":"an optional "},{"type":"emphasis","inlineContent":[{"type":"text","text":"constraint"}]},{"text":". A ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type parameter"}]},{"type":"text","text":" is simply the name"},{"text":" ","type":"text"},{"type":"text","text":"of a placeholder type"},{"type":"text","text":" "},{"text":"(for example, ","type":"text"},{"code":"T","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"U"},{"type":"text","text":", "},{"type":"codeVoice","code":"V"},{"type":"text","text":", "},{"type":"codeVoice","code":"Key"},{"type":"text","text":", "},{"code":"Value","type":"codeVoice"},{"type":"text","text":", and so on)."},{"type":"text","text":" "},{"text":"You have access to the type parameters (and any of their associated types) in the rest of the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type, function, or initializer declaration, including in the signature of the function"},{"text":" ","type":"text"},{"text":"or initializer.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"text":"constraint","type":"text"}]},{"text":" specifies that a type parameter inherits","type":"text"},{"type":"text","text":" "},{"text":"from a specific class or conforms to a protocol or protocol composition.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, in the generic function below, the generic parameter "},{"code":"T: Comparable","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"indicates that any type argument substituted"},{"text":" ","type":"text"},{"text":"for the type parameter ","type":"text"},{"code":"T","type":"codeVoice"},{"type":"text","text":" must conform to the "},{"code":"Comparable","type":"codeVoice"},{"text":" protocol.","type":"text"}]},{"code":["func simpleMax<T: Comparable>(_ x: T, _ y: T) -> T {","    if x < y {","        return y","    }","    return x","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Because ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Double"},{"text":", for example, both conform to the ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":" protocol,","type":"text"},{"type":"text","text":" "},{"text":"this function accepts arguments of either type. In contrast with generic types, you don’t","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"specify a generic argument clause when you use a generic function or initializer."},{"text":" ","type":"text"},{"type":"text","text":"The type arguments are instead inferred from the type of the arguments passed"},{"type":"text","text":" "},{"type":"text","text":"to the function or initializer."}]},{"type":"codeListing","syntax":"swift","code":["simpleMax(17, 42) \/\/ T is inferred to be Int","simpleMax(3.14159, 2.71828) \/\/ T is inferred to be Double"]},{"level":3,"anchor":"Generic-Where-Clauses","type":"heading","text":"Generic Where Clauses"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can specify additional requirements on type parameters and their associated types"},{"type":"text","text":" "},{"text":"by including a generic ","type":"text"},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause right before the opening curly brace"},{"type":"text","text":" "},{"type":"text","text":"of a type or function’s body."},{"text":" ","type":"text"},{"text":"A generic ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" clause consists of the ","type":"text"},{"type":"codeVoice","code":"where"},{"type":"text","text":" keyword,"},{"type":"text","text":" "},{"type":"text","text":"followed by a comma-separated list of one or more "},{"type":"emphasis","inlineContent":[{"type":"text","text":"requirements"}]},{"text":".","type":"text"}]},{"syntax":"swift","code":["where <#requirements#>"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"requirements"}]},{"text":" in a generic ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" clause specify that a type parameter inherits from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a class or conforms to a protocol or protocol composition."},{"type":"text","text":" "},{"type":"text","text":"Although the generic "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause provides syntactic"},{"text":" ","type":"text"},{"type":"text","text":"sugar for expressing simple constraints on type parameters"},{"type":"text","text":" "},{"text":"(for example, ","type":"text"},{"type":"codeVoice","code":"<T: Comparable>"},{"type":"text","text":" is equivalent to "},{"type":"codeVoice","code":"<T> where T: Comparable"},{"text":" and so on),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can use it to provide more complex constraints on type parameters"},{"type":"text","text":" "},{"type":"text","text":"and their associated types. For example,"},{"type":"text","text":" "},{"type":"text","text":"you can constrain the associated types of type parameters to conform to protocols."},{"type":"text","text":" "},{"text":"For example, ","type":"text"},{"type":"codeVoice","code":"<S: Sequence> where S.Iterator.Element: Equatable"},{"type":"text","text":" "},{"text":"specifies that ","type":"text"},{"code":"S","type":"codeVoice"},{"text":" conforms to the ","type":"text"},{"type":"codeVoice","code":"Sequence"},{"text":" protocol","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and that the associated type "},{"type":"codeVoice","code":"S.Iterator.Element"},{"text":" ","type":"text"},{"type":"text","text":"conforms to the "},{"code":"Equatable","type":"codeVoice"},{"text":" protocol.","type":"text"},{"text":" ","type":"text"},{"text":"This constraint ensures that each element of the sequence is equatable.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You can also specify the requirement that two types be identical,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"using the "},{"type":"codeVoice","code":"=="},{"type":"text","text":" operator. For example,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"<S1: Sequence, S2: Sequence> where S1.Iterator.Element == S2.Iterator.Element"},{"text":" ","type":"text"},{"type":"text","text":"expresses the constraints that "},{"type":"codeVoice","code":"S1"},{"type":"text","text":" and "},{"code":"S2","type":"codeVoice"},{"type":"text","text":" conform to the "},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":" protocol"},{"type":"text","text":" "},{"type":"text","text":"and that the elements of both sequences must be of the same type."}]},{"inlineContent":[{"text":"Any type argument substituted for a type parameter must","type":"text"},{"type":"text","text":" "},{"text":"meet all the constraints and requirements placed on the type parameter.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A generic "},{"code":"where","type":"codeVoice"},{"text":" clause can appear","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as part of a declaration that includes type parameters,"},{"text":" ","type":"text"},{"type":"text","text":"or as part of a declaration"},{"text":" ","type":"text"},{"text":"that’s nested inside of a declaration that includes type parameters.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The generic "},{"code":"where","type":"codeVoice"},{"text":" clause for a nested declaration","type":"text"},{"type":"text","text":" "},{"text":"can still refer to the type parameters of the enclosing declaration;","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"however,"},{"type":"text","text":" "},{"text":"the requirements from that ","type":"text"},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause"},{"text":" ","type":"text"},{"type":"text","text":"apply only to the declaration where it’s written."}],"type":"paragraph"},{"inlineContent":[{"text":"If the enclosing declaration also has a ","type":"text"},{"type":"codeVoice","code":"where"},{"text":" clause,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the requirements from both clauses are combined."},{"text":" ","type":"text"},{"type":"text","text":"In the example below, "},{"type":"codeVoice","code":"startsWithZero()"},{"text":" is available","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"only if "},{"code":"Element","type":"codeVoice"},{"text":" conforms to both ","type":"text"},{"code":"SomeProtocol","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Numeric"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["extension Collection where Element: SomeProtocol {","    func startsWithZero() -> Bool where Element: Numeric {","        return first == .zero","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can overload a generic function or initializer by providing different"},{"type":"text","text":" "},{"type":"text","text":"constraints, requirements, or both on the type parameters."},{"text":" ","type":"text"},{"text":"When you call an overloaded generic function or initializer,","type":"text"},{"type":"text","text":" "},{"text":"the compiler uses these constraints to resolve which overloaded function","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or initializer to invoke."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information about generic "},{"type":"codeVoice","code":"where"},{"text":" clauses and to see an example","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of one in a generic function declaration,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses","isActive":true},{"text":".","type":"text"}]},{"type":"aside","name":"Grammar of a generic parameter clause","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-parameter-clause"}]},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"<"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-parameter-list"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":">"}],"type":"strong"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"generic-parameter-list","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"generic-parameter","type":"text"}]},{"text":" | ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"generic-parameter","type":"text"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":",","type":"codeVoice"}]},{"text":" ","type":"text"},{"inlineContent":[{"text":"generic-parameter-list","type":"text"}],"type":"emphasis"}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"generic-parameter"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"text":"type-name","type":"text"}],"type":"emphasis"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"generic-parameter","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"type-name"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":":"}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type-identifier","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"generic-parameter"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-name"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":":","type":"codeVoice"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"protocol-composition-type"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"generic-where-clause","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"where"}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"requirement-list"}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"requirement-list"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"requirement"}]},{"text":" | ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"requirement","type":"text"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":","}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"requirement-list"}]}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"requirement"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"conformance-requirement","type":"text"}]},{"type":"text","text":" | "},{"inlineContent":[{"text":"same-type-requirement","type":"text"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"conformance-requirement"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-identifier"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":":"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"type-identifier","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"conformance-requirement"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-identifier"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":":"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"protocol-composition-type"}],"type":"emphasis"}]},{"inlineContent":[{"inlineContent":[{"text":"same-type-requirement","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"type-identifier"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"=="}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]}],"type":"paragraph"}]},{"text":"Generic Argument Clause","level":2,"type":"heading","anchor":"Generic-Argument-Clause"},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"text":"generic argument clause","type":"text"}],"type":"emphasis"},{"text":" specifies the type arguments of a generic","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type."},{"text":" ","type":"text"},{"text":"A generic argument clause is enclosed in angle brackets (<>)","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and has the following form:"}],"type":"paragraph"},{"syntax":"swift","code":["<<#generic argument list#>>"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"type":"text","text":"generic argument list"}],"type":"emphasis"},{"type":"text","text":" is a comma-separated list of type arguments."},{"type":"text","text":" "},{"type":"text","text":"A "},{"inlineContent":[{"text":"type argument","type":"text"}],"type":"emphasis"},{"type":"text","text":" is the name of an actual concrete type that replaces"},{"text":" ","type":"text"},{"text":"a corresponding type parameter in the generic parameter clause of a generic type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The result is a specialized version of that generic type."},{"text":" ","type":"text"},{"text":"The example below shows a simplified version of the Swift standard library’s","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"generic dictionary type."}]},{"code":["struct Dictionary<Key: Hashable, Value>: Collection, ExpressibleByDictionaryLiteral {","    \/* ... *\/","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The specialized version of the generic "},{"code":"Dictionary","type":"codeVoice"},{"text":" type, ","type":"text"},{"type":"codeVoice","code":"Dictionary<String, Int>"},{"type":"text","text":" "},{"type":"text","text":"is formed by replacing the generic parameters "},{"code":"Key: Hashable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Value","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"with the concrete type arguments "},{"code":"String","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Int"},{"type":"text","text":". Each type argument must satisfy"},{"type":"text","text":" "},{"type":"text","text":"all the constraints of the generic parameter it replaces, including any additional"},{"type":"text","text":" "},{"type":"text","text":"requirements specified in a generic "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause. In the example above,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"Key","type":"codeVoice"},{"text":" type parameter is constrained to conform to the ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":" protocol","type":"text"},{"type":"text","text":" "},{"text":"and therefore ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" must also conform to the "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" protocol."}]},{"inlineContent":[{"type":"text","text":"You can also replace a type parameter with a type argument that’s itself"},{"type":"text","text":" "},{"type":"text","text":"a specialized version of a generic type (provided it satisfies the appropriate"},{"text":" ","type":"text"},{"type":"text","text":"constraints and requirements). For example, you can replace the type parameter"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Element"},{"text":" in ","type":"text"},{"code":"Array<Element>","type":"codeVoice"},{"type":"text","text":" with a specialized version of an array, "},{"type":"codeVoice","code":"Array<Int>"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"to form an array whose elements are themselves arrays of integers.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let arrayOfArrays: Array<Array<Int>> = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"]},{"type":"paragraph","inlineContent":[{"text":"As mentioned in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments#Generic-Parameter-Clause"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you don’t use a generic argument clause to specify the type arguments"},{"text":" ","type":"text"},{"type":"text","text":"of a generic function or initializer."}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"inlineContent":[{"inlineContent":[{"text":"generic-argument-clause","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"<"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"generic-argument-list","type":"text"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":">"}],"type":"strong"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"generic-argument-list","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-argument"}]},{"text":" | ","type":"text"},{"inlineContent":[{"type":"text","text":"generic-argument"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"code":",","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-argument-list"}]}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-argument"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"}]}],"name":"Grammar of a generic argument clause","type":"aside","style":"note"},{"name":"Beta Software","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"text":"This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Learn more about using "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/support\/beta-software\/"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"aside"}]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"abstract":[{"type":"text","text":"Generalize declarations to abstract away concrete types."}],"metadata":{"title":"Generic Parameters and Arguments"},"sections":[],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GenericParametersAndArguments#Generic-Parameter-Clause":{"abstract":[],"kind":"section","title":"Generic Parameter Clause","url":"\/documentation\/the-swift-programming-language\/genericparametersandarguments#Generic-Parameter-Clause","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments#Generic-Parameter-Clause"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Where-Clauses":{"abstract":[],"kind":"section","title":"Generic Where Clauses","url":"\/documentation\/the-swift-programming-language\/generics#Generic-Where-Clauses","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"kind":"article","role":"article","abstract":[{"text":"Write code that works for multiple types and specify requirements for those types.","type":"text"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","url":"\/documentation\/the-swift-programming-language\/generics","type":"topic","title":"Generics"},"https://developer.apple.com/support/beta-software/":{"url":"https:\/\/developer.apple.com\/support\/beta-software\/","title":"Apple’s beta software","titleInlineContent":[{"text":"Apple’s beta software","type":"text"}],"type":"link","identifier":"https:\/\/developer.apple.com\/support\/beta-software\/"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","role":"collection","url":"\/documentation\/the-swift-programming-language","abstract":[],"title":"The Swift Programming Language (6)","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"}}}