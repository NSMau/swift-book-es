{"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","interfaceLanguage":"swift"},"sections":[],"abstract":[{"type":"text","text":"Subclass to add or override functionality."}],"metadata":{"title":"Herencia"},"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"text":" methods, properties, and other characteristics","type":"text"},{"type":"text","text":" "},{"text":"from another class.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"text":"the inheriting class is known as a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and the class it inherits from is known as its ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Classes in Swift can call and access"},{"type":"text","text":" "},{"text":"methods, properties, and subscripts belonging to their superclass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and can provide their own overriding versions of those methods, properties, and subscripts"},{"text":" ","type":"text"},{"text":"to refine or modify their behavior.","type":"text"},{"text":" ","type":"text"},{"text":"Swift helps to ensure your overrides are correct","type":"text"},{"text":" ","type":"text"},{"text":"by checking that the override definition has a matching superclass definition.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Classes can also add property observers to inherited properties"},{"text":" ","type":"text"},{"type":"text","text":"in order to be notified when the value of a property changes."},{"type":"text","text":" "},{"text":"Property observers can be added to any property,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"regardless of whether it was originally defined as a stored or computed property."}],"type":"paragraph"},{"type":"heading","anchor":"Definici%C3%B3n-de-una-clase-base","text":"Definición de una clase base","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any class that doesn’t inherit from another class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"base class"}]},{"type":"text","text":"."}]},{"content":[{"inlineContent":[{"type":"text","text":"Swift classes don’t inherit from a universal base class."},{"text":" ","type":"text"},{"type":"text","text":"Classes you define without specifying a superclass"},{"text":" ","type":"text"},{"text":"automatically become base classes for you to build upon.","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Note","style":"note"},{"type":"paragraph","inlineContent":[{"text":"The example below defines a base class called ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This base class defines a stored property called "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"with a default value of ","type":"text"},{"code":"0.0","type":"codeVoice"},{"type":"text","text":" (inferring a property type of "},{"code":"Double","type":"codeVoice"},{"type":"text","text":")."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"currentSpeed","type":"codeVoice"},{"text":" property’s value is used by","type":"text"},{"text":" ","type":"text"},{"text":"a read-only computed ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" property called ","type":"text"},{"type":"codeVoice","code":"description"},{"text":" ","type":"text"},{"type":"text","text":"to create a description of the vehicle."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Vehicle"},{"text":" base class also defines a method called ","type":"text"},{"type":"codeVoice","code":"makeNoise"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This method doesn’t actually do anything for a base "},{"type":"codeVoice","code":"Vehicle"},{"text":" instance,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but will be customized by subclasses of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" later on:"}]},{"type":"codeListing","code":["class Vehicle {","    var currentSpeed = 0.0","    var description: String {","        return \"traveling at \\(currentSpeed) miles per hour\"","    }","    func makeNoise() {","        \/\/ do nothing - an arbitrary vehicle doesn't necessarily make a noise","    }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"You create a new instance of "},{"type":"codeVoice","code":"Vehicle"},{"text":" with ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"initializer syntax","type":"text"}]},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which is written as a type name followed by empty parentheses:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let someVehicle = Vehicle()"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Having created a new "},{"type":"codeVoice","code":"Vehicle"},{"text":" instance,","type":"text"},{"type":"text","text":" "},{"text":"you can access its ","type":"text"},{"code":"description","type":"codeVoice"},{"type":"text","text":" property to print"},{"text":" ","type":"text"},{"type":"text","text":"a human-readable description of the vehicle’s current speed:"}]},{"syntax":"swift","code":["print(\"Vehicle: \\(someVehicle.description)\")","\/\/ Vehicle: traveling at 0.0 miles per hour"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"Vehicle","type":"codeVoice"},{"text":" class defines common characteristics for an arbitrary vehicle,","type":"text"},{"text":" ","type":"text"},{"text":"but isn’t much use in itself.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"To make it more useful,"},{"text":" ","type":"text"},{"type":"text","text":"you need to refine it to describe more specific kinds of vehicles."}]},{"anchor":"Creaci%C3%B3n-de-subclases","level":2,"text":"Creación de subclases","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Subclassing","type":"text"}]},{"type":"text","text":" is the act of basing a new class on an existing class."},{"text":" ","type":"text"},{"type":"text","text":"The subclass inherits characteristics from the existing class, which you can then refine."},{"type":"text","text":" "},{"text":"You can also add new characteristics to the subclass.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To indicate that a subclass has a superclass,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"write the subclass name before the superclass name,"},{"text":" ","type":"text"},{"text":"separated by a colon:","type":"text"}]},{"syntax":"swift","code":["class SomeSubclass: SomeSuperclass {","    \/\/ subclass definition goes here","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The following example defines a subclass called "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"with a superclass of "},{"type":"codeVoice","code":"Vehicle"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class Bicycle: Vehicle {","    var hasBasket = false","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The new "},{"code":"Bicycle","type":"codeVoice"},{"type":"text","text":" class automatically gains all of the characteristics of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"such as its "},{"code":"currentSpeed","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"description"},{"type":"text","text":" properties and its "},{"type":"codeVoice","code":"makeNoise()"},{"type":"text","text":" method."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to the characteristics it inherits,"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"Bicycle","type":"codeVoice"},{"text":" class defines a new stored property,","type":"text"},{"type":"text","text":" "},{"code":"hasBasket","type":"codeVoice"},{"type":"text","text":", with a default value of "},{"type":"codeVoice","code":"false"},{"type":"text","text":" "},{"type":"text","text":"(inferring a type of "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":" for the property)."}]},{"inlineContent":[{"type":"text","text":"By default, any new "},{"code":"Bicycle","type":"codeVoice"},{"text":" instance you create will not have a basket.","type":"text"},{"type":"text","text":" "},{"text":"You can set the ","type":"text"},{"code":"hasBasket","type":"codeVoice"},{"text":" property to ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":" for a particular "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" instance"},{"text":" ","type":"text"},{"text":"after that instance is created:","type":"text"}],"type":"paragraph"},{"code":["let bicycle = Bicycle()","bicycle.hasBasket = true"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"You can also modify the inherited "},{"code":"currentSpeed","type":"codeVoice"},{"type":"text","text":" property of a "},{"code":"Bicycle","type":"codeVoice"},{"text":" instance,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and query the instance’s inherited "},{"type":"codeVoice","code":"description"},{"text":" property:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["bicycle.currentSpeed = 15.0","print(\"Bicycle: \\(bicycle.description)\")","\/\/ Bicycle: traveling at 15.0 miles per hour"]},{"inlineContent":[{"type":"text","text":"Subclasses can themselves be subclassed."},{"type":"text","text":" "},{"type":"text","text":"The next example creates a subclass of "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" for a two-seater bicycle"},{"text":" ","type":"text"},{"text":"known as a “tandem”:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class Tandem: Bicycle {","    var currentNumberOfPassengers = 0","}"]},{"inlineContent":[{"code":"Tandem","type":"codeVoice"},{"text":" inherits all of the properties and methods from ","type":"text"},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which in turn inherits all of the properties and methods from ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"Tandem","type":"codeVoice"},{"type":"text","text":" subclass also adds a new stored property called "},{"type":"codeVoice","code":"currentNumberOfPassengers"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a default value of "},{"code":"0","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If you create an instance of ","type":"text"},{"type":"codeVoice","code":"Tandem"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"you can work with any of its new and inherited properties,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and query the read-only "},{"type":"codeVoice","code":"description"},{"text":" property it inherits from ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":":","type":"text"}]},{"code":["let tandem = Tandem()","tandem.hasBasket = true","tandem.currentNumberOfPassengers = 2","tandem.currentSpeed = 22.0","print(\"Tandem: \\(tandem.description)\")","\/\/ Tandem: traveling at 22.0 miles per hour"],"type":"codeListing","syntax":"swift"},{"anchor":"Sustituciones-Overriding","text":"Sustituciones (Overriding)","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A subclass can provide its own custom implementation of"},{"type":"text","text":" "},{"type":"text","text":"an instance method, type method, instance property, type property, or subscript"},{"text":" ","type":"text"},{"text":"that it would otherwise inherit from a superclass.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This is known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"overriding"}]},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To override a characteristic that would otherwise be inherited,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you prefix your overriding definition with the "},{"type":"codeVoice","code":"override"},{"text":" keyword.","type":"text"},{"type":"text","text":" "},{"text":"Doing so clarifies that you intend to provide an override","type":"text"},{"text":" ","type":"text"},{"text":"and haven’t provided a matching definition by mistake.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Overriding by accident can cause unexpected behavior,"},{"text":" ","type":"text"},{"text":"and any overrides without the ","type":"text"},{"type":"codeVoice","code":"override"},{"text":" keyword are","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"diagnosed as an error when your code is compiled."}]},{"inlineContent":[{"type":"text","text":"The "},{"code":"override","type":"codeVoice"},{"type":"text","text":" keyword also prompts the Swift compiler"},{"type":"text","text":" "},{"text":"to check that your overriding class’s superclass (or one of its parents)","type":"text"},{"text":" ","type":"text"},{"text":"has a declaration that matches the one you provided for the override.","type":"text"},{"type":"text","text":" "},{"text":"This check ensures that your overriding definition is correct.","type":"text"}],"type":"paragraph"},{"level":3,"text":"Acceso a métodos, propiedades, y subíndices de superclases","anchor":"Acceso-a-m%C3%A9todos-propiedades-y-sub%C3%ADndices-de-superclases","type":"heading"},{"inlineContent":[{"text":"When you provide a method, property, or subscript override for a subclass,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it’s sometimes useful to use the existing superclass implementation"},{"type":"text","text":" "},{"type":"text","text":"as part of your override."},{"text":" ","type":"text"},{"type":"text","text":"For example, you can refine the behavior of that existing implementation,"},{"text":" ","type":"text"},{"type":"text","text":"or store a modified value in an existing inherited variable."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Where this is appropriate,"},{"type":"text","text":" "},{"text":"you access the superclass version of a method, property, or subscript","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by using the "},{"type":"codeVoice","code":"super"},{"type":"text","text":" prefix:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An overridden method named "},{"code":"someMethod()","type":"codeVoice"},{"text":" can call the superclass version of ","type":"text"},{"type":"codeVoice","code":"someMethod()"},{"type":"text","text":" "},{"text":"by calling ","type":"text"},{"code":"super.someMethod()","type":"codeVoice"},{"text":" within the overriding method implementation.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"An overridden property called "},{"type":"codeVoice","code":"someProperty"},{"text":" can access the superclass version of ","type":"text"},{"type":"codeVoice","code":"someProperty"},{"text":" ","type":"text"},{"text":"as ","type":"text"},{"type":"codeVoice","code":"super.someProperty"},{"type":"text","text":" within the overriding getter or setter implementation."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"An overridden subscript for ","type":"text"},{"type":"codeVoice","code":"someIndex"},{"type":"text","text":" can access the superclass version of the same subscript"},{"text":" ","type":"text"},{"type":"text","text":"as "},{"type":"codeVoice","code":"super[someIndex]"},{"type":"text","text":" from within the overriding subscript implementation."}],"type":"paragraph"}]}]},{"anchor":"Sustituci%C3%B3n-de-m%C3%A9todos","level":3,"text":"Sustitución de métodos","type":"heading"},{"inlineContent":[{"type":"text","text":"You can override an inherited instance or type method"},{"type":"text","text":" "},{"type":"text","text":"to provide a tailored or alternative implementation of the method within your subclass."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The following example defines a new subclass of ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"text":" called ","type":"text"},{"type":"codeVoice","code":"Train"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which overrides the "},{"code":"makeNoise()","type":"codeVoice"},{"type":"text","text":" method that "},{"type":"codeVoice","code":"Train"},{"type":"text","text":" inherits from "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":":"}]},{"code":["class Train: Vehicle {","    override func makeNoise() {","        print(\"Choo Choo\")","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"If you create a new instance of "},{"type":"codeVoice","code":"Train"},{"text":" and call its ","type":"text"},{"type":"codeVoice","code":"makeNoise()"},{"text":" method,","type":"text"},{"text":" ","type":"text"},{"text":"you can see that the ","type":"text"},{"type":"codeVoice","code":"Train"},{"text":" subclass version of the method is called:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let train = Train()","train.makeNoise()","\/\/ Prints \"Choo Choo\""],"syntax":"swift"},{"anchor":"Sustituci%C3%B3n-de-propiedades","level":3,"text":"Sustitución de propiedades","type":"heading"},{"inlineContent":[{"type":"text","text":"You can override an inherited instance or type property"},{"type":"text","text":" "},{"text":"to provide your own custom getter and setter for that property,","type":"text"},{"text":" ","type":"text"},{"text":"or to add property observers to enable the overriding property","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to observe when the underlying property value changes."}],"type":"paragraph"},{"text":"Sustitución de getters y setters de propiedades","level":4,"type":"heading","anchor":"Sustituci%C3%B3n-de-getters-y-setters-de-propiedades"},{"type":"paragraph","inlineContent":[{"text":"You can provide a custom getter (and setter, if appropriate)","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to override "},{"inlineContent":[{"type":"text","text":"any"}],"type":"emphasis"},{"type":"text","text":" inherited property,"},{"text":" ","type":"text"},{"type":"text","text":"regardless of whether the inherited property is implemented as"},{"text":" ","type":"text"},{"text":"a stored or computed property at source.","type":"text"},{"type":"text","text":" "},{"text":"The stored or computed nature of an inherited property isn’t known by a subclass —","type":"text"},{"text":" ","type":"text"},{"text":"it only knows that the inherited property has a certain name and type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You must always state both the name and the type of the property you are overriding,"},{"text":" ","type":"text"},{"type":"text","text":"to enable the compiler to check that your override matches"},{"type":"text","text":" "},{"text":"a superclass property with the same name and type.","type":"text"}]},{"inlineContent":[{"type":"text","text":"You can present an inherited read-only property as a read-write property"},{"text":" ","type":"text"},{"text":"by providing both a getter and a setter in your subclass property override.","type":"text"},{"type":"text","text":" "},{"text":"You can’t, however, present an inherited read-write property as a read-only property.","type":"text"}],"type":"paragraph"},{"name":"Note","style":"note","content":[{"inlineContent":[{"type":"text","text":"If you provide a setter as part of a property override,"},{"type":"text","text":" "},{"text":"you must also provide a getter for that override.","type":"text"},{"type":"text","text":" "},{"text":"If you don’t want to modify the inherited property’s value within the overriding getter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can simply pass through the inherited value"},{"type":"text","text":" "},{"text":"by returning ","type":"text"},{"type":"codeVoice","code":"super.someProperty"},{"type":"text","text":" from the getter,"},{"type":"text","text":" "},{"type":"text","text":"where "},{"type":"codeVoice","code":"someProperty"},{"text":" is the name of the property you are overriding.","type":"text"}],"type":"paragraph"}],"type":"aside"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a new class called "},{"code":"Car","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which is a subclass of ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class introduces a new stored property called "},{"type":"codeVoice","code":"gear"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with a default integer value of "},{"code":"1","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class also overrides the "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property it inherits from "},{"type":"codeVoice","code":"Vehicle"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to provide a custom description that includes the current gear:"}]},{"code":["class Car: Vehicle {","    var gear = 1","    override var description: String {","        return super.description + \" in gear \\(gear)\"","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The override of the "},{"code":"description","type":"codeVoice"},{"type":"text","text":" property starts by calling "},{"type":"codeVoice","code":"super.description"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which returns the "},{"code":"Vehicle","type":"codeVoice"},{"text":" class’s ","type":"text"},{"code":"description","type":"codeVoice"},{"text":" property.","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"code":"Car","type":"codeVoice"},{"type":"text","text":" class’s version of "},{"code":"description","type":"codeVoice"},{"text":" then adds some extra text onto","type":"text"},{"type":"text","text":" "},{"text":"the end of this description to provide information about the current gear.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you create an instance of the "},{"code":"Car","type":"codeVoice"},{"text":" class","type":"text"},{"type":"text","text":" "},{"text":"and set its ","type":"text"},{"type":"codeVoice","code":"gear"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"currentSpeed"},{"text":" properties,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can see that its "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property returns"},{"text":" ","type":"text"},{"text":"the tailored description defined within the ","type":"text"},{"code":"Car","type":"codeVoice"},{"type":"text","text":" class:"}],"type":"paragraph"},{"code":["let car = Car()","car.currentSpeed = 25.0","car.gear = 3","print(\"Car: \\(car.description)\")","\/\/ Car: traveling at 25.0 miles per hour in gear 3"],"type":"codeListing","syntax":"swift"},{"text":"Sustitución de observadores de propiedades","anchor":"Sustituci%C3%B3n-de-observadores-de-propiedades","level":4,"type":"heading"},{"inlineContent":[{"text":"You can use property overriding to add property observers to an inherited property.","type":"text"},{"type":"text","text":" "},{"text":"This enables you to be notified when the value of an inherited property changes,","type":"text"},{"text":" ","type":"text"},{"text":"regardless of how that property was originally implemented.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For more information on property observers, see "},{"text":"doc:Properties#Observadores-de-propiedades","type":"text"},{"type":"text","text":"."}],"type":"paragraph"},{"name":"Note","style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"You can’t add property observers to"},{"type":"text","text":" "},{"type":"text","text":"inherited constant stored properties or inherited read-only computed properties."},{"type":"text","text":" "},{"type":"text","text":"The value of these properties can’t be set,"},{"type":"text","text":" "},{"type":"text","text":"and so it isn’t appropriate to provide a "},{"code":"willSet","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" implementation"},{"type":"text","text":" "},{"type":"text","text":"as part of an override."}],"type":"paragraph"},{"inlineContent":[{"text":"Note also that you can’t provide both","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an overriding setter and an overriding property observer for the same property."},{"type":"text","text":" "},{"type":"text","text":"If you want to observe changes to a property’s value,"},{"text":" ","type":"text"},{"type":"text","text":"and you are already providing a custom setter for that property,"},{"text":" ","type":"text"},{"type":"text","text":"you can simply observe any value changes from within the custom setter."}],"type":"paragraph"}]},{"inlineContent":[{"type":"text","text":"The following example defines a new class called "},{"code":"AutomaticCar","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which is a subclass of ","type":"text"},{"type":"codeVoice","code":"Car"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"AutomaticCar"},{"text":" class represents a car with an automatic gearbox,","type":"text"},{"type":"text","text":" "},{"text":"which automatically selects an appropriate gear to use based on the current speed:","type":"text"}],"type":"paragraph"},{"code":["class AutomaticCar: Car {","    override var currentSpeed: Double {","        didSet {","            gear = Int(currentSpeed \/ 10.0) + 1","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Whenever you set the ","type":"text"},{"code":"currentSpeed","type":"codeVoice"},{"type":"text","text":" property of an "},{"type":"codeVoice","code":"AutomaticCar"},{"text":" instance,","type":"text"},{"text":" ","type":"text"},{"text":"the property’s ","type":"text"},{"type":"codeVoice","code":"didSet"},{"text":" observer sets the instance’s ","type":"text"},{"code":"gear","type":"codeVoice"},{"type":"text","text":" property to"},{"text":" ","type":"text"},{"type":"text","text":"an appropriate choice of gear for the new speed."},{"text":" ","type":"text"},{"text":"Specifically, the property observer chooses a gear that’s","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the new "},{"code":"currentSpeed","type":"codeVoice"},{"text":" value divided by ","type":"text"},{"code":"10","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"rounded down to the nearest integer, plus "},{"code":"1","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"A speed of "},{"type":"codeVoice","code":"35.0"},{"text":" produces a gear of ","type":"text"},{"type":"codeVoice","code":"4"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["let automatic = AutomaticCar()","automatic.currentSpeed = 35.0","print(\"AutomaticCar: \\(automatic.description)\")","\/\/ AutomaticCar: traveling at 35.0 miles per hour in gear 4"],"type":"codeListing","syntax":"swift"},{"text":"Prevención de sustituciones","anchor":"Prevenci%C3%B3n-de-sustituciones","level":2,"type":"heading"},{"inlineContent":[{"text":"You can prevent a method, property, or subscript from being overridden","type":"text"},{"text":" ","type":"text"},{"text":"by marking it as ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"final"}]},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Do this by writing the ","type":"text"},{"type":"codeVoice","code":"final"},{"type":"text","text":" modifier before"},{"type":"text","text":" "},{"text":"the method, property, or subscript’s introducer keyword","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(such as "},{"code":"final var","type":"codeVoice"},{"type":"text","text":", "},{"code":"final func","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"final class func"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"final subscript"},{"type":"text","text":")."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Any attempt to override a final method, property, or subscript in a subclass","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is reported as a compile-time error."},{"text":" ","type":"text"},{"text":"Methods, properties, or subscripts that you add to a class in an extension","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can also be marked as final within the extension’s definition."},{"text":" ","type":"text"},{"type":"text","text":"For more information, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"You can mark an entire class as final by writing the "},{"code":"final","type":"codeVoice"},{"type":"text","text":" modifier"},{"type":"text","text":" "},{"text":"before the ","type":"text"},{"code":"class","type":"codeVoice"},{"text":" keyword in its class definition (","type":"text"},{"type":"codeVoice","code":"final class"},{"type":"text","text":")."},{"type":"text","text":" "},{"text":"Any attempt to subclass a final class is reported as a compile-time error.","type":"text"}],"type":"paragraph"},{"type":"aside","name":"Software Beta","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo.","type":"text"}]},{"inlineContent":[{"text":"Conoce más acerca del uso del ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}],"style":"note"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"title":"The Swift Programming Language (5.9)","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","type":"topic","url":"\/documentation\/the-swift-programming-language","abstract":[],"role":"collection"},"https://developer.apple.com/es/support/beta-software/":{"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","title":"software beta de Apple","url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"link","titleInlineContent":[{"text":"software beta de Apple","type":"text"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"type":"topic","role":"article","url":"\/documentation\/the-swift-programming-language\/extensions","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","title":"Extensiones","abstract":[{"type":"text","text":"Add functionality to an existing type."}]}}}