{"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Classes in Swift can call and access"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and subscripts belonging to their superclass"},{"type":"text","text":" "},{"type":"text","text":"and can provide their own overriding versions of those methods, properties, and subscripts"},{"type":"text","text":" "},{"type":"text","text":"to refine or modify their behavior."},{"type":"text","text":" "},{"type":"text","text":"Swift helps to ensure your overrides are correct"},{"type":"text","text":" "},{"type":"text","text":"by checking that the override definition has a matching superclass definition."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Classes can also add property observers to inherited properties"},{"type":"text","text":" "},{"type":"text","text":"in order to be notified when the value of a property changes."},{"type":"text","text":" "},{"type":"text","text":"Property observers can be added to any property,"},{"type":"text","text":" "},{"type":"text","text":"regardless of whether it was originally defined as a stored or computed property."}]},{"anchor":"Definición-de-una-Clase-Base","level":2,"type":"heading","text":"Definición de una Clase Base"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any class that doesn’t inherit from another class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"base class"}]},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift classes don’t inherit from a universal base class."},{"type":"text","text":" "},{"type":"text","text":"Classes you define without specifying a superclass"},{"type":"text","text":" "},{"type":"text","text":"automatically become base classes for you to build upon."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a base class called "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This base class defines a stored property called "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a default value of "},{"type":"codeVoice","code":"0.0"},{"type":"text","text":" (inferring a property type of "},{"type":"codeVoice","code":"Double"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" property’s value is used by"},{"type":"text","text":" "},{"type":"text","text":"a read-only computed "},{"type":"codeVoice","code":"String"},{"type":"text","text":" property called "},{"type":"codeVoice","code":"description"},{"type":"text","text":" "},{"type":"text","text":"to create a description of the vehicle."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" base class also defines a method called "},{"type":"codeVoice","code":"makeNoise"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This method doesn’t actually do anything for a base "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"but will be customized by subclasses of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" later on:"}]},{"type":"codeListing","syntax":"swift","code":["class Vehicle {","    var currentSpeed = 0.0","    var description: String {","        return \"traveling at \\(currentSpeed) miles per hour\"","    }","    func makeNoise() {","        \/\/ do nothing - an arbitrary vehicle doesn't necessarily make a noise","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You create a new instance of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" with "},{"type":"emphasis","inlineContent":[{"type":"text","text":"initializer syntax"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is written as a type name followed by empty parentheses:"}]},{"type":"codeListing","syntax":"swift","code":["let someVehicle = Vehicle()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Having created a new "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"you can access its "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property to print"},{"type":"text","text":" "},{"type":"text","text":"a human-readable description of the vehicle’s current speed:"}]},{"type":"codeListing","syntax":"swift","code":["print(\"Vehicle: \\(someVehicle.description)\")","\/\/ Vehicle: traveling at 0.0 miles per hour"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" class defines common characteristics for an arbitrary vehicle,"},{"type":"text","text":" "},{"type":"text","text":"but isn’t much use in itself."},{"type":"text","text":" "},{"type":"text","text":"To make it more useful,"},{"type":"text","text":" "},{"type":"text","text":"you need to refine it to describe more specific kinds of vehicles."}]},{"anchor":"Creación-de-Subclases","level":2,"type":"heading","text":"Creación de Subclases"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Subclassing"}]},{"type":"text","text":" is the act of basing a new class on an existing class."},{"type":"text","text":" "},{"type":"text","text":"The subclass inherits characteristics from the existing class, which you can then refine."},{"type":"text","text":" "},{"type":"text","text":"You can also add new characteristics to the subclass."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To indicate that a subclass has a superclass,"},{"type":"text","text":" "},{"type":"text","text":"write the subclass name before the superclass name,"},{"type":"text","text":" "},{"type":"text","text":"separated by a colon:"}]},{"type":"codeListing","syntax":"swift","code":["class SomeSubclass: SomeSuperclass {","    \/\/ subclass definition goes here","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a subclass called "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a superclass of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["class Bicycle: Vehicle {","    var hasBasket = false","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The new "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" class automatically gains all of the characteristics of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"such as its "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" and "},{"type":"codeVoice","code":"description"},{"type":"text","text":" properties and its "},{"type":"codeVoice","code":"makeNoise()"},{"type":"text","text":" method."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to the characteristics it inherits,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" class defines a new stored property,"},{"type":"text","text":" "},{"type":"codeVoice","code":"hasBasket"},{"type":"text","text":", with a default value of "},{"type":"codeVoice","code":"false"},{"type":"text","text":" "},{"type":"text","text":"(inferring a type of "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" for the property)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, any new "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" instance you create will not have a basket."},{"type":"text","text":" "},{"type":"text","text":"You can set the "},{"type":"codeVoice","code":"hasBasket"},{"type":"text","text":" property to "},{"type":"codeVoice","code":"true"},{"type":"text","text":" for a particular "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"after that instance is created:"}]},{"type":"codeListing","syntax":"swift","code":["let bicycle = Bicycle()","bicycle.hasBasket = true"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also modify the inherited "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" property of a "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"and query the instance’s inherited "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property:"}]},{"type":"codeListing","syntax":"swift","code":["bicycle.currentSpeed = 15.0","print(\"Bicycle: \\(bicycle.description)\")","\/\/ Bicycle: traveling at 15.0 miles per hour"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Subclasses can themselves be subclassed."},{"type":"text","text":" "},{"type":"text","text":"The next example creates a subclass of "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" for a two-seater bicycle"},{"type":"text","text":" "},{"type":"text","text":"known as a “tandem”:"}]},{"type":"codeListing","syntax":"swift","code":["class Tandem: Bicycle {","    var currentNumberOfPassengers = 0","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Tandem"},{"type":"text","text":" inherits all of the properties and methods from "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which in turn inherits all of the properties and methods from "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Tandem"},{"type":"text","text":" subclass also adds a new stored property called "},{"type":"codeVoice","code":"currentNumberOfPassengers"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a default value of "},{"type":"codeVoice","code":"0"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create an instance of "},{"type":"codeVoice","code":"Tandem"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"you can work with any of its new and inherited properties,"},{"type":"text","text":" "},{"type":"text","text":"and query the read-only "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property it inherits from "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let tandem = Tandem()","tandem.hasBasket = true","tandem.currentNumberOfPassengers = 2","tandem.currentSpeed = 22.0","print(\"Tandem: \\(tandem.description)\")","\/\/ Tandem: traveling at 22.0 miles per hour"]},{"anchor":"Sustituciones-Overriding","level":2,"type":"heading","text":"Sustituciones (Overriding)"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A subclass can provide its own custom implementation of"},{"type":"text","text":" "},{"type":"text","text":"an instance method, type method, instance property, type property, or subscript"},{"type":"text","text":" "},{"type":"text","text":"that it would otherwise inherit from a superclass."},{"type":"text","text":" "},{"type":"text","text":"This is known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"overriding"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To override a characteristic that would otherwise be inherited,"},{"type":"text","text":" "},{"type":"text","text":"you prefix your overriding definition with the "},{"type":"codeVoice","code":"override"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Doing so clarifies that you intend to provide an override"},{"type":"text","text":" "},{"type":"text","text":"and haven’t provided a matching definition by mistake."},{"type":"text","text":" "},{"type":"text","text":"Overriding by accident can cause unexpected behavior,"},{"type":"text","text":" "},{"type":"text","text":"and any overrides without the "},{"type":"codeVoice","code":"override"},{"type":"text","text":" keyword are"},{"type":"text","text":" "},{"type":"text","text":"diagnosed as an error when your code is compiled."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"override"},{"type":"text","text":" keyword also prompts the Swift compiler"},{"type":"text","text":" "},{"type":"text","text":"to check that your overriding class’s superclass (or one of its parents)"},{"type":"text","text":" "},{"type":"text","text":"has a declaration that matches the one you provided for the override."},{"type":"text","text":" "},{"type":"text","text":"This check ensures that your overriding definition is correct."}]},{"anchor":"Acceso-a-Métodos-Propiedades-y-Subíndices-de-Superclases","level":3,"type":"heading","text":"Acceso a Métodos, Propiedades, y Subíndices de Superclases"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you provide a method, property, or subscript override for a subclass,"},{"type":"text","text":" "},{"type":"text","text":"it’s sometimes useful to use the existing superclass implementation"},{"type":"text","text":" "},{"type":"text","text":"as part of your override."},{"type":"text","text":" "},{"type":"text","text":"For example, you can refine the behavior of that existing implementation,"},{"type":"text","text":" "},{"type":"text","text":"or store a modified value in an existing inherited variable."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Where this is appropriate,"},{"type":"text","text":" "},{"type":"text","text":"you access the superclass version of a method, property, or subscript"},{"type":"text","text":" "},{"type":"text","text":"by using the "},{"type":"codeVoice","code":"super"},{"type":"text","text":" prefix:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An overridden method named "},{"type":"codeVoice","code":"someMethod()"},{"type":"text","text":" can call the superclass version of "},{"type":"codeVoice","code":"someMethod()"},{"type":"text","text":" "},{"type":"text","text":"by calling "},{"type":"codeVoice","code":"super.someMethod()"},{"type":"text","text":" within the overriding method implementation."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An overridden property called "},{"type":"codeVoice","code":"someProperty"},{"type":"text","text":" can access the superclass version of "},{"type":"codeVoice","code":"someProperty"},{"type":"text","text":" "},{"type":"text","text":"as "},{"type":"codeVoice","code":"super.someProperty"},{"type":"text","text":" within the overriding getter or setter implementation."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An overridden subscript for "},{"type":"codeVoice","code":"someIndex"},{"type":"text","text":" can access the superclass version of the same subscript"},{"type":"text","text":" "},{"type":"text","text":"as "},{"type":"codeVoice","code":"super[someIndex]"},{"type":"text","text":" from within the overriding subscript implementation."}]}]}]},{"anchor":"Sustitución-de-Métodos","level":3,"type":"heading","text":"Sustitución de Métodos"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can override an inherited instance or type method"},{"type":"text","text":" "},{"type":"text","text":"to provide a tailored or alternative implementation of the method within your subclass."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a new subclass of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" called "},{"type":"codeVoice","code":"Train"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which overrides the "},{"type":"codeVoice","code":"makeNoise()"},{"type":"text","text":" method that "},{"type":"codeVoice","code":"Train"},{"type":"text","text":" inherits from "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["class Train: Vehicle {","    override func makeNoise() {","        print(\"Choo Choo\")","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create a new instance of "},{"type":"codeVoice","code":"Train"},{"type":"text","text":" and call its "},{"type":"codeVoice","code":"makeNoise()"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"you can see that the "},{"type":"codeVoice","code":"Train"},{"type":"text","text":" subclass version of the method is called:"}]},{"type":"codeListing","syntax":"swift","code":["let train = Train()","train.makeNoise()","\/\/ Prints \"Choo Choo\""]},{"anchor":"Sustitución-de-Propiedades","level":3,"type":"heading","text":"Sustitución de Propiedades"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can override an inherited instance or type property"},{"type":"text","text":" "},{"type":"text","text":"to provide your own custom getter and setter for that property,"},{"type":"text","text":" "},{"type":"text","text":"or to add property observers to enable the overriding property"},{"type":"text","text":" "},{"type":"text","text":"to observe when the underlying property value changes."}]},{"anchor":"Sustitución-de-getters-y-setters-de-Propiedades","level":4,"type":"heading","text":"Sustitución de getters y setters de Propiedades"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can provide a custom getter (and setter, if appropriate)"},{"type":"text","text":" "},{"type":"text","text":"to override "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" inherited property,"},{"type":"text","text":" "},{"type":"text","text":"regardless of whether the inherited property is implemented as"},{"type":"text","text":" "},{"type":"text","text":"a stored or computed property at source."},{"type":"text","text":" "},{"type":"text","text":"The stored or computed nature of an inherited property isn’t known by a subclass —"},{"type":"text","text":" "},{"type":"text","text":"it only knows that the inherited property has a certain name and type."},{"type":"text","text":" "},{"type":"text","text":"You must always state both the name and the type of the property you are overriding,"},{"type":"text","text":" "},{"type":"text","text":"to enable the compiler to check that your override matches"},{"type":"text","text":" "},{"type":"text","text":"a superclass property with the same name and type."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can present an inherited read-only property as a read-write property"},{"type":"text","text":" "},{"type":"text","text":"by providing both a getter and a setter in your subclass property override."},{"type":"text","text":" "},{"type":"text","text":"You can’t, however, present an inherited read-write property as a read-only property."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you provide a setter as part of a property override,"},{"type":"text","text":" "},{"type":"text","text":"you must also provide a getter for that override."},{"type":"text","text":" "},{"type":"text","text":"If you don’t want to modify the inherited property’s value within the overriding getter,"},{"type":"text","text":" "},{"type":"text","text":"you can simply pass through the inherited value"},{"type":"text","text":" "},{"type":"text","text":"by returning "},{"type":"codeVoice","code":"super.someProperty"},{"type":"text","text":" from the getter,"},{"type":"text","text":" "},{"type":"text","text":"where "},{"type":"codeVoice","code":"someProperty"},{"type":"text","text":" is the name of the property you are overriding."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a new class called "},{"type":"codeVoice","code":"Car"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is a subclass of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class introduces a new stored property called "},{"type":"codeVoice","code":"gear"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a default integer value of "},{"type":"codeVoice","code":"1"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class also overrides the "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property it inherits from "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"to provide a custom description that includes the current gear:"}]},{"type":"codeListing","syntax":"swift","code":["class Car: Vehicle {","    var gear = 1","    override var description: String {","        return super.description + \" in gear \\(gear)\"","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The override of the "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property starts by calling "},{"type":"codeVoice","code":"super.description"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which returns the "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" class’s "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class’s version of "},{"type":"codeVoice","code":"description"},{"type":"text","text":" then adds some extra text onto"},{"type":"text","text":" "},{"type":"text","text":"the end of this description to provide information about the current gear."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create an instance of the "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class"},{"type":"text","text":" "},{"type":"text","text":"and set its "},{"type":"codeVoice","code":"gear"},{"type":"text","text":" and "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" properties,"},{"type":"text","text":" "},{"type":"text","text":"you can see that its "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property returns"},{"type":"text","text":" "},{"type":"text","text":"the tailored description defined within the "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class:"}]},{"type":"codeListing","syntax":"swift","code":["let car = Car()","car.currentSpeed = 25.0","car.gear = 3","print(\"Car: \\(car.description)\")","\/\/ Car: traveling at 25.0 miles per hour in gear 3"]},{"anchor":"Sustitución-de-Observadores-de-Propiedades","level":4,"type":"heading","text":"Sustitución de Observadores de Propiedades"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use property overriding to add property observers to an inherited property."},{"type":"text","text":" "},{"type":"text","text":"This enables you to be notified when the value of an inherited property changes,"},{"type":"text","text":" "},{"type":"text","text":"regardless of how that property was originally implemented."},{"type":"text","text":" "},{"type":"text","text":"For more information on property observers, see "},{"type":"text","text":"doc:Properties#Observadores-de-Propiedades"},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can’t add property observers to"},{"type":"text","text":" "},{"type":"text","text":"inherited constant stored properties or inherited read-only computed properties."},{"type":"text","text":" "},{"type":"text","text":"The value of these properties can’t be set,"},{"type":"text","text":" "},{"type":"text","text":"and so it isn’t appropriate to provide a "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" or "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" implementation"},{"type":"text","text":" "},{"type":"text","text":"as part of an override."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note also that you can’t provide both"},{"type":"text","text":" "},{"type":"text","text":"an overriding setter and an overriding property observer for the same property."},{"type":"text","text":" "},{"type":"text","text":"If you want to observe changes to a property’s value,"},{"type":"text","text":" "},{"type":"text","text":"and you are already providing a custom setter for that property,"},{"type":"text","text":" "},{"type":"text","text":"you can simply observe any value changes from within the custom setter."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a new class called "},{"type":"codeVoice","code":"AutomaticCar"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is a subclass of "},{"type":"codeVoice","code":"Car"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"AutomaticCar"},{"type":"text","text":" class represents a car with an automatic gearbox,"},{"type":"text","text":" "},{"type":"text","text":"which automatically selects an appropriate gear to use based on the current speed:"}]},{"type":"codeListing","syntax":"swift","code":["class AutomaticCar: Car {","    override var currentSpeed: Double {","        didSet {","            gear = Int(currentSpeed \/ 10.0) + 1","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Whenever you set the "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" property of an "},{"type":"codeVoice","code":"AutomaticCar"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"the property’s "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observer sets the instance’s "},{"type":"codeVoice","code":"gear"},{"type":"text","text":" property to"},{"type":"text","text":" "},{"type":"text","text":"an appropriate choice of gear for the new speed."},{"type":"text","text":" "},{"type":"text","text":"Specifically, the property observer chooses a gear that’s"},{"type":"text","text":" "},{"type":"text","text":"the new "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" value divided by "},{"type":"codeVoice","code":"10"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"rounded down to the nearest integer, plus "},{"type":"codeVoice","code":"1"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"A speed of "},{"type":"codeVoice","code":"35.0"},{"type":"text","text":" produces a gear of "},{"type":"codeVoice","code":"4"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let automatic = AutomaticCar()","automatic.currentSpeed = 35.0","print(\"AutomaticCar: \\(automatic.description)\")","\/\/ AutomaticCar: traveling at 35.0 miles per hour in gear 4"]},{"anchor":"Prevención-de-Sustituciones","level":2,"type":"heading","text":"Prevención de Sustituciones"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can prevent a method, property, or subscript from being overridden"},{"type":"text","text":" "},{"type":"text","text":"by marking it as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"final"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Do this by writing the "},{"type":"codeVoice","code":"final"},{"type":"text","text":" modifier before"},{"type":"text","text":" "},{"type":"text","text":"the method, property, or subscript’s introducer keyword"},{"type":"text","text":" "},{"type":"text","text":"(such as "},{"type":"codeVoice","code":"final var"},{"type":"text","text":", "},{"type":"codeVoice","code":"final func"},{"type":"text","text":", "},{"type":"codeVoice","code":"final class func"},{"type":"text","text":", and "},{"type":"codeVoice","code":"final subscript"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any attempt to override a final method, property, or subscript in a subclass"},{"type":"text","text":" "},{"type":"text","text":"is reported as a compile-time error."},{"type":"text","text":" "},{"type":"text","text":"Methods, properties, or subscripts that you add to a class in an extension"},{"type":"text","text":" "},{"type":"text","text":"can also be marked as final within the extension’s definition."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can mark an entire class as final by writing the "},{"type":"codeVoice","code":"final"},{"type":"text","text":" modifier"},{"type":"text","text":" "},{"type":"text","text":"before the "},{"type":"codeVoice","code":"class"},{"type":"text","text":" keyword in its class definition ("},{"type":"codeVoice","code":"final class"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Any attempt to subclass a final class is reported as a compile-time error."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conoce más acerca del uso del "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/"},{"type":"text","text":"."}]}],"type":"aside","name":"Software Beta"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Subclass to add or override functionality."}],"kind":"article","metadata":{"title":"Herencia"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","title":"Extensiones","abstract":[{"type":"text","text":"Add functionality to an existing type."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"role":"article","title":"El Lenguaje de Programación Swift (5.9 beta)","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language"},"https://developer.apple.com/es/support/beta-software/":{"title":"software beta de Apple","titleInlineContent":[{"type":"text","text":"software beta de Apple"}],"type":"link","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/"}}}