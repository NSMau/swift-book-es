{"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"text":"A class can ","type":"text"},{"inlineContent":[{"text":"inherit","type":"text"}],"type":"emphasis"},{"text":" methods, properties, and other characteristics","type":"text"},{"text":" ","type":"text"},{"text":"from another class.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"text":"subclass","type":"text"}]},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"text":"superclass","type":"text"}]},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"text":" ","type":"text"},{"text":"from other types in Swift.","type":"text"}]},{"inlineContent":[{"text":"Classes in Swift can call and access","type":"text"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and subscripts belonging to their superclass"},{"text":" ","type":"text"},{"text":"and can provide their own overriding versions of those methods, properties, and subscripts","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to refine or modify their behavior."},{"text":" ","type":"text"},{"type":"text","text":"Swift helps to ensure your overrides are correct"},{"type":"text","text":" "},{"type":"text","text":"by checking that the override definition has a matching superclass definition."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Classes can also add property observers to inherited properties"},{"type":"text","text":" "},{"text":"in order to be notified when the value of a property changes.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Property observers can be added to any property,"},{"text":" ","type":"text"},{"type":"text","text":"regardless of whether it was originally defined as a stored or computed property."}],"type":"paragraph"},{"anchor":"Definici%C3%B3n-de-una-clase-base","level":2,"text":"Definición de una clase base","type":"heading"},{"inlineContent":[{"text":"Any class that doesn’t inherit from another class is known as a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"base class","type":"text"}]},{"type":"text","text":"."}],"type":"paragraph"},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift classes don’t inherit from a universal base class."},{"type":"text","text":" "},{"text":"Classes you define without specifying a superclass","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"automatically become base classes for you to build upon."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a base class called "},{"code":"Vehicle","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This base class defines a stored property called "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"with a default value of "},{"code":"0.0","type":"codeVoice"},{"text":" (inferring a property type of ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":").","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"currentSpeed"},{"text":" property’s value is used by","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a read-only computed "},{"code":"String","type":"codeVoice"},{"text":" property called ","type":"text"},{"code":"description","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"to create a description of the vehicle."}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"text":" base class also defines a method called ","type":"text"},{"type":"codeVoice","code":"makeNoise"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"This method doesn’t actually do anything for a base ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"text":" instance,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but will be customized by subclasses of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" later on:"}]},{"syntax":"swift","type":"codeListing","code":["class Vehicle {","    var currentSpeed = 0.0","    var description: String {","        return \"traveling at \\(currentSpeed) miles per hour\"","    }","    func makeNoise() {","        \/\/ do nothing - an arbitrary vehicle doesn't necessarily make a noise","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You create a new instance of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" with "},{"type":"emphasis","inlineContent":[{"type":"text","text":"initializer syntax"}]},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which is written as a type name followed by empty parentheses:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let someVehicle = Vehicle()"]},{"inlineContent":[{"type":"text","text":"Having created a new "},{"code":"Vehicle","type":"codeVoice"},{"text":" instance,","type":"text"},{"type":"text","text":" "},{"text":"you can access its ","type":"text"},{"type":"codeVoice","code":"description"},{"type":"text","text":" property to print"},{"text":" ","type":"text"},{"text":"a human-readable description of the vehicle’s current speed:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["print(\"Vehicle: \\(someVehicle.description)\")","\/\/ Vehicle: traveling at 0.0 miles per hour"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" class defines common characteristics for an arbitrary vehicle,"},{"type":"text","text":" "},{"text":"but isn’t much use in itself.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"To make it more useful,"},{"text":" ","type":"text"},{"type":"text","text":"you need to refine it to describe more specific kinds of vehicles."}]},{"level":2,"text":"Creación de subclases","type":"heading","anchor":"Creaci%C3%B3n-de-subclases"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Subclassing"}],"type":"emphasis"},{"text":" is the act of basing a new class on an existing class.","type":"text"},{"type":"text","text":" "},{"text":"The subclass inherits characteristics from the existing class, which you can then refine.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You can also add new characteristics to the subclass."}]},{"type":"paragraph","inlineContent":[{"text":"To indicate that a subclass has a superclass,","type":"text"},{"type":"text","text":" "},{"text":"write the subclass name before the superclass name,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"separated by a colon:"}]},{"type":"codeListing","syntax":"swift","code":["class SomeSubclass: SomeSuperclass {","    \/\/ subclass definition goes here","}"]},{"inlineContent":[{"type":"text","text":"The following example defines a subclass called "},{"code":"Bicycle","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with a superclass of "},{"code":"Vehicle","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class Bicycle: Vehicle {","    var hasBasket = false","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The new "},{"type":"codeVoice","code":"Bicycle"},{"text":" class automatically gains all of the characteristics of ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"such as its "},{"type":"codeVoice","code":"currentSpeed"},{"text":" and ","type":"text"},{"code":"description","type":"codeVoice"},{"text":" properties and its ","type":"text"},{"code":"makeNoise()","type":"codeVoice"},{"type":"text","text":" method."}]},{"type":"paragraph","inlineContent":[{"text":"In addition to the characteristics it inherits,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"Bicycle"},{"text":" class defines a new stored property,","type":"text"},{"type":"text","text":" "},{"code":"hasBasket","type":"codeVoice"},{"type":"text","text":", with a default value of "},{"type":"codeVoice","code":"false"},{"type":"text","text":" "},{"text":"(inferring a type of ","type":"text"},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" for the property)."}]},{"type":"paragraph","inlineContent":[{"text":"By default, any new ","type":"text"},{"code":"Bicycle","type":"codeVoice"},{"type":"text","text":" instance you create will not have a basket."},{"type":"text","text":" "},{"type":"text","text":"You can set the "},{"type":"codeVoice","code":"hasBasket"},{"text":" property to ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" for a particular "},{"code":"Bicycle","type":"codeVoice"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"after that instance is created:"}]},{"code":["let bicycle = Bicycle()","bicycle.hasBasket = true"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also modify the inherited "},{"code":"currentSpeed","type":"codeVoice"},{"text":" property of a ","type":"text"},{"type":"codeVoice","code":"Bicycle"},{"text":" instance,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and query the instance’s inherited "},{"type":"codeVoice","code":"description"},{"text":" property:","type":"text"}]},{"code":["bicycle.currentSpeed = 15.0","print(\"Bicycle: \\(bicycle.description)\")","\/\/ Bicycle: traveling at 15.0 miles per hour"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Subclasses can themselves be subclassed.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The next example creates a subclass of "},{"code":"Bicycle","type":"codeVoice"},{"text":" for a two-seater bicycle","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"known as a “tandem”:"}]},{"code":["class Tandem: Bicycle {","    var currentNumberOfPassengers = 0","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"code":"Tandem","type":"codeVoice"},{"text":" inherits all of the properties and methods from ","type":"text"},{"code":"Bicycle","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which in turn inherits all of the properties and methods from "},{"code":"Vehicle","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"Tandem"},{"text":" subclass also adds a new stored property called ","type":"text"},{"code":"currentNumberOfPassengers","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a default value of "},{"code":"0","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you create an instance of "},{"code":"Tandem","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can work with any of its new and inherited properties,"},{"type":"text","text":" "},{"text":"and query the read-only ","type":"text"},{"type":"codeVoice","code":"description"},{"type":"text","text":" property it inherits from "},{"code":"Vehicle","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["let tandem = Tandem()","tandem.hasBasket = true","tandem.currentNumberOfPassengers = 2","tandem.currentSpeed = 22.0","print(\"Tandem: \\(tandem.description)\")","\/\/ Tandem: traveling at 22.0 miles per hour"],"type":"codeListing","syntax":"swift"},{"type":"heading","level":2,"anchor":"Sustituciones-Overriding","text":"Sustituciones (Overriding)"},{"inlineContent":[{"text":"A subclass can provide its own custom implementation of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an instance method, type method, instance property, type property, or subscript"},{"type":"text","text":" "},{"text":"that it would otherwise inherit from a superclass.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This is known as "},{"type":"emphasis","inlineContent":[{"text":"overriding","type":"text"}]},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To override a characteristic that would otherwise be inherited,"},{"text":" ","type":"text"},{"text":"you prefix your overriding definition with the ","type":"text"},{"code":"override","type":"codeVoice"},{"text":" keyword.","type":"text"},{"text":" ","type":"text"},{"text":"Doing so clarifies that you intend to provide an override","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and haven’t provided a matching definition by mistake."},{"text":" ","type":"text"},{"type":"text","text":"Overriding by accident can cause unexpected behavior,"},{"type":"text","text":" "},{"type":"text","text":"and any overrides without the "},{"code":"override","type":"codeVoice"},{"text":" keyword are","type":"text"},{"text":" ","type":"text"},{"text":"diagnosed as an error when your code is compiled.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"override","type":"codeVoice"},{"type":"text","text":" keyword also prompts the Swift compiler"},{"text":" ","type":"text"},{"type":"text","text":"to check that your overriding class’s superclass (or one of its parents)"},{"type":"text","text":" "},{"type":"text","text":"has a declaration that matches the one you provided for the override."},{"type":"text","text":" "},{"type":"text","text":"This check ensures that your overriding definition is correct."}]},{"level":3,"anchor":"Acceso-a-m%C3%A9todos-propiedades-y-sub%C3%ADndices-de-superclases","text":"Acceso a métodos, propiedades, y subíndices de superclases","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"When you provide a method, property, or subscript override for a subclass,","type":"text"},{"text":" ","type":"text"},{"text":"it’s sometimes useful to use the existing superclass implementation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as part of your override."},{"type":"text","text":" "},{"type":"text","text":"For example, you can refine the behavior of that existing implementation,"},{"text":" ","type":"text"},{"type":"text","text":"or store a modified value in an existing inherited variable."}]},{"type":"paragraph","inlineContent":[{"text":"Where this is appropriate,","type":"text"},{"text":" ","type":"text"},{"text":"you access the superclass version of a method, property, or subscript","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by using the "},{"code":"super","type":"codeVoice"},{"text":" prefix:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An overridden method named "},{"code":"someMethod()","type":"codeVoice"},{"text":" can call the superclass version of ","type":"text"},{"code":"someMethod()","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"by calling "},{"code":"super.someMethod()","type":"codeVoice"},{"type":"text","text":" within the overriding method implementation."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"An overridden property called ","type":"text"},{"code":"someProperty","type":"codeVoice"},{"type":"text","text":" can access the superclass version of "},{"type":"codeVoice","code":"someProperty"},{"text":" ","type":"text"},{"text":"as ","type":"text"},{"code":"super.someProperty","type":"codeVoice"},{"type":"text","text":" within the overriding getter or setter implementation."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"An overridden subscript for "},{"code":"someIndex","type":"codeVoice"},{"type":"text","text":" can access the superclass version of the same subscript"},{"type":"text","text":" "},{"text":"as ","type":"text"},{"type":"codeVoice","code":"super[someIndex]"},{"type":"text","text":" from within the overriding subscript implementation."}],"type":"paragraph"}]}]},{"type":"heading","text":"Sustitución de métodos","level":3,"anchor":"Sustituci%C3%B3n-de-m%C3%A9todos"},{"inlineContent":[{"type":"text","text":"You can override an inherited instance or type method"},{"text":" ","type":"text"},{"type":"text","text":"to provide a tailored or alternative implementation of the method within your subclass."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following example defines a new subclass of "},{"type":"codeVoice","code":"Vehicle"},{"text":" called ","type":"text"},{"type":"codeVoice","code":"Train"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which overrides the "},{"type":"codeVoice","code":"makeNoise()"},{"type":"text","text":" method that "},{"code":"Train","type":"codeVoice"},{"text":" inherits from ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["class Train: Vehicle {","    override func makeNoise() {","        print(\"Choo Choo\")","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"If you create a new instance of ","type":"text"},{"type":"codeVoice","code":"Train"},{"type":"text","text":" and call its "},{"code":"makeNoise()","type":"codeVoice"},{"text":" method,","type":"text"},{"text":" ","type":"text"},{"text":"you can see that the ","type":"text"},{"code":"Train","type":"codeVoice"},{"text":" subclass version of the method is called:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let train = Train()","train.makeNoise()","\/\/ Prints \"Choo Choo\""]},{"type":"heading","anchor":"Sustituci%C3%B3n-de-propiedades","level":3,"text":"Sustitución de propiedades"},{"inlineContent":[{"type":"text","text":"You can override an inherited instance or type property"},{"type":"text","text":" "},{"type":"text","text":"to provide your own custom getter and setter for that property,"},{"type":"text","text":" "},{"type":"text","text":"or to add property observers to enable the overriding property"},{"type":"text","text":" "},{"text":"to observe when the underlying property value changes.","type":"text"}],"type":"paragraph"},{"text":"Sustitución de getters y setters de propiedades","type":"heading","level":4,"anchor":"Sustituci%C3%B3n-de-getters-y-setters-de-propiedades"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can provide a custom getter (and setter, if appropriate)"},{"text":" ","type":"text"},{"type":"text","text":"to override "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" inherited property,"},{"type":"text","text":" "},{"text":"regardless of whether the inherited property is implemented as","type":"text"},{"type":"text","text":" "},{"text":"a stored or computed property at source.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The stored or computed nature of an inherited property isn’t known by a subclass —"},{"type":"text","text":" "},{"text":"it only knows that the inherited property has a certain name and type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You must always state both the name and the type of the property you are overriding,"},{"type":"text","text":" "},{"type":"text","text":"to enable the compiler to check that your override matches"},{"type":"text","text":" "},{"type":"text","text":"a superclass property with the same name and type."}]},{"type":"paragraph","inlineContent":[{"text":"You can present an inherited read-only property as a read-write property","type":"text"},{"text":" ","type":"text"},{"text":"by providing both a getter and a setter in your subclass property override.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can’t, however, present an inherited read-write property as a read-only property."}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you provide a setter as part of a property override,"},{"type":"text","text":" "},{"text":"you must also provide a getter for that override.","type":"text"},{"type":"text","text":" "},{"text":"If you don’t want to modify the inherited property’s value within the overriding getter,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can simply pass through the inherited value"},{"type":"text","text":" "},{"text":"by returning ","type":"text"},{"type":"codeVoice","code":"super.someProperty"},{"type":"text","text":" from the getter,"},{"type":"text","text":" "},{"type":"text","text":"where "},{"code":"someProperty","type":"codeVoice"},{"type":"text","text":" is the name of the property you are overriding."}]}],"type":"aside","name":"Note","style":"note"},{"inlineContent":[{"type":"text","text":"The following example defines a new class called "},{"code":"Car","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which is a subclass of ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class introduces a new stored property called "},{"type":"codeVoice","code":"gear"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"with a default integer value of ","type":"text"},{"code":"1","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"Car"},{"text":" class also overrides the ","type":"text"},{"type":"codeVoice","code":"description"},{"text":" property it inherits from ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"to provide a custom description that includes the current gear:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class Car: Vehicle {","    var gear = 1","    override var description: String {","        return super.description + \" in gear \\(gear)\"","    }","}"]},{"inlineContent":[{"type":"text","text":"The override of the "},{"type":"codeVoice","code":"description"},{"text":" property starts by calling ","type":"text"},{"type":"codeVoice","code":"super.description"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which returns the "},{"code":"Vehicle","type":"codeVoice"},{"type":"text","text":" class’s "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"Car","type":"codeVoice"},{"type":"text","text":" class’s version of "},{"type":"codeVoice","code":"description"},{"text":" then adds some extra text onto","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the end of this description to provide information about the current gear."}],"type":"paragraph"},{"inlineContent":[{"text":"If you create an instance of the ","type":"text"},{"code":"Car","type":"codeVoice"},{"text":" class","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and set its "},{"code":"gear","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" properties,"},{"text":" ","type":"text"},{"type":"text","text":"you can see that its "},{"code":"description","type":"codeVoice"},{"text":" property returns","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the tailored description defined within the "},{"type":"codeVoice","code":"Car"},{"text":" class:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let car = Car()","car.currentSpeed = 25.0","car.gear = 3","print(\"Car: \\(car.description)\")","\/\/ Car: traveling at 25.0 miles per hour in gear 3"]},{"type":"heading","text":"Sustitución de observadores de propiedades","anchor":"Sustituci%C3%B3n-de-observadores-de-propiedades","level":4},{"type":"paragraph","inlineContent":[{"text":"You can use property overriding to add property observers to an inherited property.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This enables you to be notified when the value of an inherited property changes,"},{"type":"text","text":" "},{"type":"text","text":"regardless of how that property was originally implemented."},{"type":"text","text":" "},{"text":"For more information on property observers, see ","type":"text"},{"text":"doc:Properties#Observadores-de-propiedades","type":"text"},{"type":"text","text":"."}]},{"style":"note","content":[{"inlineContent":[{"type":"text","text":"You can’t add property observers to"},{"text":" ","type":"text"},{"type":"text","text":"inherited constant stored properties or inherited read-only computed properties."},{"text":" ","type":"text"},{"text":"The value of these properties can’t be set,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and so it isn’t appropriate to provide a "},{"code":"willSet","type":"codeVoice"},{"type":"text","text":" or "},{"code":"didSet","type":"codeVoice"},{"text":" implementation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as part of an override."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note also that you can’t provide both"},{"type":"text","text":" "},{"type":"text","text":"an overriding setter and an overriding property observer for the same property."},{"text":" ","type":"text"},{"type":"text","text":"If you want to observe changes to a property’s value,"},{"type":"text","text":" "},{"type":"text","text":"and you are already providing a custom setter for that property,"},{"text":" ","type":"text"},{"text":"you can simply observe any value changes from within the custom setter.","type":"text"}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"text":"The following example defines a new class called ","type":"text"},{"code":"AutomaticCar","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is a subclass of "},{"type":"codeVoice","code":"Car"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"code":"AutomaticCar","type":"codeVoice"},{"type":"text","text":" class represents a car with an automatic gearbox,"},{"type":"text","text":" "},{"type":"text","text":"which automatically selects an appropriate gear to use based on the current speed:"}]},{"type":"codeListing","code":["class AutomaticCar: Car {","    override var currentSpeed: Double {","        didSet {","            gear = Int(currentSpeed \/ 10.0) + 1","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Whenever you set the "},{"code":"currentSpeed","type":"codeVoice"},{"type":"text","text":" property of an "},{"type":"codeVoice","code":"AutomaticCar"},{"text":" instance,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the property’s "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observer sets the instance’s "},{"type":"codeVoice","code":"gear"},{"text":" property to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"an appropriate choice of gear for the new speed."},{"type":"text","text":" "},{"text":"Specifically, the property observer chooses a gear that’s","type":"text"},{"type":"text","text":" "},{"text":"the new ","type":"text"},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" value divided by "},{"code":"10","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"rounded down to the nearest integer, plus ","type":"text"},{"type":"codeVoice","code":"1"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"A speed of "},{"type":"codeVoice","code":"35.0"},{"type":"text","text":" produces a gear of "},{"type":"codeVoice","code":"4"},{"type":"text","text":":"}]},{"code":["let automatic = AutomaticCar()","automatic.currentSpeed = 35.0","print(\"AutomaticCar: \\(automatic.description)\")","\/\/ AutomaticCar: traveling at 35.0 miles per hour in gear 4"],"type":"codeListing","syntax":"swift"},{"anchor":"Prevenci%C3%B3n-de-sustituciones","type":"heading","text":"Prevención de sustituciones","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can prevent a method, property, or subscript from being overridden"},{"type":"text","text":" "},{"text":"by marking it as ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"final"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Do this by writing the ","type":"text"},{"type":"codeVoice","code":"final"},{"text":" modifier before","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the method, property, or subscript’s introducer keyword"},{"text":" ","type":"text"},{"type":"text","text":"(such as "},{"type":"codeVoice","code":"final var"},{"text":", ","type":"text"},{"type":"codeVoice","code":"final func"},{"type":"text","text":", "},{"code":"final class func","type":"codeVoice"},{"type":"text","text":", and "},{"code":"final subscript","type":"codeVoice"},{"type":"text","text":")."}]},{"inlineContent":[{"text":"Any attempt to override a final method, property, or subscript in a subclass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is reported as a compile-time error."},{"text":" ","type":"text"},{"type":"text","text":"Methods, properties, or subscripts that you add to a class in an extension"},{"type":"text","text":" "},{"type":"text","text":"can also be marked as final within the extension’s definition."},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can mark an entire class as final by writing the "},{"type":"codeVoice","code":"final"},{"text":" modifier","type":"text"},{"type":"text","text":" "},{"type":"text","text":"before the "},{"type":"codeVoice","code":"class"},{"type":"text","text":" keyword in its class definition ("},{"type":"codeVoice","code":"final class"},{"type":"text","text":")."},{"text":" ","type":"text"},{"text":"Any attempt to subclass a final class is reported as a compile-time error.","type":"text"}]},{"type":"aside","name":"Software Beta","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conoce más acerca del uso del "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/"},{"type":"text","text":"."}]}],"style":"note"}]}],"sections":[],"kind":"article","schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","interfaceLanguage":"swift"},"metadata":{"title":"Herencia"},"abstract":[{"text":"Subclass to add or override functionality.","type":"text"}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"type":"topic","abstract":[{"type":"text","text":"Add functionality to an existing type."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","role":"article","kind":"article","title":"Extensiones","url":"\/documentation\/the-swift-programming-language\/extensions"},"https://developer.apple.com/es/support/beta-software/":{"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","titleInlineContent":[{"type":"text","text":"software beta de Apple"}],"title":"software beta de Apple","url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"link"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"url":"\/documentation\/the-swift-programming-language","kind":"article","type":"topic","title":"The Swift Programming Language (6)","role":"collection","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","abstract":[]}}}