{"abstract":[{"text":"Subclass to add or override functionality.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"text":"When one class inherits from another,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and the class it inherits from is known as its ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"text":" ","type":"text"},{"text":"from other types in Swift.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Classes in Swift can call and access"},{"type":"text","text":" "},{"text":"methods, properties, and subscripts belonging to their superclass","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and can provide their own overriding versions of those methods, properties, and subscripts"},{"text":" ","type":"text"},{"text":"to refine or modify their behavior.","type":"text"},{"type":"text","text":" "},{"text":"Swift helps to ensure your overrides are correct","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by checking that the override definition has a matching superclass definition."}]},{"type":"paragraph","inlineContent":[{"text":"Classes can also add property observers to inherited properties","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in order to be notified when the value of a property changes."},{"type":"text","text":" "},{"text":"Property observers can be added to any property,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"regardless of whether it was originally defined as a stored or computed property."}]},{"level":2,"anchor":"Definici%C3%B3n-de-una-clase-base","type":"heading","text":"Definición de una clase base"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any class that doesn’t inherit from another class is known as a "},{"inlineContent":[{"type":"text","text":"base class"}],"type":"emphasis"},{"text":".","type":"text"}]},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"Swift classes don’t inherit from a universal base class."},{"text":" ","type":"text"},{"text":"Classes you define without specifying a superclass","type":"text"},{"type":"text","text":" "},{"text":"automatically become base classes for you to build upon.","type":"text"}],"type":"paragraph"}],"name":"Note","style":"note"},{"inlineContent":[{"type":"text","text":"The example below defines a base class called "},{"type":"codeVoice","code":"Vehicle"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"This base class defines a stored property called ","type":"text"},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"with a default value of "},{"type":"codeVoice","code":"0.0"},{"type":"text","text":" (inferring a property type of "},{"code":"Double","type":"codeVoice"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"currentSpeed"},{"text":" property’s value is used by","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a read-only computed "},{"code":"String","type":"codeVoice"},{"text":" property called ","type":"text"},{"type":"codeVoice","code":"description"},{"text":" ","type":"text"},{"type":"text","text":"to create a description of the vehicle."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"type":"text","text":" base class also defines a method called "},{"code":"makeNoise","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This method doesn’t actually do anything for a base "},{"code":"Vehicle","type":"codeVoice"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"text":"but will be customized by subclasses of ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" later on:"}]},{"type":"codeListing","syntax":"swift","code":["class Vehicle {","    var currentSpeed = 0.0","    var description: String {","        return \"traveling at \\(currentSpeed) miles per hour\"","    }","    func makeNoise() {","        \/\/ do nothing - an arbitrary vehicle doesn't necessarily make a noise","    }","}"]},{"inlineContent":[{"text":"You create a new instance of ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" with "},{"type":"emphasis","inlineContent":[{"text":"initializer syntax","type":"text"}]},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which is written as a type name followed by empty parentheses:"}],"type":"paragraph"},{"type":"codeListing","code":["let someVehicle = Vehicle()"],"syntax":"swift"},{"inlineContent":[{"text":"Having created a new ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":" instance,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can access its "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property to print"},{"type":"text","text":" "},{"type":"text","text":"a human-readable description of the vehicle’s current speed:"}],"type":"paragraph"},{"code":["print(\"Vehicle: \\(someVehicle.description)\")","\/\/ Vehicle: traveling at 0.0 miles per hour"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":" class defines common characteristics for an arbitrary vehicle,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but isn’t much use in itself."},{"type":"text","text":" "},{"text":"To make it more useful,","type":"text"},{"text":" ","type":"text"},{"text":"you need to refine it to describe more specific kinds of vehicles.","type":"text"}]},{"text":"Creación de subclases","type":"heading","level":2,"anchor":"Creaci%C3%B3n-de-subclases"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Subclassing"}]},{"type":"text","text":" is the act of basing a new class on an existing class."},{"text":" ","type":"text"},{"type":"text","text":"The subclass inherits characteristics from the existing class, which you can then refine."},{"type":"text","text":" "},{"type":"text","text":"You can also add new characteristics to the subclass."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To indicate that a subclass has a superclass,"},{"type":"text","text":" "},{"text":"write the subclass name before the superclass name,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"separated by a colon:"}],"type":"paragraph"},{"syntax":"swift","code":["class SomeSubclass: SomeSuperclass {","    \/\/ subclass definition goes here","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a subclass called "},{"code":"Bicycle","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"with a superclass of ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["class Bicycle: Vehicle {","    var hasBasket = false","}"]},{"type":"paragraph","inlineContent":[{"text":"The new ","type":"text"},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" class automatically gains all of the characteristics of "},{"code":"Vehicle","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"such as its "},{"code":"currentSpeed","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"description"},{"text":" properties and its ","type":"text"},{"type":"codeVoice","code":"makeNoise()"},{"type":"text","text":" method."}]},{"inlineContent":[{"type":"text","text":"In addition to the characteristics it inherits,"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" class defines a new stored property,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"hasBasket"},{"text":", with a default value of ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" ","type":"text"},{"text":"(inferring a type of ","type":"text"},{"code":"Bool","type":"codeVoice"},{"text":" for the property).","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"By default, any new ","type":"text"},{"type":"codeVoice","code":"Bicycle"},{"text":" instance you create will not have a basket.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You can set the "},{"code":"hasBasket","type":"codeVoice"},{"type":"text","text":" property to "},{"code":"true","type":"codeVoice"},{"type":"text","text":" for a particular "},{"code":"Bicycle","type":"codeVoice"},{"text":" instance","type":"text"},{"type":"text","text":" "},{"type":"text","text":"after that instance is created:"}]},{"code":["let bicycle = Bicycle()","bicycle.hasBasket = true"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can also modify the inherited ","type":"text"},{"code":"currentSpeed","type":"codeVoice"},{"type":"text","text":" property of a "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"and query the instance’s inherited "},{"code":"description","type":"codeVoice"},{"type":"text","text":" property:"}]},{"syntax":"swift","code":["bicycle.currentSpeed = 15.0","print(\"Bicycle: \\(bicycle.description)\")","\/\/ Bicycle: traveling at 15.0 miles per hour"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Subclasses can themselves be subclassed."},{"type":"text","text":" "},{"text":"The next example creates a subclass of ","type":"text"},{"code":"Bicycle","type":"codeVoice"},{"text":" for a two-seater bicycle","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"known as a “tandem”:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class Tandem: Bicycle {","    var currentNumberOfPassengers = 0","}"]},{"type":"paragraph","inlineContent":[{"code":"Tandem","type":"codeVoice"},{"type":"text","text":" inherits all of the properties and methods from "},{"type":"codeVoice","code":"Bicycle"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which in turn inherits all of the properties and methods from "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Tandem"},{"type":"text","text":" subclass also adds a new stored property called "},{"code":"currentNumberOfPassengers","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"with a default value of ","type":"text"},{"code":"0","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create an instance of "},{"type":"codeVoice","code":"Tandem"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"you can work with any of its new and inherited properties,","type":"text"},{"type":"text","text":" "},{"text":"and query the read-only ","type":"text"},{"type":"codeVoice","code":"description"},{"text":" property it inherits from ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":":","type":"text"}]},{"code":["let tandem = Tandem()","tandem.hasBasket = true","tandem.currentNumberOfPassengers = 2","tandem.currentSpeed = 22.0","print(\"Tandem: \\(tandem.description)\")","\/\/ Tandem: traveling at 22.0 miles per hour"],"type":"codeListing","syntax":"swift"},{"text":"Sustituciones (Overriding)","level":2,"type":"heading","anchor":"Sustituciones-Overriding"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A subclass can provide its own custom implementation of"},{"text":" ","type":"text"},{"type":"text","text":"an instance method, type method, instance property, type property, or subscript"},{"type":"text","text":" "},{"text":"that it would otherwise inherit from a superclass.","type":"text"},{"text":" ","type":"text"},{"text":"This is known as ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"overriding","type":"text"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To override a characteristic that would otherwise be inherited,"},{"type":"text","text":" "},{"type":"text","text":"you prefix your overriding definition with the "},{"type":"codeVoice","code":"override"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Doing so clarifies that you intend to provide an override"},{"type":"text","text":" "},{"type":"text","text":"and haven’t provided a matching definition by mistake."},{"type":"text","text":" "},{"text":"Overriding by accident can cause unexpected behavior,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and any overrides without the "},{"type":"codeVoice","code":"override"},{"text":" keyword are","type":"text"},{"type":"text","text":" "},{"type":"text","text":"diagnosed as an error when your code is compiled."}]},{"inlineContent":[{"type":"text","text":"The "},{"code":"override","type":"codeVoice"},{"type":"text","text":" keyword also prompts the Swift compiler"},{"text":" ","type":"text"},{"type":"text","text":"to check that your overriding class’s superclass (or one of its parents)"},{"type":"text","text":" "},{"text":"has a declaration that matches the one you provided for the override.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This check ensures that your overriding definition is correct."}],"type":"paragraph"},{"anchor":"Acceso-a-m%C3%A9todos-propiedades-y-sub%C3%ADndices-de-superclases","type":"heading","text":"Acceso a métodos, propiedades, y subíndices de superclases","level":3},{"type":"paragraph","inlineContent":[{"text":"When you provide a method, property, or subscript override for a subclass,","type":"text"},{"type":"text","text":" "},{"text":"it’s sometimes useful to use the existing superclass implementation","type":"text"},{"text":" ","type":"text"},{"text":"as part of your override.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example, you can refine the behavior of that existing implementation,"},{"type":"text","text":" "},{"type":"text","text":"or store a modified value in an existing inherited variable."}]},{"inlineContent":[{"type":"text","text":"Where this is appropriate,"},{"type":"text","text":" "},{"type":"text","text":"you access the superclass version of a method, property, or subscript"},{"type":"text","text":" "},{"text":"by using the ","type":"text"},{"code":"super","type":"codeVoice"},{"text":" prefix:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"An overridden method named ","type":"text"},{"type":"codeVoice","code":"someMethod()"},{"text":" can call the superclass version of ","type":"text"},{"type":"codeVoice","code":"someMethod()"},{"type":"text","text":" "},{"text":"by calling ","type":"text"},{"code":"super.someMethod()","type":"codeVoice"},{"text":" within the overriding method implementation.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"An overridden property called ","type":"text"},{"code":"someProperty","type":"codeVoice"},{"text":" can access the superclass version of ","type":"text"},{"code":"someProperty","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"as "},{"code":"super.someProperty","type":"codeVoice"},{"type":"text","text":" within the overriding getter or setter implementation."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An overridden subscript for "},{"type":"codeVoice","code":"someIndex"},{"text":" can access the superclass version of the same subscript","type":"text"},{"type":"text","text":" "},{"text":"as ","type":"text"},{"code":"super[someIndex]","type":"codeVoice"},{"text":" from within the overriding subscript implementation.","type":"text"}]}]}]},{"type":"heading","text":"Sustitución de métodos","level":3,"anchor":"Sustituci%C3%B3n-de-m%C3%A9todos"},{"inlineContent":[{"type":"text","text":"You can override an inherited instance or type method"},{"type":"text","text":" "},{"text":"to provide a tailored or alternative implementation of the method within your subclass.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The following example defines a new subclass of ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":" called ","type":"text"},{"code":"Train","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which overrides the "},{"type":"codeVoice","code":"makeNoise()"},{"type":"text","text":" method that "},{"code":"Train","type":"codeVoice"},{"text":" inherits from ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class Train: Vehicle {","    override func makeNoise() {","        print(\"Choo Choo\")","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create a new instance of "},{"code":"Train","type":"codeVoice"},{"text":" and call its ","type":"text"},{"type":"codeVoice","code":"makeNoise()"},{"text":" method,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can see that the "},{"type":"codeVoice","code":"Train"},{"type":"text","text":" subclass version of the method is called:"}]},{"code":["let train = Train()","train.makeNoise()","\/\/ Prints \"Choo Choo\""],"syntax":"swift","type":"codeListing"},{"type":"heading","level":3,"text":"Sustitución de propiedades","anchor":"Sustituci%C3%B3n-de-propiedades"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can override an inherited instance or type property"},{"text":" ","type":"text"},{"type":"text","text":"to provide your own custom getter and setter for that property,"},{"text":" ","type":"text"},{"type":"text","text":"or to add property observers to enable the overriding property"},{"type":"text","text":" "},{"text":"to observe when the underlying property value changes.","type":"text"}]},{"level":4,"anchor":"Sustituci%C3%B3n-de-getters-y-setters-de-propiedades","type":"heading","text":"Sustitución de getters y setters de propiedades"},{"type":"paragraph","inlineContent":[{"text":"You can provide a custom getter (and setter, if appropriate)","type":"text"},{"text":" ","type":"text"},{"text":"to override ","type":"text"},{"inlineContent":[{"text":"any","type":"text"}],"type":"emphasis"},{"text":" inherited property,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"regardless of whether the inherited property is implemented as"},{"type":"text","text":" "},{"text":"a stored or computed property at source.","type":"text"},{"text":" ","type":"text"},{"text":"The stored or computed nature of an inherited property isn’t known by a subclass —","type":"text"},{"type":"text","text":" "},{"text":"it only knows that the inherited property has a certain name and type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You must always state both the name and the type of the property you are overriding,"},{"type":"text","text":" "},{"type":"text","text":"to enable the compiler to check that your override matches"},{"text":" ","type":"text"},{"type":"text","text":"a superclass property with the same name and type."}]},{"inlineContent":[{"type":"text","text":"You can present an inherited read-only property as a read-write property"},{"type":"text","text":" "},{"type":"text","text":"by providing both a getter and a setter in your subclass property override."},{"type":"text","text":" "},{"type":"text","text":"You can’t, however, present an inherited read-write property as a read-only property."}],"type":"paragraph"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"If you provide a setter as part of a property override,","type":"text"},{"text":" ","type":"text"},{"text":"you must also provide a getter for that override.","type":"text"},{"type":"text","text":" "},{"text":"If you don’t want to modify the inherited property’s value within the overriding getter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can simply pass through the inherited value"},{"type":"text","text":" "},{"type":"text","text":"by returning "},{"type":"codeVoice","code":"super.someProperty"},{"text":" from the getter,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"where "},{"code":"someProperty","type":"codeVoice"},{"text":" is the name of the property you are overriding.","type":"text"}]}],"style":"note","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a new class called "},{"code":"Car","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which is a subclass of ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"Car"},{"text":" class introduces a new stored property called ","type":"text"},{"type":"codeVoice","code":"gear"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"with a default integer value of ","type":"text"},{"type":"codeVoice","code":"1"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Car"},{"text":" class also overrides the ","type":"text"},{"code":"description","type":"codeVoice"},{"text":" property it inherits from ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"to provide a custom description that includes the current gear:"}]},{"syntax":"swift","code":["class Car: Vehicle {","    var gear = 1","    override var description: String {","        return super.description + \" in gear \\(gear)\"","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The override of the ","type":"text"},{"code":"description","type":"codeVoice"},{"type":"text","text":" property starts by calling "},{"type":"codeVoice","code":"super.description"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which returns the "},{"type":"codeVoice","code":"Vehicle"},{"text":" class’s ","type":"text"},{"type":"codeVoice","code":"description"},{"type":"text","text":" property."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class’s version of "},{"code":"description","type":"codeVoice"},{"type":"text","text":" then adds some extra text onto"},{"type":"text","text":" "},{"type":"text","text":"the end of this description to provide information about the current gear."}]},{"inlineContent":[{"type":"text","text":"If you create an instance of the "},{"code":"Car","type":"codeVoice"},{"text":" class","type":"text"},{"type":"text","text":" "},{"text":"and set its ","type":"text"},{"type":"codeVoice","code":"gear"},{"type":"text","text":" and "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" properties,"},{"type":"text","text":" "},{"type":"text","text":"you can see that its "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property returns"},{"text":" ","type":"text"},{"type":"text","text":"the tailored description defined within the "},{"code":"Car","type":"codeVoice"},{"text":" class:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let car = Car()","car.currentSpeed = 25.0","car.gear = 3","print(\"Car: \\(car.description)\")","\/\/ Car: traveling at 25.0 miles per hour in gear 3"],"type":"codeListing"},{"type":"heading","level":4,"text":"Sustitución de observadores de propiedades","anchor":"Sustituci%C3%B3n-de-observadores-de-propiedades"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use property overriding to add property observers to an inherited property."},{"type":"text","text":" "},{"type":"text","text":"This enables you to be notified when the value of an inherited property changes,"},{"type":"text","text":" "},{"text":"regardless of how that property was originally implemented.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For more information on property observers, see "},{"type":"text","text":"doc:Properties#Observadores-de-propiedades"},{"text":".","type":"text"}]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"You can’t add property observers to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"inherited constant stored properties or inherited read-only computed properties."},{"type":"text","text":" "},{"text":"The value of these properties can’t be set,","type":"text"},{"type":"text","text":" "},{"text":"and so it isn’t appropriate to provide a ","type":"text"},{"type":"codeVoice","code":"willSet"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" implementation"},{"text":" ","type":"text"},{"text":"as part of an override.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note also that you can’t provide both"},{"text":" ","type":"text"},{"text":"an overriding setter and an overriding property observer for the same property.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you want to observe changes to a property’s value,"},{"type":"text","text":" "},{"text":"and you are already providing a custom setter for that property,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can simply observe any value changes from within the custom setter."}]}],"name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a new class called "},{"code":"AutomaticCar","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which is a subclass of "},{"type":"codeVoice","code":"Car"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"AutomaticCar"},{"text":" class represents a car with an automatic gearbox,","type":"text"},{"type":"text","text":" "},{"text":"which automatically selects an appropriate gear to use based on the current speed:","type":"text"}]},{"code":["class AutomaticCar: Car {","    override var currentSpeed: Double {","        didSet {","            gear = Int(currentSpeed \/ 10.0) + 1","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Whenever you set the "},{"code":"currentSpeed","type":"codeVoice"},{"type":"text","text":" property of an "},{"code":"AutomaticCar","type":"codeVoice"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"the property’s "},{"code":"didSet","type":"codeVoice"},{"type":"text","text":" observer sets the instance’s "},{"code":"gear","type":"codeVoice"},{"text":" property to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"an appropriate choice of gear for the new speed."},{"text":" ","type":"text"},{"type":"text","text":"Specifically, the property observer chooses a gear that’s"},{"type":"text","text":" "},{"type":"text","text":"the new "},{"type":"codeVoice","code":"currentSpeed"},{"text":" value divided by ","type":"text"},{"type":"codeVoice","code":"10"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"rounded down to the nearest integer, plus "},{"code":"1","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A speed of "},{"type":"codeVoice","code":"35.0"},{"type":"text","text":" produces a gear of "},{"type":"codeVoice","code":"4"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["let automatic = AutomaticCar()","automatic.currentSpeed = 35.0","print(\"AutomaticCar: \\(automatic.description)\")","\/\/ AutomaticCar: traveling at 35.0 miles per hour in gear 4"],"syntax":"swift"},{"level":2,"type":"heading","anchor":"Prevenci%C3%B3n-de-sustituciones","text":"Prevención de sustituciones"},{"type":"paragraph","inlineContent":[{"text":"You can prevent a method, property, or subscript from being overridden","type":"text"},{"type":"text","text":" "},{"text":"by marking it as ","type":"text"},{"inlineContent":[{"text":"final","type":"text"}],"type":"emphasis"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Do this by writing the ","type":"text"},{"type":"codeVoice","code":"final"},{"type":"text","text":" modifier before"},{"type":"text","text":" "},{"text":"the method, property, or subscript’s introducer keyword","type":"text"},{"text":" ","type":"text"},{"text":"(such as ","type":"text"},{"code":"final var","type":"codeVoice"},{"type":"text","text":", "},{"code":"final func","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"final class func"},{"text":", and ","type":"text"},{"code":"final subscript","type":"codeVoice"},{"text":").","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Any attempt to override a final method, property, or subscript in a subclass","type":"text"},{"type":"text","text":" "},{"text":"is reported as a compile-time error.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Methods, properties, or subscripts that you add to a class in an extension"},{"type":"text","text":" "},{"type":"text","text":"can also be marked as final within the extension’s definition."},{"text":" ","type":"text"},{"text":"For more information, see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You can mark an entire class as final by writing the ","type":"text"},{"code":"final","type":"codeVoice"},{"text":" modifier","type":"text"},{"type":"text","text":" "},{"text":"before the ","type":"text"},{"type":"codeVoice","code":"class"},{"type":"text","text":" keyword in its class definition ("},{"type":"codeVoice","code":"final class"},{"text":").","type":"text"},{"text":" ","type":"text"},{"text":"Any attempt to subclass a final class is reported as a compile-time error.","type":"text"}]},{"type":"aside","style":"note","name":"Software Beta","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conoce más acerca del uso del "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","isActive":true},{"text":".","type":"text"}]}]}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"metadata":{"title":"Herencia"},"kind":"article","schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance"},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","title":"Extensiones","abstract":[{"type":"text","text":"Add functionality to an existing type."}],"type":"topic","url":"\/documentation\/the-swift-programming-language\/extensions","role":"article","kind":"article"},"https://developer.apple.com/es/support/beta-software/":{"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","title":"software beta de Apple","titleInlineContent":[{"type":"text","text":"software beta de Apple"}],"type":"link"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"url":"\/documentation\/the-swift-programming-language","type":"topic","abstract":[],"kind":"article","title":"The Swift Programming Language (5.9)","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","role":"collection"}}}