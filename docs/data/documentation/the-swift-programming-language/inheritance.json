{"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"text":"inherit","type":"text"}]},{"text":" methods, properties, and other characteristics","type":"text"},{"type":"text","text":" "},{"text":"from another class.","type":"text"},{"type":"text","text":" "},{"text":"When one class inherits from another,","type":"text"},{"type":"text","text":" "},{"text":"the inheriting class is known as a ","type":"text"},{"inlineContent":[{"text":"subclass","type":"text"}],"type":"emphasis"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and the class it inherits from is known as its "},{"inlineContent":[{"type":"text","text":"superclass"}],"type":"emphasis"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Inheritance is a fundamental behavior that differentiates classes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}]},{"type":"paragraph","inlineContent":[{"text":"Classes in Swift can call and access","type":"text"},{"text":" ","type":"text"},{"text":"methods, properties, and subscripts belonging to their superclass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and can provide their own overriding versions of those methods, properties, and subscripts"},{"text":" ","type":"text"},{"type":"text","text":"to refine or modify their behavior."},{"type":"text","text":" "},{"type":"text","text":"Swift helps to ensure your overrides are correct"},{"type":"text","text":" "},{"text":"by checking that the override definition has a matching superclass definition.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Classes can also add property observers to inherited properties"},{"type":"text","text":" "},{"text":"in order to be notified when the value of a property changes.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Property observers can be added to any property,"},{"type":"text","text":" "},{"type":"text","text":"regardless of whether it was originally defined as a stored or computed property."}],"type":"paragraph"},{"text":"Definición de una clase base","type":"heading","level":2,"anchor":"Definici%C3%B3n-de-una-clase-base"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any class that doesn’t inherit from another class is known as a "},{"type":"emphasis","inlineContent":[{"text":"base class","type":"text"}]},{"type":"text","text":"."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Swift classes don’t inherit from a universal base class.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Classes you define without specifying a superclass"},{"text":" ","type":"text"},{"type":"text","text":"automatically become base classes for you to build upon."}]}],"name":"Note","type":"aside"},{"inlineContent":[{"type":"text","text":"The example below defines a base class called "},{"type":"codeVoice","code":"Vehicle"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"This base class defines a stored property called ","type":"text"},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"with a default value of ","type":"text"},{"type":"codeVoice","code":"0.0"},{"text":" (inferring a property type of ","type":"text"},{"type":"codeVoice","code":"Double"},{"type":"text","text":")."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"currentSpeed","type":"codeVoice"},{"type":"text","text":" property’s value is used by"},{"type":"text","text":" "},{"text":"a read-only computed ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" property called "},{"type":"codeVoice","code":"description"},{"text":" ","type":"text"},{"text":"to create a description of the vehicle.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"type":"text","text":" base class also defines a method called "},{"code":"makeNoise","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This method doesn’t actually do anything for a base ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":" instance,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but will be customized by subclasses of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" later on:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class Vehicle {","    var currentSpeed = 0.0","    var description: String {","        return \"traveling at \\(currentSpeed) miles per hour\"","    }","    func makeNoise() {","        \/\/ do nothing - an arbitrary vehicle doesn't necessarily make a noise","    }","}"]},{"inlineContent":[{"type":"text","text":"You create a new instance of "},{"code":"Vehicle","type":"codeVoice"},{"type":"text","text":" with "},{"inlineContent":[{"type":"text","text":"initializer syntax"}],"type":"emphasis"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is written as a type name followed by empty parentheses:"}],"type":"paragraph"},{"type":"codeListing","code":["let someVehicle = Vehicle()"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Having created a new ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" instance,"},{"text":" ","type":"text"},{"text":"you can access its ","type":"text"},{"type":"codeVoice","code":"description"},{"text":" property to print","type":"text"},{"type":"text","text":" "},{"text":"a human-readable description of the vehicle’s current speed:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["print(\"Vehicle: \\(someVehicle.description)\")","\/\/ Vehicle: traveling at 0.0 miles per hour"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"Vehicle","type":"codeVoice"},{"type":"text","text":" class defines common characteristics for an arbitrary vehicle,"},{"type":"text","text":" "},{"text":"but isn’t much use in itself.","type":"text"},{"type":"text","text":" "},{"text":"To make it more useful,","type":"text"},{"type":"text","text":" "},{"text":"you need to refine it to describe more specific kinds of vehicles.","type":"text"}]},{"anchor":"Creaci%C3%B3n-de-subclases","type":"heading","text":"Creación de subclases","level":2},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Subclassing","type":"text"}]},{"text":" is the act of basing a new class on an existing class.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The subclass inherits characteristics from the existing class, which you can then refine."},{"type":"text","text":" "},{"type":"text","text":"You can also add new characteristics to the subclass."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To indicate that a subclass has a superclass,","type":"text"},{"type":"text","text":" "},{"text":"write the subclass name before the superclass name,","type":"text"},{"text":" ","type":"text"},{"text":"separated by a colon:","type":"text"}]},{"syntax":"swift","code":["class SomeSubclass: SomeSuperclass {","    \/\/ subclass definition goes here","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The following example defines a subclass called ","type":"text"},{"code":"Bicycle","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"with a superclass of "},{"type":"codeVoice","code":"Vehicle"},{"text":":","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["class Bicycle: Vehicle {","    var hasBasket = false","}"]},{"inlineContent":[{"text":"The new ","type":"text"},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" class automatically gains all of the characteristics of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"such as its ","type":"text"},{"type":"codeVoice","code":"currentSpeed"},{"text":" and ","type":"text"},{"code":"description","type":"codeVoice"},{"type":"text","text":" properties and its "},{"type":"codeVoice","code":"makeNoise()"},{"text":" method.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In addition to the characteristics it inherits,","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" class defines a new stored property,"},{"type":"text","text":" "},{"code":"hasBasket","type":"codeVoice"},{"type":"text","text":", with a default value of "},{"type":"codeVoice","code":"false"},{"type":"text","text":" "},{"text":"(inferring a type of ","type":"text"},{"type":"codeVoice","code":"Bool"},{"text":" for the property).","type":"text"}]},{"inlineContent":[{"type":"text","text":"By default, any new "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" instance you create will not have a basket."},{"text":" ","type":"text"},{"text":"You can set the ","type":"text"},{"code":"hasBasket","type":"codeVoice"},{"text":" property to ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" for a particular "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"after that instance is created:"}],"type":"paragraph"},{"code":["let bicycle = Bicycle()","bicycle.hasBasket = true"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"You can also modify the inherited "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" property of a "},{"type":"codeVoice","code":"Bicycle"},{"text":" instance,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and query the instance’s inherited "},{"code":"description","type":"codeVoice"},{"type":"text","text":" property:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["bicycle.currentSpeed = 15.0","print(\"Bicycle: \\(bicycle.description)\")","\/\/ Bicycle: traveling at 15.0 miles per hour"]},{"inlineContent":[{"text":"Subclasses can themselves be subclassed.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The next example creates a subclass of "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" for a two-seater bicycle"},{"type":"text","text":" "},{"type":"text","text":"known as a “tandem”:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class Tandem: Bicycle {","    var currentNumberOfPassengers = 0","}"]},{"inlineContent":[{"code":"Tandem","type":"codeVoice"},{"type":"text","text":" inherits all of the properties and methods from "},{"code":"Bicycle","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which in turn inherits all of the properties and methods from ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"Tandem"},{"type":"text","text":" subclass also adds a new stored property called "},{"code":"currentNumberOfPassengers","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"with a default value of "},{"type":"codeVoice","code":"0"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"If you create an instance of ","type":"text"},{"code":"Tandem","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"you can work with any of its new and inherited properties,","type":"text"},{"type":"text","text":" "},{"text":"and query the read-only ","type":"text"},{"code":"description","type":"codeVoice"},{"text":" property it inherits from ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let tandem = Tandem()","tandem.hasBasket = true","tandem.currentNumberOfPassengers = 2","tandem.currentSpeed = 22.0","print(\"Tandem: \\(tandem.description)\")","\/\/ Tandem: traveling at 22.0 miles per hour"]},{"text":"Sustituciones (Overriding)","level":2,"type":"heading","anchor":"Sustituciones-Overriding"},{"inlineContent":[{"text":"A subclass can provide its own custom implementation of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an instance method, type method, instance property, type property, or subscript"},{"type":"text","text":" "},{"type":"text","text":"that it would otherwise inherit from a superclass."},{"type":"text","text":" "},{"text":"This is known as ","type":"text"},{"inlineContent":[{"text":"overriding","type":"text"}],"type":"emphasis"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"To override a characteristic that would otherwise be inherited,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you prefix your overriding definition with the "},{"code":"override","type":"codeVoice"},{"text":" keyword.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Doing so clarifies that you intend to provide an override"},{"text":" ","type":"text"},{"type":"text","text":"and haven’t provided a matching definition by mistake."},{"text":" ","type":"text"},{"text":"Overriding by accident can cause unexpected behavior,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and any overrides without the "},{"type":"codeVoice","code":"override"},{"text":" keyword are","type":"text"},{"text":" ","type":"text"},{"text":"diagnosed as an error when your code is compiled.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"override"},{"text":" keyword also prompts the Swift compiler","type":"text"},{"type":"text","text":" "},{"text":"to check that your overriding class’s superclass (or one of its parents)","type":"text"},{"type":"text","text":" "},{"text":"has a declaration that matches the one you provided for the override.","type":"text"},{"text":" ","type":"text"},{"text":"This check ensures that your overriding definition is correct.","type":"text"}]},{"level":3,"type":"heading","text":"Acceso a métodos, propiedades, y subíndices de superclases","anchor":"Acceso-a-m%C3%A9todos-propiedades-y-sub%C3%ADndices-de-superclases"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you provide a method, property, or subscript override for a subclass,"},{"type":"text","text":" "},{"type":"text","text":"it’s sometimes useful to use the existing superclass implementation"},{"type":"text","text":" "},{"type":"text","text":"as part of your override."},{"text":" ","type":"text"},{"type":"text","text":"For example, you can refine the behavior of that existing implementation,"},{"text":" ","type":"text"},{"type":"text","text":"or store a modified value in an existing inherited variable."}]},{"inlineContent":[{"text":"Where this is appropriate,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you access the superclass version of a method, property, or subscript"},{"text":" ","type":"text"},{"text":"by using the ","type":"text"},{"type":"codeVoice","code":"super"},{"type":"text","text":" prefix:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"An overridden method named "},{"type":"codeVoice","code":"someMethod()"},{"type":"text","text":" can call the superclass version of "},{"type":"codeVoice","code":"someMethod()"},{"text":" ","type":"text"},{"type":"text","text":"by calling "},{"type":"codeVoice","code":"super.someMethod()"},{"text":" within the overriding method implementation.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An overridden property called "},{"code":"someProperty","type":"codeVoice"},{"type":"text","text":" can access the superclass version of "},{"type":"codeVoice","code":"someProperty"},{"text":" ","type":"text"},{"type":"text","text":"as "},{"type":"codeVoice","code":"super.someProperty"},{"text":" within the overriding getter or setter implementation.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"An overridden subscript for ","type":"text"},{"type":"codeVoice","code":"someIndex"},{"type":"text","text":" can access the superclass version of the same subscript"},{"text":" ","type":"text"},{"type":"text","text":"as "},{"type":"codeVoice","code":"super[someIndex]"},{"type":"text","text":" from within the overriding subscript implementation."}]}]}],"type":"unorderedList"},{"anchor":"Sustituci%C3%B3n-de-m%C3%A9todos","text":"Sustitución de métodos","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"You can override an inherited instance or type method","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to provide a tailored or alternative implementation of the method within your subclass."}]},{"type":"paragraph","inlineContent":[{"text":"The following example defines a new subclass of ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"type":"text","text":" called "},{"type":"codeVoice","code":"Train"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which overrides the "},{"type":"codeVoice","code":"makeNoise()"},{"type":"text","text":" method that "},{"type":"codeVoice","code":"Train"},{"type":"text","text":" inherits from "},{"code":"Vehicle","type":"codeVoice"},{"type":"text","text":":"}]},{"syntax":"swift","code":["class Train: Vehicle {","    override func makeNoise() {","        print(\"Choo Choo\")","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If you create a new instance of "},{"type":"codeVoice","code":"Train"},{"text":" and call its ","type":"text"},{"type":"codeVoice","code":"makeNoise()"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"you can see that the "},{"code":"Train","type":"codeVoice"},{"type":"text","text":" subclass version of the method is called:"}],"type":"paragraph"},{"syntax":"swift","code":["let train = Train()","train.makeNoise()","\/\/ Prints \"Choo Choo\""],"type":"codeListing"},{"anchor":"Sustituci%C3%B3n-de-propiedades","text":"Sustitución de propiedades","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You can override an inherited instance or type property","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to provide your own custom getter and setter for that property,"},{"text":" ","type":"text"},{"text":"or to add property observers to enable the overriding property","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to observe when the underlying property value changes."}]},{"level":4,"type":"heading","anchor":"Sustituci%C3%B3n-de-getters-y-setters-de-propiedades","text":"Sustitución de getters y setters de propiedades"},{"inlineContent":[{"text":"You can provide a custom getter (and setter, if appropriate)","type":"text"},{"text":" ","type":"text"},{"text":"to override ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"any","type":"text"}]},{"type":"text","text":" inherited property,"},{"type":"text","text":" "},{"text":"regardless of whether the inherited property is implemented as","type":"text"},{"text":" ","type":"text"},{"text":"a stored or computed property at source.","type":"text"},{"text":" ","type":"text"},{"text":"The stored or computed nature of an inherited property isn’t known by a subclass —","type":"text"},{"type":"text","text":" "},{"text":"it only knows that the inherited property has a certain name and type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You must always state both the name and the type of the property you are overriding,"},{"text":" ","type":"text"},{"type":"text","text":"to enable the compiler to check that your override matches"},{"type":"text","text":" "},{"type":"text","text":"a superclass property with the same name and type."}],"type":"paragraph"},{"inlineContent":[{"text":"You can present an inherited read-only property as a read-write property","type":"text"},{"type":"text","text":" "},{"text":"by providing both a getter and a setter in your subclass property override.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You can’t, however, present an inherited read-write property as a read-only property."}],"type":"paragraph"},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you provide a setter as part of a property override,"},{"type":"text","text":" "},{"text":"you must also provide a getter for that override.","type":"text"},{"text":" ","type":"text"},{"text":"If you don’t want to modify the inherited property’s value within the overriding getter,","type":"text"},{"type":"text","text":" "},{"text":"you can simply pass through the inherited value","type":"text"},{"text":" ","type":"text"},{"text":"by returning ","type":"text"},{"code":"super.someProperty","type":"codeVoice"},{"type":"text","text":" from the getter,"},{"type":"text","text":" "},{"text":"where ","type":"text"},{"type":"codeVoice","code":"someProperty"},{"text":" is the name of the property you are overriding.","type":"text"}]}],"name":"Note"},{"type":"paragraph","inlineContent":[{"text":"The following example defines a new class called ","type":"text"},{"code":"Car","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which is a subclass of ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class introduces a new stored property called "},{"code":"gear","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with a default integer value of "},{"type":"codeVoice","code":"1"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"Car","type":"codeVoice"},{"type":"text","text":" class also overrides the "},{"code":"description","type":"codeVoice"},{"type":"text","text":" property it inherits from "},{"type":"codeVoice","code":"Vehicle"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to provide a custom description that includes the current gear:"}]},{"code":["class Car: Vehicle {","    var gear = 1","    override var description: String {","        return super.description + \" in gear \\(gear)\"","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The override of the ","type":"text"},{"type":"codeVoice","code":"description"},{"text":" property starts by calling ","type":"text"},{"type":"codeVoice","code":"super.description"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which returns the ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" class’s "},{"code":"description","type":"codeVoice"},{"type":"text","text":" property."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"Car","type":"codeVoice"},{"type":"text","text":" class’s version of "},{"type":"codeVoice","code":"description"},{"type":"text","text":" then adds some extra text onto"},{"type":"text","text":" "},{"text":"the end of this description to provide information about the current gear.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create an instance of the "},{"type":"codeVoice","code":"Car"},{"text":" class","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and set its "},{"type":"codeVoice","code":"gear"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" properties,"},{"text":" ","type":"text"},{"type":"text","text":"you can see that its "},{"code":"description","type":"codeVoice"},{"text":" property returns","type":"text"},{"type":"text","text":" "},{"text":"the tailored description defined within the ","type":"text"},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class:"}]},{"type":"codeListing","syntax":"swift","code":["let car = Car()","car.currentSpeed = 25.0","car.gear = 3","print(\"Car: \\(car.description)\")","\/\/ Car: traveling at 25.0 miles per hour in gear 3"]},{"level":4,"type":"heading","text":"Sustitución de observadores de propiedades","anchor":"Sustituci%C3%B3n-de-observadores-de-propiedades"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use property overriding to add property observers to an inherited property."},{"type":"text","text":" "},{"text":"This enables you to be notified when the value of an inherited property changes,","type":"text"},{"type":"text","text":" "},{"text":"regardless of how that property was originally implemented.","type":"text"},{"text":" ","type":"text"},{"text":"For more information on property observers, see ","type":"text"},{"text":"doc:Properties#Observadores-de-propiedades","type":"text"},{"type":"text","text":"."}]},{"style":"note","content":[{"inlineContent":[{"text":"You can’t add property observers to","type":"text"},{"type":"text","text":" "},{"text":"inherited constant stored properties or inherited read-only computed properties.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The value of these properties can’t be set,"},{"text":" ","type":"text"},{"type":"text","text":"and so it isn’t appropriate to provide a "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" or "},{"code":"didSet","type":"codeVoice"},{"type":"text","text":" implementation"},{"text":" ","type":"text"},{"type":"text","text":"as part of an override."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note also that you can’t provide both"},{"text":" ","type":"text"},{"type":"text","text":"an overriding setter and an overriding property observer for the same property."},{"text":" ","type":"text"},{"type":"text","text":"If you want to observe changes to a property’s value,"},{"type":"text","text":" "},{"type":"text","text":"and you are already providing a custom setter for that property,"},{"text":" ","type":"text"},{"text":"you can simply observe any value changes from within the custom setter.","type":"text"}]}],"name":"Note","type":"aside"},{"inlineContent":[{"type":"text","text":"The following example defines a new class called "},{"code":"AutomaticCar","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which is a subclass of "},{"type":"codeVoice","code":"Car"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"AutomaticCar"},{"type":"text","text":" class represents a car with an automatic gearbox,"},{"type":"text","text":" "},{"text":"which automatically selects an appropriate gear to use based on the current speed:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class AutomaticCar: Car {","    override var currentSpeed: Double {","        didSet {","            gear = Int(currentSpeed \/ 10.0) + 1","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Whenever you set the "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" property of an "},{"code":"AutomaticCar","type":"codeVoice"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"text":"the property’s ","type":"text"},{"code":"didSet","type":"codeVoice"},{"type":"text","text":" observer sets the instance’s "},{"code":"gear","type":"codeVoice"},{"type":"text","text":" property to"},{"text":" ","type":"text"},{"text":"an appropriate choice of gear for the new speed.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Specifically, the property observer chooses a gear that’s"},{"type":"text","text":" "},{"text":"the new ","type":"text"},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" value divided by "},{"type":"codeVoice","code":"10"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"rounded down to the nearest integer, plus ","type":"text"},{"type":"codeVoice","code":"1"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"A speed of ","type":"text"},{"code":"35.0","type":"codeVoice"},{"type":"text","text":" produces a gear of "},{"type":"codeVoice","code":"4"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["let automatic = AutomaticCar()","automatic.currentSpeed = 35.0","print(\"AutomaticCar: \\(automatic.description)\")","\/\/ AutomaticCar: traveling at 35.0 miles per hour in gear 4"]},{"text":"Prevención de sustituciones","anchor":"Prevenci%C3%B3n-de-sustituciones","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"You can prevent a method, property, or subscript from being overridden","type":"text"},{"type":"text","text":" "},{"text":"by marking it as ","type":"text"},{"inlineContent":[{"type":"text","text":"final"}],"type":"emphasis"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Do this by writing the "},{"code":"final","type":"codeVoice"},{"text":" modifier before","type":"text"},{"type":"text","text":" "},{"text":"the method, property, or subscript’s introducer keyword","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(such as "},{"code":"final var","type":"codeVoice"},{"type":"text","text":", "},{"code":"final func","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"final class func"},{"type":"text","text":", and "},{"type":"codeVoice","code":"final subscript"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any attempt to override a final method, property, or subscript in a subclass"},{"text":" ","type":"text"},{"type":"text","text":"is reported as a compile-time error."},{"type":"text","text":" "},{"type":"text","text":"Methods, properties, or subscripts that you add to a class in an extension"},{"type":"text","text":" "},{"type":"text","text":"can also be marked as final within the extension’s definition."},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","type":"reference","isActive":true},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You can mark an entire class as final by writing the ","type":"text"},{"type":"codeVoice","code":"final"},{"text":" modifier","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"before the "},{"type":"codeVoice","code":"class"},{"text":" keyword in its class definition (","type":"text"},{"code":"final class","type":"codeVoice"},{"type":"text","text":")."},{"type":"text","text":" "},{"text":"Any attempt to subclass a final class is reported as a compile-time error.","type":"text"}]},{"style":"note","name":"Software Beta","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo."}]},{"inlineContent":[{"text":"Conoce más acerca del uso del ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside"}]}],"abstract":[{"text":"Subclass to add or override functionality.","type":"text"}],"metadata":{"title":"Herencia"},"sections":[],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"kind":"article","references":{"https://developer.apple.com/es/support/beta-software/":{"url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","title":"software beta de Apple","titleInlineContent":[{"text":"software beta de Apple","type":"text"}],"type":"link"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"role":"collection","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","url":"\/documentation\/the-swift-programming-language","title":"The Swift Programming Language (6)","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","url":"\/documentation\/the-swift-programming-language\/extensions","kind":"article","title":"Extensiones","abstract":[{"text":"Add functionality to an existing type.","type":"text"}],"type":"topic"}}}