{"abstract":[{"type":"text","text":"Organize data using arrays, sets, and dictionaries."}],"kind":"article","sections":[],"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"text":"Swift provides three primary ","type":"text"},{"inlineContent":[{"type":"text","text":"collection types"}],"type":"emphasis"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"known as arrays, sets, and dictionaries,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for storing collections of values."},{"type":"text","text":" "},{"type":"text","text":"Arrays are ordered collections of values."},{"text":" ","type":"text"},{"text":"Sets are unordered collections of unique values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Dictionaries are unordered collections of key-value associations."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"CollectionTypes_intro"}]},{"type":"paragraph","inlineContent":[{"text":"Arrays, sets, and dictionaries in Swift are always clear about","type":"text"},{"type":"text","text":" "},{"text":"the types of values and keys that they can store.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This means that you can’t insert a value of the wrong type"},{"type":"text","text":" "},{"text":"into a collection by mistake.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It also means you can be confident about the type of values"},{"type":"text","text":" "},{"type":"text","text":"you will retrieve from a collection."}]},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"Swift’s array, set, and dictionary types are implemented as "},{"inlineContent":[{"type":"text","text":"generic collections"}],"type":"emphasis"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For more about generic types and collections, see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}],"style":"note","name":"Note"},{"text":"Mutabilidad de las colecciones","anchor":"Mutabilidad-de-las-colecciones","level":2,"type":"heading"},{"inlineContent":[{"text":"If you create an array, a set, or a dictionary, and assign it to a variable,","type":"text"},{"type":"text","text":" "},{"text":"the collection that’s created will be ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"mutable"}]},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This means that you can change (or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"mutate"}]},{"text":") the collection after it’s created","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by adding, removing, or changing items in the collection."},{"text":" ","type":"text"},{"type":"text","text":"If you assign an array, a set, or a dictionary to a constant,"},{"text":" ","type":"text"},{"type":"text","text":"that collection is "},{"inlineContent":[{"text":"immutable","type":"text"}],"type":"emphasis"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and its size and contents can’t be changed."}],"type":"paragraph"},{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"It’s good practice to create immutable collections","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in all cases where the collection doesn’t need to change."},{"text":" ","type":"text"},{"text":"Doing so makes it easier for you to reason about your code","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and enables the Swift compiler to optimize the performance of"},{"text":" ","type":"text"},{"text":"the collections you create.","type":"text"}]}],"style":"note"},{"level":2,"text":"Arreglos","type":"heading","anchor":"Arreglos"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"text":"array","type":"text"}]},{"text":" stores values of the same type in an ordered list.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The same value can appear in an array multiple times at different positions."}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"code":"Array","type":"codeVoice"},{"type":"text","text":" type is bridged to Foundation’s "},{"code":"NSArray","type":"codeVoice"},{"text":" class.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information about using "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" with Foundation and Cocoa,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/array#2846730","isActive":true},{"text":".","type":"text"}]}],"name":"Note","style":"note","type":"aside"},{"level":3,"anchor":"Sintaxis-concisa-para-el-tipo-arreglo","text":"Sintaxis concisa para el tipo arreglo","type":"heading"},{"inlineContent":[{"type":"text","text":"The type of a Swift array is written in full as "},{"code":"Array<Element>","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"where "},{"code":"Element","type":"codeVoice"},{"type":"text","text":" is the type of values the array is allowed to store."},{"type":"text","text":" "},{"type":"text","text":"You can also write the type of an array in shorthand form as "},{"code":"[Element]","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Although the two forms are functionally identical,","type":"text"},{"text":" ","type":"text"},{"text":"the shorthand form is preferred","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and is used throughout this guide when referring to the type of an array."}],"type":"paragraph"},{"type":"heading","level":3,"anchor":"Creaci%C3%B3n-de-un-arreglo-vac%C3%ADo","text":"Creación de un arreglo vacío"},{"inlineContent":[{"type":"text","text":"You can create an empty array of a certain type"},{"type":"text","text":" "},{"type":"text","text":"using initializer syntax:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var someInts: [Int] = []","print(\"someInts is of type [Int] with \\(someInts.count) items.\")","\/\/ Prints \"someInts is of type [Int] with 0 items.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the type of the "},{"code":"someInts","type":"codeVoice"},{"type":"text","text":" variable is inferred to be "},{"type":"codeVoice","code":"[Int]"},{"type":"text","text":" "},{"type":"text","text":"from the type of the initializer."}]},{"type":"paragraph","inlineContent":[{"text":"Alternatively, if the context already provides type information,","type":"text"},{"type":"text","text":" "},{"text":"such as a function argument or an already typed variable or constant,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can create an empty array with an empty array literal,"},{"text":" ","type":"text"},{"text":"which is written as ","type":"text"},{"code":"[]","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"(an empty pair of square brackets):"}]},{"syntax":"swift","code":["someInts.append(3)","\/\/ someInts now contains 1 value of type Int","someInts = []","\/\/ someInts is now an empty array, but is still of type [Int]"],"type":"codeListing"},{"type":"heading","text":"Creación de un arreglo con un valor predeterminado","anchor":"Creaci%C3%B3n-de-un-arreglo-con-un-valor-predeterminado","level":3},{"inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" type also provides"},{"type":"text","text":" "},{"type":"text","text":"an initializer for creating an array of a certain size"},{"text":" ","type":"text"},{"text":"with all of its values set to the same default value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You pass this initializer"},{"type":"text","text":" "},{"type":"text","text":"a default value of the appropriate type (called "},{"type":"codeVoice","code":"repeating"},{"text":"):","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the number of times that value is repeated in the new array (called "},{"code":"count","type":"codeVoice"},{"text":"):","type":"text"}],"type":"paragraph"},{"code":["var threeDoubles = Array(repeating: 0.0, count: 3)","\/\/ threeDoubles is of type [Double], and equals [0.0, 0.0, 0.0]"],"type":"codeListing","syntax":"swift"},{"level":3,"type":"heading","text":"Creación de un arreglo sumando dos arreglos","anchor":"Creaci%C3%B3n-de-un-arreglo-sumando-dos-arreglos"},{"inlineContent":[{"text":"You can create a new array by adding together two existing arrays with compatible types","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with the addition operator ("},{"type":"codeVoice","code":"+"},{"text":").","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The new array’s type is inferred from the type of the two arrays you add together:"}],"type":"paragraph"},{"type":"codeListing","code":["var anotherThreeDoubles = Array(repeating: 2.5, count: 3)","\/\/ anotherThreeDoubles is of type [Double], and equals [2.5, 2.5, 2.5]","","var sixDoubles = threeDoubles + anotherThreeDoubles","\/\/ sixDoubles is inferred as [Double], and equals [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]"],"syntax":"swift"},{"level":3,"anchor":"Creaci%C3%B3n-de-un-arreglo-a-partir-de-un-literal-de-arreglo","type":"heading","text":"Creación de un arreglo a partir de un literal de arreglo"},{"inlineContent":[{"text":"You can also initialize an array with an ","type":"text"},{"inlineContent":[{"type":"text","text":"array literal"}],"type":"emphasis"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which is a shorthand way to write one or more values as an array collection.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"An array literal is written as a list of values, separated by commas,"},{"text":" ","type":"text"},{"text":"surrounded by a pair of square brackets:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["[<#value 1#>, <#value 2#>, <#value 3#>]"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The example below creates an array called ","type":"text"},{"type":"codeVoice","code":"shoppingList"},{"text":" to store ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" values:"}]},{"type":"codeListing","syntax":"swift","code":["var shoppingList: [String] = [\"Eggs\", \"Milk\"]","\/\/ shoppingList has been initialized with two initial items"]},{"inlineContent":[{"type":"text","text":"The "},{"code":"shoppingList","type":"codeVoice"},{"type":"text","text":" variable is declared as"},{"text":" ","type":"text"},{"text":"“an array of string values”, written as ","type":"text"},{"code":"[String]","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Because this particular array has specified a value type of "},{"type":"codeVoice","code":"String"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"it’s allowed to store "},{"type":"codeVoice","code":"String"},{"text":" values only.","type":"text"},{"type":"text","text":" "},{"text":"Here, the ","type":"text"},{"code":"shoppingList","type":"codeVoice"},{"text":" array is initialized with two ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" values"},{"text":" ","type":"text"},{"text":"(","type":"text"},{"type":"codeVoice","code":"\"Eggs\""},{"type":"text","text":" and "},{"code":"\"Milk\"","type":"codeVoice"},{"text":"), written within an array literal.","type":"text"}],"type":"paragraph"},{"name":"Note","content":[{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"shoppingList"},{"type":"text","text":" array is declared as a variable (with the "},{"type":"codeVoice","code":"var"},{"text":" introducer)","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and not a constant (with the "},{"type":"codeVoice","code":"let"},{"text":" introducer)","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"because more items are added to the shopping list in the examples below."}],"type":"paragraph"}],"type":"aside","style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this case, the array literal contains two "},{"code":"String","type":"codeVoice"},{"type":"text","text":" values and nothing else."},{"type":"text","text":" "},{"text":"This matches the type of the ","type":"text"},{"code":"shoppingList","type":"codeVoice"},{"type":"text","text":" variable’s declaration"},{"type":"text","text":" "},{"text":"(an array that can only contain ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" values),"},{"type":"text","text":" "},{"type":"text","text":"and so the assignment of the array literal is permitted"},{"type":"text","text":" "},{"text":"as a way to initialize ","type":"text"},{"type":"codeVoice","code":"shoppingList"},{"type":"text","text":" with two initial items."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Thanks to Swift’s type inference,"},{"text":" ","type":"text"},{"type":"text","text":"you don’t have to write the type of the array"},{"text":" ","type":"text"},{"text":"if you’re initializing it with an array literal containing values of the same type.","type":"text"},{"type":"text","text":" "},{"text":"The initialization of ","type":"text"},{"code":"shoppingList","type":"codeVoice"},{"type":"text","text":" could have been written in a shorter form instead:"}]},{"code":["var shoppingList = [\"Eggs\", \"Milk\"]"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Because all values in the array literal are of the same type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift can infer that "},{"code":"[String]","type":"codeVoice"},{"type":"text","text":" is"},{"text":" ","type":"text"},{"type":"text","text":"the correct type to use for the "},{"code":"shoppingList","type":"codeVoice"},{"type":"text","text":" variable."}],"type":"paragraph"},{"level":3,"type":"heading","text":"Acceso y modificación de un arreglo","anchor":"Acceso-y-modificaci%C3%B3n-de-un-arreglo"},{"inlineContent":[{"type":"text","text":"You access and modify an array through its methods and properties,"},{"type":"text","text":" "},{"type":"text","text":"or by using subscript syntax."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To find out the number of items in an array, check its read-only "},{"code":"count","type":"codeVoice"},{"type":"text","text":" property:"}],"type":"paragraph"},{"syntax":"swift","code":["print(\"The shopping list contains \\(shoppingList.count) items.\")","\/\/ Prints \"The shopping list contains 2 items.\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Use the Boolean "},{"code":"isEmpty","type":"codeVoice"},{"type":"text","text":" property"},{"text":" ","type":"text"},{"type":"text","text":"as a shortcut for checking whether the "},{"code":"count","type":"codeVoice"},{"type":"text","text":" property is equal to "},{"code":"0","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["if shoppingList.isEmpty {","    print(\"The shopping list is empty.\")","} else {","    print(\"The shopping list isn't empty.\")","}","\/\/ Prints \"The shopping list isn't empty.\""]},{"type":"paragraph","inlineContent":[{"text":"You can add a new item to the end of an array by calling the array’s ","type":"text"},{"type":"codeVoice","code":"append(_:)"},{"type":"text","text":" method:"}]},{"syntax":"swift","type":"codeListing","code":["shoppingList.append(\"Flour\")","\/\/ shoppingList now contains 3 items, and someone is making pancakes"]},{"type":"paragraph","inlineContent":[{"text":"Alternatively, append an array of one or more compatible items","type":"text"},{"text":" ","type":"text"},{"text":"with the addition assignment operator (","type":"text"},{"code":"+=","type":"codeVoice"},{"text":"):","type":"text"}]},{"syntax":"swift","code":["shoppingList += [\"Baking Powder\"]","\/\/ shoppingList now contains 4 items","shoppingList += [\"Chocolate Spread\", \"Cheese\", \"Butter\"]","\/\/ shoppingList now contains 7 items"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Retrieve a value from the array by using "},{"inlineContent":[{"type":"text","text":"subscript syntax"}],"type":"emphasis"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"passing the index of the value you want to retrieve within square brackets","type":"text"},{"type":"text","text":" "},{"type":"text","text":"immediately after the name of the array:"}]},{"type":"codeListing","syntax":"swift","code":["var firstItem = shoppingList[0]","\/\/ firstItem is equal to \"Eggs\""]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"The first item in the array has an index of ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":", not "},{"type":"codeVoice","code":"1"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Arrays in Swift are always zero-indexed.","type":"text"}]}],"name":"Note","style":"note"},{"type":"paragraph","inlineContent":[{"text":"You can use subscript syntax to change an existing value at a given index:","type":"text"}]},{"code":["shoppingList[0] = \"Six eggs\"","\/\/ the first item in the list is now equal to \"Six eggs\" rather than \"Eggs\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"When you use subscript syntax,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the index you specify needs to be valid."},{"text":" ","type":"text"},{"type":"text","text":"For example, writing "},{"type":"codeVoice","code":"shoppingList[shoppingList.count] = \"Salt\""},{"type":"text","text":" "},{"text":"to try to append an item to the end of the array","type":"text"},{"type":"text","text":" "},{"type":"text","text":"results in a runtime error."}]},{"inlineContent":[{"type":"text","text":"You can also use subscript syntax to change a range of values at once,"},{"type":"text","text":" "},{"text":"even if the replacement set of values has a different length than the range you are replacing.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The following example replaces "},{"code":"\"Chocolate Spread\"","type":"codeVoice"},{"type":"text","text":", "},{"code":"\"Cheese\"","type":"codeVoice"},{"type":"text","text":", and "},{"code":"\"Butter\"","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"with "},{"type":"codeVoice","code":"\"Bananas\""},{"type":"text","text":" and "},{"type":"codeVoice","code":"\"Apples\""},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["shoppingList[4...6] = [\"Bananas\", \"Apples\"]","\/\/ shoppingList now contains 6 items"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"To insert an item into the array at a specified index,"},{"text":" ","type":"text"},{"type":"text","text":"call the array’s "},{"type":"codeVoice","code":"insert(_:at:)"},{"text":" method:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["shoppingList.insert(\"Maple Syrup\", at: 0)","\/\/ shoppingList now contains 7 items","\/\/ \"Maple Syrup\" is now the first item in the list"]},{"inlineContent":[{"type":"text","text":"This call to the "},{"type":"codeVoice","code":"insert(_:at:)"},{"type":"text","text":" method inserts a new item with a value of "},{"type":"codeVoice","code":"\"Maple Syrup\""},{"text":" ","type":"text"},{"text":"at the very beginning of the shopping list,","type":"text"},{"type":"text","text":" "},{"text":"indicated by an index of ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Similarly, you remove an item from the array with the "},{"type":"codeVoice","code":"remove(at:)"},{"type":"text","text":" method."},{"text":" ","type":"text"},{"type":"text","text":"This method removes the item at the specified index and returns the removed item"},{"type":"text","text":" "},{"text":"(although you can ignore the returned value if you don’t need it):","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let mapleSyrup = shoppingList.remove(at: 0)","\/\/ the item that was at index 0 has just been removed","\/\/ shoppingList now contains 6 items, and no Maple Syrup","\/\/ the mapleSyrup constant is now equal to the removed \"Maple Syrup\" string"]},{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"If you try to access or modify a value for an index","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that’s outside of an array’s existing bounds,"},{"type":"text","text":" "},{"text":"you will trigger a runtime error.","type":"text"},{"text":" ","type":"text"},{"text":"You can check that an index is valid before using it","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by comparing it to the array’s "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"The largest valid index in an array is "},{"code":"count - 1","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"because arrays are indexed from zero —"},{"text":" ","type":"text"},{"text":"however, when ","type":"text"},{"type":"codeVoice","code":"count"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":" (meaning the array is empty),"},{"type":"text","text":" "},{"type":"text","text":"there are no valid indexes."}]}],"style":"note"},{"inlineContent":[{"text":"Any gaps in an array are closed when an item is removed,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and so the value at index "},{"type":"codeVoice","code":"0"},{"type":"text","text":" is once again equal to "},{"code":"\"Six eggs\"","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["firstItem = shoppingList[0]","\/\/ firstItem is now equal to \"Six eggs\""],"type":"codeListing"},{"inlineContent":[{"text":"If you want to remove the final item from an array,","type":"text"},{"text":" ","type":"text"},{"text":"use the ","type":"text"},{"type":"codeVoice","code":"removeLast()"},{"type":"text","text":" method rather than the "},{"type":"codeVoice","code":"remove(at:)"},{"text":" method","type":"text"},{"text":" ","type":"text"},{"text":"to avoid the need to query the array’s ","type":"text"},{"type":"codeVoice","code":"count"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"Like the "},{"type":"codeVoice","code":"remove(at:)"},{"text":" method, ","type":"text"},{"code":"removeLast()","type":"codeVoice"},{"text":" returns the removed item:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let apples = shoppingList.removeLast()","\/\/ the last item in the array has just been removed","\/\/ shoppingList now contains 5 items, and no apples","\/\/ the apples constant is now equal to the removed \"Apples\" string"]},{"text":"Iterar sobre un arreglo","type":"heading","anchor":"Iterar-sobre-un-arreglo","level":3},{"type":"paragraph","inlineContent":[{"text":"You can iterate over the entire set of values in an array with the ","type":"text"},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"code":"in","type":"codeVoice"},{"text":" loop:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["for item in shoppingList {","    print(item)","}","\/\/ Six eggs","\/\/ Milk","\/\/ Flour","\/\/ Baking Powder","\/\/ Bananas"]},{"inlineContent":[{"text":"If you need the integer index of each item as well as its value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"use the "},{"type":"codeVoice","code":"enumerated()"},{"type":"text","text":" method to iterate over the array instead."},{"type":"text","text":" "},{"type":"text","text":"For each item in the array,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"enumerated()"},{"type":"text","text":" method returns a tuple"},{"text":" ","type":"text"},{"text":"composed of an integer and the item.","type":"text"},{"type":"text","text":" "},{"text":"The integers start at zero and count up by one for each item;","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"if you enumerate over a whole array,"},{"text":" ","type":"text"},{"text":"these integers match the items’ indices.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You can decompose the tuple into temporary constants or variables"},{"type":"text","text":" "},{"type":"text","text":"as part of the iteration:"}],"type":"paragraph"},{"code":["for (index, value) in shoppingList.enumerated() {","    print(\"Item \\(index + 1): \\(value)\")","}","\/\/ Item 1: Six eggs","\/\/ Item 2: Milk","\/\/ Item 3: Flour","\/\/ Item 4: Baking Powder","\/\/ Item 5: Bananas"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"For more about the "},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"code":"in","type":"codeVoice"},{"text":" loop, see ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Ciclos-for-in","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"text":"Sets","anchor":"Sets"},{"inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"set"}]},{"type":"text","text":" stores distinct values of the same type"},{"type":"text","text":" "},{"type":"text","text":"in a collection with no defined ordering."},{"type":"text","text":" "},{"type":"text","text":"You can use a set instead of an array when the order of items isn’t important,"},{"text":" ","type":"text"},{"text":"or when you need to ensure that an item only appears once.","type":"text"}],"type":"paragraph"},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Swift’s ","type":"text"},{"type":"codeVoice","code":"Set"},{"type":"text","text":" type is bridged to Foundation’s "},{"code":"NSSet","type":"codeVoice"},{"text":" class.","type":"text"}]},{"inlineContent":[{"type":"text","text":"For more information about using "},{"code":"Set","type":"codeVoice"},{"text":" with Foundation and Cocoa,","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/set#2845530"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"Note"},{"type":"heading","level":3,"anchor":"Valores-hash-para-los-tipos-set","text":"Valores hash para los tipos set"},{"type":"paragraph","inlineContent":[{"text":"A type must be ","type":"text"},{"inlineContent":[{"text":"hashable","type":"text"}],"type":"emphasis"},{"text":" in order to be stored in a set —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that is, the type must provide a way to compute a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"hash value"}]},{"type":"text","text":" for itself."},{"text":" ","type":"text"},{"type":"text","text":"A hash value is an "},{"code":"Int","type":"codeVoice"},{"text":" value that’s the same for all objects that compare equally,","type":"text"},{"type":"text","text":" "},{"text":"such that if ","type":"text"},{"type":"codeVoice","code":"a == b"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"the hash value of "},{"type":"codeVoice","code":"a"},{"text":" is equal to the hash value of ","type":"text"},{"code":"b","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of Swift’s basic types (such as "},{"type":"codeVoice","code":"String"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", "},{"code":"Double","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Bool","type":"codeVoice"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are hashable by default, and can be used as set value types or dictionary key types."},{"type":"text","text":" "},{"text":"Enumeration case values without associated values","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(as described in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","isActive":true,"type":"reference"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"are also hashable by default.","type":"text"}]},{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"You can use your own custom types as set value types or dictionary key types","type":"text"},{"type":"text","text":" "},{"text":"by making them conform to the ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" protocol"},{"text":" ","type":"text"},{"text":"from the Swift standard library.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For information about implementing the required "},{"type":"codeVoice","code":"hash(into:)"},{"text":" method,","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/hashable"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"For information about conforming to protocols, see ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true},{"type":"text","text":"."}]}]},{"anchor":"Sintaxis-del-tipo-set","text":"Sintaxis del tipo set","type":"heading","level":3},{"inlineContent":[{"text":"The type of a Swift set is written as ","type":"text"},{"type":"codeVoice","code":"Set<Element>"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"where ","type":"text"},{"type":"codeVoice","code":"Element"},{"type":"text","text":" is the type that the set is allowed to store."},{"text":" ","type":"text"},{"type":"text","text":"Unlike arrays, sets don’t have an equivalent shorthand form."}],"type":"paragraph"},{"anchor":"Creaci%C3%B3n-e-inicializaci%C3%B3n-de-un-set-vac%C3%ADo","type":"heading","level":3,"text":"Creación e inicialización de un set vacío"},{"inlineContent":[{"text":"You can create an empty set of a certain type","type":"text"},{"type":"text","text":" "},{"text":"using initializer syntax:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var letters = Set<Character>()","print(\"letters is of type Set<Character> with \\(letters.count) items.\")","\/\/ Prints \"letters is of type Set<Character> with 0 items.\""]},{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of the "},{"type":"codeVoice","code":"letters"},{"type":"text","text":" variable is inferred to be "},{"code":"Set<Character>","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"from the type of the initializer.","type":"text"}]}],"style":"note"},{"type":"paragraph","inlineContent":[{"text":"Alternatively, if the context already provides type information,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"such as a function argument or an already typed variable or constant,"},{"type":"text","text":" "},{"type":"text","text":"you can create an empty set with an empty array literal:"}]},{"code":["letters.insert(\"a\")","\/\/ letters now contains 1 value of type Character","letters = []","\/\/ letters is now an empty set, but is still of type Set<Character>"],"type":"codeListing","syntax":"swift"},{"text":"Creación de un set a partir de un literal de arreglo","level":3,"type":"heading","anchor":"Creaci%C3%B3n-de-un-set-a-partir-de-un-literal-de-arreglo"},{"inlineContent":[{"text":"You can also initialize a set with an array literal,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as a shorthand way to write one or more values as a set collection."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The example below creates a set called ","type":"text"},{"type":"codeVoice","code":"favoriteGenres"},{"type":"text","text":" to store "},{"type":"codeVoice","code":"String"},{"text":" values:","type":"text"}]},{"code":["var favoriteGenres: Set<String> = [\"Rock\", \"Classical\", \"Hip hop\"]","\/\/ favoriteGenres has been initialized with three initial items"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"favoriteGenres"},{"type":"text","text":" variable is declared as"},{"text":" ","type":"text"},{"type":"text","text":"“a set of "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values”, written as "},{"type":"codeVoice","code":"Set<String>"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Because this particular set has specified a value type of "},{"type":"codeVoice","code":"String"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"it’s ","type":"text"},{"inlineContent":[{"type":"text","text":"only"}],"type":"emphasis"},{"text":" allowed to store ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"Here, the "},{"type":"codeVoice","code":"favoriteGenres"},{"type":"text","text":" set is initialized with three "},{"type":"codeVoice","code":"String"},{"text":" values","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"("},{"type":"codeVoice","code":"\"Rock\""},{"text":", ","type":"text"},{"code":"\"Classical\"","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"\"Hip hop\""},{"text":"), written within an array literal.","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"favoriteGenres","type":"codeVoice"},{"text":" set is declared as a variable (with the ","type":"text"},{"type":"codeVoice","code":"var"},{"text":" introducer)","type":"text"},{"text":" ","type":"text"},{"text":"and not a constant (with the ","type":"text"},{"code":"let","type":"codeVoice"},{"text":" introducer)","type":"text"},{"text":" ","type":"text"},{"text":"because items are added and removed in the examples below.","type":"text"}]}],"name":"Note","style":"note","type":"aside"},{"inlineContent":[{"type":"text","text":"A set type can’t be inferred from an array literal alone,"},{"text":" ","type":"text"},{"text":"so the type ","type":"text"},{"type":"codeVoice","code":"Set"},{"text":" must be explicitly declared.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"However, because of Swift’s type inference,"},{"type":"text","text":" "},{"text":"you don’t have to write the type of the set’s elements","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"if you’re initializing it with an array literal"},{"type":"text","text":" "},{"type":"text","text":"that contains values of just one type."},{"type":"text","text":" "},{"text":"The initialization of ","type":"text"},{"type":"codeVoice","code":"favoriteGenres"},{"type":"text","text":" could have been written in a shorter form instead:"}],"type":"paragraph"},{"syntax":"swift","code":["var favoriteGenres: Set = [\"Rock\", \"Classical\", \"Hip hop\"]"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Because all values in the array literal are of the same type,"},{"type":"text","text":" "},{"text":"Swift can infer that ","type":"text"},{"type":"codeVoice","code":"Set<String>"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"the correct type to use for the "},{"code":"favoriteGenres","type":"codeVoice"},{"text":" variable.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"Acceso-y-modificaci%C3%B3n-de-un-set","text":"Acceso y modificación de un set"},{"inlineContent":[{"text":"You access and modify a set through its methods and properties.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To find out the number of items in a set,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"check its read-only "},{"code":"count","type":"codeVoice"},{"text":" property:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["print(\"I have \\(favoriteGenres.count) favorite music genres.\")","\/\/ Prints \"I have 3 favorite music genres.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the Boolean "},{"type":"codeVoice","code":"isEmpty"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"as a shortcut for checking whether the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property is equal to "},{"type":"codeVoice","code":"0"},{"type":"text","text":":"}]},{"code":["if favoriteGenres.isEmpty {","    print(\"As far as music goes, I'm not picky.\")","} else {","    print(\"I have particular music preferences.\")","}","\/\/ Prints \"I have particular music preferences.\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"You can add a new item into a set by calling the set’s ","type":"text"},{"type":"codeVoice","code":"insert(_:)"},{"text":" method:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["favoriteGenres.insert(\"Jazz\")","\/\/ favoriteGenres now contains 4 items"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can remove an item from a set by calling the set’s "},{"code":"remove(_:)","type":"codeVoice"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"which removes the item if it’s a member of the set,"},{"text":" ","type":"text"},{"text":"and returns the removed value,","type":"text"},{"type":"text","text":" "},{"text":"or returns ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if the set didn’t contain it."},{"text":" ","type":"text"},{"text":"Alternatively, all items in a set can be removed with its ","type":"text"},{"code":"removeAll()","type":"codeVoice"},{"text":" method.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["if let removedGenre = favoriteGenres.remove(\"Rock\") {","    print(\"\\(removedGenre)? I'm over it.\")","} else {","    print(\"I never much cared for that.\")","}","\/\/ Prints \"Rock? I'm over it.\""]},{"type":"paragraph","inlineContent":[{"text":"To check whether a set contains a particular item, use the ","type":"text"},{"code":"contains(_:)","type":"codeVoice"},{"text":" method.","type":"text"}]},{"syntax":"swift","code":["if favoriteGenres.contains(\"Funk\") {","    print(\"I get up on the good foot.\")","} else {","    print(\"It's too funky in here.\")","}","\/\/ Prints \"It's too funky in here.\""],"type":"codeListing"},{"type":"heading","level":3,"text":"Iterar sobre un set","anchor":"Iterar-sobre-un-set"},{"inlineContent":[{"type":"text","text":"You can iterate over the values in a set with a "},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"code":"in","type":"codeVoice"},{"text":" loop.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["for genre in favoriteGenres {","    print(\"\\(genre)\")","}","\/\/ Classical","\/\/ Jazz","\/\/ Hip hop"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more about the "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"text":" loop, see ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Ciclos-for-in","isActive":true},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"Swift’s "},{"code":"Set","type":"codeVoice"},{"text":" type doesn’t have a defined ordering.","type":"text"},{"text":" ","type":"text"},{"text":"To iterate over the values of a set in a specific order,","type":"text"},{"type":"text","text":" "},{"text":"use the ","type":"text"},{"type":"codeVoice","code":"sorted()"},{"text":" method,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which returns the set’s elements as an array"},{"type":"text","text":" "},{"type":"text","text":"sorted using the "},{"type":"codeVoice","code":"<"},{"type":"text","text":" operator."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["for genre in favoriteGenres.sorted() {","    print(\"\\(genre)\")","}","\/\/ Classical","\/\/ Hip hop","\/\/ Jazz"]},{"level":2,"type":"heading","anchor":"Ejecuci%C3%B3n-de-operaciones-de-sets","text":"Ejecución de operaciones de sets"},{"inlineContent":[{"type":"text","text":"You can efficiently perform fundamental set operations,"},{"text":" ","type":"text"},{"text":"such as combining two sets together,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"determining which values two sets have in common,"},{"type":"text","text":" "},{"text":"or determining whether two sets contain all, some, or none of the same values.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Operaciones de sets básicas","level":3,"anchor":"Operaciones-de-sets-b%C3%A1sicas"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The illustration below depicts two sets — "},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"type":"codeVoice","code":"b"},{"type":"text","text":" —"},{"text":" ","type":"text"},{"type":"text","text":"with the results of various set operations represented by the shaded regions."}]},{"type":"paragraph","inlineContent":[{"identifier":"setVennDiagram","type":"image"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"code":"intersection(_:)","type":"codeVoice"},{"type":"text","text":" method to create a new set with only the values common to both sets."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"symmetricDifference(_:)"},{"type":"text","text":" method to create a new set with values in either set, but not both."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"union(_:)"},{"type":"text","text":" method to create a new set with all of the values in both sets."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"subtracting(_:)"},{"type":"text","text":" method to create a new set with values not in the specified set."}],"type":"paragraph"}]}]},{"code":["let oddDigits: Set = [1, 3, 5, 7, 9]","let evenDigits: Set = [0, 2, 4, 6, 8]","let singleDigitPrimeNumbers: Set = [2, 3, 5, 7]","","oddDigits.union(evenDigits).sorted()","\/\/ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]","oddDigits.intersection(evenDigits).sorted()","\/\/ []","oddDigits.subtracting(singleDigitPrimeNumbers).sorted()","\/\/ [1, 9]","oddDigits.symmetricDifference(singleDigitPrimeNumbers).sorted()","\/\/ [1, 2, 9]"],"type":"codeListing","syntax":"swift"},{"type":"heading","text":"Membresía e igualdad de un set","level":3,"anchor":"Membres%C3%ADa-e-igualdad-de-un-set"},{"inlineContent":[{"type":"text","text":"The illustration below depicts three sets — "},{"type":"codeVoice","code":"a"},{"type":"text","text":", "},{"type":"codeVoice","code":"b"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"c"},{"type":"text","text":" —"},{"text":" ","type":"text"},{"text":"with overlapping regions representing elements shared among sets.","type":"text"},{"type":"text","text":" "},{"text":"Set ","type":"text"},{"type":"codeVoice","code":"a"},{"text":" is a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"superset","type":"text"}]},{"text":" of set ","type":"text"},{"type":"codeVoice","code":"b"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"because ","type":"text"},{"type":"codeVoice","code":"a"},{"type":"text","text":" contains all elements in "},{"type":"codeVoice","code":"b"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Conversely, set "},{"type":"codeVoice","code":"b"},{"type":"text","text":" is a "},{"type":"emphasis","inlineContent":[{"text":"subset","type":"text"}]},{"type":"text","text":" of set "},{"code":"a","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"because all elements in ","type":"text"},{"code":"b","type":"codeVoice"},{"type":"text","text":" are also contained by "},{"type":"codeVoice","code":"a"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Set ","type":"text"},{"type":"codeVoice","code":"b"},{"type":"text","text":" and set "},{"code":"c","type":"codeVoice"},{"text":" are ","type":"text"},{"inlineContent":[{"type":"text","text":"disjoint"}],"type":"emphasis"},{"type":"text","text":" with one another,"},{"text":" ","type":"text"},{"text":"because they share no elements in common.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"setEulerDiagram"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the “is equal” operator ("},{"code":"==","type":"codeVoice"},{"text":") to determine whether two sets contain all of the same values.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"isSubset(of:)"},{"type":"text","text":" method to determine whether all of the values of a set are contained in the specified set."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"code":"isSuperset(of:)","type":"codeVoice"},{"type":"text","text":" method to determine whether a set contains all of the values in a specified set."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Use the "},{"code":"isStrictSubset(of:)","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"isStrictSuperset(of:)"},{"text":" methods to determine whether a set is a subset or superset, but not equal to, a specified set.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"isDisjoint(with:)"},{"text":" method to determine whether two sets have no values in common.","type":"text"}],"type":"paragraph"}]}]},{"code":["let houseAnimals: Set = [\"🐶\", \"🐱\"]","let farmAnimals: Set = [\"🐮\", \"🐔\", \"🐑\", \"🐶\", \"🐱\"]","let cityAnimals: Set = [\"🐦\", \"🐭\"]","","houseAnimals.isSubset(of: farmAnimals)","\/\/ true","farmAnimals.isSuperset(of: houseAnimals)","\/\/ true","farmAnimals.isDisjoint(with: cityAnimals)","\/\/ true"],"type":"codeListing","syntax":"swift"},{"type":"heading","anchor":"Diccionarios","text":"Diccionarios","level":2},{"inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"type":"text","text":"dictionary"}],"type":"emphasis"},{"type":"text","text":" stores associations between"},{"type":"text","text":" "},{"text":"keys of the same type and values of the same type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in a collection with no defined ordering."},{"text":" ","type":"text"},{"text":"Each value is associated with a unique ","type":"text"},{"inlineContent":[{"type":"text","text":"key"}],"type":"emphasis"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which acts as an identifier for that value within the dictionary."},{"text":" ","type":"text"},{"type":"text","text":"Unlike items in an array, items in a dictionary don’t have a specified order."},{"text":" ","type":"text"},{"type":"text","text":"You use a dictionary when you need to look up values based on their identifier,"},{"text":" ","type":"text"},{"text":"in much the same way that a real-world dictionary is used to look up","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the definition for a particular word."}],"type":"paragraph"},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"Swift’s ","type":"text"},{"code":"Dictionary","type":"codeVoice"},{"text":" type is bridged to Foundation’s ","type":"text"},{"code":"NSDictionary","type":"codeVoice"},{"text":" class.","type":"text"}]},{"inlineContent":[{"text":"For more information about using ","type":"text"},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":" with Foundation and Cocoa,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/dictionary#2846239"},{"text":".","type":"text"}],"type":"paragraph"}]},{"level":3,"type":"heading","text":"Sintaxis concisa del tipo diccionario","anchor":"Sintaxis-concisa-del-tipo-diccionario"},{"type":"paragraph","inlineContent":[{"text":"The type of a Swift dictionary is written in full as ","type":"text"},{"type":"codeVoice","code":"Dictionary<Key, Value>"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"where ","type":"text"},{"type":"codeVoice","code":"Key"},{"type":"text","text":" is the type of value that can be used as a dictionary key,"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" is the type of value that the dictionary stores for those keys."}]},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A dictionary "},{"type":"codeVoice","code":"Key"},{"type":"text","text":" type must conform to the "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" protocol,"},{"text":" ","type":"text"},{"type":"text","text":"like a set’s value type."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also write the type of a dictionary in shorthand form as "},{"type":"codeVoice","code":"[Key: Value]"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Although the two forms are functionally identical,"},{"text":" ","type":"text"},{"text":"the shorthand form is preferred","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and is used throughout this guide when referring to the type of a dictionary."}]},{"text":"Creación de un diccionario vacío","anchor":"Creaci%C3%B3n-de-un-diccionario-vac%C3%ADo","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with arrays,"},{"type":"text","text":" "},{"type":"text","text":"you can create an empty "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" of a certain type by using initializer syntax:"}]},{"code":["var namesOfIntegers: [Int: String] = [:]","\/\/ namesOfIntegers is an empty [Int: String] dictionary"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example creates an empty dictionary of type "},{"code":"[Int: String]","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"to store human-readable names of integer values."},{"text":" ","type":"text"},{"type":"text","text":"Its keys are of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", and its values are of type "},{"code":"String","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the context already provides type information,"},{"type":"text","text":" "},{"text":"you can create an empty dictionary with an empty dictionary literal,","type":"text"},{"text":" ","type":"text"},{"text":"which is written as ","type":"text"},{"type":"codeVoice","code":"[:]"},{"text":" ","type":"text"},{"type":"text","text":"(a colon inside a pair of square brackets):"}]},{"type":"codeListing","code":["namesOfIntegers[16] = \"sixteen\"","\/\/ namesOfIntegers now contains 1 key-value pair","namesOfIntegers = [:]","\/\/ namesOfIntegers is once again an empty dictionary of type [Int: String]"],"syntax":"swift"},{"level":3,"text":"Creación de un diccionario a partir de un literal de diccionario","type":"heading","anchor":"Creaci%C3%B3n-de-un-diccionario-a-partir-de-un-literal-de-diccionario"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also initialize a dictionary with a "},{"type":"emphasis","inlineContent":[{"text":"dictionary literal","type":"text"}]},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which has a similar syntax to the array literal seen earlier."},{"type":"text","text":" "},{"type":"text","text":"A dictionary literal is a shorthand way to write"},{"type":"text","text":" "},{"text":"one or more key-value pairs as a ","type":"text"},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":" collection."}]},{"inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"type":"text","text":"key-value pair"}],"type":"emphasis"},{"text":" is a combination of a key and a value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In a dictionary literal,"},{"text":" ","type":"text"},{"type":"text","text":"the key and value in each key-value pair are separated by a colon."},{"text":" ","type":"text"},{"type":"text","text":"The key-value pairs are written as a list, separated by commas,"},{"text":" ","type":"text"},{"type":"text","text":"surrounded by a pair of square brackets:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["[<#key 1#>: <#value 1#>, <#key 2#>: <#value 2#>, <#key 3#>: <#value 3#>]"]},{"type":"paragraph","inlineContent":[{"text":"The example below creates a dictionary to store the names of international airports.","type":"text"},{"type":"text","text":" "},{"text":"In this dictionary, the keys are three-letter International Air Transport Association codes,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the values are airport names:"}]},{"syntax":"swift","code":["var airports: [String: String] = [\"YYZ\": \"Toronto Pearson\", \"DUB\": \"Dublin\"]"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"airports"},{"text":" dictionary is declared as having a type of ","type":"text"},{"type":"codeVoice","code":"[String: String]"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which means “a "},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":" whose keys are of type "},{"type":"codeVoice","code":"String"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and whose values are also of type ","type":"text"},{"type":"codeVoice","code":"String"},{"text":"”.","type":"text"}],"type":"paragraph"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"airports"},{"text":" dictionary is declared as a variable (with the ","type":"text"},{"code":"var","type":"codeVoice"},{"text":" introducer),","type":"text"},{"type":"text","text":" "},{"text":"and not a constant (with the ","type":"text"},{"code":"let","type":"codeVoice"},{"type":"text","text":" introducer),"},{"type":"text","text":" "},{"type":"text","text":"because more airports are added to the dictionary in the examples below."}]}],"name":"Note","style":"note"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"airports"},{"type":"text","text":" dictionary is initialized with"},{"type":"text","text":" "},{"type":"text","text":"a dictionary literal containing two key-value pairs."},{"text":" ","type":"text"},{"text":"The first pair has a key of ","type":"text"},{"type":"codeVoice","code":"\"YYZ\""},{"text":" and a value of ","type":"text"},{"type":"codeVoice","code":"\"Toronto Pearson\""},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The second pair has a key of "},{"code":"\"DUB\"","type":"codeVoice"},{"type":"text","text":" and a value of "},{"code":"\"Dublin\"","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This dictionary literal contains two ","type":"text"},{"code":"String: String","type":"codeVoice"},{"type":"text","text":" pairs."},{"text":" ","type":"text"},{"type":"text","text":"This key-value type matches the type of the "},{"type":"codeVoice","code":"airports"},{"text":" variable declaration","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(a dictionary with only "},{"type":"codeVoice","code":"String"},{"text":" keys, and only ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" values),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and so the assignment of the dictionary literal is permitted"},{"text":" ","type":"text"},{"type":"text","text":"as a way to initialize the "},{"code":"airports","type":"codeVoice"},{"text":" dictionary with two initial items.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with arrays,"},{"type":"text","text":" "},{"type":"text","text":"you don’t have to write the type of the dictionary"},{"type":"text","text":" "},{"text":"if you’re initializing it with a dictionary literal whose keys and values have consistent types.","type":"text"},{"text":" ","type":"text"},{"text":"The initialization of ","type":"text"},{"code":"airports","type":"codeVoice"},{"type":"text","text":" could have been written in a shorter form instead:"}]},{"syntax":"swift","type":"codeListing","code":["var airports = [\"YYZ\": \"Toronto Pearson\", \"DUB\": \"Dublin\"]"]},{"type":"paragraph","inlineContent":[{"text":"Because all keys in the literal are of the same type as each other,","type":"text"},{"type":"text","text":" "},{"text":"and likewise all values are of the same type as each other,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift can infer that "},{"type":"codeVoice","code":"[String: String]"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"the correct type to use for the "},{"code":"airports","type":"codeVoice"},{"type":"text","text":" dictionary."}]},{"text":"Acceso y modificación de un diccionario","type":"heading","anchor":"Acceso-y-modificaci%C3%B3n-de-un-diccionario","level":3},{"type":"paragraph","inlineContent":[{"text":"You access and modify a dictionary through its methods and properties,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or by using subscript syntax."}]},{"inlineContent":[{"text":"As with an array, you find out the number of items in a ","type":"text"},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"by checking its read-only "},{"code":"count","type":"codeVoice"},{"text":" property:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["print(\"The airports dictionary contains \\(airports.count) items.\")","\/\/ Prints \"The airports dictionary contains 2 items.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the Boolean "},{"code":"isEmpty","type":"codeVoice"},{"type":"text","text":" property"},{"text":" ","type":"text"},{"text":"as a shortcut for checking whether the ","type":"text"},{"type":"codeVoice","code":"count"},{"text":" property is equal to ","type":"text"},{"code":"0","type":"codeVoice"},{"type":"text","text":":"}]},{"type":"codeListing","code":["if airports.isEmpty {","    print(\"The airports dictionary is empty.\")","} else {","    print(\"The airports dictionary isn't empty.\")","}","\/\/ Prints \"The airports dictionary isn't empty.\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can add a new item to a dictionary with subscript syntax."},{"type":"text","text":" "},{"type":"text","text":"Use a new key of the appropriate type as the subscript index,"},{"type":"text","text":" "},{"type":"text","text":"and assign a new value of the appropriate type:"}]},{"syntax":"swift","code":["airports[\"LHR\"] = \"London\"","\/\/ the airports dictionary now contains 3 items"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can also use subscript syntax to change the value associated with a particular key:","type":"text"}]},{"type":"codeListing","code":["airports[\"LHR\"] = \"London Heathrow\"","\/\/ the value for \"LHR\" has been changed to \"London Heathrow\""],"syntax":"swift"},{"inlineContent":[{"text":"As an alternative to subscripting,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"use a dictionary’s "},{"code":"updateValue(_:forKey:)","type":"codeVoice"},{"text":" method","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to set or update the value for a particular key."},{"type":"text","text":" "},{"type":"text","text":"Like the subscript examples above, the "},{"code":"updateValue(_:forKey:)","type":"codeVoice"},{"type":"text","text":" method"},{"text":" ","type":"text"},{"type":"text","text":"sets a value for a key if none exists,"},{"type":"text","text":" "},{"type":"text","text":"or updates the value if that key already exists."},{"type":"text","text":" "},{"text":"Unlike a subscript, however,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"updateValue(_:forKey:)","type":"codeVoice"},{"type":"text","text":" method returns the "},{"inlineContent":[{"type":"text","text":"old"}],"type":"emphasis"},{"text":" value after performing an update.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This enables you to check whether or not an update took place."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"updateValue(_:forKey:)"},{"text":" method returns an optional value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the dictionary’s value type."},{"type":"text","text":" "},{"text":"For a dictionary that stores ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" values, for example,","type":"text"},{"type":"text","text":" "},{"text":"the method returns a value of type ","type":"text"},{"code":"String?","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or “optional "},{"code":"String","type":"codeVoice"},{"text":"”.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This optional value contains the old value for that key if one existed before the update,"},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" if no value existed:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["if let oldValue = airports.updateValue(\"Dublin Airport\", forKey: \"DUB\") {","    print(\"The old value for DUB was \\(oldValue).\")","}","\/\/ Prints \"The old value for DUB was Dublin.\""]},{"inlineContent":[{"type":"text","text":"You can also use subscript syntax to retrieve a value from the dictionary for a particular key."},{"text":" ","type":"text"},{"type":"text","text":"Because it’s possible to request a key for which no value exists,"},{"type":"text","text":" "},{"text":"a dictionary’s subscript returns an optional value of the dictionary’s value type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If the dictionary contains a value for the requested key,"},{"text":" ","type":"text"},{"text":"the subscript returns an optional value containing the existing value for that key.","type":"text"},{"text":" ","type":"text"},{"text":"Otherwise, the subscript returns ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["if let airportName = airports[\"DUB\"] {","    print(\"The name of the airport is \\(airportName).\")","} else {","    print(\"That airport isn't in the airports dictionary.\")","}","\/\/ Prints \"The name of the airport is Dublin Airport.\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can use subscript syntax to remove a key-value pair from a dictionary","type":"text"},{"text":" ","type":"text"},{"text":"by assigning a value of ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" for that key:"}]},{"type":"codeListing","code":["airports[\"APL\"] = \"Apple International\"","\/\/ \"Apple International\" isn't the real airport for APL, so delete it","airports[\"APL\"] = nil","\/\/ APL has now been removed from the dictionary"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, remove a key-value pair from a dictionary"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"code":"removeValue(forKey:)","type":"codeVoice"},{"type":"text","text":" method."},{"type":"text","text":" "},{"type":"text","text":"This method removes the key-value pair if it exists"},{"text":" ","type":"text"},{"type":"text","text":"and returns the removed value,"},{"type":"text","text":" "},{"type":"text","text":"or returns "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" if no value existed:"}]},{"syntax":"swift","code":["if let removedValue = airports.removeValue(forKey: \"DUB\") {","    print(\"The removed airport's name is \\(removedValue).\")","} else {","    print(\"The airports dictionary doesn't contain a value for DUB.\")","}","\/\/ Prints \"The removed airport's name is Dublin Airport.\""],"type":"codeListing"},{"type":"heading","text":"Iterar sobre un diccionario","level":3,"anchor":"Iterar-sobre-un-diccionario"},{"type":"paragraph","inlineContent":[{"text":"You can iterate over the key-value pairs in a dictionary with a ","type":"text"},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"text":" loop.","type":"text"},{"text":" ","type":"text"},{"text":"Each item in the dictionary is returned as a ","type":"text"},{"type":"codeVoice","code":"(key, value)"},{"type":"text","text":" tuple,"},{"type":"text","text":" "},{"type":"text","text":"and you can decompose the tuple’s members into temporary constants or variables"},{"type":"text","text":" "},{"text":"as part of the iteration:","type":"text"}]},{"syntax":"swift","code":["for (airportCode, airportName) in airports {","    print(\"\\(airportCode): \\(airportName)\")","}","\/\/ LHR: London Heathrow","\/\/ YYZ: Toronto Pearson"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"For more about the ","type":"text"},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"code":"in","type":"codeVoice"},{"type":"text","text":" loop, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Ciclos-for-in","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also retrieve an iterable collection of a dictionary’s keys or values"},{"text":" ","type":"text"},{"text":"by accessing its ","type":"text"},{"code":"keys","type":"codeVoice"},{"type":"text","text":" and "},{"code":"values","type":"codeVoice"},{"text":" properties:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["for airportCode in airports.keys {","    print(\"Airport code: \\(airportCode)\")","}","\/\/ Airport code: LHR","\/\/ Airport code: YYZ","","for airportName in airports.values {","    print(\"Airport name: \\(airportName)\")","}","\/\/ Airport name: London Heathrow","\/\/ Airport name: Toronto Pearson"]},{"inlineContent":[{"text":"If you need to use a dictionary’s keys or values","type":"text"},{"text":" ","type":"text"},{"text":"with an API that takes an ","type":"text"},{"type":"codeVoice","code":"Array"},{"text":" instance, initialize a new array","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"keys"},{"type":"text","text":" or "},{"type":"codeVoice","code":"values"},{"type":"text","text":" property:"}],"type":"paragraph"},{"syntax":"swift","code":["let airportCodes = [String](airports.keys)","\/\/ airportCodes is [\"LHR\", \"YYZ\"]","","let airportNames = [String](airports.values)","\/\/ airportNames is [\"London Heathrow\", \"Toronto Pearson\"]"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" type doesn’t have a defined ordering."},{"type":"text","text":" "},{"type":"text","text":"To iterate over the keys or values of a dictionary in a specific order,"},{"type":"text","text":" "},{"text":"use the ","type":"text"},{"code":"sorted()","type":"codeVoice"},{"type":"text","text":" method on its "},{"code":"keys","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"values"},{"type":"text","text":" property."}],"type":"paragraph"},{"content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo.","type":"text"}]},{"inlineContent":[{"text":"Conoce más acerca del uso del ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}],"style":"note","type":"aside","name":"Software Beta"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"title":"Tipos de colecciones"},"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"references":{"setVennDiagram":{"type":"image","variants":[{"url":"\/images\/org.swift.tspl\/setVennDiagram@2x.png","traits":["2x","light"]},{"traits":["2x","dark"],"url":"\/images\/org.swift.tspl\/setVennDiagram~dark@2x.png"}],"identifier":"setVennDiagram","alt":null},"https://developer.apple.com/es/support/beta-software/":{"url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"link","titleInlineContent":[{"type":"text","text":"software beta de Apple"}],"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","title":"software beta de Apple"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"kind":"article","url":"\/documentation\/the-swift-programming-language\/generics","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","type":"topic","role":"article","title":"Generics","abstract":[{"text":"Write code that works for multiple types and specify requirements for those types.","type":"text"}]},"CollectionTypes_intro":{"type":"image","variants":[{"url":"\/images\/org.swift.tspl\/CollectionTypes_intro~dark@2x.png","traits":["2x","dark"]}],"identifier":"CollectionTypes_intro","alt":null},"https://developer.apple.com/documentation/swift/hashable":{"type":"link","titleInlineContent":[{"type":"codeVoice","code":"Hashable"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/hashable","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/hashable","title":"Hashable"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","role":"article","url":"\/documentation\/the-swift-programming-language\/enumerations","title":"Enumeraciones","kind":"article","abstract":[{"type":"text","text":"Model custom types that define a list of possible values."}],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","url":"\/documentation\/the-swift-programming-language","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","type":"topic","role":"collection","title":"The Swift Programming Language (5.9)","abstract":[]},"setEulerDiagram":{"type":"image","variants":[{"url":"\/images\/org.swift.tspl\/setEulerDiagram@2x.png","traits":["2x","light"]},{"traits":["2x","dark"],"url":"\/images\/org.swift.tspl\/setEulerDiagram~dark@2x.png"}],"identifier":"setEulerDiagram","alt":null},"https://developer.apple.com/documentation/swift/set#2845530":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/set#2845530","type":"link","titleInlineContent":[{"type":"text","text":"Bridging Between Set and NSSet"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/set#2845530","title":"Bridging Between Set and NSSet"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"type":"topic","abstract":[{"type":"text","text":"Define requirements that conforming types must implement."}],"kind":"article","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","title":"Protocols","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Ciclos-for-in":{"url":"\/documentation\/the-swift-programming-language\/controlflow#Ciclos-for-in","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Ciclos-for-in","kind":"section","title":"Ciclos for-in"},"https://developer.apple.com/documentation/swift/array#2846730":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/array#2846730","type":"link","titleInlineContent":[{"type":"text","text":"Bridging Between Array and NSArray"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/array#2846730","title":"Bridging Between Array and NSArray"},"https://developer.apple.com/documentation/swift/dictionary#2846239":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/dictionary#2846239","type":"link","titleInlineContent":[{"type":"text","text":"Bridging Between Dictionary and NSDictionary"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/dictionary#2846239","title":"Bridging Between Dictionary and NSDictionary"}}}