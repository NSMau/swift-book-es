{"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"text":"Swift provides three primary ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"collection types"}]},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"known as arrays, sets, and dictionaries,"},{"type":"text","text":" "},{"type":"text","text":"for storing collections of values."},{"type":"text","text":" "},{"text":"Arrays are ordered collections of values.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Sets are unordered collections of unique values."},{"text":" ","type":"text"},{"text":"Dictionaries are unordered collections of key-value associations.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"CollectionTypes_intro"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Arrays, sets, and dictionaries in Swift are always clear about"},{"type":"text","text":" "},{"type":"text","text":"the types of values and keys that they can store."},{"type":"text","text":" "},{"text":"This means that you can’t insert a value of the wrong type","type":"text"},{"text":" ","type":"text"},{"text":"into a collection by mistake.","type":"text"},{"text":" ","type":"text"},{"text":"It also means you can be confident about the type of values","type":"text"},{"type":"text","text":" "},{"text":"you will retrieve from a collection.","type":"text"}]},{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s array, set, and dictionary types are implemented as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic collections"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For more about generic types and collections, see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","type":"reference","isActive":true},{"text":".","type":"text"}]}]},{"anchor":"Mutabilidad-de-las-colecciones","type":"heading","text":"Mutabilidad de las colecciones","level":2},{"inlineContent":[{"type":"text","text":"If you create an array, a set, or a dictionary, and assign it to a variable,"},{"text":" ","type":"text"},{"type":"text","text":"the collection that’s created will be "},{"inlineContent":[{"type":"text","text":"mutable"}],"type":"emphasis"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This means that you can change (or ","type":"text"},{"inlineContent":[{"type":"text","text":"mutate"}],"type":"emphasis"},{"type":"text","text":") the collection after it’s created"},{"type":"text","text":" "},{"type":"text","text":"by adding, removing, or changing items in the collection."},{"type":"text","text":" "},{"type":"text","text":"If you assign an array, a set, or a dictionary to a constant,"},{"type":"text","text":" "},{"type":"text","text":"that collection is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"immutable"}]},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and its size and contents can’t be changed."}],"type":"paragraph"},{"name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s good practice to create immutable collections"},{"type":"text","text":" "},{"text":"in all cases where the collection doesn’t need to change.","type":"text"},{"type":"text","text":" "},{"text":"Doing so makes it easier for you to reason about your code","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and enables the Swift compiler to optimize the performance of"},{"type":"text","text":" "},{"type":"text","text":"the collections you create."}]}],"type":"aside"},{"level":2,"type":"heading","text":"Arreglos","anchor":"Arreglos"},{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"inlineContent":[{"text":"array","type":"text"}],"type":"emphasis"},{"type":"text","text":" stores values of the same type in an ordered list."},{"type":"text","text":" "},{"type":"text","text":"The same value can appear in an array multiple times at different positions."}]},{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Swift’s ","type":"text"},{"code":"Array","type":"codeVoice"},{"type":"text","text":" type is bridged to Foundation’s "},{"type":"codeVoice","code":"NSArray"},{"type":"text","text":" class."}]},{"inlineContent":[{"text":"For more information about using ","type":"text"},{"type":"codeVoice","code":"Array"},{"type":"text","text":" with Foundation and Cocoa,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/array#2846730","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}],"style":"note"},{"level":3,"text":"Sintaxis concisa para el tipo arreglo","anchor":"Sintaxis-concisa-para-el-tipo-arreglo","type":"heading"},{"inlineContent":[{"text":"The type of a Swift array is written in full as ","type":"text"},{"type":"codeVoice","code":"Array<Element>"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"where "},{"type":"codeVoice","code":"Element"},{"text":" is the type of values the array is allowed to store.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can also write the type of an array in shorthand form as "},{"type":"codeVoice","code":"[Element]"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Although the two forms are functionally identical,"},{"text":" ","type":"text"},{"text":"the shorthand form is preferred","type":"text"},{"text":" ","type":"text"},{"text":"and is used throughout this guide when referring to the type of an array.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"Creaci%C3%B3n-de-un-arreglo-vac%C3%ADo","text":"Creación de un arreglo vacío","type":"heading"},{"inlineContent":[{"type":"text","text":"You can create an empty array of a certain type"},{"type":"text","text":" "},{"type":"text","text":"using initializer syntax:"}],"type":"paragraph"},{"code":["var someInts: [Int] = []","print(\"someInts is of type [Int] with \\(someInts.count) items.\")","\/\/ Prints \"someInts is of type [Int] with 0 items.\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Note that the type of the ","type":"text"},{"type":"codeVoice","code":"someInts"},{"type":"text","text":" variable is inferred to be "},{"type":"codeVoice","code":"[Int]"},{"text":" ","type":"text"},{"type":"text","text":"from the type of the initializer."}]},{"inlineContent":[{"type":"text","text":"Alternatively, if the context already provides type information,"},{"text":" ","type":"text"},{"text":"such as a function argument or an already typed variable or constant,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can create an empty array with an empty array literal,"},{"text":" ","type":"text"},{"type":"text","text":"which is written as "},{"type":"codeVoice","code":"[]"},{"type":"text","text":" "},{"text":"(an empty pair of square brackets):","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["someInts.append(3)","\/\/ someInts now contains 1 value of type Int","someInts = []","\/\/ someInts is now an empty array, but is still of type [Int]"],"syntax":"swift"},{"type":"heading","level":3,"text":"Creación de un arreglo con un valor predeterminado","anchor":"Creaci%C3%B3n-de-un-arreglo-con-un-valor-predeterminado"},{"inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" type also provides"},{"text":" ","type":"text"},{"type":"text","text":"an initializer for creating an array of a certain size"},{"type":"text","text":" "},{"type":"text","text":"with all of its values set to the same default value."},{"type":"text","text":" "},{"text":"You pass this initializer","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a default value of the appropriate type (called "},{"code":"repeating","type":"codeVoice"},{"type":"text","text":"):"},{"text":" ","type":"text"},{"text":"and the number of times that value is repeated in the new array (called ","type":"text"},{"type":"codeVoice","code":"count"},{"type":"text","text":"):"}],"type":"paragraph"},{"code":["var threeDoubles = Array(repeating: 0.0, count: 3)","\/\/ threeDoubles is of type [Double], and equals [0.0, 0.0, 0.0]"],"syntax":"swift","type":"codeListing"},{"type":"heading","level":3,"anchor":"Creaci%C3%B3n-de-un-arreglo-sumando-dos-arreglos","text":"Creación de un arreglo sumando dos arreglos"},{"inlineContent":[{"type":"text","text":"You can create a new array by adding together two existing arrays with compatible types"},{"text":" ","type":"text"},{"text":"with the addition operator (","type":"text"},{"type":"codeVoice","code":"+"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"The new array’s type is inferred from the type of the two arrays you add together:"}],"type":"paragraph"},{"syntax":"swift","code":["var anotherThreeDoubles = Array(repeating: 2.5, count: 3)","\/\/ anotherThreeDoubles is of type [Double], and equals [2.5, 2.5, 2.5]","","var sixDoubles = threeDoubles + anotherThreeDoubles","\/\/ sixDoubles is inferred as [Double], and equals [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]"],"type":"codeListing"},{"text":"Creación de un arreglo a partir de un literal de arreglo","anchor":"Creaci%C3%B3n-de-un-arreglo-a-partir-de-un-literal-de-arreglo","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"You can also initialize an array with an ","type":"text"},{"inlineContent":[{"type":"text","text":"array literal"}],"type":"emphasis"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is a shorthand way to write one or more values as an array collection."},{"type":"text","text":" "},{"type":"text","text":"An array literal is written as a list of values, separated by commas,"},{"type":"text","text":" "},{"type":"text","text":"surrounded by a pair of square brackets:"}]},{"syntax":"swift","type":"codeListing","code":["[<#value 1#>, <#value 2#>, <#value 3#>]"]},{"type":"paragraph","inlineContent":[{"text":"The example below creates an array called ","type":"text"},{"type":"codeVoice","code":"shoppingList"},{"type":"text","text":" to store "},{"code":"String","type":"codeVoice"},{"text":" values:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["var shoppingList: [String] = [\"Eggs\", \"Milk\"]","\/\/ shoppingList has been initialized with two initial items"]},{"inlineContent":[{"type":"text","text":"The "},{"code":"shoppingList","type":"codeVoice"},{"type":"text","text":" variable is declared as"},{"type":"text","text":" "},{"text":"“an array of string values”, written as ","type":"text"},{"code":"[String]","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Because this particular array has specified a value type of "},{"code":"String","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it’s allowed to store "},{"code":"String","type":"codeVoice"},{"text":" values only.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Here, the "},{"code":"shoppingList","type":"codeVoice"},{"text":" array is initialized with two ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" values"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"\"Eggs\""},{"type":"text","text":" and "},{"type":"codeVoice","code":"\"Milk\""},{"text":"), written within an array literal.","type":"text"}],"type":"paragraph"},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"shoppingList"},{"text":" array is declared as a variable (with the ","type":"text"},{"code":"var","type":"codeVoice"},{"text":" introducer)","type":"text"},{"type":"text","text":" "},{"text":"and not a constant (with the ","type":"text"},{"code":"let","type":"codeVoice"},{"type":"text","text":" introducer)"},{"text":" ","type":"text"},{"text":"because more items are added to the shopping list in the examples below.","type":"text"}]}]},{"inlineContent":[{"type":"text","text":"In this case, the array literal contains two "},{"type":"codeVoice","code":"String"},{"text":" values and nothing else.","type":"text"},{"type":"text","text":" "},{"text":"This matches the type of the ","type":"text"},{"type":"codeVoice","code":"shoppingList"},{"type":"text","text":" variable’s declaration"},{"type":"text","text":" "},{"type":"text","text":"(an array that can only contain "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values),"},{"type":"text","text":" "},{"text":"and so the assignment of the array literal is permitted","type":"text"},{"type":"text","text":" "},{"text":"as a way to initialize ","type":"text"},{"type":"codeVoice","code":"shoppingList"},{"text":" with two initial items.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Thanks to Swift’s type inference,"},{"text":" ","type":"text"},{"type":"text","text":"you don’t have to write the type of the array"},{"text":" ","type":"text"},{"text":"if you’re initializing it with an array literal containing values of the same type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The initialization of "},{"type":"codeVoice","code":"shoppingList"},{"type":"text","text":" could have been written in a shorter form instead:"}]},{"type":"codeListing","syntax":"swift","code":["var shoppingList = [\"Eggs\", \"Milk\"]"]},{"inlineContent":[{"text":"Because all values in the array literal are of the same type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift can infer that "},{"type":"codeVoice","code":"[String]"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"the correct type to use for the "},{"code":"shoppingList","type":"codeVoice"},{"type":"text","text":" variable."}],"type":"paragraph"},{"anchor":"Acceso-y-modificaci%C3%B3n-de-un-arreglo","text":"Acceso y modificación de un arreglo","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You access and modify an array through its methods and properties,"},{"type":"text","text":" "},{"type":"text","text":"or by using subscript syntax."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To find out the number of items in an array, check its read-only "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property:"}]},{"type":"codeListing","code":["print(\"The shopping list contains \\(shoppingList.count) items.\")","\/\/ Prints \"The shopping list contains 2 items.\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Use the Boolean ","type":"text"},{"code":"isEmpty","type":"codeVoice"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"as a shortcut for checking whether the "},{"code":"count","type":"codeVoice"},{"type":"text","text":" property is equal to "},{"code":"0","type":"codeVoice"},{"type":"text","text":":"}]},{"type":"codeListing","code":["if shoppingList.isEmpty {","    print(\"The shopping list is empty.\")","} else {","    print(\"The shopping list isn't empty.\")","}","\/\/ Prints \"The shopping list isn't empty.\""],"syntax":"swift"},{"inlineContent":[{"text":"You can add a new item to the end of an array by calling the array’s ","type":"text"},{"code":"append(_:)","type":"codeVoice"},{"type":"text","text":" method:"}],"type":"paragraph"},{"code":["shoppingList.append(\"Flour\")","\/\/ shoppingList now contains 3 items, and someone is making pancakes"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Alternatively, append an array of one or more compatible items","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with the addition assignment operator ("},{"code":"+=","type":"codeVoice"},{"type":"text","text":"):"}]},{"type":"codeListing","code":["shoppingList += [\"Baking Powder\"]","\/\/ shoppingList now contains 4 items","shoppingList += [\"Chocolate Spread\", \"Cheese\", \"Butter\"]","\/\/ shoppingList now contains 7 items"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Retrieve a value from the array by using ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"subscript syntax","type":"text"}]},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"passing the index of the value you want to retrieve within square brackets","type":"text"},{"type":"text","text":" "},{"type":"text","text":"immediately after the name of the array:"}]},{"syntax":"swift","type":"codeListing","code":["var firstItem = shoppingList[0]","\/\/ firstItem is equal to \"Eggs\""]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The first item in the array has an index of ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":", not "},{"type":"codeVoice","code":"1"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Arrays in Swift are always zero-indexed."}]}],"name":"Note","type":"aside","style":"note"},{"inlineContent":[{"text":"You can use subscript syntax to change an existing value at a given index:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["shoppingList[0] = \"Six eggs\"","\/\/ the first item in the list is now equal to \"Six eggs\" rather than \"Eggs\""],"syntax":"swift"},{"inlineContent":[{"text":"When you use subscript syntax,","type":"text"},{"type":"text","text":" "},{"text":"the index you specify needs to be valid.","type":"text"},{"text":" ","type":"text"},{"text":"For example, writing ","type":"text"},{"code":"shoppingList[shoppingList.count] = \"Salt\"","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"to try to append an item to the end of the array"},{"type":"text","text":" "},{"text":"results in a runtime error.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can also use subscript syntax to change a range of values at once,"},{"type":"text","text":" "},{"type":"text","text":"even if the replacement set of values has a different length than the range you are replacing."},{"text":" ","type":"text"},{"type":"text","text":"The following example replaces "},{"code":"\"Chocolate Spread\"","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"\"Cheese\""},{"text":", and ","type":"text"},{"code":"\"Butter\"","type":"codeVoice"},{"type":"text","text":" "},{"text":"with ","type":"text"},{"type":"codeVoice","code":"\"Bananas\""},{"type":"text","text":" and "},{"type":"codeVoice","code":"\"Apples\""},{"type":"text","text":":"}],"type":"paragraph"},{"code":["shoppingList[4...6] = [\"Bananas\", \"Apples\"]","\/\/ shoppingList now contains 6 items"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"To insert an item into the array at a specified index,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"call the array’s "},{"type":"codeVoice","code":"insert(_:at:)"},{"type":"text","text":" method:"}]},{"syntax":"swift","type":"codeListing","code":["shoppingList.insert(\"Maple Syrup\", at: 0)","\/\/ shoppingList now contains 7 items","\/\/ \"Maple Syrup\" is now the first item in the list"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This call to the "},{"type":"codeVoice","code":"insert(_:at:)"},{"text":" method inserts a new item with a value of ","type":"text"},{"code":"\"Maple Syrup\"","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"at the very beginning of the shopping list,"},{"text":" ","type":"text"},{"type":"text","text":"indicated by an index of "},{"type":"codeVoice","code":"0"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"Similarly, you remove an item from the array with the "},{"type":"codeVoice","code":"remove(at:)"},{"text":" method.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This method removes the item at the specified index and returns the removed item"},{"text":" ","type":"text"},{"text":"(although you can ignore the returned value if you don’t need it):","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let mapleSyrup = shoppingList.remove(at: 0)","\/\/ the item that was at index 0 has just been removed","\/\/ shoppingList now contains 6 items, and no Maple Syrup","\/\/ the mapleSyrup constant is now equal to the removed \"Maple Syrup\" string"]},{"name":"Note","content":[{"inlineContent":[{"text":"If you try to access or modify a value for an index","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that’s outside of an array’s existing bounds,"},{"text":" ","type":"text"},{"type":"text","text":"you will trigger a runtime error."},{"text":" ","type":"text"},{"type":"text","text":"You can check that an index is valid before using it"},{"type":"text","text":" "},{"type":"text","text":"by comparing it to the array’s "},{"code":"count","type":"codeVoice"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"The largest valid index in an array is "},{"type":"codeVoice","code":"count - 1"},{"type":"text","text":" "},{"text":"because arrays are indexed from zero —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"however, when "},{"type":"codeVoice","code":"count"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":" (meaning the array is empty),"},{"type":"text","text":" "},{"text":"there are no valid indexes.","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"},{"type":"paragraph","inlineContent":[{"text":"Any gaps in an array are closed when an item is removed,","type":"text"},{"type":"text","text":" "},{"text":"and so the value at index ","type":"text"},{"code":"0","type":"codeVoice"},{"type":"text","text":" is once again equal to "},{"type":"codeVoice","code":"\"Six eggs\""},{"type":"text","text":":"}]},{"code":["firstItem = shoppingList[0]","\/\/ firstItem is now equal to \"Six eggs\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"If you want to remove the final item from an array,"},{"text":" ","type":"text"},{"type":"text","text":"use the "},{"type":"codeVoice","code":"removeLast()"},{"type":"text","text":" method rather than the "},{"type":"codeVoice","code":"remove(at:)"},{"type":"text","text":" method"},{"text":" ","type":"text"},{"type":"text","text":"to avoid the need to query the array’s "},{"type":"codeVoice","code":"count"},{"text":" property.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Like the "},{"type":"codeVoice","code":"remove(at:)"},{"type":"text","text":" method, "},{"type":"codeVoice","code":"removeLast()"},{"text":" returns the removed item:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let apples = shoppingList.removeLast()","\/\/ the last item in the array has just been removed","\/\/ shoppingList now contains 5 items, and no apples","\/\/ the apples constant is now equal to the removed \"Apples\" string"]},{"type":"heading","anchor":"Iterar-sobre-un-arreglo","text":"Iterar sobre un arreglo","level":3},{"inlineContent":[{"type":"text","text":"You can iterate over the entire set of values in an array with the "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"code":"in","type":"codeVoice"},{"text":" loop:","type":"text"}],"type":"paragraph"},{"code":["for item in shoppingList {","    print(item)","}","\/\/ Six eggs","\/\/ Milk","\/\/ Flour","\/\/ Baking Powder","\/\/ Bananas"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"If you need the integer index of each item as well as its value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"code":"enumerated()","type":"codeVoice"},{"type":"text","text":" method to iterate over the array instead."},{"type":"text","text":" "},{"text":"For each item in the array,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"enumerated()"},{"type":"text","text":" method returns a tuple"},{"text":" ","type":"text"},{"type":"text","text":"composed of an integer and the item."},{"type":"text","text":" "},{"text":"The integers start at zero and count up by one for each item;","type":"text"},{"type":"text","text":" "},{"text":"if you enumerate over a whole array,","type":"text"},{"type":"text","text":" "},{"text":"these integers match the items’ indices.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can decompose the tuple into temporary constants or variables"},{"text":" ","type":"text"},{"type":"text","text":"as part of the iteration:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["for (index, value) in shoppingList.enumerated() {","    print(\"Item \\(index + 1): \\(value)\")","}","\/\/ Item 1: Six eggs","\/\/ Item 2: Milk","\/\/ Item 3: Flour","\/\/ Item 4: Baking Powder","\/\/ Item 5: Bananas"]},{"inlineContent":[{"type":"text","text":"For more about the "},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"type":"codeVoice","code":"in"},{"text":" loop, see ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Ciclos-for-in","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"anchor":"Sets","text":"Sets"},{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"set","type":"text"}]},{"type":"text","text":" stores distinct values of the same type"},{"text":" ","type":"text"},{"type":"text","text":"in a collection with no defined ordering."},{"type":"text","text":" "},{"type":"text","text":"You can use a set instead of an array when the order of items isn’t important,"},{"text":" ","type":"text"},{"type":"text","text":"or when you need to ensure that an item only appears once."}],"type":"paragraph"},{"type":"aside","name":"Note","content":[{"inlineContent":[{"text":"Swift’s ","type":"text"},{"type":"codeVoice","code":"Set"},{"text":" type is bridged to Foundation’s ","type":"text"},{"type":"codeVoice","code":"NSSet"},{"type":"text","text":" class."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For more information about using ","type":"text"},{"type":"codeVoice","code":"Set"},{"type":"text","text":" with Foundation and Cocoa,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/set#2845530"},{"text":".","type":"text"}]}],"style":"note"},{"anchor":"Valores-hash-para-los-tipos-set","level":3,"text":"Valores hash para los tipos set","type":"heading"},{"inlineContent":[{"type":"text","text":"A type must be "},{"inlineContent":[{"text":"hashable","type":"text"}],"type":"emphasis"},{"text":" in order to be stored in a set —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that is, the type must provide a way to compute a "},{"type":"emphasis","inlineContent":[{"text":"hash value","type":"text"}]},{"text":" for itself.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"A hash value is an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value that’s the same for all objects that compare equally,"},{"text":" ","type":"text"},{"text":"such that if ","type":"text"},{"type":"codeVoice","code":"a == b"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the hash value of "},{"code":"a","type":"codeVoice"},{"text":" is equal to the hash value of ","type":"text"},{"code":"b","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"All of Swift’s basic types (such as ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", "},{"type":"codeVoice","code":"Double"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"are hashable by default, and can be used as set value types or dictionary key types.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Enumeration case values without associated values"},{"type":"text","text":" "},{"text":"(as described in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","type":"reference"},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are also hashable by default."}],"type":"paragraph"},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use your own custom types as set value types or dictionary key types"},{"type":"text","text":" "},{"type":"text","text":"by making them conform to the "},{"code":"Hashable","type":"codeVoice"},{"text":" protocol","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"from the Swift standard library."},{"text":" ","type":"text"},{"type":"text","text":"For information about implementing the required "},{"type":"codeVoice","code":"hash(into:)"},{"text":" method,","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/hashable"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"For information about conforming to protocols, see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","type":"reference","isActive":true},{"text":".","type":"text"}]}],"name":"Note"},{"anchor":"Sintaxis-del-tipo-set","level":3,"text":"Sintaxis del tipo set","type":"heading"},{"inlineContent":[{"text":"The type of a Swift set is written as ","type":"text"},{"type":"codeVoice","code":"Set<Element>"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"where ","type":"text"},{"type":"codeVoice","code":"Element"},{"text":" is the type that the set is allowed to store.","type":"text"},{"text":" ","type":"text"},{"text":"Unlike arrays, sets don’t have an equivalent shorthand form.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Creación e inicialización de un set vacío","level":3,"anchor":"Creaci%C3%B3n-e-inicializaci%C3%B3n-de-un-set-vac%C3%ADo"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can create an empty set of a certain type"},{"type":"text","text":" "},{"type":"text","text":"using initializer syntax:"}]},{"type":"codeListing","code":["var letters = Set<Character>()","print(\"letters is of type Set<Character> with \\(letters.count) items.\")","\/\/ Prints \"letters is of type Set<Character> with 0 items.\""],"syntax":"swift"},{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"The type of the "},{"code":"letters","type":"codeVoice"},{"type":"text","text":" variable is inferred to be "},{"type":"codeVoice","code":"Set<Character>"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"from the type of the initializer."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, if the context already provides type information,"},{"type":"text","text":" "},{"text":"such as a function argument or an already typed variable or constant,","type":"text"},{"type":"text","text":" "},{"text":"you can create an empty set with an empty array literal:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["letters.insert(\"a\")","\/\/ letters now contains 1 value of type Character","letters = []","\/\/ letters is now an empty set, but is still of type Set<Character>"]},{"anchor":"Creaci%C3%B3n-de-un-set-a-partir-de-un-literal-de-arreglo","type":"heading","level":3,"text":"Creación de un set a partir de un literal de arreglo"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also initialize a set with an array literal,"},{"type":"text","text":" "},{"text":"as a shorthand way to write one or more values as a set collection.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The example below creates a set called "},{"type":"codeVoice","code":"favoriteGenres"},{"type":"text","text":" to store "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var favoriteGenres: Set<String> = [\"Rock\", \"Classical\", \"Hip hop\"]","\/\/ favoriteGenres has been initialized with three initial items"]},{"inlineContent":[{"type":"text","text":"The "},{"code":"favoriteGenres","type":"codeVoice"},{"text":" variable is declared as","type":"text"},{"type":"text","text":" "},{"text":"“a set of ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" values”, written as "},{"type":"codeVoice","code":"Set<String>"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because this particular set has specified a value type of "},{"type":"codeVoice","code":"String"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"it’s ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"only","type":"text"}]},{"type":"text","text":" allowed to store "},{"type":"codeVoice","code":"String"},{"text":" values.","type":"text"},{"type":"text","text":" "},{"text":"Here, the ","type":"text"},{"code":"favoriteGenres","type":"codeVoice"},{"type":"text","text":" set is initialized with three "},{"type":"codeVoice","code":"String"},{"text":" values","type":"text"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"\"Rock\""},{"type":"text","text":", "},{"type":"codeVoice","code":"\"Classical\""},{"type":"text","text":", and "},{"code":"\"Hip hop\"","type":"codeVoice"},{"type":"text","text":"), written within an array literal."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"favoriteGenres","type":"codeVoice"},{"type":"text","text":" set is declared as a variable (with the "},{"type":"codeVoice","code":"var"},{"text":" introducer)","type":"text"},{"type":"text","text":" "},{"text":"and not a constant (with the ","type":"text"},{"code":"let","type":"codeVoice"},{"type":"text","text":" introducer)"},{"type":"text","text":" "},{"text":"because items are added and removed in the examples below.","type":"text"}]}],"style":"note","type":"aside","name":"Note"},{"inlineContent":[{"text":"A set type can’t be inferred from an array literal alone,","type":"text"},{"type":"text","text":" "},{"text":"so the type ","type":"text"},{"type":"codeVoice","code":"Set"},{"type":"text","text":" must be explicitly declared."},{"text":" ","type":"text"},{"text":"However, because of Swift’s type inference,","type":"text"},{"text":" ","type":"text"},{"text":"you don’t have to write the type of the set’s elements","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"if you’re initializing it with an array literal"},{"type":"text","text":" "},{"text":"that contains values of just one type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The initialization of "},{"type":"codeVoice","code":"favoriteGenres"},{"text":" could have been written in a shorter form instead:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["var favoriteGenres: Set = [\"Rock\", \"Classical\", \"Hip hop\"]"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Because all values in the array literal are of the same type,"},{"text":" ","type":"text"},{"type":"text","text":"Swift can infer that "},{"code":"Set<String>","type":"codeVoice"},{"type":"text","text":" is"},{"text":" ","type":"text"},{"text":"the correct type to use for the ","type":"text"},{"code":"favoriteGenres","type":"codeVoice"},{"type":"text","text":" variable."}],"type":"paragraph"},{"text":"Acceso y modificación de un set","level":3,"type":"heading","anchor":"Acceso-y-modificaci%C3%B3n-de-un-set"},{"type":"paragraph","inlineContent":[{"text":"You access and modify a set through its methods and properties.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To find out the number of items in a set,","type":"text"},{"text":" ","type":"text"},{"text":"check its read-only ","type":"text"},{"code":"count","type":"codeVoice"},{"text":" property:","type":"text"}]},{"code":["print(\"I have \\(favoriteGenres.count) favorite music genres.\")","\/\/ Prints \"I have 3 favorite music genres.\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the Boolean "},{"type":"codeVoice","code":"isEmpty"},{"text":" property","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as a shortcut for checking whether the "},{"type":"codeVoice","code":"count"},{"text":" property is equal to ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["if favoriteGenres.isEmpty {","    print(\"As far as music goes, I'm not picky.\")","} else {","    print(\"I have particular music preferences.\")","}","\/\/ Prints \"I have particular music preferences.\""]},{"inlineContent":[{"type":"text","text":"You can add a new item into a set by calling the set’s "},{"code":"insert(_:)","type":"codeVoice"},{"text":" method:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["favoriteGenres.insert(\"Jazz\")","\/\/ favoriteGenres now contains 4 items"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"You can remove an item from a set by calling the set’s "},{"code":"remove(_:)","type":"codeVoice"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"text":"which removes the item if it’s a member of the set,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and returns the removed value,"},{"type":"text","text":" "},{"type":"text","text":"or returns "},{"type":"codeVoice","code":"nil"},{"text":" if the set didn’t contain it.","type":"text"},{"type":"text","text":" "},{"text":"Alternatively, all items in a set can be removed with its ","type":"text"},{"type":"codeVoice","code":"removeAll()"},{"text":" method.","type":"text"}],"type":"paragraph"},{"code":["if let removedGenre = favoriteGenres.remove(\"Rock\") {","    print(\"\\(removedGenre)? I'm over it.\")","} else {","    print(\"I never much cared for that.\")","}","\/\/ Prints \"Rock? I'm over it.\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To check whether a set contains a particular item, use the "},{"code":"contains(_:)","type":"codeVoice"},{"type":"text","text":" method."}]},{"type":"codeListing","syntax":"swift","code":["if favoriteGenres.contains(\"Funk\") {","    print(\"I get up on the good foot.\")","} else {","    print(\"It's too funky in here.\")","}","\/\/ Prints \"It's too funky in here.\""]},{"level":3,"text":"Iterar sobre un set","anchor":"Iterar-sobre-un-set","type":"heading"},{"inlineContent":[{"type":"text","text":"You can iterate over the values in a set with a "},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop."}],"type":"paragraph"},{"code":["for genre in favoriteGenres {","    print(\"\\(genre)\")","}","\/\/ Classical","\/\/ Jazz","\/\/ Hip hop"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"For more about the "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Ciclos-for-in","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Swift’s ","type":"text"},{"type":"codeVoice","code":"Set"},{"type":"text","text":" type doesn’t have a defined ordering."},{"type":"text","text":" "},{"type":"text","text":"To iterate over the values of a set in a specific order,"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"codeVoice","code":"sorted()"},{"text":" method,","type":"text"},{"type":"text","text":" "},{"text":"which returns the set’s elements as an array","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"sorted using the "},{"code":"<","type":"codeVoice"},{"type":"text","text":" operator."}]},{"syntax":"swift","type":"codeListing","code":["for genre in favoriteGenres.sorted() {","    print(\"\\(genre)\")","}","\/\/ Classical","\/\/ Hip hop","\/\/ Jazz"]},{"level":2,"text":"Ejecución de operaciones de sets","type":"heading","anchor":"Ejecuci%C3%B3n-de-operaciones-de-sets"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can efficiently perform fundamental set operations,"},{"type":"text","text":" "},{"type":"text","text":"such as combining two sets together,"},{"text":" ","type":"text"},{"text":"determining which values two sets have in common,","type":"text"},{"text":" ","type":"text"},{"text":"or determining whether two sets contain all, some, or none of the same values.","type":"text"}]},{"anchor":"Operaciones-de-sets-b%C3%A1sicas","text":"Operaciones de sets básicas","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The illustration below depicts two sets — "},{"code":"a","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"b"},{"type":"text","text":" —"},{"type":"text","text":" "},{"text":"with the results of various set operations represented by the shaded regions.","type":"text"}]},{"inlineContent":[{"identifier":"setVennDiagram","type":"image"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"code":"intersection(_:)","type":"codeVoice"},{"type":"text","text":" method to create a new set with only the values common to both sets."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"symmetricDifference(_:)"},{"type":"text","text":" method to create a new set with values in either set, but not both."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"union(_:)"},{"text":" method to create a new set with all of the values in both sets.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"subtracting(_:)"},{"text":" method to create a new set with values not in the specified set.","type":"text"}]}]}]},{"code":["let oddDigits: Set = [1, 3, 5, 7, 9]","let evenDigits: Set = [0, 2, 4, 6, 8]","let singleDigitPrimeNumbers: Set = [2, 3, 5, 7]","","oddDigits.union(evenDigits).sorted()","\/\/ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]","oddDigits.intersection(evenDigits).sorted()","\/\/ []","oddDigits.subtracting(singleDigitPrimeNumbers).sorted()","\/\/ [1, 9]","oddDigits.symmetricDifference(singleDigitPrimeNumbers).sorted()","\/\/ [1, 2, 9]"],"type":"codeListing","syntax":"swift"},{"level":3,"type":"heading","text":"Membresía e igualdad de un set","anchor":"Membres%C3%ADa-e-igualdad-de-un-set"},{"inlineContent":[{"text":"The illustration below depicts three sets — ","type":"text"},{"type":"codeVoice","code":"a"},{"type":"text","text":", "},{"type":"codeVoice","code":"b"},{"type":"text","text":" and "},{"code":"c","type":"codeVoice"},{"type":"text","text":" —"},{"text":" ","type":"text"},{"text":"with overlapping regions representing elements shared among sets.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Set "},{"type":"codeVoice","code":"a"},{"type":"text","text":" is a "},{"inlineContent":[{"type":"text","text":"superset"}],"type":"emphasis"},{"text":" of set ","type":"text"},{"code":"b","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"because "},{"type":"codeVoice","code":"a"},{"type":"text","text":" contains all elements in "},{"type":"codeVoice","code":"b"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Conversely, set "},{"type":"codeVoice","code":"b"},{"text":" is a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"subset"}]},{"text":" of set ","type":"text"},{"code":"a","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because all elements in "},{"type":"codeVoice","code":"b"},{"text":" are also contained by ","type":"text"},{"type":"codeVoice","code":"a"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Set ","type":"text"},{"type":"codeVoice","code":"b"},{"text":" and set ","type":"text"},{"type":"codeVoice","code":"c"},{"type":"text","text":" are "},{"inlineContent":[{"text":"disjoint","type":"text"}],"type":"emphasis"},{"text":" with one another,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"because they share no elements in common."}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"setEulerDiagram"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Use the “is equal” operator ("},{"code":"==","type":"codeVoice"},{"type":"text","text":") to determine whether two sets contain all of the same values."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"code":"isSubset(of:)","type":"codeVoice"},{"text":" method to determine whether all of the values of a set are contained in the specified set.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"code":"isSuperset(of:)","type":"codeVoice"},{"text":" method to determine whether a set contains all of the values in a specified set.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"isStrictSubset(of:)"},{"type":"text","text":" or "},{"code":"isStrictSuperset(of:)","type":"codeVoice"},{"text":" methods to determine whether a set is a subset or superset, but not equal to, a specified set.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"isDisjoint(with:)"},{"text":" method to determine whether two sets have no values in common.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"codeListing","syntax":"swift","code":["let houseAnimals: Set = [\"🐶\", \"🐱\"]","let farmAnimals: Set = [\"🐮\", \"🐔\", \"🐑\", \"🐶\", \"🐱\"]","let cityAnimals: Set = [\"🐦\", \"🐭\"]","","houseAnimals.isSubset(of: farmAnimals)","\/\/ true","farmAnimals.isSuperset(of: houseAnimals)","\/\/ true","farmAnimals.isDisjoint(with: cityAnimals)","\/\/ true"]},{"type":"heading","text":"Diccionarios","level":2,"anchor":"Diccionarios"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"dictionary"}]},{"text":" stores associations between","type":"text"},{"type":"text","text":" "},{"text":"keys of the same type and values of the same type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in a collection with no defined ordering."},{"text":" ","type":"text"},{"type":"text","text":"Each value is associated with a unique "},{"inlineContent":[{"type":"text","text":"key"}],"type":"emphasis"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which acts as an identifier for that value within the dictionary."},{"text":" ","type":"text"},{"type":"text","text":"Unlike items in an array, items in a dictionary don’t have a specified order."},{"text":" ","type":"text"},{"text":"You use a dictionary when you need to look up values based on their identifier,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in much the same way that a real-world dictionary is used to look up"},{"type":"text","text":" "},{"type":"text","text":"the definition for a particular word."}]},{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":" type is bridged to Foundation’s "},{"type":"codeVoice","code":"NSDictionary"},{"text":" class.","type":"text"}]},{"inlineContent":[{"text":"For more information about using ","type":"text"},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" with Foundation and Cocoa,"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/dictionary#2846239","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"level":3,"text":"Sintaxis concisa del tipo diccionario","type":"heading","anchor":"Sintaxis-concisa-del-tipo-diccionario"},{"inlineContent":[{"text":"The type of a Swift dictionary is written in full as ","type":"text"},{"type":"codeVoice","code":"Dictionary<Key, Value>"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"where "},{"code":"Key","type":"codeVoice"},{"type":"text","text":" is the type of value that can be used as a dictionary key,"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"Value","type":"codeVoice"},{"text":" is the type of value that the dictionary stores for those keys.","type":"text"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A dictionary "},{"code":"Key","type":"codeVoice"},{"text":" type must conform to the ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" protocol,"},{"type":"text","text":" "},{"type":"text","text":"like a set’s value type."}]}],"name":"Note","style":"note","type":"aside"},{"inlineContent":[{"type":"text","text":"You can also write the type of a dictionary in shorthand form as "},{"type":"codeVoice","code":"[Key: Value]"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Although the two forms are functionally identical,","type":"text"},{"type":"text","text":" "},{"text":"the shorthand form is preferred","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and is used throughout this guide when referring to the type of a dictionary."}],"type":"paragraph"},{"anchor":"Creaci%C3%B3n-de-un-diccionario-vac%C3%ADo","text":"Creación de un diccionario vacío","type":"heading","level":3},{"inlineContent":[{"text":"As with arrays,","type":"text"},{"type":"text","text":" "},{"text":"you can create an empty ","type":"text"},{"type":"codeVoice","code":"Dictionary"},{"text":" of a certain type by using initializer syntax:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["var namesOfIntegers: [Int: String] = [:]","\/\/ namesOfIntegers is an empty [Int: String] dictionary"],"type":"codeListing"},{"inlineContent":[{"text":"This example creates an empty dictionary of type ","type":"text"},{"code":"[Int: String]","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"to store human-readable names of integer values."},{"type":"text","text":" "},{"text":"Its keys are of type ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":", and its values are of type "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"If the context already provides type information,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can create an empty dictionary with an empty dictionary literal,"},{"type":"text","text":" "},{"type":"text","text":"which is written as "},{"type":"codeVoice","code":"[:]"},{"text":" ","type":"text"},{"text":"(a colon inside a pair of square brackets):","type":"text"}],"type":"paragraph"},{"code":["namesOfIntegers[16] = \"sixteen\"","\/\/ namesOfIntegers now contains 1 key-value pair","namesOfIntegers = [:]","\/\/ namesOfIntegers is once again an empty dictionary of type [Int: String]"],"syntax":"swift","type":"codeListing"},{"type":"heading","level":3,"anchor":"Creaci%C3%B3n-de-un-diccionario-a-partir-de-un-literal-de-diccionario","text":"Creación de un diccionario a partir de un literal de diccionario"},{"inlineContent":[{"type":"text","text":"You can also initialize a dictionary with a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"dictionary literal"}]},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which has a similar syntax to the array literal seen earlier."},{"type":"text","text":" "},{"text":"A dictionary literal is a shorthand way to write","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"one or more key-value pairs as a "},{"type":"codeVoice","code":"Dictionary"},{"text":" collection.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"key-value pair","type":"text"}]},{"text":" is a combination of a key and a value.","type":"text"},{"text":" ","type":"text"},{"text":"In a dictionary literal,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the key and value in each key-value pair are separated by a colon."},{"text":" ","type":"text"},{"type":"text","text":"The key-value pairs are written as a list, separated by commas,"},{"text":" ","type":"text"},{"type":"text","text":"surrounded by a pair of square brackets:"}],"type":"paragraph"},{"code":["[<#key 1#>: <#value 1#>, <#key 2#>: <#value 2#>, <#key 3#>: <#value 3#>]"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The example below creates a dictionary to store the names of international airports.","type":"text"},{"type":"text","text":" "},{"text":"In this dictionary, the keys are three-letter International Air Transport Association codes,","type":"text"},{"type":"text","text":" "},{"text":"and the values are airport names:","type":"text"}]},{"syntax":"swift","code":["var airports: [String: String] = [\"YYZ\": \"Toronto Pearson\", \"DUB\": \"Dublin\"]"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"airports"},{"type":"text","text":" dictionary is declared as having a type of "},{"code":"[String: String]","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which means “a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" whose keys are of type "},{"type":"codeVoice","code":"String"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and whose values are also of type "},{"code":"String","type":"codeVoice"},{"text":"”.","type":"text"}]},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"airports"},{"type":"text","text":" dictionary is declared as a variable (with the "},{"type":"codeVoice","code":"var"},{"type":"text","text":" introducer),"},{"text":" ","type":"text"},{"text":"and not a constant (with the ","type":"text"},{"type":"codeVoice","code":"let"},{"type":"text","text":" introducer),"},{"type":"text","text":" "},{"type":"text","text":"because more airports are added to the dictionary in the examples below."}]}],"name":"Note"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"airports"},{"text":" dictionary is initialized with","type":"text"},{"type":"text","text":" "},{"text":"a dictionary literal containing two key-value pairs.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The first pair has a key of "},{"type":"codeVoice","code":"\"YYZ\""},{"text":" and a value of ","type":"text"},{"code":"\"Toronto Pearson\"","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"The second pair has a key of ","type":"text"},{"code":"\"DUB\"","type":"codeVoice"},{"type":"text","text":" and a value of "},{"type":"codeVoice","code":"\"Dublin\""},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This dictionary literal contains two "},{"code":"String: String","type":"codeVoice"},{"type":"text","text":" pairs."},{"type":"text","text":" "},{"text":"This key-value type matches the type of the ","type":"text"},{"code":"airports","type":"codeVoice"},{"type":"text","text":" variable declaration"},{"text":" ","type":"text"},{"text":"(a dictionary with only ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" keys, and only "},{"code":"String","type":"codeVoice"},{"type":"text","text":" values),"},{"text":" ","type":"text"},{"type":"text","text":"and so the assignment of the dictionary literal is permitted"},{"type":"text","text":" "},{"type":"text","text":"as a way to initialize the "},{"code":"airports","type":"codeVoice"},{"type":"text","text":" dictionary with two initial items."}]},{"inlineContent":[{"text":"As with arrays,","type":"text"},{"text":" ","type":"text"},{"text":"you don’t have to write the type of the dictionary","type":"text"},{"text":" ","type":"text"},{"text":"if you’re initializing it with a dictionary literal whose keys and values have consistent types.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The initialization of "},{"code":"airports","type":"codeVoice"},{"type":"text","text":" could have been written in a shorter form instead:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var airports = [\"YYZ\": \"Toronto Pearson\", \"DUB\": \"Dublin\"]"]},{"inlineContent":[{"type":"text","text":"Because all keys in the literal are of the same type as each other,"},{"type":"text","text":" "},{"type":"text","text":"and likewise all values are of the same type as each other,"},{"text":" ","type":"text"},{"type":"text","text":"Swift can infer that "},{"code":"[String: String]","type":"codeVoice"},{"type":"text","text":" is"},{"text":" ","type":"text"},{"text":"the correct type to use for the ","type":"text"},{"type":"codeVoice","code":"airports"},{"text":" dictionary.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"Acceso y modificación de un diccionario","anchor":"Acceso-y-modificaci%C3%B3n-de-un-diccionario"},{"inlineContent":[{"text":"You access and modify a dictionary through its methods and properties,","type":"text"},{"type":"text","text":" "},{"text":"or by using subscript syntax.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with an array, you find out the number of items in a "},{"code":"Dictionary","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"by checking its read-only "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property:"}]},{"type":"codeListing","syntax":"swift","code":["print(\"The airports dictionary contains \\(airports.count) items.\")","\/\/ Prints \"The airports dictionary contains 2 items.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the Boolean "},{"code":"isEmpty","type":"codeVoice"},{"text":" property","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as a shortcut for checking whether the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property is equal to "},{"type":"codeVoice","code":"0"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["if airports.isEmpty {","    print(\"The airports dictionary is empty.\")","} else {","    print(\"The airports dictionary isn't empty.\")","}","\/\/ Prints \"The airports dictionary isn't empty.\""]},{"inlineContent":[{"type":"text","text":"You can add a new item to a dictionary with subscript syntax."},{"text":" ","type":"text"},{"text":"Use a new key of the appropriate type as the subscript index,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and assign a new value of the appropriate type:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["airports[\"LHR\"] = \"London\"","\/\/ the airports dictionary now contains 3 items"]},{"type":"paragraph","inlineContent":[{"text":"You can also use subscript syntax to change the value associated with a particular key:","type":"text"}]},{"syntax":"swift","code":["airports[\"LHR\"] = \"London Heathrow\"","\/\/ the value for \"LHR\" has been changed to \"London Heathrow\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"As an alternative to subscripting,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"use a dictionary’s "},{"code":"updateValue(_:forKey:)","type":"codeVoice"},{"text":" method","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to set or update the value for a particular key."},{"type":"text","text":" "},{"text":"Like the subscript examples above, the ","type":"text"},{"code":"updateValue(_:forKey:)","type":"codeVoice"},{"type":"text","text":" method"},{"type":"text","text":" "},{"text":"sets a value for a key if none exists,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or updates the value if that key already exists."},{"text":" ","type":"text"},{"type":"text","text":"Unlike a subscript, however,"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"updateValue(_:forKey:)"},{"type":"text","text":" method returns the "},{"type":"emphasis","inlineContent":[{"text":"old","type":"text"}]},{"text":" value after performing an update.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This enables you to check whether or not an update took place."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"updateValue(_:forKey:)","type":"codeVoice"},{"type":"text","text":" method returns an optional value"},{"type":"text","text":" "},{"text":"of the dictionary’s value type.","type":"text"},{"type":"text","text":" "},{"text":"For a dictionary that stores ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" values, for example,"},{"type":"text","text":" "},{"type":"text","text":"the method returns a value of type "},{"type":"codeVoice","code":"String?"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"or “optional "},{"type":"codeVoice","code":"String"},{"text":"”.","type":"text"},{"text":" ","type":"text"},{"text":"This optional value contains the old value for that key if one existed before the update,","type":"text"},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" if no value existed:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["if let oldValue = airports.updateValue(\"Dublin Airport\", forKey: \"DUB\") {","    print(\"The old value for DUB was \\(oldValue).\")","}","\/\/ Prints \"The old value for DUB was Dublin.\""]},{"inlineContent":[{"type":"text","text":"You can also use subscript syntax to retrieve a value from the dictionary for a particular key."},{"type":"text","text":" "},{"type":"text","text":"Because it’s possible to request a key for which no value exists,"},{"text":" ","type":"text"},{"type":"text","text":"a dictionary’s subscript returns an optional value of the dictionary’s value type."},{"type":"text","text":" "},{"type":"text","text":"If the dictionary contains a value for the requested key,"},{"type":"text","text":" "},{"text":"the subscript returns an optional value containing the existing value for that key.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Otherwise, the subscript returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["if let airportName = airports[\"DUB\"] {","    print(\"The name of the airport is \\(airportName).\")","} else {","    print(\"That airport isn't in the airports dictionary.\")","}","\/\/ Prints \"The name of the airport is Dublin Airport.\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can use subscript syntax to remove a key-value pair from a dictionary","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by assigning a value of "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" for that key:"}]},{"type":"codeListing","code":["airports[\"APL\"] = \"Apple International\"","\/\/ \"Apple International\" isn't the real airport for APL, so delete it","airports[\"APL\"] = nil","\/\/ APL has now been removed from the dictionary"],"syntax":"swift"},{"inlineContent":[{"text":"Alternatively, remove a key-value pair from a dictionary","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"removeValue(forKey:)"},{"text":" method.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This method removes the key-value pair if it exists"},{"text":" ","type":"text"},{"type":"text","text":"and returns the removed value,"},{"type":"text","text":" "},{"type":"text","text":"or returns "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" if no value existed:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["if let removedValue = airports.removeValue(forKey: \"DUB\") {","    print(\"The removed airport's name is \\(removedValue).\")","} else {","    print(\"The airports dictionary doesn't contain a value for DUB.\")","}","\/\/ Prints \"The removed airport's name is Dublin Airport.\""]},{"type":"heading","text":"Iterar sobre un diccionario","level":3,"anchor":"Iterar-sobre-un-diccionario"},{"inlineContent":[{"text":"You can iterate over the key-value pairs in a dictionary with a ","type":"text"},{"code":"for","type":"codeVoice"},{"text":"-","type":"text"},{"type":"codeVoice","code":"in"},{"text":" loop.","type":"text"},{"text":" ","type":"text"},{"text":"Each item in the dictionary is returned as a ","type":"text"},{"code":"(key, value)","type":"codeVoice"},{"text":" tuple,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and you can decompose the tuple’s members into temporary constants or variables"},{"text":" ","type":"text"},{"type":"text","text":"as part of the iteration:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["for (airportCode, airportName) in airports {","    print(\"\\(airportCode): \\(airportName)\")","}","\/\/ LHR: London Heathrow","\/\/ YYZ: Toronto Pearson"]},{"inlineContent":[{"type":"text","text":"For more about the "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop, see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Ciclos-for-in","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"You can also retrieve an iterable collection of a dictionary’s keys or values","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by accessing its "},{"type":"codeVoice","code":"keys"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"values"},{"text":" properties:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["for airportCode in airports.keys {","    print(\"Airport code: \\(airportCode)\")","}","\/\/ Airport code: LHR","\/\/ Airport code: YYZ","","for airportName in airports.values {","    print(\"Airport name: \\(airportName)\")","}","\/\/ Airport name: London Heathrow","\/\/ Airport name: Toronto Pearson"]},{"type":"paragraph","inlineContent":[{"text":"If you need to use a dictionary’s keys or values","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with an API that takes an "},{"code":"Array","type":"codeVoice"},{"type":"text","text":" instance, initialize a new array"},{"type":"text","text":" "},{"text":"with the ","type":"text"},{"code":"keys","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"values"},{"type":"text","text":" property:"}]},{"syntax":"swift","type":"codeListing","code":["let airportCodes = [String](airports.keys)","\/\/ airportCodes is [\"LHR\", \"YYZ\"]","","let airportNames = [String](airports.values)","\/\/ airportNames is [\"London Heathrow\", \"Toronto Pearson\"]"]},{"inlineContent":[{"text":"Swift’s ","type":"text"},{"type":"codeVoice","code":"Dictionary"},{"text":" type doesn’t have a defined ordering.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"To iterate over the keys or values of a dictionary in a specific order,"},{"text":" ","type":"text"},{"text":"use the ","type":"text"},{"type":"codeVoice","code":"sorted()"},{"text":" method on its ","type":"text"},{"type":"codeVoice","code":"keys"},{"type":"text","text":" or "},{"code":"values","type":"codeVoice"},{"type":"text","text":" property."}],"type":"paragraph"},{"type":"aside","name":"Software Beta","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo."}]},{"inlineContent":[{"type":"text","text":"Conoce más acerca del uso del "},{"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]}]}],"metadata":{"title":"Tipos de colecciones"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"abstract":[{"type":"text","text":"Organize data using arrays, sets, and dictionaries."}],"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes","interfaceLanguage":"swift"},"sections":[],"references":{"https://developer.apple.com/documentation/swift/hashable":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/hashable","titleInlineContent":[{"type":"codeVoice","code":"Hashable"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/hashable","type":"link","title":"Hashable"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Ciclos-for-in":{"url":"\/documentation\/the-swift-programming-language\/controlflow#Ciclos-for-in","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Ciclos-for-in","type":"topic","title":"Ciclos for-in","kind":"section"},"setEulerDiagram":{"identifier":"setEulerDiagram","type":"image","alt":null,"variants":[{"traits":["2x","light"],"url":"\/images\/org.swift.tspl\/setEulerDiagram@2x.png"},{"url":"\/images\/org.swift.tspl\/setEulerDiagram~dark@2x.png","traits":["2x","dark"]}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"title":"Protocols","url":"\/documentation\/the-swift-programming-language\/protocols","kind":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","abstract":[{"type":"text","text":"Define requirements that conforming types must implement."}],"role":"article"},"setVennDiagram":{"identifier":"setVennDiagram","type":"image","alt":null,"variants":[{"traits":["2x","light"],"url":"\/images\/org.swift.tspl\/setVennDiagram@2x.png"},{"url":"\/images\/org.swift.tspl\/setVennDiagram~dark@2x.png","traits":["2x","dark"]}]},"https://developer.apple.com/documentation/swift/dictionary#2846239":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/dictionary#2846239","titleInlineContent":[{"type":"text","text":"Bridging Between Dictionary and NSDictionary"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/dictionary#2846239","type":"link","title":"Bridging Between Dictionary and NSDictionary"},"CollectionTypes_intro":{"identifier":"CollectionTypes_intro","type":"image","alt":null,"variants":[{"traits":["2x","dark"],"url":"\/images\/org.swift.tspl\/CollectionTypes_intro~dark@2x.png"}]},"https://developer.apple.com/documentation/swift/set#2845530":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/set#2845530","titleInlineContent":[{"type":"text","text":"Bridging Between Set and NSSet"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/set#2845530","type":"link","title":"Bridging Between Set and NSSet"},"https://developer.apple.com/documentation/swift/array#2846730":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/array#2846730","titleInlineContent":[{"type":"text","text":"Bridging Between Array and NSArray"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/array#2846730","type":"link","title":"Bridging Between Array and NSArray"},"https://developer.apple.com/es/support/beta-software/":{"url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","titleInlineContent":[{"type":"text","text":"software beta de Apple"}],"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"link","title":"software beta de Apple"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"url":"\/documentation\/the-swift-programming-language\/generics","abstract":[{"type":"text","text":"Write code that works for multiple types and specify requirements for those types."}],"kind":"article","title":"Generics","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","type":"topic","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"role":"collection","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","url":"\/documentation\/the-swift-programming-language","title":"The Swift Programming Language (6)","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"title":"Enumeraciones","abstract":[{"type":"text","text":"Model custom types that define a list of possible values."}],"url":"\/documentation\/the-swift-programming-language\/enumerations","role":"article","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","type":"topic"}}}