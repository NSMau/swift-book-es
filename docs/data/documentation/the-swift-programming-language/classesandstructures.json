{"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Model custom types that encapsulate data.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Structures"}]},{"text":" and ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"classes"}]},{"type":"text","text":" are general-purpose,"},{"type":"text","text":" "},{"text":"flexible constructs that become the building blocks of your program’s code.","type":"text"},{"text":" ","type":"text"},{"text":"You define properties and methods to add functionality to your structures and classes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"using the same syntax you use to define constants, variables, and functions."}]},{"type":"paragraph","inlineContent":[{"text":"Unlike other programming languages,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift doesn’t require you to create separate interface and implementation files"},{"type":"text","text":" "},{"text":"for custom structures and classes.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In Swift, you define a structure or class in a single file,"},{"type":"text","text":" "},{"type":"text","text":"and the external interface to that class or structure is"},{"type":"text","text":" "},{"type":"text","text":"automatically made available for other code to use."}]},{"style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"An instance of a class is traditionally known as an "},{"inlineContent":[{"type":"text","text":"object"}],"type":"emphasis"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, Swift structures and classes"},{"type":"text","text":" "},{"type":"text","text":"are much closer in functionality than in other languages,"},{"type":"text","text":" "},{"text":"and much of this chapter describes functionality that applies to","type":"text"},{"type":"text","text":" "},{"text":"instances of ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"either","type":"text"}]},{"text":" a class or a structure type.","type":"text"},{"text":" ","type":"text"},{"text":"Because of this, the more general term ","type":"text"},{"inlineContent":[{"type":"text","text":"instance"}],"type":"emphasis"},{"text":" is used.","type":"text"}],"type":"paragraph"}],"type":"aside"},{"text":"Comparando estructuras y clases","level":2,"anchor":"Comparando-estructuras-y-clases","type":"heading"},{"inlineContent":[{"type":"text","text":"Structures and classes in Swift have many things in common."},{"text":" ","type":"text"},{"text":"Both can:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Define properties to store values"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Define methods to provide functionality","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define subscripts to provide access to their values using subscript syntax"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define initializers to set up their initial state"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Be extended to expand their functionality beyond a default implementation","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Conform to protocols to provide standard functionality of a certain kind","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information, see"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","type":"reference"},{"text":", ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","isActive":true},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions"},{"text":", and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"Classes have additional capabilities that structures don’t have:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Inheritance enables one class to inherit the characteristics of another."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Type casting enables you to check and interpret the type of a class instance at runtime.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Deinitializers enable an instance of a class to free up any resources it has assigned.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Reference counting allows more than one reference to a class instance."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information, see"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","type":"reference","isActive":true},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting"},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"The additional capabilities that classes support"},{"type":"text","text":" "},{"type":"text","text":"come at the cost of increased complexity."},{"text":" ","type":"text"},{"type":"text","text":"As a general guideline,"},{"type":"text","text":" "},{"text":"prefer structures because they’re easier to reason about,","type":"text"},{"type":"text","text":" "},{"text":"and use classes when they’re appropriate or necessary.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In practice, this means most of the custom types you define"},{"type":"text","text":" "},{"type":"text","text":"will be structures and enumerations."},{"type":"text","text":" "},{"text":"For a more detailed comparison,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes"},{"type":"text","text":"."}],"type":"paragraph"},{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Classes and actors share many of the same characteristics and behaviors.","type":"text"},{"type":"text","text":" "},{"text":"For information about actors, see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency"},{"text":".","type":"text"}]}]},{"type":"heading","text":"Sintaxis de definición","level":3,"anchor":"Sintaxis-de-definici%C3%B3n"},{"inlineContent":[{"type":"text","text":"Structures and classes have a similar definition syntax."},{"type":"text","text":" "},{"text":"You introduce structures with the ","type":"text"},{"type":"codeVoice","code":"struct"},{"text":" keyword","type":"text"},{"type":"text","text":" "},{"text":"and classes with the ","type":"text"},{"code":"class","type":"codeVoice"},{"text":" keyword.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Both place their entire definition within a pair of braces:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct SomeStructure {","    \/\/ structure definition goes here","}","class SomeClass {","    \/\/ class definition goes here","}"]},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"text":"Whenever you define a new structure or class,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you define a new Swift type."},{"text":" ","type":"text"},{"type":"text","text":"Give types "},{"type":"codeVoice","code":"UpperCamelCase"},{"type":"text","text":" names"},{"text":" ","type":"text"},{"text":"(such as ","type":"text"},{"type":"codeVoice","code":"SomeStructure"},{"type":"text","text":" and "},{"type":"codeVoice","code":"SomeClass"},{"text":" here)","type":"text"},{"type":"text","text":" "},{"text":"to match the capitalization of standard Swift types","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(such as "},{"code":"String","type":"codeVoice"},{"type":"text","text":", "},{"code":"Int","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":")."},{"text":" ","type":"text"},{"type":"text","text":"Give properties and methods "},{"type":"codeVoice","code":"lowerCamelCase"},{"text":" names","type":"text"},{"type":"text","text":" "},{"text":"(such as ","type":"text"},{"code":"frameRate","type":"codeVoice"},{"type":"text","text":" and "},{"code":"incrementCount","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"to differentiate them from type names.","type":"text"}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of a structure definition and a class definition:"}]},{"syntax":"swift","code":["struct Resolution {","    var width = 0","    var height = 0","}","class VideoMode {","    var resolution = Resolution()","    var interlaced = false","    var frameRate = 0.0","    var name: String?","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The example above defines a new structure called ","type":"text"},{"type":"codeVoice","code":"Resolution"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"to describe a pixel-based display resolution."},{"type":"text","text":" "},{"text":"This structure has two stored properties called ","type":"text"},{"type":"codeVoice","code":"width"},{"type":"text","text":" and "},{"code":"height","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Stored properties are constants or variables that are bundled up and stored"},{"text":" ","type":"text"},{"type":"text","text":"as part of the structure or class."},{"text":" ","type":"text"},{"type":"text","text":"These two properties are inferred to be of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" "},{"text":"by setting them to an initial integer value of ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above also defines a new class called "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"to describe a specific video mode for video display."},{"type":"text","text":" "},{"type":"text","text":"This class has four variable stored properties."},{"type":"text","text":" "},{"type":"text","text":"The first, "},{"type":"codeVoice","code":"resolution"},{"type":"text","text":", is initialized with a new "},{"code":"Resolution","type":"codeVoice"},{"text":" structure instance,","type":"text"},{"type":"text","text":" "},{"text":"which infers a property type of ","type":"text"},{"code":"Resolution","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"For the other three properties,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"new "},{"type":"codeVoice","code":"VideoMode"},{"text":" instances will be initialized with","type":"text"},{"type":"text","text":" "},{"text":"an ","type":"text"},{"code":"interlaced","type":"codeVoice"},{"type":"text","text":" setting of "},{"type":"codeVoice","code":"false"},{"type":"text","text":" (meaning “noninterlaced video”),"},{"text":" ","type":"text"},{"type":"text","text":"a playback frame rate of "},{"type":"codeVoice","code":"0.0"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"and an optional ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" value called "},{"code":"name","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"name"},{"text":" property is automatically given a default value of ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"or “no ","type":"text"},{"code":"name","type":"codeVoice"},{"type":"text","text":" value”, because it’s of an optional type."}]},{"text":"Instancias de estructuras y clases","anchor":"Instancias-de-estructuras-y-clases","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"The "},{"code":"Resolution","type":"codeVoice"},{"type":"text","text":" structure definition and the "},{"type":"codeVoice","code":"VideoMode"},{"text":" class definition","type":"text"},{"type":"text","text":" "},{"text":"only describe what a ","type":"text"},{"type":"codeVoice","code":"Resolution"},{"type":"text","text":" or "},{"type":"codeVoice","code":"VideoMode"},{"text":" will look like.","type":"text"},{"type":"text","text":" "},{"text":"They themselves don’t describe a specific resolution or video mode.","type":"text"},{"text":" ","type":"text"},{"text":"To do that, you need to create an instance of the structure or class.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The syntax for creating instances is very similar for both structures and classes:"}],"type":"paragraph"},{"code":["let someResolution = Resolution()","let someVideoMode = VideoMode()"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Structures and classes both use initializer syntax for new instances."},{"text":" ","type":"text"},{"type":"text","text":"The simplest form of initializer syntax uses the type name of the class or structure"},{"type":"text","text":" "},{"type":"text","text":"followed by empty parentheses, such as "},{"type":"codeVoice","code":"Resolution()"},{"type":"text","text":" or "},{"code":"VideoMode()","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"This creates a new instance of the class or structure,"},{"text":" ","type":"text"},{"type":"text","text":"with any properties initialized to their default values."},{"type":"text","text":" "},{"text":"Class and structure initialization is described in more detail","type":"text"},{"text":" ","type":"text"},{"text":"in ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Accediendo-a-propiedades","text":"Accediendo a propiedades","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"You can access the properties of an instance using "},{"type":"emphasis","inlineContent":[{"text":"dot syntax","type":"text"}]},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"In dot syntax, you write the property name immediately after the instance name,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"separated by a period ("},{"code":".","type":"codeVoice"},{"type":"text","text":"), without any spaces:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["print(\"The width of someResolution is \\(someResolution.width)\")","\/\/ Prints \"The width of someResolution is 0\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example,"},{"type":"text","text":" "},{"type":"codeVoice","code":"someResolution.width"},{"text":" refers to the ","type":"text"},{"code":"width","type":"codeVoice"},{"type":"text","text":" property of "},{"type":"codeVoice","code":"someResolution"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and returns its default initial value of ","type":"text"},{"code":"0","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You can drill down into subproperties,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"such as the "},{"type":"codeVoice","code":"width"},{"type":"text","text":" property in the "},{"type":"codeVoice","code":"resolution"},{"type":"text","text":" property of a "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":":"}]},{"type":"codeListing","code":["print(\"The width of someVideoMode is \\(someVideoMode.resolution.width)\")","\/\/ Prints \"The width of someVideoMode is 0\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"You can also use dot syntax to assign a new value to a variable property:","type":"text"}]},{"type":"codeListing","code":["someVideoMode.resolution.width = 1280","print(\"The width of someVideoMode is now \\(someVideoMode.resolution.width)\")","\/\/ Prints \"The width of someVideoMode is now 1280\""],"syntax":"swift"},{"anchor":"Inicializadores-a-nivel-de-miembro-para-tipos-de-estructura","level":3,"text":"Inicializadores a nivel de miembro para tipos de estructura","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All structures have an automatically generated "},{"type":"emphasis","inlineContent":[{"text":"memberwise initializer","type":"text"}]},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which you can use to initialize the member properties of new structure instances."},{"text":" ","type":"text"},{"type":"text","text":"Initial values for the properties of the new instance"},{"type":"text","text":" "},{"type":"text","text":"can be passed to the memberwise initializer by name:"}]},{"code":["let vga = Resolution(width: 640, height: 480)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Unlike structures, class instances don’t receive a default memberwise initializer.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Initializers are described in more detail in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization"},{"text":".","type":"text"}]},{"anchor":"Las-estructuras-y-las-enumeraciones-son-tipos-de-valor","text":"Las estructuras y las enumeraciones son tipos de valor","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"value type"}]},{"text":" is a type whose value is ","type":"text"},{"inlineContent":[{"text":"copied","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"when it’s assigned to a variable or constant,","type":"text"},{"type":"text","text":" "},{"text":"or when it’s passed to a function.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You’ve actually been using value types extensively throughout the previous chapters.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In fact, all of the basic types in Swift —"},{"text":" ","type":"text"},{"type":"text","text":"integers, floating-point numbers, Booleans, strings, arrays and dictionaries —"},{"text":" ","type":"text"},{"text":"are value types, and are implemented as structures behind the scenes.","type":"text"}]},{"inlineContent":[{"type":"text","text":"All structures and enumerations are value types in Swift."},{"type":"text","text":" "},{"type":"text","text":"This means that any structure and enumeration instances you create —"},{"text":" ","type":"text"},{"type":"text","text":"and any value types they have as properties —"},{"type":"text","text":" "},{"text":"are always copied when they’re passed around in your code.","type":"text"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Collections defined by the standard library"},{"text":" ","type":"text"},{"type":"text","text":"like arrays, dictionaries, and strings"},{"text":" ","type":"text"},{"type":"text","text":"use an optimization to reduce the performance cost of copying."},{"text":" ","type":"text"},{"type":"text","text":"Instead of making a copy immediately,"},{"text":" ","type":"text"},{"type":"text","text":"these collections share the memory where the elements are stored"},{"type":"text","text":" "},{"type":"text","text":"between the original instance and any copies."},{"type":"text","text":" "},{"text":"If one of the copies of the collection is modified,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the elements are copied just before the modification."},{"type":"text","text":" "},{"type":"text","text":"The behavior you see in your code"},{"text":" ","type":"text"},{"type":"text","text":"is always as if a copy took place immediately."}]}],"style":"note","name":"Note","type":"aside"},{"inlineContent":[{"type":"text","text":"Consider this example, which uses the "},{"type":"codeVoice","code":"Resolution"},{"text":" structure from the previous example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let hd = Resolution(width: 1920, height: 1080)","var cinema = hd"]},{"inlineContent":[{"type":"text","text":"This example declares a constant called "},{"type":"codeVoice","code":"hd"},{"type":"text","text":" "},{"text":"and sets it to a ","type":"text"},{"type":"codeVoice","code":"Resolution"},{"type":"text","text":" instance initialized with"},{"type":"text","text":" "},{"text":"the width and height of full HD video","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(1920 pixels wide by 1080 pixels high)."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"It then declares a variable called "},{"code":"cinema","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and sets it to the current value of ","type":"text"},{"code":"hd","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Because ","type":"text"},{"type":"codeVoice","code":"Resolution"},{"text":" is a structure,","type":"text"},{"type":"text","text":" "},{"text":"a ","type":"text"},{"inlineContent":[{"type":"text","text":"copy"}],"type":"emphasis"},{"text":" of the existing instance is made,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and this new copy is assigned to "},{"code":"cinema","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Even though "},{"type":"codeVoice","code":"hd"},{"type":"text","text":" and "},{"type":"codeVoice","code":"cinema"},{"text":" now have the same width and height,","type":"text"},{"text":" ","type":"text"},{"text":"they’re two completely different instances behind the scenes.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Next, the ","type":"text"},{"code":"width","type":"codeVoice"},{"text":" property of ","type":"text"},{"code":"cinema","type":"codeVoice"},{"type":"text","text":" is amended to be"},{"text":" ","type":"text"},{"type":"text","text":"the width of the slightly wider 2K standard used for digital cinema projection"},{"text":" ","type":"text"},{"text":"(2048 pixels wide and 1080 pixels high):","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["cinema.width = 2048"],"syntax":"swift"},{"inlineContent":[{"text":"Checking the ","type":"text"},{"type":"codeVoice","code":"width"},{"text":" property of ","type":"text"},{"type":"codeVoice","code":"cinema"},{"type":"text","text":" "},{"type":"text","text":"shows that it has indeed changed to be "},{"code":"2048","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["print(\"cinema is now \\(cinema.width) pixels wide\")","\/\/ Prints \"cinema is now 2048 pixels wide\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"However, the ","type":"text"},{"code":"width","type":"codeVoice"},{"type":"text","text":" property of the original "},{"code":"hd","type":"codeVoice"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"text":"still has the old value of ","type":"text"},{"code":"1920","type":"codeVoice"},{"text":":","type":"text"}]},{"code":["print(\"hd is still \\(hd.width) pixels wide\")","\/\/ Prints \"hd is still 1920 pixels wide\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"cinema"},{"text":" was given the current value of ","type":"text"},{"type":"codeVoice","code":"hd"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"the "},{"inlineContent":[{"text":"values","type":"text"}],"type":"emphasis"},{"text":" stored in ","type":"text"},{"type":"codeVoice","code":"hd"},{"type":"text","text":" were copied into the new "},{"type":"codeVoice","code":"cinema"},{"text":" instance.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The end result was two completely separate instances"},{"text":" ","type":"text"},{"type":"text","text":"that contained the same numeric values."},{"text":" ","type":"text"},{"type":"text","text":"However, because they’re separate instances,"},{"type":"text","text":" "},{"type":"text","text":"setting the width of "},{"type":"codeVoice","code":"cinema"},{"type":"text","text":" to "},{"code":"2048","type":"codeVoice"},{"type":"text","text":" "},{"text":"doesn’t affect the width stored in ","type":"text"},{"type":"codeVoice","code":"hd"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"as shown in the figure below:","type":"text"}]},{"inlineContent":[{"type":"image","identifier":"sharedStateStruct"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The same behavior applies to enumerations:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["enum CompassPoint {","    case north, south, east, west","    mutating func turnNorth() {","        self = .north","    }","}","var currentDirection = CompassPoint.west","let rememberedDirection = currentDirection","currentDirection.turnNorth()","","print(\"The current direction is \\(currentDirection)\")","print(\"The remembered direction is \\(rememberedDirection)\")","\/\/ Prints \"The current direction is north\"","\/\/ Prints \"The remembered direction is west\""]},{"inlineContent":[{"type":"text","text":"When "},{"code":"rememberedDirection","type":"codeVoice"},{"type":"text","text":" is assigned the value of "},{"code":"currentDirection","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"it’s actually set to a copy of that value.","type":"text"},{"type":"text","text":" "},{"text":"Changing the value of ","type":"text"},{"code":"currentDirection","type":"codeVoice"},{"text":" thereafter doesn’t affect","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the copy of the original value that was stored in "},{"type":"codeVoice","code":"rememberedDirection"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Las clases son tipos de referencia","level":2,"anchor":"Las-clases-son-tipos-de-referencia","type":"heading"},{"inlineContent":[{"type":"text","text":"Unlike value types, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"reference types"}]},{"type":"text","text":" are "},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"text":" copied","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when they’re assigned to a variable or constant,"},{"type":"text","text":" "},{"type":"text","text":"or when they’re passed to a function."},{"type":"text","text":" "},{"type":"text","text":"Rather than a copy, a reference to the same existing instance is used."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example, using the "},{"code":"VideoMode","type":"codeVoice"},{"type":"text","text":" class defined above:"}]},{"code":["let tenEighty = VideoMode()","tenEighty.resolution = hd","tenEighty.interlaced = true","tenEighty.name = \"1080i\"","tenEighty.frameRate = 25.0"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This example declares a new constant called "},{"code":"tenEighty","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and sets it to refer to a new instance of the "},{"code":"VideoMode","type":"codeVoice"},{"type":"text","text":" class."},{"type":"text","text":" "},{"text":"The video mode is assigned a copy of the HD resolution of ","type":"text"},{"code":"1920","type":"codeVoice"},{"type":"text","text":" by "},{"type":"codeVoice","code":"1080"},{"text":" from before.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It’s set to be interlaced,"},{"type":"text","text":" "},{"text":"its name is set to ","type":"text"},{"code":"\"1080i\"","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and its frame rate is set to ","type":"text"},{"code":"25.0","type":"codeVoice"},{"text":" frames per second.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, "},{"type":"codeVoice","code":"tenEighty"},{"text":" is assigned to a new constant, called ","type":"text"},{"code":"alsoTenEighty","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and the frame rate of "},{"code":"alsoTenEighty","type":"codeVoice"},{"text":" is modified:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let alsoTenEighty = tenEighty","alsoTenEighty.frameRate = 30.0"]},{"type":"paragraph","inlineContent":[{"text":"Because classes are reference types,","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"tenEighty"},{"text":" and ","type":"text"},{"code":"alsoTenEighty","type":"codeVoice"},{"text":" actually both refer to the ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"same"}]},{"text":" ","type":"text"},{"type":"codeVoice","code":"VideoMode"},{"text":" instance.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Effectively, they’re just two different names for the same single instance,"},{"type":"text","text":" "},{"text":"as shown in the figure below:","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"sharedStateClass","type":"image"}]},{"inlineContent":[{"text":"Checking the ","type":"text"},{"code":"frameRate","type":"codeVoice"},{"text":" property of ","type":"text"},{"code":"tenEighty","type":"codeVoice"},{"type":"text","text":" "},{"text":"shows that it correctly reports the new frame rate of ","type":"text"},{"type":"codeVoice","code":"30.0"},{"type":"text","text":" "},{"type":"text","text":"from the underlying "},{"type":"codeVoice","code":"VideoMode"},{"text":" instance:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["print(\"The frameRate property of tenEighty is now \\(tenEighty.frameRate)\")","\/\/ Prints \"The frameRate property of tenEighty is now 30.0\""]},{"inlineContent":[{"type":"text","text":"This example also shows how reference types can be harder to reason about."},{"type":"text","text":" "},{"type":"text","text":"If "},{"code":"tenEighty","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"alsoTenEighty"},{"type":"text","text":" were far apart in your program’s code,"},{"type":"text","text":" "},{"text":"it could be difficult to find all the ways that the video mode is changed.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Wherever you use "},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"you also have to think about the code that uses "},{"type":"codeVoice","code":"alsoTenEighty"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and vice versa."},{"type":"text","text":" "},{"type":"text","text":"In contrast, value types are easier to reason about"},{"type":"text","text":" "},{"type":"text","text":"because all of the code that interacts with the same value"},{"text":" ","type":"text"},{"type":"text","text":"is close together in your source files."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that "},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" and "},{"code":"alsoTenEighty","type":"codeVoice"},{"text":" are declared as ","type":"text"},{"inlineContent":[{"text":"constants","type":"text"}],"type":"emphasis"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"rather than variables.","type":"text"},{"text":" ","type":"text"},{"text":"However, you can still change ","type":"text"},{"type":"codeVoice","code":"tenEighty.frameRate"},{"type":"text","text":" and "},{"type":"codeVoice","code":"alsoTenEighty.frameRate"},{"type":"text","text":" because"},{"type":"text","text":" "},{"type":"text","text":"the values of the "},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" and "},{"code":"alsoTenEighty","type":"codeVoice"},{"type":"text","text":" constants themselves don’t actually change."},{"type":"text","text":" "},{"code":"tenEighty","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"alsoTenEighty","type":"codeVoice"},{"type":"text","text":" themselves don’t “store” the "},{"type":"codeVoice","code":"VideoMode"},{"text":" instance —","type":"text"},{"text":" ","type":"text"},{"text":"instead, they both ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"refer","type":"text"}]},{"text":" to a ","type":"text"},{"code":"VideoMode","type":"codeVoice"},{"text":" instance behind the scenes.","type":"text"},{"text":" ","type":"text"},{"text":"It’s the ","type":"text"},{"type":"codeVoice","code":"frameRate"},{"type":"text","text":" property of the underlying "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" that’s changed,"},{"text":" ","type":"text"},{"text":"not the values of the constant references to that ","type":"text"},{"code":"VideoMode","type":"codeVoice"},{"type":"text","text":"."}]},{"text":"Operadores de identidad","anchor":"Operadores-de-identidad","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Because classes are reference types,","type":"text"},{"type":"text","text":" "},{"text":"it’s possible for multiple constants and variables to refer to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the same single instance of a class behind the scenes."},{"type":"text","text":" "},{"type":"text","text":"(The same isn’t true for structures and enumerations,"},{"type":"text","text":" "},{"text":"because they’re always copied when they’re assigned to a constant or variable,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or passed to a function.)"}]},{"inlineContent":[{"type":"text","text":"It can sometimes be useful to find out whether two constants or variables refer to"},{"text":" ","type":"text"},{"type":"text","text":"exactly the same instance of a class."},{"type":"text","text":" "},{"type":"text","text":"To enable this, Swift provides two identity operators:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identical to ("},{"code":"===","type":"codeVoice"},{"type":"text","text":")"}]}]},{"content":[{"inlineContent":[{"text":"Not identical to (","type":"text"},{"type":"codeVoice","code":"!=="},{"text":")","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Use these operators to check whether two constants or variables refer to the same single instance:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["if tenEighty === alsoTenEighty {","    print(\"tenEighty and alsoTenEighty refer to the same VideoMode instance.\")","}","\/\/ Prints \"tenEighty and alsoTenEighty refer to the same VideoMode instance.\""]},{"type":"paragraph","inlineContent":[{"text":"Note that ","type":"text"},{"inlineContent":[{"type":"text","text":"identical to"}],"type":"emphasis"},{"type":"text","text":" (represented by three equal signs, or "},{"code":"===","type":"codeVoice"},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doesn’t mean the same thing as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"equal to"}]},{"text":" (represented by two equal signs, or ","type":"text"},{"type":"codeVoice","code":"=="},{"text":").","type":"text"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"Identical to"}],"type":"emphasis"},{"text":" means that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"two constants or variables of class type refer to exactly the same class instance."},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Equal to"}]},{"type":"text","text":" means that"},{"type":"text","text":" "},{"text":"two instances are considered equal or equivalent in value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for some appropriate meaning of "},{"inlineContent":[{"text":"equal","type":"text"}],"type":"emphasis"},{"text":", as defined by the type’s designer.","type":"text"}]},{"inlineContent":[{"text":"When you define your own custom structures and classes,","type":"text"},{"text":" ","type":"text"},{"text":"it’s your responsibility to decide what qualifies as two instances being equal.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The process of defining your own implementations of the "},{"type":"codeVoice","code":"=="},{"type":"text","text":" and "},{"code":"!=","type":"codeVoice"},{"text":" operators","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is described in "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Operadores-de-equivalencia","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","anchor":"Punteros","text":"Punteros","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you have experience with C, C++, or Objective-C,"},{"text":" ","type":"text"},{"text":"you may know that these languages use ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"pointers","type":"text"}]},{"type":"text","text":" to refer to addresses in memory."},{"type":"text","text":" "},{"text":"A Swift constant or variable that refers to an instance of some reference type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is similar to a pointer in C,"},{"text":" ","type":"text"},{"text":"but isn’t a direct pointer to an address in memory,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and doesn’t require you to write an asterisk ("},{"code":"*","type":"codeVoice"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"to indicate that you are creating a reference."},{"text":" ","type":"text"},{"type":"text","text":"Instead, these references are defined like any other constant or variable in Swift."},{"text":" ","type":"text"},{"type":"text","text":"The standard library provides pointer and buffer types"},{"type":"text","text":" "},{"type":"text","text":"that you can use if you need to interact with pointers directly —"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management","isActive":true},{"text":".","type":"text"}]},{"name":"Software Beta","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conoce más acerca del uso del "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","isActive":true},{"type":"text","text":"."}]}],"type":"aside","style":"note"}]}],"kind":"article","metadata":{"title":"Estructuras y clases"},"sections":[],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","title":"Subíndices","type":"topic","kind":"article","abstract":[{"type":"text","text":"Access the elements of a collection."}],"role":"article","url":"\/documentation\/the-swift-programming-language\/subscripts"},"sharedStateStruct":{"type":"image","identifier":"sharedStateStruct","alt":null,"variants":[{"url":"\/images\/org.swift.tspl\/sharedStateStruct@2x.png","traits":["2x","light"]},{"traits":["2x","dark"],"url":"\/images\/org.swift.tspl\/sharedStateStruct~dark@2x.png"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","url":"\/documentation\/the-swift-programming-language\/extensions","kind":"article","title":"Extensiones","abstract":[{"text":"Add functionality to an existing type.","type":"text"}],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Operadores-de-equivalencia":{"kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Operadores-de-equivalencia","title":"Operadores de equivalencia","url":"\/documentation\/the-swift-programming-language\/advancedoperators#Operadores-de-equivalencia","abstract":[]},"sharedStateClass":{"type":"image","identifier":"sharedStateClass","alt":null,"variants":[{"url":"\/images\/org.swift.tspl\/sharedStateClass@2x.png","traits":["2x","light"]},{"traits":["2x","dark"],"url":"\/images\/org.swift.tspl\/sharedStateClass~dark@2x.png"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Herencia","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","abstract":[{"type":"text","text":"Subclass to add or override functionality."}],"type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"abstract":[{"type":"text","text":"Model the lifetime of objects and their relationships."}],"url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting","kind":"article","title":"Conteo automático de referencias","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","type":"topic","role":"article"},"https://developer.apple.com/documentation/swift/swift_standard_library/manual_memory_management":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management","titleInlineContent":[{"text":"Manual Memory Management","type":"text"}],"title":"Manual Memory Management","url":"https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management"},"https://developer.apple.com/es/support/beta-software/":{"type":"link","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","titleInlineContent":[{"text":"software beta de Apple","type":"text"}],"title":"software beta de Apple","url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"role":"collection","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","url":"\/documentation\/the-swift-programming-language","title":"The Swift Programming Language (6)","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","title":"Conversión de Tipos","type":"topic","kind":"article","abstract":[{"type":"text","text":"Determine a value’s runtime type and give it more specific type information."}],"role":"article","url":"\/documentation\/the-swift-programming-language\/typecasting"},"https://developer.apple.com/documentation/swift/choosing_between_structures_and_classes":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes","titleInlineContent":[{"text":"Choosing Between Structures and Classes","type":"text"}],"title":"Choosing Between Structures and Classes","url":"https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"type":"topic","abstract":[{"text":"Perform asynchronous operations.","type":"text"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","role":"article","kind":"article","title":"Concurrencia","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","title":"Propiedades","type":"topic","kind":"article","abstract":[{"type":"text","text":"Access stored and computed values that are part of an instance or type."}],"role":"article","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"title":"Inicialización","url":"\/documentation\/the-swift-programming-language\/initialization","kind":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","abstract":[{"type":"text","text":"Set the initial values for a type’s stored properties and perform one-time setup."}],"role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","title":"Métodos","type":"topic","kind":"article","abstract":[{"type":"text","text":"Define and call functions that are part of an instance or type."}],"role":"article","url":"\/documentation\/the-swift-programming-language\/methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"abstract":[{"type":"text","text":"Release resources that require custom cleanup."}],"kind":"article","type":"topic","title":"Desinicialización","url":"\/documentation\/the-swift-programming-language\/deinitialization","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"title":"Protocols","url":"\/documentation\/the-swift-programming-language\/protocols","kind":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","abstract":[{"type":"text","text":"Define requirements that conforming types must implement."}],"role":"article"}}}