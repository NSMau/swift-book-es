{"metadata":{"title":"Extensiones"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Add functionality to an existing type."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions"},"primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Extensions","type":"text"}],"type":"emphasis"},{"type":"text","text":" add new functionality to an existing"},{"type":"text","text":" "},{"text":"class, structure, enumeration, or protocol type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This includes the ability to extend types"},{"type":"text","text":" "},{"text":"for which you don’t have access to the original source code","type":"text"},{"text":" ","type":"text"},{"text":"(known as ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"retroactive modeling"}]},{"type":"text","text":")."},{"type":"text","text":" "},{"text":"Extensions are similar to categories in Objective-C.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(Unlike Objective-C categories, Swift extensions don’t have names.)"}]},{"inlineContent":[{"type":"text","text":"Extensions in Swift can:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add computed instance properties and computed type properties"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define instance methods and type methods"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provide new initializers"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define subscripts"}]}]},{"content":[{"inlineContent":[{"text":"Define and use new nested types","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Make an existing type conform to a protocol","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift,"},{"type":"text","text":" "},{"text":"you can even extend a protocol to provide implementations of its requirements","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or add additional functionality that conforming types can take advantage of."},{"type":"text","text":" "},{"type":"text","text":"For more details, see "},{"type":"text","text":"doc:Protocols#Extensión-de-protocolos"},{"type":"text","text":"."}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensions can add new functionality to a type,"},{"type":"text","text":" "},{"type":"text","text":"but they can’t override existing functionality."}]}],"style":"note","type":"aside"},{"text":"Sintaxis de una extensión","type":"heading","level":2,"anchor":"Sintaxis-de-una-extensi%C3%B3n"},{"type":"paragraph","inlineContent":[{"text":"Declare extensions with the ","type":"text"},{"code":"extension","type":"codeVoice"},{"type":"text","text":" keyword:"}]},{"code":["extension SomeType {","    \/\/ new functionality to add to SomeType goes here","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"An extension can extend an existing type to make it adopt one or more protocols."},{"type":"text","text":" "},{"text":"To add protocol conformance,","type":"text"},{"text":" ","type":"text"},{"text":"you write the protocol names","type":"text"},{"type":"text","text":" "},{"text":"the same way as you write them for a class or structure:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension SomeType: SomeProtocol, AnotherProtocol {","    \/\/ implementation of protocol requirements goes here","}"]},{"inlineContent":[{"text":"Adding protocol conformance in this way is described in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:Protocols#Agregar-conformidad-protocolaria-mediante-una-extensión"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"An extension can be used to extend an existing generic type,","type":"text"},{"type":"text","text":" "},{"text":"as described in ","type":"text"},{"text":"doc:Generics#Extendiendo-un-tipo-genérico","type":"text"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can also extend a generic type to conditionally add functionality,"},{"text":" ","type":"text"},{"text":"as described in ","type":"text"},{"text":"doc:Generics#Extensiones-con-una-cláusula-where-genérica","type":"text"},{"type":"text","text":"."}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you define an extension to add new functionality to an existing type,"},{"type":"text","text":" "},{"type":"text","text":"the new functionality will be available on all existing instances of that type,"},{"type":"text","text":" "},{"type":"text","text":"even if they were created before the extension was defined."}]}],"style":"note","type":"aside","name":"Note"},{"anchor":"Propiedades-computadas","text":"Propiedades computadas","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensions can add computed instance properties and computed type properties to existing types."},{"type":"text","text":" "},{"text":"This example adds five computed instance properties to Swift’s built-in ","type":"text"},{"type":"codeVoice","code":"Double"},{"type":"text","text":" type,"},{"text":" ","type":"text"},{"type":"text","text":"to provide basic support for working with distance units:"}]},{"type":"codeListing","syntax":"swift","code":["extension Double {","    var km: Double { return self * 1_000.0 }","    var m: Double { return self }","    var cm: Double { return self \/ 100.0 }","    var mm: Double { return self \/ 1_000.0 }","    var ft: Double { return self \/ 3.28084 }","}","let oneInch = 25.4.mm","print(\"One inch is \\(oneInch) meters\")","\/\/ Prints \"One inch is 0.0254 meters\"","let threeFeet = 3.ft","print(\"Three feet is \\(threeFeet) meters\")","\/\/ Prints \"Three feet is 0.914399970739201 meters\""]},{"inlineContent":[{"text":"These computed properties express that a ","type":"text"},{"type":"codeVoice","code":"Double"},{"type":"text","text":" value"},{"type":"text","text":" "},{"type":"text","text":"should be considered as a certain unit of length."},{"type":"text","text":" "},{"text":"Although they’re implemented as computed properties,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the names of these properties can be appended to"},{"type":"text","text":" "},{"text":"a floating-point literal value with dot syntax,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as a way to use that literal value to perform distance conversions."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, a "},{"type":"codeVoice","code":"Double"},{"text":" value of ","type":"text"},{"type":"codeVoice","code":"1.0"},{"type":"text","text":" is considered to represent “one meter”."},{"text":" ","type":"text"},{"text":"This is why the ","type":"text"},{"code":"m","type":"codeVoice"},{"type":"text","text":" computed property returns "},{"type":"codeVoice","code":"self"},{"type":"text","text":" —"},{"type":"text","text":" "},{"type":"text","text":"the expression "},{"type":"codeVoice","code":"1.m"},{"type":"text","text":" is considered to calculate a "},{"code":"Double","type":"codeVoice"},{"text":" value of ","type":"text"},{"type":"codeVoice","code":"1.0"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"Other units require some conversion to be expressed as a value measured in meters."},{"text":" ","type":"text"},{"text":"One kilometer is the same as 1,000 meters,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"so the "},{"type":"codeVoice","code":"km"},{"type":"text","text":" computed property multiplies the value by "},{"type":"codeVoice","code":"1_000.00"},{"text":" ","type":"text"},{"type":"text","text":"to convert into a number expressed in meters."},{"text":" ","type":"text"},{"text":"Similarly, there are 3.28084 feet in a meter,","type":"text"},{"text":" ","type":"text"},{"text":"and so the ","type":"text"},{"code":"ft","type":"codeVoice"},{"text":" computed property divides the underlying ","type":"text"},{"code":"Double","type":"codeVoice"},{"type":"text","text":" value"},{"text":" ","type":"text"},{"text":"by ","type":"text"},{"code":"3.28084","type":"codeVoice"},{"type":"text","text":", to convert it from feet to meters."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"These properties are read-only computed properties,"},{"text":" ","type":"text"},{"text":"and so they’re expressed without the ","type":"text"},{"code":"get","type":"codeVoice"},{"type":"text","text":" keyword, for brevity."},{"text":" ","type":"text"},{"text":"Their return value is of type ","type":"text"},{"type":"codeVoice","code":"Double"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and can be used within mathematical calculations wherever a ","type":"text"},{"type":"codeVoice","code":"Double"},{"text":" is accepted:","type":"text"}]},{"code":["let aMarathon = 42.km + 195.m","print(\"A marathon is \\(aMarathon) meters long\")","\/\/ Prints \"A marathon is 42195.0 meters long\""],"type":"codeListing","syntax":"swift"},{"style":"note","name":"Note","content":[{"inlineContent":[{"text":"Extensions can add new computed properties, but they can’t add stored properties,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or add property observers to existing properties."}],"type":"paragraph"}],"type":"aside"},{"text":"Inicializadores","level":2,"anchor":"Inicializadores","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensions can add new initializers to existing types."},{"text":" ","type":"text"},{"text":"This enables you to extend other types to accept","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"your own custom types as initializer parameters,"},{"text":" ","type":"text"},{"type":"text","text":"or to provide additional initialization options"},{"type":"text","text":" "},{"type":"text","text":"that were not included as part of the type’s original implementation."}]},{"inlineContent":[{"text":"Extensions can add new convenience initializers to a class,","type":"text"},{"type":"text","text":" "},{"text":"but they can’t add new designated initializers or deinitializers to a class.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Designated initializers and deinitializers"},{"type":"text","text":" "},{"text":"must always be provided by the original class implementation.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If you use an extension to add an initializer to a value type that provides","type":"text"},{"type":"text","text":" "},{"type":"text","text":"default values for all of its stored properties"},{"text":" ","type":"text"},{"type":"text","text":"and doesn’t define any custom initializers,"},{"type":"text","text":" "},{"text":"you can call the default initializer and memberwise initializer for that value type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"from within your extension’s initializer."},{"type":"text","text":" "},{"text":"This wouldn’t be the case if you had written the initializer","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as part of the value type’s original implementation,"},{"type":"text","text":" "},{"text":"as described in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Delegaci%C3%B3n-de-inicializadores-para-tipos-de-valor"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you use an extension to add an initializer to a structure"},{"text":" ","type":"text"},{"type":"text","text":"that was declared in another module,"},{"text":" ","type":"text"},{"type":"text","text":"the new initializer can’t access "},{"code":"self","type":"codeVoice"},{"type":"text","text":" until it calls"},{"type":"text","text":" "},{"type":"text","text":"an initializer from the defining module."}]},{"type":"paragraph","inlineContent":[{"text":"The example below defines a custom ","type":"text"},{"type":"codeVoice","code":"Rect"},{"text":" structure to represent a geometric rectangle.","type":"text"},{"text":" ","type":"text"},{"text":"The example also defines two supporting structures called ","type":"text"},{"type":"codeVoice","code":"Size"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Point"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"both of which provide default values of ","type":"text"},{"type":"codeVoice","code":"0.0"},{"text":" for all of their properties:","type":"text"}]},{"type":"codeListing","code":["struct Size {","    var width = 0.0, height = 0.0","}","struct Point {","    var x = 0.0, y = 0.0","}","struct Rect {","    var origin = Point()","    var size = Size()","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the "},{"type":"codeVoice","code":"Rect"},{"text":" structure provides default values for all of its properties,","type":"text"},{"type":"text","text":" "},{"text":"it receives a default initializer and a memberwise initializer automatically,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Inicializadores-predeterminados","isActive":true,"type":"reference"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"These initializers can be used to create new ","type":"text"},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" instances:"}]},{"code":["let defaultRect = Rect()","let memberwiseRect = Rect(origin: Point(x: 2.0, y: 2.0),","    size: Size(width: 5.0, height: 5.0))"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"You can extend the ","type":"text"},{"code":"Rect","type":"codeVoice"},{"text":" structure to provide an additional initializer","type":"text"},{"type":"text","text":" "},{"text":"that takes a specific center point and size:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["extension Rect {","    init(center: Point, size: Size) {","        let originX = center.x - (size.width \/ 2)","        let originY = center.y - (size.height \/ 2)","        self.init(origin: Point(x: originX, y: originY), size: size)","    }","}"]},{"inlineContent":[{"text":"This new initializer starts by calculating an appropriate origin point based on","type":"text"},{"type":"text","text":" "},{"text":"the provided ","type":"text"},{"type":"codeVoice","code":"center"},{"text":" point and ","type":"text"},{"type":"codeVoice","code":"size"},{"type":"text","text":" value."},{"type":"text","text":" "},{"type":"text","text":"The initializer then calls the structure’s automatic memberwise initializer"},{"type":"text","text":" "},{"type":"codeVoice","code":"init(origin:size:)"},{"text":", which stores the new origin and size values","type":"text"},{"text":" ","type":"text"},{"text":"in the appropriate properties:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let centerRect = Rect(center: Point(x: 4.0, y: 4.0),","    size: Size(width: 3.0, height: 3.0))","\/\/ centerRect's origin is (2.5, 2.5) and its size is (3.0, 3.0)"]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If you provide a new initializer with an extension,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you are still responsible for making sure that each instance is fully initialized"},{"type":"text","text":" "},{"text":"once the initializer completes.","type":"text"}]}],"style":"note","type":"aside","name":"Note"},{"text":"Métodos","level":2,"type":"heading","anchor":"M%C3%A9todos"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensions can add new instance methods and type methods to existing types."},{"type":"text","text":" "},{"type":"text","text":"The following example adds a new instance method called "},{"type":"codeVoice","code":"repetitions"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"Int"},{"text":" type:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension Int {","    func repetitions(task: () -> Void) {","        for _ in 0..<self {","            task()","        }","    }","}"]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"repetitions(task:)"},{"type":"text","text":" method takes a single argument of type "},{"code":"() -> Void","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which indicates a function that has no parameters and doesn’t return a value.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"After defining this extension,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can call the "},{"type":"codeVoice","code":"repetitions(task:)"},{"text":" method on any integer","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to perform a task that many number of times:"}]},{"code":["3.repetitions {","    print(\"Hello!\")","}","\/\/ Hello!","\/\/ Hello!","\/\/ Hello!"],"syntax":"swift","type":"codeListing"},{"level":3,"type":"heading","anchor":"M%C3%A9todos-de-instancia-modificadores","text":"Métodos de instancia modificadores"},{"type":"paragraph","inlineContent":[{"text":"Instance methods added with an extension can also modify (or ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"mutate"}]},{"type":"text","text":") the instance itself."},{"text":" ","type":"text"},{"text":"Structure and enumeration methods that modify ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":" or its properties"},{"type":"text","text":" "},{"text":"must mark the instance method as ","type":"text"},{"code":"mutating","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"just like mutating methods from an original implementation."}]},{"inlineContent":[{"type":"text","text":"The example below adds a new mutating method called "},{"code":"square","type":"codeVoice"},{"type":"text","text":" to Swift’s "},{"code":"Int","type":"codeVoice"},{"text":" type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which squares the original value:"}],"type":"paragraph"},{"syntax":"swift","code":["extension Int {","    mutating func square() {","        self = self * self","    }","}","var someInt = 3","someInt.square()","\/\/ someInt is now 9"],"type":"codeListing"},{"type":"heading","text":"Subíndices","level":2,"anchor":"Sub%C3%ADndices"},{"inlineContent":[{"text":"Extensions can add new subscripts to an existing type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This example adds an integer subscript to Swift’s built-in "},{"type":"codeVoice","code":"Int"},{"text":" type.","type":"text"},{"text":" ","type":"text"},{"text":"This subscript ","type":"text"},{"type":"codeVoice","code":"[n]"},{"type":"text","text":" returns the decimal digit "},{"type":"codeVoice","code":"n"},{"type":"text","text":" places in"},{"type":"text","text":" "},{"type":"text","text":"from the right of the number:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"123456789[0]"},{"type":"text","text":" returns "},{"type":"codeVoice","code":"9"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"123456789[1]"},{"text":" returns ","type":"text"},{"code":"8","type":"codeVoice"}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"…and so on:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["extension Int {","    subscript(digitIndex: Int) -> Int {","        var decimalBase = 1","        for _ in 0..<digitIndex {","            decimalBase *= 10","        }","        return (self \/ decimalBase) % 10","    }","}","746381295[0]","\/\/ returns 5","746381295[1]","\/\/ returns 9","746381295[2]","\/\/ returns 2","746381295[8]","\/\/ returns 7"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If the "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value doesn’t have enough digits for the requested index,"},{"text":" ","type":"text"},{"text":"the subscript implementation returns ","type":"text"},{"code":"0","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"as if the number had been padded with zeros to the left:"}],"type":"paragraph"},{"code":["746381295[9]","\/\/ returns 0, as if you had requested:","0746381295[9]"],"type":"codeListing","syntax":"swift"},{"anchor":"Tipos-anidados","type":"heading","level":2,"text":"Tipos anidados"},{"inlineContent":[{"type":"text","text":"Extensions can add new nested types to existing classes, structures, and enumerations:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension Int {","    enum Kind {","        case negative, zero, positive","    }","    var kind: Kind {","        switch self {","        case 0:","            return .zero","        case let x where x > 0:","            return .positive","        default:","            return .negative","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"This example adds a new nested enumeration to ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"This enumeration, called ","type":"text"},{"type":"codeVoice","code":"Kind"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"expresses the kind of number that a particular integer represents.","type":"text"},{"type":"text","text":" "},{"text":"Specifically, it expresses whether the number is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"negative, zero, or positive."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example also adds a new computed instance property to "},{"type":"codeVoice","code":"Int"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"called ","type":"text"},{"type":"codeVoice","code":"kind"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which returns the appropriate "},{"type":"codeVoice","code":"Kind"},{"type":"text","text":" enumeration case for that integer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The nested enumeration can now be used with any "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" value:"}]},{"type":"codeListing","syntax":"swift","code":["func printIntegerKinds(_ numbers: [Int]) {","    for number in numbers {","        switch number.kind {","        case .negative:","            print(\"- \", terminator: \"\")","        case .zero:","            print(\"0 \", terminator: \"\")","        case .positive:","            print(\"+ \", terminator: \"\")","        }","    }","    print(\"\")","}","printIntegerKinds([3, 19, -27, 0, -6, 0, 7])","\/\/ Prints \"+ + - 0 - 0 + \""]},{"inlineContent":[{"text":"This function, ","type":"text"},{"type":"codeVoice","code":"printIntegerKinds(_:)"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"takes an input array of ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":" values and iterates over those values in turn."},{"text":" ","type":"text"},{"type":"text","text":"For each integer in the array,"},{"type":"text","text":" "},{"type":"text","text":"the function considers the "},{"code":"kind","type":"codeVoice"},{"text":" computed property for that integer,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and prints an appropriate description."}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"number.kind"},{"type":"text","text":" is already known to be of type "},{"code":"Int.Kind","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Because of this, all of the ","type":"text"},{"type":"codeVoice","code":"Int.Kind"},{"type":"text","text":" case values"},{"type":"text","text":" "},{"type":"text","text":"can be written in shorthand form inside the "},{"code":"switch","type":"codeVoice"},{"text":" statement,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"such as "},{"type":"codeVoice","code":".negative"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":"Int.Kind.negative"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note","name":"Note"},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo."}]},{"inlineContent":[{"text":"Conoce más acerca del uso del ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}],"style":"note","name":"Software Beta"}],"kind":"content"}],"kind":"article","sections":[],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","url":"\/documentation\/the-swift-programming-language","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","type":"topic","role":"collection","title":"The Swift Programming Language (5.9)","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Inicializadores-predeterminados":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Inicializadores-predeterminados","abstract":[],"title":"Inicializadores predeterminados","url":"\/documentation\/the-swift-programming-language\/initialization#Inicializadores-predeterminados","kind":"section","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Delegaci%C3%B3n-de-inicializadores-para-tipos-de-valor":{"abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Delegaci%C3%B3n-de-inicializadores-para-tipos-de-valor","title":"Delegación de inicializadores para tipos de valor","kind":"section","url":"\/documentation\/the-swift-programming-language\/initialization#Delegaci%C3%B3n-de-inicializadores-para-tipos-de-valor","type":"topic"},"https://developer.apple.com/es/support/beta-software/":{"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","title":"software beta de Apple","titleInlineContent":[{"type":"text","text":"software beta de Apple"}],"url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"link"}}}