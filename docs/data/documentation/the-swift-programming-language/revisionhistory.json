<<<<<<< HEAD
{"metadata":{"title":"Historial de Revisiones"},"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"Review the recent changes to this book."}],"primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2023-09-18"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.9."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about "},{"type":"codeVoice","code":"if"},{"type":"text","text":" and "},{"type":"codeVoice","code":"switch"},{"text":" expressions","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true,"type":"reference"},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Conditional-Expression","type":"reference","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros"},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"text":"with information about generating code at compile time.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Expanded the discussion of optionals in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added an example of concurrency to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about boxed protocol types"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","isActive":true},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"code":"buildPartialBlock(first:)","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"buildPartialBlock(accumulated:next:)","type":"codeVoice"},{"text":" methods","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Result-Transformations","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added visionOS to the lists of platforms in","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#available"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Formatted the formal grammar to use blank lines for grouping."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2023-03-30","type":"text"}]}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.8."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:ControlFlow#Deferred-Actions"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"text":"showing ","type":"text"},{"type":"codeVoice","code":"defer"},{"text":" outside of error handling.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Adopted Swift-DocC for publication."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Minor corrections and additions throughout.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2022-09-12"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.7."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"type":"text","text":"doc:Concurrency#Sendable-Types"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with information about sending data between actors and tasks,"},{"type":"text","text":" "},{"text":"and added information about the ","type":"text"},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@unchecked"},{"text":" attributes","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Sendable"},{"type":"text","text":" and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unchecked","isActive":true,"type":"reference"},{"text":" sections.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Regular-Expression-Literals","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"with information about creating a regular expression.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about the short form of ","type":"text"},{"type":"codeVoice","code":"if"},{"text":"-","type":"text"},{"type":"codeVoice","code":"let"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about ","type":"text"},{"type":"codeVoice","code":"#unavailable"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:ControlFlow#Checking-API-Availability"},{"type":"text","text":" section."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2022-03-14","type":"text"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 5.6."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with information about using ","type":"text"},{"type":"codeVoice","code":"#if"},{"text":" ","type":"text"},{"text":"around chained method calls and other postfix expressions.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the visual styling of figures throughout.","type":"text"}]}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2021-09-20"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.5."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about asynchronous functions, tasks, and actors"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","isActive":true,"type":"reference"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"and to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Actor-Declaration","isActive":true},{"text":",","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Await-Operator"},{"text":" sections.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with information about identifiers that start with an underscore."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2021-04-26"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.4."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:AdvancedOperators#Result-Builders"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#resultBuilder","type":"reference"},{"type":"text","text":" sections"},{"type":"text","text":" "},{"text":"with information about result builders.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Conversion-to-a-Pointer-Type"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about how in-out parameters"},{"type":"text","text":" "},{"type":"text","text":"can be implicitly converted to unsafe pointers in a function call."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:Functions#Variadic-Parameters"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","isActive":true},{"text":" sections,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that a function can have multiple variadic parameters."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Member-Expression"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"text":"now that implicit member expressions can be chained together.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2020-09-16"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.3."}]}]},{"content":[{"inlineContent":[{"text":"Added information about multiple trailing closures","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:Closures#Trailing-Closures","type":"text"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"and added information about how trailing closures are matched to parameters"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Function-Call-Expression","type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about synthesized implementations"},{"type":"text","text":" "},{"type":"text","text":"of "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" for enumerations"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:Protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Contextual-Where-Clauses","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that you can write a generic "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause in more places."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"text":"doc:AutomaticReferenceCounting#Unowned-Optional-References","type":"text"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"with information about using unowned references with optional values.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"code":"@main","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#main","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added ","type":"text"},{"type":"codeVoice","code":"#filePath"},{"type":"text","text":" to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"and updated the discussion of ","type":"text"},{"code":"#file","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Closures#Escaping-Closures"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that closures can refer to "},{"type":"codeVoice","code":"self"},{"text":" implicitly in more scenarios.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:ErrorHandling#Handling-Errors-Using-Do-Catch"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement"},{"text":" sections,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that a "},{"code":"catch","type":"codeVoice"},{"type":"text","text":" clause can match against multiple errors."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added more information about "},{"type":"codeVoice","code":"Any"},{"text":" ","type":"text"},{"type":"text","text":"and moved it into the new "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Any-Type","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","isActive":true,"type":"reference"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that lazy properties can have observers."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that members of an enumeration can satisfy protocol requirements."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Stored-Variable-Observers-and-Property-Observers","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to describe when the getter is called before the observer."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","type":"reference","isActive":true},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"to mention atomic operations."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2020-03-24"}]}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 5.2.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about passing a key path instead of a closure"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","isActive":true,"type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Methods-with-Special-Names"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with information about syntactic sugar the lets instances of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"classes, structures, and enumerations be used with function call syntax."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:Subscripts#Subscript-Options","type":"text"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that subscripts support parameters with default values."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type","isActive":true},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"text":"now that the ","type":"text"},{"code":"Self","type":"codeVoice"},{"text":" can be used in more contexts.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:TheBasics#Implicitly-Unwrapped-Optionals","type":"text"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to make it clearer that an implicitly unwrapped optional value"},{"type":"text","text":" "},{"type":"text","text":"can be used as either an optional or non-optional value."}]}]}]},{"inlineContent":[{"inlineContent":[{"text":"2019-09-10","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 5.1."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about functions"},{"type":"text","text":" "},{"type":"text","text":"that specify a protocol that their return value conforms to,"},{"text":" ","type":"text"},{"text":"instead of providing a specific named return type,","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes"},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"text":"Added information about property wrappers","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Wrappers"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about enumerations and structures"},{"type":"text","text":" "},{"text":"that are frozen for library evolution","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:Functions#Functions-With-an-Implicit-Return"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"text":"doc:Properties#Shorthand-Getter-Declaration","type":"text"},{"type":"text","text":" sections"},{"text":" ","type":"text"},{"type":"text","text":"with information about functions that omit "},{"code":"return","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about using subscripts on types"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:Subscripts#Type-Subscripts","type":"text"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Patterns#Enumeration-Case-Pattern"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that an enumeration case pattern can match an optional value."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:Initialization#Memberwise-Initializers-for-Structure-Types","type":"text"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that memberwise initializers support"},{"type":"text","text":" "},{"type":"text","text":"omitting parameters for properties that have a default value."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about dynamic members","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that are looked up by key path at runtime"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicMemberLookup"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added ","type":"text"},{"type":"codeVoice","code":"macCatalyst"},{"type":"text","text":" to the list of target environments"},{"type":"text","text":" "},{"type":"text","text":"in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type","isActive":true},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"now that ","type":"text"},{"type":"codeVoice","code":"Self"},{"type":"text","text":" can be used to refer to the type"},{"type":"text","text":" "},{"type":"text","text":"introduced by the current class, structure, or enumeration declaration."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"2019-03-25","type":"text"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.0."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:StringsAndCharacters#Extended-String-Delimiters"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with information about extended string delimiters."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicCallable","type":"reference","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"with information about dynamically calling instances as functions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"using the "},{"code":"dynamicCallable","type":"codeVoice"},{"type":"text","text":" attribute."}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unknown"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","isActive":true,"type":"reference"},{"text":" sections","type":"text"},{"text":" ","type":"text"},{"text":"with information about handling future enumeration cases","type":"text"},{"text":" ","type":"text"},{"text":"in switch statements using","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"unknown"},{"type":"text","text":" switch case attribute."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the identity key path ("},{"code":"\\.self","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","isActive":true,"type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about using the less than (","type":"text"},{"code":"<","type":"codeVoice"},{"text":") operator","type":"text"},{"text":" ","type":"text"},{"text":"in platform conditions to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2018-09-17"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 4.2.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about accessing all of an enumeration’s cases"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:Enumerations#Iterating-over-Enumeration-Cases","type":"text"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Added information about ","type":"text"},{"type":"codeVoice","code":"#error"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"#warning"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compile-Time-Diagnostic-Statement"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about inlining","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"under the "},{"type":"codeVoice","code":"inlinable"},{"type":"text","text":" and  "},{"type":"codeVoice","code":"usableFromInline"},{"text":" attributes.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about members that are looked up by name at runtime","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"under the "},{"type":"codeVoice","code":"dynamicMemberLookup"},{"text":" attribute.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"requires_stored_property_inits"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"warn_unqualified_access"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about how to conditionally compile code"},{"type":"text","text":" "},{"type":"text","text":"depending on the Swift compiler version being used"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true,"type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about "},{"code":"#dsohandle","type":"codeVoice"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2018-03-29","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 4.1."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about synthesized implementations of equivalence operators"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:AdvancedOperators#Equivalence-Operators"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about conditional protocol conformance","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations"},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"text":"and to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Conditionally-Conforming-to-a-Protocol"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","type":"reference"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about recursive protocol constraints","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"canImport()","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"targetEnvironment()"},{"text":" platform conditions","type":"text"},{"text":" ","type":"text"},{"text":"to ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"reference"},{"type":"text","text":"."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2017-12-04"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 4.0.3.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that key paths support subscript components."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2017-09-19","type":"text"}]}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 4.0."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about exclusive access to memory"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety"},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types-with-a-Generic-Where-Clause","type":"reference","isActive":true},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"now that you can use generic ","type":"text"},{"type":"codeVoice","code":"where"},{"text":" clauses","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to constrain associated types."}]}]},{"content":[{"inlineContent":[{"text":"Added information about multiline string literals","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:StringsAndCharacters#String-Literals","type":"text"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","isActive":true},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"text":"and to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure","isActive":true,"type":"reference"},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"now that this attribute is inferred in fewer places.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Subscripts"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that subscripts can be generic."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"and in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"text":"now that protocol composition types can contain a superclass requirement.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion of protocol extensions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","type":"reference"},{"text":" ","type":"text"},{"text":"now that ","type":"text"},{"code":"final","type":"codeVoice"},{"text":" isn’t allowed in them.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about preconditions and fatal errors","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"text":"doc:TheBasics#Assertions-and-Preconditions","type":"text"},{"type":"text","text":" section."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"2017-03-27","type":"text"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 3.1."}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"with information about extensions that include requirements.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added examples of iterating over a range"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"text":"doc:ControlFlow#For-In-Loops","type":"text"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added an example of failable numeric conversions","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Initialization#Failable-Initializers"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"about using the ","type":"text"},{"code":"available","type":"codeVoice"},{"text":" attribute with a Swift language version.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to note that argument labels aren’t allowed when writing a function type."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of Swift language version numbers","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"text":"now that an optional patch number is allowed.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","isActive":true},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"text":"now that Swift distinguishes between functions that take multiple parameters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and functions that take a single parameter of a tuple type."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Removed the Dynamic Type Expression section","type":"text"},{"text":" ","type":"text"},{"text":"from the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","isActive":true,"type":"reference"},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that "},{"code":"type(of:)","type":"codeVoice"},{"text":" is a Swift standard library function.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"2016-10-27","type":"text"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 3.0.1.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of weak and unowned references"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","type":"reference","isActive":true},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"code":"unowned","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"unowned(safe)"},{"text":", and ","type":"text"},{"code":"unowned(unsafe)","type":"codeVoice"},{"type":"text","text":" "},{"text":"declaration modifiers","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","isActive":true,"type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added a note to the ","type":"text"},{"type":"text","text":"doc:TypeCasting#Type-Casting-for-Any-and-AnyObject"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"about using an optional value when a value of type ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" is expected.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","isActive":true},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"text":"to separate the discussion of parenthesized expressions and tuple expressions.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2016-09-13"}]}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 3.0."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of functions in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","isActive":true},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","type":"reference"},{"type":"text","text":" section to note that"},{"text":" ","type":"text"},{"type":"text","text":"all parameters get an argument label by default."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of operators","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","isActive":true},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that you implement them as type methods instead of as global functions."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"code":"open","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"fileprivate"},{"text":" access-level modifiers","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of "},{"code":"inout","type":"codeVoice"},{"text":" in the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to note that it appears in front of a parameter’s type","type":"text"},{"text":" ","type":"text"},{"text":"instead of in front of a parameter’s name.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"code":"@noescape","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@autoclosure"},{"text":" attributes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"text":"doc:Closures#Escaping-Closures","type":"text"},{"text":" and ","type":"text"},{"type":"text","text":"doc:Closures#Autoclosures"},{"type":"text","text":" sections"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"now that they’re type attributes, rather than declaration attributes.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about operator precedence groups"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:AdvancedOperators#Precedence-for-Custom-Infix-Operators"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Precedence-Group-Declaration","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","isActive":true},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated discussion throughout"},{"text":" ","type":"text"},{"type":"text","text":"to use macOS instead of OS X,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Error"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"ErrorProtocol"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and protocol names such as ","type":"text"},{"code":"ExpressibleByStringLiteral","type":"codeVoice"},{"type":"text","text":" "},{"text":"instead of ","type":"text"},{"code":"StringLiteralConvertible","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","type":"reference","isActive":true},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"text":"and in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","isActive":true},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that generic "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clauses are written at the end of a declaration."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion in the ","type":"text"},{"text":"doc:Closures#Escaping-Closures","type":"text"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that closures are nonescaping by default."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics"},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#While-Statement","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","type":"reference"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"text":"now that ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"while"},{"type":"text","text":", and "},{"code":"guard","type":"codeVoice"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"use a comma-separated list of conditions without "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clauses."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about switch cases that have multiple patterns","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:ControlFlow#Switch","type":"text"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true,"type":"reference"},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switch-Statement","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},{"text":" chapter.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of function types"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","type":"reference"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"now that function argument labels are no longer part of a function’s type.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of protocol composition types"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"type":"text","text":"and in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","type":"reference"},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"type":"text","text":"to use the new "},{"type":"codeVoice","code":"Protocol1 & Protocol2"},{"text":" syntax.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion in the Dynamic Type Expression section"},{"type":"text","text":" "},{"type":"text","text":"to use the new "},{"code":"type(of:)","type":"codeVoice"},{"type":"text","text":" syntax for dynamic type expressions."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of line control statements","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to use the "},{"type":"codeVoice","code":"#sourceLocation(file:line:)"},{"type":"text","text":" syntax"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Line-Control-Statement","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return"},{"text":" ","type":"text"},{"type":"text","text":"to use the new "},{"code":"Never","type":"codeVoice"},{"text":" type.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about playground literals","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"type":"text","text":"doc:Declarations#In-Out-Parameters"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to note that only nonescaping closures can capture in-out parameters."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion about default parameters","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"text":"doc:Functions#Default-Parameter-Values","type":"text"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"now that they can’t be reordered in function calls.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated attribute arguments to use a colon","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","isActive":true,"type":"reference"},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about throwing an error"},{"text":" ","type":"text"},{"text":"inside the catch block of a rethrowing function","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","isActive":true,"type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about accessing the selector"},{"text":" ","type":"text"},{"type":"text","text":"of an Objective-C property’s getter or setter"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression","type":"reference","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Alias-Declaration"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"about generic type aliases and using type aliases inside of protocols."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of function types in the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to note that parentheses around the parameter types are required."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","isActive":true},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to note that the "},{"type":"codeVoice","code":"@IBAction"},{"text":", ","type":"text"},{"type":"codeVoice","code":"@IBOutlet"},{"text":", and ","type":"text"},{"code":"@NSManaged","type":"codeVoice"},{"text":" attributes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"imply the "},{"code":"@objc","type":"codeVoice"},{"text":" attribute.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"code":"@GKInspectable","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of optional protocol requirements","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Optional-Protocol-Requirements"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to clarify that they’re used only in code that interoperates with Objective-C."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Removed the discussion of explicitly using ","type":"text"},{"type":"codeVoice","code":"let"},{"text":" in function parameters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Removed the discussion of the "},{"type":"codeVoice","code":"Boolean"},{"type":"text","text":" protocol"},{"type":"text","text":" "},{"type":"text","text":"from the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","isActive":true},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"text":"now that the protocol has been removed from the Swift standard library.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Corrected the discussion of the ","type":"text"},{"code":"@NSApplicationMain","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"text":" section.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"2016-03-21","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 2.2.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about how to conditionally compile code"},{"type":"text","text":" "},{"text":"depending on the version of Swift being used","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about how to distinguish","type":"text"},{"type":"text","text":" "},{"type":"text","text":"between methods or initializers whose names differ"},{"text":" ","type":"text"},{"type":"text","text":"only by the names of their arguments"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","type":"reference","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"type":"codeVoice","code":"#selector"},{"type":"text","text":" syntax"},{"text":" ","type":"text"},{"type":"text","text":"for Objective-C selectors"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of associated types"},{"text":" ","type":"text"},{"text":"to use the ","type":"text"},{"type":"codeVoice","code":"associatedtype"},{"type":"text","text":" keyword"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Associated-Type-Declaration","type":"reference","isActive":true},{"text":" sections.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated information about initializers that return "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"before the instance is fully initialized"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"text":"doc:Initialization#Failable-Initializers","type":"text"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about comparing tuples"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:BasicOperators#Comparison-Operators","type":"text"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about using keywords as external parameter names"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Keywords-and-Punctuation","type":"reference","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of the ","type":"text"},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference","isActive":true},{"type":"text","text":" section to note that"},{"type":"text","text":" "},{"type":"text","text":"enumerations and enumeration cases can use this attribute."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:LexicalStructure#Operators"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with discussion of custom operators that contain a dot."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"that rethrowing functions can’t directly throw errors."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a note to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","type":"reference","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"about property observers being called","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when you pass a property as an in-out parameter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a section about error handling"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","isActive":true,"type":"reference"},{"text":" chapter.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated figures in the"},{"text":" ","type":"text"},{"text":"doc:AutomaticReferenceCounting#Weak-References","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"section to show the deallocation process more clearly."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Removed discussion of C-style "},{"type":"codeVoice","code":"for"},{"text":" loops,","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"++","type":"codeVoice"},{"type":"text","text":" prefix and postfix operators,"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"codeVoice","code":"--"},{"type":"text","text":" prefix and postfix operators."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Removed discussion of variable function arguments","type":"text"},{"text":" ","type":"text"},{"text":"and the special syntax for curried functions.","type":"text"}]}]}]},{"inlineContent":[{"inlineContent":[{"text":"2015-10-20","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 2.1.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:StringsAndCharacters#String-Interpolation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","type":"reference","isActive":true},{"type":"text","text":" sections"},{"type":"text","text":" "},{"type":"text","text":"now that string interpolations can contain string literals."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"text":"doc:Closures#Escaping-Closures","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about the "},{"type":"codeVoice","code":"@noescape"},{"type":"text","text":" attribute."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" "},{"type":"text","text":"and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true,"type":"reference"},{"type":"text","text":" sections"},{"type":"text","text":" "},{"type":"text","text":"with information about tvOS."}]}]},{"content":[{"inlineContent":[{"text":"Added information about the behavior of in-out parameters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:Declarations#In-Out-Parameters","type":"text"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information to the ","type":"text"},{"type":"text","text":"doc:Expressions#Capture-Lists"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"about how values specified in closure capture lists are captured.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"section to clarify how assignment through optional chaining"},{"text":" ","type":"text"},{"type":"text","text":"behaves."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Improved the discussion of autoclosures","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"text","text":"doc:Closures#Autoclosures"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added an example that uses the ","type":"text"},{"type":"codeVoice","code":"??"},{"text":" operator","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","type":"reference"},{"type":"text","text":" chapter."}],"type":"paragraph"}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2015-09-16"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 2.0.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about error handling","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","type":"reference","isActive":true},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","isActive":true,"type":"reference"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Throw-Statement"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Defer-Statement","type":"reference","isActive":true},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Try-Operator","type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:ErrorHandling#Representing-and-Throwing-Errors","type":"text"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that all types can conform to the "},{"type":"codeVoice","code":"ErrorType"},{"type":"text","text":" protocol."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the new "},{"type":"codeVoice","code":"try?"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:ErrorHandling#Converting-Errors-to-Optional-Values"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about recursive enumerations"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"text":"doc:Enumerations#Recursive-Enumerations","type":"text"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","isActive":true,"type":"reference"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","isActive":true,"type":"reference"},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about API availability checking"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:ControlFlow#Checking-API-Availability","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Availability-Condition","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the new ","type":"text"},{"code":"guard","type":"codeVoice"},{"text":" statement","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:ControlFlow#Early-Exit","type":"text"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Guard-Statement","type":"reference"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about protocol extensions"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},{"text":" chapter.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about access control for unit testing","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:AccessControl#Access-Levels-for-Unit-Test-Targets"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","isActive":true},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the new optional pattern","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:Patterns#Optional-Pattern","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:ControlFlow#Repeat-While","type":"text"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"with information about the ","type":"text"},{"type":"codeVoice","code":"repeat"},{"text":"-","type":"text"},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","type":"reference","isActive":true},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that "},{"type":"codeVoice","code":"String"},{"type":"text","text":" no longer conforms"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"codeVoice","code":"CollectionType"},{"type":"text","text":" protocol from the Swift standard library."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the new Swift standard library"},{"text":" ","type":"text"},{"code":"print(_:separator:terminator)","type":"codeVoice"},{"text":" function","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:TheBasics#Printing-Constants-and-Variables"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the behavior","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of enumeration cases with "},{"code":"String","type":"codeVoice"},{"type":"text","text":" raw values"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Enumerations#Implicitly-Assigned-Raw-Values"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations"},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations"},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"code":"@autoclosure","type":"codeVoice"},{"text":" attribute —","type":"text"},{"type":"text","text":" "},{"text":"including its ","type":"text"},{"code":"@autoclosure(escaping)","type":"codeVoice"},{"text":" form —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:Closures#Autoclosures"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with information about the ","type":"text"},{"type":"codeVoice","code":"@available"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"type":"codeVoice","code":"@warn_unused_result"},{"type":"text","text":" attributes."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Type-Attributes","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about the "},{"type":"codeVoice","code":"@convention"},{"text":" attribute.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added an example of using multiple optional bindings","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with a "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:TheBasics#Optional-Binding","type":"text"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","type":"reference"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"about how concatenating string literals using the ","type":"text"},{"type":"codeVoice","code":"+"},{"text":" operator","type":"text"},{"type":"text","text":" "},{"type":"text","text":"happens at compile time."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"about comparing metatype values and using them"},{"text":" ","type":"text"},{"text":"to construct instances with initializer expressions.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the ","type":"text"},{"text":"doc:TheBasics#Debugging-with-Assertions","type":"text"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"about when user-defined assertions are disabled."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of the ","type":"text"},{"code":"@NSManaged","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference","isActive":true},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that the attribute can be applied to certain instance methods."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:Functions#Variadic-Parameters","type":"text"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"now that variadic parameters can be declared in any position","type":"text"},{"text":" ","type":"text"},{"text":"in a function’s parameter list.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:Initialization#Overriding-a-Failable-Initializer","type":"text"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"about how a nonfailable initializer can delegate"},{"text":" ","type":"text"},{"type":"text","text":"up to a failable initializer"},{"type":"text","text":" "},{"text":"by force-unwrapping the result of the superclass’s initializer.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about using enumeration cases as functions"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about explicitly referencing an initializer"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Initializer-Expression","isActive":true,"type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about build configuration","type":"text"},{"type":"text","text":" "},{"text":"and line control statements","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compiler-Control-Statements","isActive":true,"type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Added a note to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"about constructing class instances from metatype values."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the","type":"text"},{"type":"text","text":" "},{"text":"doc:AutomaticReferenceCounting#Weak-References","type":"text"},{"type":"text","text":" "},{"type":"text","text":"section about weak references being unsuitable for caching."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated a note in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"to mention that stored type properties are lazily initialized.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Closures#Capturing-Values"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to clarify how variables and constants are captured in closures.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to describe when you can apply the ","type":"text"},{"code":"@objc","type":"codeVoice"},{"text":" attribute to classes.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"text","text":"doc:ErrorHandling#Handling-Errors"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"about the performance of executing a "},{"code":"throw","type":"codeVoice"},{"text":" statement.","type":"text"},{"type":"text","text":" "},{"text":"Added similar information about the ","type":"text"},{"code":"do","type":"codeVoice"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about stored and computed type properties"},{"type":"text","text":" "},{"text":"for classes, structures, and enumerations.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about labeled break statements."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated a note in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"to clarify the behavior of ","type":"text"},{"code":"willSet","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"didSet","type":"codeVoice"},{"type":"text","text":" observers."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"text","text":"doc:AccessControl#Access-Levels"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with information about the scope of "},{"type":"codeVoice","code":"private"},{"text":" access.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the","type":"text"},{"text":" ","type":"text"},{"text":"doc:AutomaticReferenceCounting#Weak-References","type":"text"},{"text":" ","type":"text"},{"text":"section about the differences in weak references","type":"text"},{"type":"text","text":" "},{"text":"between garbage collected systems and ARC.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the"},{"type":"text","text":" "},{"type":"text","text":"doc:StringsAndCharacters#Special-Characters-in-String-Literals"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with a more precise definition of Unicode scalars.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2015-04-08"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 1.2."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift now has a native ","type":"text"},{"code":"Set","type":"codeVoice"},{"type":"text","text":" collection type."},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Sets","type":"reference","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"@autoclosure"},{"text":" is now an attribute of the parameter declaration,","type":"text"},{"type":"text","text":" "},{"text":"not its type.","type":"text"},{"text":" ","type":"text"},{"text":"There’s also a new ","type":"text"},{"type":"codeVoice","code":"@noescape"},{"type":"text","text":" parameter declaration attribute."},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Type methods and properties now use the ","type":"text"},{"type":"codeVoice","code":"static"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"as a declaration modifier."},{"type":"text","text":" "},{"type":"text","text":"For more information see "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Variable-Properties","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Swift now includes the "},{"code":"as?","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"as!"},{"text":" failable downcast operators.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For more information,"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a new guide section about"},{"text":" ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#String-Indices"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Removed the overflow division (","type":"text"},{"code":"&\/","type":"codeVoice"},{"text":") and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"overflow remainder ("},{"code":"&%","type":"codeVoice"},{"type":"text","text":") operators"},{"type":"text","text":" "},{"text":"from ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Overflow-Operators"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the rules for constant and"},{"type":"text","text":" "},{"text":"constant property declaration and initialization.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the definition of Unicode scalars in string literals."},{"text":" ","type":"text"},{"text":"See ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#Special-Characters-in-String-Literals"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"type":"text","text":"doc:BasicOperators#Range-Operators"},{"type":"text","text":" to note that"},{"type":"text","text":" "},{"type":"text","text":"a half-open range with the same start and end index will be empty."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"type":"text","text":"doc:Closures#Closures-Are-Reference-Types"},{"type":"text","text":" to clarify"},{"text":" ","type":"text"},{"type":"text","text":"the capturing rules for variables."}]}]},{"content":[{"inlineContent":[{"text":"Updated ","type":"text"},{"text":"doc:AdvancedOperators#Value-Overflow","type":"text"},{"type":"text","text":" to clarify"},{"type":"text","text":" "},{"text":"the overflow behavior of signed and unsigned integers","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration"},{"type":"text","text":" to clarify"},{"text":" ","type":"text"},{"type":"text","text":"protocol declaration scope and members."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated ","type":"text"},{"text":"doc:AutomaticReferenceCounting#Defining-a-Capture-List","type":"text"},{"type":"text","text":" "},{"text":"to clarify the syntax for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"weak and unowned references in closure capture lists."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"type":"text","text":"doc:LexicalStructure#Operators"},{"type":"text","text":" to explicitly mention"},{"text":" ","type":"text"},{"type":"text","text":"examples of supported characters for custom operators,"},{"text":" ","type":"text"},{"text":"such as those in the Mathematical Operators, Miscellaneous Symbols,","type":"text"},{"text":" ","type":"text"},{"text":"and Dingbats Unicode blocks.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Constants can now be declared without being initialized"},{"type":"text","text":" "},{"text":"in local function scope.","type":"text"},{"type":"text","text":" "},{"text":"They must have a set value before first use.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In an initializer, constant properties can now only assign a value once."},{"type":"text","text":" "},{"type":"text","text":"For more information,"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"text":"doc:Initialization#Assigning-Constant-Properties-During-Initialization","type":"text"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Multiple optional bindings can now appear in a single "},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"as a comma-separated list of assignment expressions."},{"text":" ","type":"text"},{"text":"For more information, see ","type":"text"},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Optional-Chaining-Expression","isActive":true},{"type":"text","text":" "},{"text":"must appear within a postfix expression.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Protocol casts are no longer limited to ","type":"text"},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" protocols."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Type casts that can fail at runtime","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now use the "},{"type":"codeVoice","code":"as?"},{"type":"text","text":" or "},{"type":"codeVoice","code":"as!"},{"text":" operator,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and type casts that are guaranteed not to fail use the "},{"code":"as","type":"codeVoice"},{"text":" operator.","type":"text"},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Type-Casting-Operators","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2014-10-16"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 1.1."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a full guide to "},{"text":"doc:Initialization#Failable-Initializers","type":"text"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a description of "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Failable-Initializer-Requirements","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"for protocols.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Constants and variables of type "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" can now contain"},{"type":"text","text":" "},{"type":"text","text":"function instances. Updated the example in "},{"text":"doc:TypeCasting#Type-Casting-for-Any-and-AnyObject","type":"text"},{"type":"text","text":" "},{"text":"to show how to check for and cast to a function type","type":"text"},{"type":"text","text":" "},{"text":"within a ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" statement.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Enumerations with raw values","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now have a "},{"code":"rawValue","type":"codeVoice"},{"text":" property rather than a ","type":"text"},{"type":"codeVoice","code":"toRaw()"},{"text":" method","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and a failable initializer with a "},{"code":"rawValue","type":"codeVoice"},{"type":"text","text":" parameter"},{"type":"text","text":" "},{"type":"text","text":"rather than a "},{"type":"codeVoice","code":"fromRaw()"},{"type":"text","text":" method."},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"type":"text","text":"doc:Enumerations#Raw-Values"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Added a new reference section about","type":"text"},{"text":" ","type":"text"},{"text":"doc:Declarations#Failable-Initializers","type":"text"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which can trigger initialization failure."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Custom operators can now contain the ","type":"text"},{"type":"codeVoice","code":"?"},{"type":"text","text":" character."},{"text":" ","type":"text"},{"type":"text","text":"Updated the "},{"type":"text","text":"doc:LexicalStructure#Operators"},{"type":"text","text":" reference to describe"},{"text":" ","type":"text"},{"type":"text","text":"the revised rules."},{"type":"text","text":" "},{"type":"text","text":"Removed a duplicate description of the valid set of operator characters"},{"type":"text","text":" "},{"type":"text","text":"from "},{"type":"text","text":"doc:AdvancedOperators#Custom-Operators"},{"text":".","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2014-08-18"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"New document that describes Swift 1.0,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Apple’s new programming language for building iOS and OS X apps."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Initializer-Requirements","isActive":true},{"type":"text","text":" in protocols."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"doc:TheBasics#Assertions-and-Preconditions"},{"text":" can now use string interpolation.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Removed a note to the contrary."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the","type":"text"},{"text":" ","type":"text"},{"text":"doc:StringsAndCharacters#Concatenating-Strings-and-Characters","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to reflect the fact that "},{"code":"String","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values"},{"type":"text","text":" "},{"text":"can no longer be combined with the addition operator (","type":"text"},{"type":"codeVoice","code":"+"},{"text":")","type":"text"},{"text":" ","type":"text"},{"text":"or addition assignment operator (","type":"text"},{"type":"codeVoice","code":"+="},{"text":").","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"These operators are now used only with "},{"code":"String","type":"codeVoice"},{"text":" values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Use the "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type’s "},{"code":"append(_:)","type":"codeVoice"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"to append a single "},{"code":"Character","type":"codeVoice"},{"text":" value onto the end of a string.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about the ","type":"text"},{"type":"codeVoice","code":"availability"},{"text":" attribute to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true,"type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"doc:TheBasics#Optionals"},{"text":" no longer implicitly evaluate to","type":"text"},{"text":" ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" when they have a value and ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":" when they do not,"},{"type":"text","text":" "},{"type":"text","text":"to avoid confusion when working with optional "},{"code":"Bool","type":"codeVoice"},{"text":" values.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Instead, make an explicit check against "},{"type":"codeVoice","code":"nil"},{"text":" ","type":"text"},{"type":"text","text":"with the "},{"code":"==","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"!="},{"type":"text","text":" operators"},{"text":" ","type":"text"},{"type":"text","text":"to find out if an optional contains a value."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift now has a "},{"type":"text","text":"doc:BasicOperators#Nil-Coalescing-Operator"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"a ?? b"},{"type":"text","text":"), which unwraps an optional’s value if it exists,"},{"type":"text","text":" "},{"type":"text","text":"or returns a default value if the optional is "},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated and expanded","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#Comparing-Strings"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to reflect and demonstrate that string and character comparison"},{"type":"text","text":" "},{"text":"and prefix \/ suffix comparison are now based on","type":"text"},{"type":"text","text":" "},{"text":"Unicode canonical equivalence of extended grapheme clusters.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now try to set a property’s value, assign to a subscript,"},{"text":" ","type":"text"},{"type":"text","text":"or call a mutating method or operator through"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The information about"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining"},{"text":" ","type":"text"},{"type":"text","text":"has been updated accordingly,"},{"type":"text","text":" "},{"text":"and the examples of checking for method call success in","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Calling-Methods-Through-Optional-Chaining","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"have been expanded to show how to check for property setting success."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Subscripts-of-Optional-Type","isActive":true},{"type":"text","text":" "},{"text":"through optional chaining.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:CollectionTypes#Accessing-and-Modifying-an-Array"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to note that you can no longer append a single item to an array","type":"text"},{"text":" ","type":"text"},{"text":"with the ","type":"text"},{"code":"+=","type":"codeVoice"},{"type":"text","text":" operator."},{"type":"text","text":" "},{"type":"text","text":"Instead, use the "},{"type":"codeVoice","code":"append(_:)"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"text":"or append a single-item array with the ","type":"text"},{"type":"codeVoice","code":"+="},{"type":"text","text":" operator."}]}]},{"content":[{"inlineContent":[{"text":"Added a note that the start value ","type":"text"},{"type":"codeVoice","code":"a"},{"type":"text","text":" "},{"type":"text","text":"for the "},{"text":"doc:BasicOperators#Range-Operators","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"a...b"},{"type":"text","text":" and "},{"code":"a..<b","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"must not be greater than the end value "},{"type":"codeVoice","code":"b"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Rewrote the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","type":"reference"},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to remove its introductory coverage of initializer overrides."},{"type":"text","text":" "},{"type":"text","text":"This chapter now focuses more on the addition of"},{"text":" ","type":"text"},{"text":"new functionality in a subclass,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the modification of existing functionality with overrides."},{"text":" ","type":"text"},{"text":"The chapter’s example of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:Inheritance#Overriding-Property-Getters-and-Setters"},{"type":"text","text":" "},{"type":"text","text":"has been rewritten to show how to override a "},{"code":"description","type":"codeVoice"},{"text":" property.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(The examples of modifying an inherited property’s default value"},{"text":" ","type":"text"},{"text":"in a subclass initializer have been moved to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","type":"reference"},{"type":"text","text":" chapter.)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:Initialization#Initializer-Inheritance-and-Overriding"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to note that overrides of a designated initializer"},{"type":"text","text":" "},{"text":"must now be marked with the ","type":"text"},{"code":"override","type":"codeVoice"},{"type":"text","text":" modifier."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:Initialization#Required-Initializers"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to note that the "},{"type":"codeVoice","code":"required"},{"type":"text","text":" modifier is now written before"},{"type":"text","text":" "},{"type":"text","text":"every subclass implementation of a required initializer,"},{"text":" ","type":"text"},{"type":"text","text":"and that the requirements for required initializers"},{"text":" ","type":"text"},{"text":"can now be satisfied by automatically inherited initializers.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Infix ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Operator-Methods"},{"text":" no longer require","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"@infix"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@prefix"},{"text":" and ","type":"text"},{"code":"@postfix","type":"codeVoice"},{"text":" attributes","type":"text"},{"text":" ","type":"text"},{"text":"for ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Prefix-and-Postfix-Operators"},{"text":" ","type":"text"},{"text":"have been replaced by ","type":"text"},{"code":"prefix","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"postfix","type":"codeVoice"},{"type":"text","text":" declaration modifiers."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note about the order in which"},{"type":"text","text":" "},{"type":"text","text":"doc:AdvancedOperators#Prefix-and-Postfix-Operators"},{"type":"text","text":" are applied"},{"type":"text","text":" "},{"type":"text","text":"when both a prefix and a postfix operator are applied to"},{"text":" ","type":"text"},{"type":"text","text":"the same operand."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Operator functions for","type":"text"},{"type":"text","text":" "},{"text":"doc:AdvancedOperators#Compound-Assignment-Operators","type":"text"},{"text":" no longer use","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"@assignment","type":"codeVoice"},{"type":"text","text":" attribute when defining the function."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The order in which modifiers are specified when defining"},{"text":" ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Custom-Operators"},{"type":"text","text":" has changed."},{"text":" ","type":"text"},{"type":"text","text":"You now write "},{"code":"prefix operator","type":"codeVoice"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":"operator prefix"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"for example.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about the ","type":"text"},{"code":"dynamic","type":"codeVoice"},{"type":"text","text":" declaration modifier"},{"type":"text","text":" "},{"text":"in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about how type inference works","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals","type":"reference","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added more information about curried functions.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new chapter about "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","type":"reference","isActive":true},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"type":"text","text":"to reflect the fact that Swift’s "},{"type":"codeVoice","code":"Character"},{"text":" type now represents","type":"text"},{"text":" ","type":"text"},{"text":"a single Unicode extended grapheme cluster.","type":"text"},{"type":"text","text":" "},{"text":"Includes a new section on","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#Extended-Grapheme-Clusters"},{"type":"text","text":" "},{"type":"text","text":"and more information about"},{"text":" ","type":"text"},{"text":"doc:StringsAndCharacters#Unicode-Scalar-Values","type":"text"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#Comparing-Strings"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:StringsAndCharacters#String-Literals","type":"text"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"to note that Unicode scalars inside string literals","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are now written as "},{"type":"codeVoice","code":"\\u{n}"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"where ","type":"text"},{"type":"codeVoice","code":"n"},{"type":"text","text":" is a hexadecimal number between 0 and 10FFFF,"},{"type":"text","text":" "},{"type":"text","text":"the range of Unicode’s codespace."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"NSString","type":"codeVoice"},{"text":" ","type":"text"},{"code":"length","type":"codeVoice"},{"type":"text","text":" property is now mapped onto"},{"text":" ","type":"text"},{"type":"text","text":"Swift’s native "},{"type":"codeVoice","code":"String"},{"text":" type as ","type":"text"},{"code":"utf16Count","type":"codeVoice"},{"type":"text","text":", not "},{"type":"codeVoice","code":"utf16count"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift’s native ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" type no longer has","type":"text"},{"text":" ","type":"text"},{"text":"an ","type":"text"},{"code":"uppercaseString","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"lowercaseString"},{"type":"text","text":" property."},{"text":" ","type":"text"},{"type":"text","text":"The corresponding section in"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},{"type":"text","text":" "},{"type":"text","text":"has been removed, and various code examples have been updated."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a new section about"},{"text":" ","type":"text"},{"text":"doc:Initialization#Initializer-Parameters-Without-Argument-Labels","type":"text"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about"},{"text":" ","type":"text"},{"type":"text","text":"doc:Initialization#Required-Initializers"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about "},{"text":"doc:Functions#Optional-Tuple-Return-Types","type":"text"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:TheBasics#Type-Annotations","type":"text"},{"type":"text","text":" section to note that"},{"type":"text","text":" "},{"type":"text","text":"multiple related variables can be defined on a single line"},{"type":"text","text":" "},{"text":"with one type annotation.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"@optional","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"@lazy"},{"text":", ","type":"text"},{"type":"codeVoice","code":"@final"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"@required"},{"text":" attributes","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are now the "},{"type":"codeVoice","code":"optional"},{"type":"text","text":", "},{"code":"lazy","type":"codeVoice"},{"type":"text","text":", "},{"code":"final","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"required"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","type":"reference","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the entire book to refer to "},{"code":"..<","type":"codeVoice"},{"type":"text","text":" as"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"text","text":"doc:BasicOperators#Half-Open-Range-Operator"},{"text":" ","type":"text"},{"type":"text","text":"(rather than the “half-closed range operator”)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:CollectionTypes#Accessing-and-Modifying-a-Dictionary"},{"type":"text","text":" "},{"type":"text","text":"section to note that "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" now has"},{"text":" ","type":"text"},{"type":"text","text":"a Boolean "},{"code":"isEmpty","type":"codeVoice"},{"text":" property.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Clarified the full list of characters that can be used"},{"text":" ","type":"text"},{"type":"text","text":"when defining "},{"type":"text","text":"doc:AdvancedOperators#Custom-Operators"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"nil"},{"type":"text","text":" and the Booleans "},{"type":"codeVoice","code":"true"},{"type":"text","text":" and "},{"type":"codeVoice","code":"false"},{"text":" are now ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals","type":"reference"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"code":"Array","type":"codeVoice"},{"type":"text","text":" type now has full value semantics."},{"text":" ","type":"text"},{"text":"Updated the information about ","type":"text"},{"type":"text","text":"doc:CollectionTypes#Mutability-of-Collections"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"text":"doc:CollectionTypes#Arrays","type":"text"},{"type":"text","text":" to reflect the new approach."},{"type":"text","text":" "},{"type":"text","text":"Also clarified the assignment and copy behavior for strings arrays and dictionaries."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"doc:CollectionTypes#Array-Type-Shorthand-Syntax"},{"type":"text","text":" is now written as"},{"text":" ","type":"text"},{"code":"[SomeType]","type":"codeVoice"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":"SomeType[]"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about "},{"text":"doc:CollectionTypes#Dictionary-Type-Shorthand-Syntax","type":"text"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is written as "},{"type":"codeVoice","code":"[KeyType: ValueType]"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a new section about "},{"type":"text","text":"doc:CollectionTypes#Hash-Values-for-Set-Types"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Examples of ","type":"text"},{"text":"doc:Closures#Closure-Expressions","type":"text"},{"type":"text","text":" now use"},{"type":"text","text":" "},{"type":"text","text":"the global "},{"type":"codeVoice","code":"sorted(_:_:)"},{"type":"text","text":" function"},{"text":" ","type":"text"},{"text":"rather than the global ","type":"text"},{"code":"sort(_:_:)","type":"codeVoice"},{"type":"text","text":" function,"},{"text":" ","type":"text"},{"text":"to reflect the new array value semantics.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the information about ","type":"text"},{"text":"doc:Initialization#Memberwise-Initializers-for-Structure-Types","type":"text"},{"type":"text","text":" "},{"text":"to clarify that the memberwise structure initializer is made available","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"even if a structure’s stored properties don’t have default values."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated to "},{"code":"..<","type":"codeVoice"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":".."},{"text":" ","type":"text"},{"type":"text","text":"for the "},{"text":"doc:BasicOperators#Half-Open-Range-Operator","type":"text"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added an example of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type"},{"type":"text","text":"."}]}]}]}],"kind":"content"}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/RevisionHistory","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"sections":[],"kind":"article","references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Failable-Initializer-Requirements":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Failable-Initializer-Requirements","url":"\/documentation\/the-swift-programming-language\/protocols#Failable-Initializer-Requirements","title":"Failable Initializer Requirements","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Initializer-Expression":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Initializer-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Initializer-Expression","title":"Initializer Expression","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"title":"Cadenas y caracteres","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","abstract":[{"text":"Store and manipulate text.","type":"text"}],"role":"article","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Optional-Chaining-Expression":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Optional-Chaining-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Optional-Chaining-Expression","title":"Optional-Chaining Expression","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Macros":{"kind":"article","abstract":[{"type":"text","text":"Use macros to generate code at compile time."}],"role":"article","url":"\/documentation\/the-swift-programming-language\/macros","type":"topic","title":"Macros","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Throw-Statement":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Throw-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Throw-Statement","title":"Throw Statement","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Literal-Expression":{"type":"topic","title":"Literal Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Literal-Expression","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Sets":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Sets","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Sets","title":"Sets","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Any-Type":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Any-Type","url":"\/documentation\/the-swift-programming-language\/types#Any-Type","title":"Any Type","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switch-Statement":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switch-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Switch-Statement","title":"Switch Statement","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Wrappers":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Wrappers","url":"\/documentation\/the-swift-programming-language\/properties#Property-Wrappers","title":"Property Wrappers","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Contextual-Where-Clauses":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Contextual-Where-Clauses","url":"\/documentation\/the-swift-programming-language\/generics#Contextual-Where-Clauses","title":"Contextual Where Clauses","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"abstract":[{"text":"Define and call functions, label their arguments, and use their return values.","type":"text"}],"title":"Funciones","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Associated-Types":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/generics#Associated-Types","kind":"section","title":"Associated Types","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Rethrowing-Functions-and-Methods":{"type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Rethrowing-Functions-and-Methods","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","title":"Rethrowing Functions and Methods","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Implicit-Conversion-to-a-Pointer-Type":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Conversion-to-a-Pointer-Type","url":"\/documentation\/the-swift-programming-language\/expressions#Implicit-Conversion-to-a-Pointer-Type","kind":"section","title":"Implicit Conversion to a Pointer Type","type":"topic","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#resultBuilder":{"url":"\/documentation\/the-swift-programming-language\/attributes#resultBuilder","title":"resultBuilder","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#resultBuilder","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Calling-Methods-Through-Optional-Chaining":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Calling-Methods-Through-Optional-Chaining","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Calling-Methods-Through-Optional-Chaining","title":"Calling Methods Through Optional Chaining","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Identifiers":{"abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers","title":"Identifiers","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Identifiers","kind":"section","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"type":"topic","abstract":[{"text":"Perform asynchronous operations.","type":"text"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","role":"article","kind":"article","title":"Concurrencia","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","role":"article","abstract":[{"text":"Add information to declarations and types.","type":"text"}],"type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes","title":"Attributes","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Metatype-Type":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type","url":"\/documentation\/the-swift-programming-language\/types#Metatype-Type","title":"Metatype Type","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Await-Operator":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Await-Operator","url":"\/documentation\/the-swift-programming-language\/expressions#Await-Operator","title":"Await Operator","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Conditional-Expression":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Conditional-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Conditional-Expression","title":"Conditional Expression","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Type-Attributes":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Type-Attributes","url":"\/documentation\/the-swift-programming-language\/attributes#Type-Attributes","title":"Type Attributes","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Herencia","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","abstract":[{"type":"text","text":"Subclass to add or override functionality."}],"type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements":{"kind":"article","abstract":[{"type":"text","text":"Group expressions and control the flow of execution."}],"role":"article","url":"\/documentation\/the-swift-programming-language\/statements","type":"topic","title":"Statements","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Initializer-Requirements":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Initializer-Requirements","url":"\/documentation\/the-swift-programming-language\/protocols#Initializer-Requirements","title":"Initializer Requirements","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#frozen":{"type":"topic","title":"frozen","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen","url":"\/documentation\/the-swift-programming-language\/attributes#frozen","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types":{"type":"topic","title":"Types","url":"\/documentation\/the-swift-programming-language\/types","kind":"article","abstract":[{"type":"text","text":"Use built-in named and compound types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#unknown":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unknown","url":"\/documentation\/the-swift-programming-language\/attributes#unknown","title":"unknown","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","role":"article","title":"Manejo de errores","url":"\/documentation\/the-swift-programming-language\/errorhandling","type":"topic","abstract":[{"type":"text","text":"Respond to and recover from errors."}],"kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Type-Properties":{"abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/properties#Type-Properties","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties","title":"Type Properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Explicit-Member-Expression":{"type":"topic","title":"Explicit Member Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Explicit-Member-Expression","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","url":"\/documentation\/the-swift-programming-language\/generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","title":"Using a Protocol in Its Associated Type’s Constraints","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Function-Declaration":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Function-Declaration","kind":"section","title":"Function Declaration","type":"topic","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"kind":"article","abstract":[{"type":"text","text":"Structure your code to avoid conflicts when accessing memory."}],"role":"article","url":"\/documentation\/the-swift-programming-language\/memorysafety","type":"topic","title":"Memory Safety","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Selector-Expression":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Selector-Expression","title":"Selector Expression","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Constant-Declaration":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Constant-Declaration","title":"Constant Declaration","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Class-Only-Protocols":{"type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Class-Only-Protocols","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols","title":"Class-Only Protocols","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Key-Path-Expression":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Key-Path-Expression","title":"Key-Path Expression","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Try-Operator":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Try-Operator","url":"\/documentation\/the-swift-programming-language\/expressions#Try-Operator","title":"Try Operator","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extending-a-Generic-Type":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type","url":"\/documentation\/the-swift-programming-language\/generics#Extending-a-Generic-Type","title":"Extending a Generic Type","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Defer-Statement":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Defer-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Defer-Statement","title":"Defer Statement","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Extension-Declaration":{"type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Extension-Declaration","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","title":"Extension Declaration","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Sendable":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Sendable","url":"\/documentation\/the-swift-programming-language\/attributes#Sendable","title":"Sendable","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#dynamicCallable":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/attributes#dynamicCallable","kind":"section","title":"dynamicCallable","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicCallable"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Where-Clauses":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses","kind":"section","type":"topic","title":"Generic Where Clauses","url":"\/documentation\/the-swift-programming-language\/generics#Generic-Where-Clauses","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GuidedTour":{"kind":"article","abstract":[{"type":"text","text":"Explora las características y la sintaxis de Swift."}],"role":"article","url":"\/documentation\/the-swift-programming-language\/guidedtour","type":"topic","title":"Un Recorrido por Swift","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Break-Statement":{"type":"topic","title":"Break Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Break-Statement","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#While-Statement":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#While-Statement","url":"\/documentation\/the-swift-programming-language\/statements#While-Statement","title":"While Statement","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#available":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#available","url":"\/documentation\/the-swift-programming-language\/attributes#available","title":"available","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#unchecked":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unchecked","url":"\/documentation\/the-swift-programming-language\/attributes#unchecked","title":"unchecked","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Conditionally-Conforming-to-a-Protocol":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Conditionally-Conforming-to-a-Protocol","url":"\/documentation\/the-swift-programming-language\/protocols#Conditionally-Conforming-to-a-Protocol","title":"Conditionally Conforming to a Protocol","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Function-Call-Expression":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Function-Call-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Function-Call-Expression","kind":"section","title":"Function Call Expression","type":"topic","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Checking-for-Protocol-Conformance":{"url":"\/documentation\/the-swift-programming-language\/protocols#Checking-for-Protocol-Conformance","title":"Checking for Protocol Conformance","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance","abstract":[],"kind":"section","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Do-Statement":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Do-Statement","title":"Do Statement","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"url":"\/documentation\/the-swift-programming-language\/generics","abstract":[{"type":"text","text":"Write code that works for multiple types and specify requirements for those types."}],"kind":"article","title":"Generics","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","type":"topic","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"title":"Enumeraciones","abstract":[{"type":"text","text":"Model custom types that define a list of possible values."}],"url":"\/documentation\/the-swift-programming-language\/enumerations","role":"article","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Declaration-Modifiers":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","url":"\/documentation\/the-swift-programming-language\/declarations#Declaration-Modifiers","title":"Declaration Modifiers","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Associated-Types-with-a-Generic-Where-Clause":{"url":"\/documentation\/the-swift-programming-language\/generics#Associated-Types-with-a-Generic-Where-Clause","title":"Associated Types with a Generic Where Clause","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types-with-a-Generic-Where-Clause","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Type-Variable-Properties":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Variable-Properties","url":"\/documentation\/the-swift-programming-language\/declarations#Type-Variable-Properties","title":"Type Variable Properties","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Stored-Variable-Observers-and-Property-Observers":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Stored-Variable-Observers-and-Property-Observers","url":"\/documentation\/the-swift-programming-language\/declarations#Stored-Variable-Observers-and-Property-Observers","title":"Stored Variable Observers and Property Observers","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure":{"type":"topic","title":"Lexical Structure","url":"\/documentation\/the-swift-programming-language\/lexicalstructure","kind":"article","abstract":[{"type":"text","text":"Use the lowest-level components of the syntax."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Literals":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Literals","title":"Literals","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Subscripts-of-Optional-Type":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Subscripts-of-Optional-Type","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Subscripts-of-Optional-Type","title":"Accessing Subscripts of Optional Type","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"abstract":[{"type":"text","text":"Model the lifetime of objects and their relationships."}],"url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting","kind":"article","title":"Conteo automático de referencias","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","type":"topic","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#dynamicMemberLookup":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/attributes#dynamicMemberLookup","kind":"section","title":"dynamicMemberLookup","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicMemberLookup"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Type-Casting-Operators":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Type-Casting-Operators","url":"\/documentation\/the-swift-programming-language\/expressions#Type-Casting-Operators","title":"Type-Casting Operators","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Function-Type":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","kind":"section","title":"Function Type","type":"topic","abstract":[],"url":"\/documentation\/the-swift-programming-language\/types#Function-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Declaration-Attributes":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","url":"\/documentation\/the-swift-programming-language\/attributes#Declaration-Attributes","title":"Declaration Attributes","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Implicit-Member-Expression":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/expressions#Implicit-Member-Expression","kind":"section","title":"Implicit Member Expression","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Member-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Compile-Time-Diagnostic-Statement":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compile-Time-Diagnostic-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Compile-Time-Diagnostic-Statement","title":"Compile-Time Diagnostic Statement","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#main":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#main","url":"\/documentation\/the-swift-programming-language\/attributes#main","title":"main","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Type-Alias-Declaration":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/declarations#Type-Alias-Declaration","kind":"section","title":"Type Alias Declaration","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Alias-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"title":"Protocols","url":"\/documentation\/the-swift-programming-language\/protocols","kind":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","abstract":[{"type":"text","text":"Define requirements that conforming types must implement."}],"role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Line-Control-Statement":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Line-Control-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Line-Control-Statement","title":"Line Control Statement","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Regular-Expression-Literals":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Regular-Expression-Literals","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Regular-Expression-Literals","title":"Regular Expression Literals","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Methods-with-Special-Names":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Methods-with-Special-Names","url":"\/documentation\/the-swift-programming-language\/declarations#Methods-with-Special-Names","kind":"section","title":"Methods with Special Names","type":"topic","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Optional-Protocol-Requirements":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/protocols#Optional-Protocol-Requirements","kind":"section","title":"Optional Protocol Requirements","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Optional-Protocol-Requirements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Result-Transformations":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Result-Transformations","url":"\/documentation\/the-swift-programming-language\/attributes#Result-Transformations","title":"Result Transformations","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","url":"\/documentation\/the-swift-programming-language\/declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","title":"Enumerations with Cases of a Raw-Value Type","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Protocol-Declaration":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Protocol-Declaration","title":"Protocol Declaration","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Precedence-Group-Declaration":{"abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/declarations#Precedence-Group-Declaration","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Precedence-Group-Declaration","title":"Precedence Group Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Properties-Through-Optional-Chaining":{"title":"Accessing Properties Through Optional Chaining","kind":"section","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Properties-Through-Optional-Chaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions":{"type":"topic","title":"Expressions","url":"\/documentation\/the-swift-programming-language\/expressions","kind":"article","abstract":[{"type":"text","text":"Access, modify, and assign values."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"role":"collection","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","url":"\/documentation\/the-swift-programming-language","title":"The Swift Programming Language (6)","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocol-Extensions":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions","url":"\/documentation\/the-swift-programming-language\/protocols#Protocol-Extensions","title":"Protocol Extensions","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"kind":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","title":"Operadores avanzados","role":"article","abstract":[{"type":"text","text":"Define custom operators, perform bitwise operations, and use builder syntax."}],"url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"title":"Inicialización","url":"\/documentation\/the-swift-programming-language\/initialization","kind":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","abstract":[{"type":"text","text":"Set the initial values for a type’s stored properties and perform one-time setup."}],"role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocol-Composition":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/protocols#Protocol-Composition","kind":"section","title":"Protocol Composition","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Self-Type":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type","url":"\/documentation\/the-swift-programming-language\/types#Self-Type","title":"Self Type","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Functions-that-Never-Return":{"type":"topic","title":"Functions that Never Return","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return","url":"\/documentation\/the-swift-programming-language\/declarations#Functions-that-Never-Return","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Actor-Declaration":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Actor-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Actor-Declaration","title":"Actor Declaration","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"type":"topic","title":"Fundamentos","url":"\/documentation\/the-swift-programming-language\/thebasics","kind":"article","abstract":[{"type":"text","text":"Trabaja con tipos comunes de datos y escribe sintaxis básica."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Guard-Statement":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/statements#Guard-Statement","kind":"section","title":"Guard Statement","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Guard-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Protocol-Associated-Type-Declaration":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/declarations#Protocol-Associated-Type-Declaration","kind":"section","title":"Protocol Associated Type Declaration","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Associated-Type-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#String-Literals":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#String-Literals","title":"String Literals","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"kind":"article","abstract":[{"type":"text","text":"Access members of an optional value without unwrapping."}],"role":"article","url":"\/documentation\/the-swift-programming-language\/optionalchaining","type":"topic","title":"Optional Chaining","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"type":"topic","title":"Opaque and Boxed Types","url":"\/documentation\/the-swift-programming-language\/opaquetypes","kind":"article","abstract":[{"type":"text","text":"Hide implementation details about a value’s type."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations":{"type":"topic","title":"Declaraciones","url":"\/documentation\/the-swift-programming-language\/declarations","kind":"article","abstract":[{"type":"text","text":"Introduce types, operators, variables, and other names and constructs."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Subscripts":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Subscripts","url":"\/documentation\/the-swift-programming-language\/generics#Generic-Subscripts","title":"Generic Subscripts","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"kind":"article","abstract":[{"type":"text","text":"Manage the visibility of code by declaration, file, and module."}],"role":"article","url":"\/documentation\/the-swift-programming-language\/accesscontrol","type":"topic","title":"Control de acceso","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Enumerations-with-Cases-of-Any-Type":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type","url":"\/documentation\/the-swift-programming-language\/declarations#Enumerations-with-Cases-of-Any-Type","title":"Enumerations with Cases of Any Type","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switching-Over-Future-Enumeration-Cases":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","kind":"section","title":"Switching Over Future Enumeration Cases","type":"topic","abstract":[],"url":"\/documentation\/the-swift-programming-language\/statements#Switching-Over-Future-Enumeration-Cases"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extensions-with-a-Generic-Where-Clause":{"url":"\/documentation\/the-swift-programming-language\/generics#Extensions-with-a-Generic-Where-Clause","title":"Extensions with a Generic Where Clause","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Compiler-Control-Statements":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compiler-Control-Statements","url":"\/documentation\/the-swift-programming-language\/statements#Compiler-Control-Statements","title":"Compiler Control Statements","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Protocol-Composition-Type":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/types#Protocol-Composition-Type","kind":"section","title":"Protocol Composition Type","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Patterns":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","role":"article","abstract":[{"text":"Match and destructure values.","type":"text"}],"kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/patterns","title":"Patrones"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Observers":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/properties#Property-Observers","kind":"section","title":"Property Observers","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Keywords-and-Punctuation":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Keywords-and-Punctuation","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Keywords-and-Punctuation","title":"Keywords and Punctuation","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Availability-Condition":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Availability-Condition","url":"\/documentation\/the-swift-programming-language\/statements#Availability-Condition","title":"Availability Condition","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GenericParametersAndArguments":{"type":"topic","title":"Generic Parameters and Arguments","url":"\/documentation\/the-swift-programming-language\/genericparametersandarguments","kind":"article","abstract":[{"type":"text","text":"Generalize declarations to abstract away concrete types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","abstract":[{"type":"text","text":"Structure code with branches, loops, and early exits."}],"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","title":"Flujo de control","url":"\/documentation\/the-swift-programming-language\/controlflow","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Asynchronous-Functions-and-Methods":{"type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Asynchronous-Functions-and-Methods","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods","title":"Asynchronous Functions and Methods","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Conditional-Compilation-Block":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","url":"\/documentation\/the-swift-programming-language\/statements#Conditional-Compilation-Block","title":"Conditional Compilation Block","kind":"section","abstract":[]}}}
||||||| parent of 2fa5d86d (yet one more fix attempt)
{"primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2023-09-18"}],"type":"strong"}]},{"items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 5.9.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":" and "},{"code":"switch","type":"codeVoice"},{"text":" expressions","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Conditional-Expression","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros"},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about generating code at compile time."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Expanded the discussion of optionals in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added an example of concurrency to "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about boxed protocol types"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","type":"reference","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"buildPartialBlock(first:)"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"type":"codeVoice","code":"buildPartialBlock(accumulated:next:)"},{"text":" methods","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Result-Transformations","type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added visionOS to the lists of platforms in","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#available","isActive":true},{"type":"text","text":" "},{"text":"and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Formatted the formal grammar to use blank lines for grouping.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2023-03-30","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 5.8.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"text":"doc:ControlFlow#Deferred-Actions","type":"text"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"showing ","type":"text"},{"code":"defer","type":"codeVoice"},{"type":"text","text":" outside of error handling."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Adopted Swift-DocC for publication.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Minor corrections and additions throughout.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2022-09-12"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 5.7.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"text":"doc:Concurrency#Sendable-Types","type":"text"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"with information about sending data between actors and tasks,"},{"type":"text","text":" "},{"text":"and added information about the ","type":"text"},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":" and "},{"code":"@unchecked","type":"codeVoice"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Sendable"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unchecked","type":"reference","isActive":true},{"type":"text","text":" sections."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Regular-Expression-Literals","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"with information about creating a regular expression.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the short form of ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":"-"},{"code":"let","type":"codeVoice"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about "},{"type":"codeVoice","code":"#unavailable"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"text","text":"doc:ControlFlow#Checking-API-Availability"},{"text":" section.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2022-03-14"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.6."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"with information about using "},{"type":"codeVoice","code":"#if"},{"type":"text","text":" "},{"type":"text","text":"around chained method calls and other postfix expressions."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the visual styling of figures throughout.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"2021-09-20","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 5.5."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about asynchronous functions, tasks, and actors","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","isActive":true,"type":"reference"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"text":"and to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Actor-Declaration","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods","type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Await-Operator","isActive":true},{"type":"text","text":" sections."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"with information about identifiers that start with an underscore.","type":"text"}]}]}]},{"inlineContent":[{"inlineContent":[{"text":"2021-04-26","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.4."}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Result-Builders"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#resultBuilder","type":"reference"},{"type":"text","text":" sections"},{"text":" ","type":"text"},{"text":"with information about result builders.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Conversion-to-a-Pointer-Type"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"with information about how in-out parameters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can be implicitly converted to unsafe pointers in a function call."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:Functions#Variadic-Parameters"},{"type":"text","text":" "},{"type":"text","text":"and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration"},{"type":"text","text":" sections,"},{"text":" ","type":"text"},{"text":"now that a function can have multiple variadic parameters.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Member-Expression","type":"reference"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that implicit member expressions can be chained together."}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2020-09-16"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 5.3."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about multiple trailing closures","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:Closures#Trailing-Closures","type":"text"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"and added information about how trailing closures are matched to parameters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Function-Call-Expression","isActive":true,"type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about synthesized implementations"},{"text":" ","type":"text"},{"text":"of ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" for enumerations"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Contextual-Where-Clauses"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"now that you can write a generic "},{"type":"codeVoice","code":"where"},{"text":" clause in more places.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"type":"text","text":"doc:AutomaticReferenceCounting#Unowned-Optional-References"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"with information about using unowned references with optional values."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"type":"codeVoice","code":"@main"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#main","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added ","type":"text"},{"type":"codeVoice","code":"#filePath"},{"text":" to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","isActive":true,"type":"reference"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and updated the discussion of "},{"type":"codeVoice","code":"#file"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:Closures#Escaping-Closures","type":"text"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"text":"now that closures can refer to ","type":"text"},{"code":"self","type":"codeVoice"},{"text":" implicitly in more scenarios.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:ErrorHandling#Handling-Errors-Using-Do-Catch"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement"},{"text":" sections,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that a "},{"code":"catch","type":"codeVoice"},{"type":"text","text":" clause can match against multiple errors."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added more information about ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and moved it into the new ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Any-Type"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"text":"now that lazy properties can have observers.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration","type":"reference","isActive":true},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"now that members of an enumeration can satisfy protocol requirements.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Stored-Variable-Observers-and-Property-Observers","type":"reference","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"to describe when the getter is called before the observer.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"to mention atomic operations.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2020-03-24"}]}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 5.2."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about passing a key path instead of a closure","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","type":"reference","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Methods-with-Special-Names","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about syntactic sugar the lets instances of"},{"type":"text","text":" "},{"type":"text","text":"classes, structures, and enumerations be used with function call syntax."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:Subscripts#Subscript-Options","type":"text"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"now that subscripts support parameters with default values.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that the "},{"type":"codeVoice","code":"Self"},{"text":" can be used in more contexts.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:TheBasics#Implicitly-Unwrapped-Optionals"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to make it clearer that an implicitly unwrapped optional value"},{"type":"text","text":" "},{"type":"text","text":"can be used as either an optional or non-optional value."}]}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2019-09-10","type":"text"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 5.1.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about functions"},{"type":"text","text":" "},{"type":"text","text":"that specify a protocol that their return value conforms to,"},{"type":"text","text":" "},{"type":"text","text":"instead of providing a specific named return type,"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","isActive":true},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about property wrappers","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Wrappers","type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about enumerations and structures","type":"text"},{"type":"text","text":" "},{"text":"that are frozen for library evolution","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:Functions#Functions-With-an-Implicit-Return"},{"type":"text","text":" "},{"type":"text","text":"and "},{"text":"doc:Properties#Shorthand-Getter-Declaration","type":"text"},{"type":"text","text":" sections"},{"text":" ","type":"text"},{"text":"with information about functions that omit ","type":"text"},{"type":"codeVoice","code":"return"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about using subscripts on types"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:Subscripts#Type-Subscripts","type":"text"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:Patterns#Enumeration-Case-Pattern","type":"text"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that an enumeration case pattern can match an optional value."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:Initialization#Memberwise-Initializers-for-Structure-Types"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that memberwise initializers support"},{"type":"text","text":" "},{"type":"text","text":"omitting parameters for properties that have a default value."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about dynamic members"},{"type":"text","text":" "},{"type":"text","text":"that are looked up by key path at runtime"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicMemberLookup"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added ","type":"text"},{"code":"macCatalyst","type":"codeVoice"},{"type":"text","text":" to the list of target environments"},{"type":"text","text":" "},{"text":"in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type","type":"reference","isActive":true},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"text":"now that ","type":"text"},{"code":"Self","type":"codeVoice"},{"text":" can be used to refer to the type","type":"text"},{"text":" ","type":"text"},{"text":"introduced by the current class, structure, or enumeration declaration.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2019-03-25","type":"text"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 5.0.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#Extended-String-Delimiters"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"and updated the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with information about extended string delimiters.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicCallable"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"with information about dynamically calling instances as functions","type":"text"},{"text":" ","type":"text"},{"text":"using the ","type":"text"},{"code":"dynamicCallable","type":"codeVoice"},{"type":"text","text":" attribute."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unknown","type":"reference"},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","isActive":true},{"type":"text","text":" sections"},{"type":"text","text":" "},{"text":"with information about handling future enumeration cases","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in switch statements using"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"unknown","type":"codeVoice"},{"type":"text","text":" switch case attribute."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the identity key path ("},{"type":"codeVoice","code":"\\.self"},{"text":")","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about using the less than ("},{"type":"codeVoice","code":"<"},{"type":"text","text":") operator"},{"text":" ","type":"text"},{"type":"text","text":"in platform conditions to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"reference","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2018-09-17","type":"text"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 4.2."}]}]},{"content":[{"inlineContent":[{"text":"Added information about accessing all of an enumeration’s cases","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:Enumerations#Iterating-over-Enumeration-Cases","type":"text"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about ","type":"text"},{"code":"#error","type":"codeVoice"},{"type":"text","text":" and "},{"code":"#warning","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compile-Time-Diagnostic-Statement","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Added information about inlining","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"under the "},{"type":"codeVoice","code":"inlinable"},{"text":" and  ","type":"text"},{"type":"codeVoice","code":"usableFromInline"},{"text":" attributes.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about members that are looked up by name at runtime"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"under the "},{"code":"dynamicMemberLookup","type":"codeVoice"},{"text":" attribute.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"code":"requires_stored_property_inits","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"warn_unqualified_access","type":"codeVoice"},{"text":" attributes","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about how to conditionally compile code","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"depending on the Swift compiler version being used"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"reference","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Added information about ","type":"text"},{"type":"codeVoice","code":"#dsohandle"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","isActive":true},{"text":" section.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2018-03-29"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 4.1.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about synthesized implementations of equivalence operators","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:AdvancedOperators#Equivalence-Operators"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about conditional protocol conformance","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations"},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"type":"text","text":"and to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Conditionally-Conforming-to-a-Protocol"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about recursive protocol constraints","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","type":"reference","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"canImport()"},{"text":" and ","type":"text"},{"code":"targetEnvironment()","type":"codeVoice"},{"type":"text","text":" platform conditions"},{"type":"text","text":" "},{"text":"to ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]}]},{"inlineContent":[{"inlineContent":[{"text":"2017-12-04","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 4.0.3.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that key paths support subscript components."}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2017-09-19"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 4.0.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about exclusive access to memory"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","isActive":true,"type":"reference"},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types-with-a-Generic-Where-Clause","isActive":true,"type":"reference"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"text":"now that you can use generic ","type":"text"},{"type":"codeVoice","code":"where"},{"type":"text","text":" clauses"},{"type":"text","text":" "},{"type":"text","text":"to constrain associated types."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about multiline string literals","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:StringsAndCharacters#String-Literals","type":"text"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"text":"and to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","type":"reference","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure","type":"reference","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion of the ","type":"text"},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"now that this attribute is inferred in fewer places."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Subscripts","isActive":true},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that subscripts can be generic."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"now that protocol composition types can contain a superclass requirement."}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion of protocol extensions","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration"},{"type":"text","text":" "},{"type":"text","text":"now that "},{"type":"codeVoice","code":"final"},{"type":"text","text":" isn’t allowed in them."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about preconditions and fatal errors"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:TheBasics#Assertions-and-Preconditions","type":"text"},{"text":" section.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2017-03-27"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 3.1.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about extensions that include requirements."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added examples of iterating over a range","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:ControlFlow#For-In-Loops","type":"text"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added an example of failable numeric conversions","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Initialization#Failable-Initializers"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about using the "},{"type":"codeVoice","code":"available"},{"text":" attribute with a Swift language version.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to note that argument labels aren’t allowed when writing a function type."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of Swift language version numbers"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"reference"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that an optional patch number is allowed."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"now that Swift distinguishes between functions that take multiple parameters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and functions that take a single parameter of a tuple type."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Removed the Dynamic Type Expression section"},{"text":" ","type":"text"},{"text":"from the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","isActive":true},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"type":"text","text":"now that "},{"type":"codeVoice","code":"type(of:)"},{"type":"text","text":" is a Swift standard library function."}]}]}]},{"inlineContent":[{"inlineContent":[{"text":"2016-10-27","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 3.0.1.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion of weak and unowned references","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","isActive":true},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"code":"unowned","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"unowned(safe)"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"unowned(unsafe)"},{"text":" ","type":"text"},{"type":"text","text":"declaration modifiers"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","isActive":true,"type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Added a note to the ","type":"text"},{"text":"doc:TypeCasting#Type-Casting-for-Any-and-AnyObject","type":"text"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"about using an optional value when a value of type "},{"type":"codeVoice","code":"Any"},{"text":" is expected.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","type":"reference"},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to separate the discussion of parenthesized expressions and tuple expressions."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2016-09-13"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 3.0."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of functions in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","isActive":true},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","type":"reference"},{"type":"text","text":" section to note that"},{"text":" ","type":"text"},{"text":"all parameters get an argument label by default.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of operators"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"now that you implement them as type methods instead of as global functions."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"open"},{"type":"text","text":" and "},{"type":"codeVoice","code":"fileprivate"},{"type":"text","text":" access-level modifiers"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","type":"reference"},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of ","type":"text"},{"type":"codeVoice","code":"inout"},{"type":"text","text":" in the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","type":"reference"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to note that it appears in front of a parameter’s type"},{"type":"text","text":" "},{"type":"text","text":"instead of in front of a parameter’s name."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"code":"@noescape","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@autoclosure"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"text":"doc:Closures#Escaping-Closures","type":"text"},{"text":" and ","type":"text"},{"text":"doc:Closures#Autoclosures","type":"text"},{"text":" sections","type":"text"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","isActive":true,"type":"reference"},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"text":"now that they’re type attributes, rather than declaration attributes.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about operator precedence groups","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:AdvancedOperators#Precedence-for-Custom-Infix-Operators"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","isActive":true},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"and to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Precedence-Group-Declaration","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations"},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated discussion throughout"},{"type":"text","text":" "},{"type":"text","text":"to use macOS instead of OS X,"},{"type":"text","text":" "},{"code":"Error","type":"codeVoice"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"ErrorProtocol"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and protocol names such as "},{"type":"codeVoice","code":"ExpressibleByStringLiteral"},{"text":" ","type":"text"},{"type":"text","text":"instead of "},{"code":"StringLiteralConvertible","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","isActive":true},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"text":"and in the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments"},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that generic "},{"code":"where","type":"codeVoice"},{"text":" clauses are written at the end of a declaration.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"type":"text","text":"doc:Closures#Escaping-Closures"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that closures are nonescaping by default."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","isActive":true,"type":"reference"},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#While-Statement","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","type":"reference","isActive":true},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"text":"now that ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":", "},{"code":"while","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"use a comma-separated list of conditions without "},{"type":"codeVoice","code":"where"},{"text":" clauses.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about switch cases that have multiple patterns","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:ControlFlow#Switch","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","type":"reference"},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switch-Statement","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","isActive":true,"type":"reference"},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of function types"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"now that function argument labels are no longer part of a function’s type.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of protocol composition types"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition","type":"reference","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","type":"reference","isActive":true},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","isActive":true,"type":"reference"},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"text":"to use the new ","type":"text"},{"type":"codeVoice","code":"Protocol1 & Protocol2"},{"text":" syntax.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion in the Dynamic Type Expression section"},{"type":"text","text":" "},{"type":"text","text":"to use the new "},{"code":"type(of:)","type":"codeVoice"},{"text":" syntax for dynamic type expressions.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of line control statements","type":"text"},{"text":" ","type":"text"},{"text":"to use the ","type":"text"},{"type":"codeVoice","code":"#sourceLocation(file:line:)"},{"type":"text","text":" syntax"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Line-Control-Statement"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion in ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return","isActive":true},{"type":"text","text":" "},{"type":"text","text":"to use the new "},{"type":"codeVoice","code":"Never"},{"type":"text","text":" type."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about playground literals"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion in the ","type":"text"},{"type":"text","text":"doc:Declarations#In-Out-Parameters"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to note that only nonescaping closures can capture in-out parameters."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion about default parameters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"text":"doc:Functions#Default-Parameter-Values","type":"text"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that they can’t be reordered in function calls."}]}]},{"content":[{"inlineContent":[{"text":"Updated attribute arguments to use a colon","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","isActive":true},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about throwing an error","type":"text"},{"type":"text","text":" "},{"text":"inside the catch block of a rethrowing function","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about accessing the selector","type":"text"},{"type":"text","text":" "},{"text":"of an Objective-C property’s getter or setter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression","type":"reference","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Alias-Declaration","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"about generic type aliases and using type aliases inside of protocols."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of function types in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to note that parentheses around the parameter types are required."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","isActive":true},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"type":"text","text":"to note that the "},{"code":"@IBAction","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"@IBOutlet"},{"type":"text","text":", and "},{"type":"codeVoice","code":"@NSManaged"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"text":"imply the ","type":"text"},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"type":"codeVoice","code":"@GKInspectable"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of optional protocol requirements","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Optional-Protocol-Requirements","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to clarify that they’re used only in code that interoperates with Objective-C.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Removed the discussion of explicitly using "},{"type":"codeVoice","code":"let"},{"text":" in function parameters","type":"text"},{"text":" ","type":"text"},{"text":"from the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Removed the discussion of the ","type":"text"},{"type":"codeVoice","code":"Boolean"},{"type":"text","text":" protocol"},{"type":"text","text":" "},{"text":"from the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"text":"now that the protocol has been removed from the Swift standard library.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Corrected the discussion of the "},{"code":"@NSApplicationMain","type":"codeVoice"},{"text":" attribute","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" section."}]}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2016-03-21"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 2.2.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about how to conditionally compile code","type":"text"},{"type":"text","text":" "},{"text":"depending on the version of Swift being used","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about how to distinguish","type":"text"},{"text":" ","type":"text"},{"text":"between methods or initializers whose names differ","type":"text"},{"type":"text","text":" "},{"type":"text","text":"only by the names of their arguments"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"#selector"},{"text":" syntax","type":"text"},{"type":"text","text":" "},{"text":"for Objective-C selectors","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression","isActive":true,"type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of associated types"},{"type":"text","text":" "},{"text":"to use the ","type":"text"},{"code":"associatedtype","type":"codeVoice"},{"type":"text","text":" keyword"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types"},{"type":"text","text":" "},{"type":"text","text":"and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Associated-Type-Declaration"},{"text":" sections.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated information about initializers that return "},{"type":"codeVoice","code":"nil"},{"text":" ","type":"text"},{"text":"before the instance is fully initialized","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"text":"doc:Initialization#Failable-Initializers","type":"text"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about comparing tuples"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:BasicOperators#Comparison-Operators","type":"text"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about using keywords as external parameter names"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Keywords-and-Punctuation","type":"reference","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion of the ","type":"text"},{"code":"@objc","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true,"type":"reference"},{"text":" section to note that","type":"text"},{"type":"text","text":" "},{"text":"enumerations and enumeration cases can use this attribute.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:LexicalStructure#Operators"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"with discussion of custom operators that contain a dot."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"that rethrowing functions can’t directly throw errors.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added a note to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about property observers being called"},{"type":"text","text":" "},{"type":"text","text":"when you pass a property as an in-out parameter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a section about error handling"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","type":"reference","isActive":true},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated figures in the","type":"text"},{"type":"text","text":" "},{"text":"doc:AutomaticReferenceCounting#Weak-References","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"section to show the deallocation process more clearly."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Removed discussion of C-style "},{"type":"codeVoice","code":"for"},{"text":" loops,","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"code":"++","type":"codeVoice"},{"type":"text","text":" prefix and postfix operators,"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"type":"codeVoice","code":"--"},{"type":"text","text":" prefix and postfix operators."}]}]},{"content":[{"inlineContent":[{"text":"Removed discussion of variable function arguments","type":"text"},{"text":" ","type":"text"},{"text":"and the special syntax for curried functions.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2015-10-20"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 2.1."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:StringsAndCharacters#String-Interpolation"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals"},{"text":" sections","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that string interpolations can contain string literals."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"text":"doc:Closures#Escaping-Closures","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about the "},{"code":"@noescape","type":"codeVoice"},{"type":"text","text":" attribute."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true,"type":"reference"},{"type":"text","text":" sections"},{"type":"text","text":" "},{"type":"text","text":"with information about tvOS."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the behavior of in-out parameters","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Declarations#In-Out-Parameters"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information to the "},{"type":"text","text":"doc:Expressions#Capture-Lists"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about how values specified in closure capture lists are captured."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"section to clarify how assignment through optional chaining","type":"text"},{"type":"text","text":" "},{"text":"behaves.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Improved the discussion of autoclosures"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"text":"doc:Closures#Autoclosures","type":"text"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added an example that uses the "},{"code":"??","type":"codeVoice"},{"text":" operator","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","isActive":true,"type":"reference"},{"text":" chapter.","type":"text"}]}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2015-09-16"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 2.0.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about error handling","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling"},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","isActive":true},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Throw-Statement"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Defer-Statement","isActive":true,"type":"reference"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Try-Operator"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:ErrorHandling#Representing-and-Throwing-Errors"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that all types can conform to the "},{"type":"codeVoice","code":"ErrorType"},{"text":" protocol.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about the new ","type":"text"},{"code":"try?","type":"codeVoice"},{"text":" keyword","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:ErrorHandling#Converting-Errors-to-Optional-Values"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about recursive enumerations","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Enumerations#Recursive-Enumerations"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","isActive":true},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type","type":"reference","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","type":"reference","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about API availability checking"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"text":"doc:ControlFlow#Checking-API-Availability","type":"text"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Availability-Condition"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the new ","type":"text"},{"code":"guard","type":"codeVoice"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:ControlFlow#Early-Exit","type":"text"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","type":"reference"},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Guard-Statement"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","type":"reference","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about protocol extensions"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about access control for unit testing"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:AccessControl#Access-Levels-for-Unit-Test-Targets"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","type":"reference","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the new optional pattern"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Patterns#Optional-Pattern"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","type":"reference","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:ControlFlow#Repeat-While","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about the "},{"type":"codeVoice","code":"repeat"},{"text":"-","type":"text"},{"code":"while","type":"codeVoice"},{"type":"text","text":" loop."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"text":"now that ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" no longer conforms"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"codeVoice","code":"CollectionType"},{"type":"text","text":" protocol from the Swift standard library."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the new Swift standard library"},{"text":" ","type":"text"},{"type":"codeVoice","code":"print(_:separator:terminator)"},{"type":"text","text":" function"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:TheBasics#Printing-Constants-and-Variables","type":"text"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the behavior","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of enumeration cases with "},{"code":"String","type":"codeVoice"},{"text":" raw values","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Enumerations#Implicitly-Assigned-Raw-Values"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","isActive":true},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"@autoclosure"},{"type":"text","text":" attribute —"},{"type":"text","text":" "},{"type":"text","text":"including its "},{"code":"@autoclosure(escaping)","type":"codeVoice"},{"type":"text","text":" form —"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:Closures#Autoclosures"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"with information about the ","type":"text"},{"code":"@available","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"@warn_unused_result","type":"codeVoice"},{"type":"text","text":" attributes."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Type-Attributes","type":"reference","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"with information about the "},{"type":"codeVoice","code":"@convention"},{"type":"text","text":" attribute."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added an example of using multiple optional bindings"},{"text":" ","type":"text"},{"text":"with a ","type":"text"},{"type":"codeVoice","code":"where"},{"text":" clause","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"about how concatenating string literals using the "},{"code":"+","type":"codeVoice"},{"type":"text","text":" operator"},{"type":"text","text":" "},{"type":"text","text":"happens at compile time."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type","type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"about comparing metatype values and using them","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to construct instances with initializer expressions."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"text","text":"doc:TheBasics#Debugging-with-Assertions"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about when user-defined assertions are disabled."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"type":"codeVoice","code":"@NSManaged"},{"text":" attribute","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that the attribute can be applied to certain instance methods."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:Functions#Variadic-Parameters","type":"text"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"now that variadic parameters can be declared in any position","type":"text"},{"text":" ","type":"text"},{"text":"in a function’s parameter list.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:Initialization#Overriding-a-Failable-Initializer","type":"text"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"about how a nonfailable initializer can delegate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"up to a failable initializer"},{"type":"text","text":" "},{"text":"by force-unwrapping the result of the superclass’s initializer.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about using enumeration cases as functions","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type","type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about explicitly referencing an initializer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Initializer-Expression","type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about build configuration"},{"text":" ","type":"text"},{"type":"text","text":"and line control statements"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compiler-Control-Statements","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"about constructing class instances from metatype values."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the"},{"text":" ","type":"text"},{"type":"text","text":"doc:AutomaticReferenceCounting#Weak-References"},{"type":"text","text":" "},{"text":"section about weak references being unsuitable for caching.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated a note in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to mention that stored type properties are lazily initialized."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:Closures#Capturing-Values"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"to clarify how variables and constants are captured in closures.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to describe when you can apply the ","type":"text"},{"code":"@objc","type":"codeVoice"},{"type":"text","text":" attribute to classes."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"text":"doc:ErrorHandling#Handling-Errors","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"about the performance of executing a ","type":"text"},{"code":"throw","type":"codeVoice"},{"text":" statement.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Added similar information about the "},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties","type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with information about stored and computed type properties","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for classes, structures, and enumerations."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"with information about labeled break statements.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated a note in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"to clarify the behavior of ","type":"text"},{"code":"willSet","type":"codeVoice"},{"type":"text","text":" and "},{"code":"didSet","type":"codeVoice"},{"text":" observers.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the ","type":"text"},{"text":"doc:AccessControl#Access-Levels","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with information about the scope of ","type":"text"},{"type":"codeVoice","code":"private"},{"text":" access.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the","type":"text"},{"text":" ","type":"text"},{"text":"doc:AutomaticReferenceCounting#Weak-References","type":"text"},{"text":" ","type":"text"},{"text":"section about the differences in weak references","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"between garbage collected systems and ARC."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the"},{"text":" ","type":"text"},{"text":"doc:StringsAndCharacters#Special-Characters-in-String-Literals","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with a more precise definition of Unicode scalars.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2015-04-08","type":"text"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 1.2.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift now has a native "},{"type":"codeVoice","code":"Set"},{"text":" collection type.","type":"text"},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Sets","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"@autoclosure","type":"codeVoice"},{"type":"text","text":" is now an attribute of the parameter declaration,"},{"type":"text","text":" "},{"text":"not its type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"There’s also a new "},{"type":"codeVoice","code":"@noescape"},{"type":"text","text":" parameter declaration attribute."},{"text":" ","type":"text"},{"type":"text","text":"For more information, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Type methods and properties now use the ","type":"text"},{"type":"codeVoice","code":"static"},{"text":" keyword","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as a declaration modifier."},{"text":" ","type":"text"},{"text":"For more information see ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Variable-Properties","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift now includes the "},{"type":"codeVoice","code":"as?"},{"text":" and ","type":"text"},{"code":"as!","type":"codeVoice"},{"text":" failable downcast operators.","type":"text"},{"type":"text","text":" "},{"text":"For more information,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new guide section about","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:StringsAndCharacters#String-Indices"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Removed the overflow division (","type":"text"},{"type":"codeVoice","code":"&\/"},{"text":") and","type":"text"},{"type":"text","text":" "},{"text":"overflow remainder (","type":"text"},{"code":"&%","type":"codeVoice"},{"type":"text","text":") operators"},{"type":"text","text":" "},{"text":"from ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Overflow-Operators"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the rules for constant and"},{"text":" ","type":"text"},{"text":"constant property declaration and initialization.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the definition of Unicode scalars in string literals."},{"text":" ","type":"text"},{"type":"text","text":"See "},{"text":"doc:StringsAndCharacters#Special-Characters-in-String-Literals","type":"text"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Updated ","type":"text"},{"text":"doc:BasicOperators#Range-Operators","type":"text"},{"text":" to note that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a half-open range with the same start and end index will be empty."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"type":"text","text":"doc:Closures#Closures-Are-Reference-Types"},{"text":" to clarify","type":"text"},{"type":"text","text":" "},{"text":"the capturing rules for variables.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated ","type":"text"},{"text":"doc:AdvancedOperators#Value-Overflow","type":"text"},{"text":" to clarify","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the overflow behavior of signed and unsigned integers"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration"},{"type":"text","text":" to clarify"},{"type":"text","text":" "},{"type":"text","text":"protocol declaration scope and members."}]}]},{"content":[{"inlineContent":[{"text":"Updated ","type":"text"},{"type":"text","text":"doc:AutomaticReferenceCounting#Defining-a-Capture-List"},{"type":"text","text":" "},{"text":"to clarify the syntax for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"weak and unowned references in closure capture lists."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated "},{"type":"text","text":"doc:LexicalStructure#Operators"},{"type":"text","text":" to explicitly mention"},{"text":" ","type":"text"},{"text":"examples of supported characters for custom operators,","type":"text"},{"text":" ","type":"text"},{"text":"such as those in the Mathematical Operators, Miscellaneous Symbols,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and Dingbats Unicode blocks."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Constants can now be declared without being initialized","type":"text"},{"text":" ","type":"text"},{"text":"in local function scope.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"They must have a set value before first use."},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In an initializer, constant properties can now only assign a value once."},{"text":" ","type":"text"},{"type":"text","text":"For more information,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"text","text":"doc:Initialization#Assigning-Constant-Properties-During-Initialization"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiple optional bindings can now appear in a single "},{"type":"codeVoice","code":"if"},{"text":" statement","type":"text"},{"text":" ","type":"text"},{"text":"as a comma-separated list of assignment expressions.","type":"text"},{"text":" ","type":"text"},{"text":"For more information, see ","type":"text"},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Optional-Chaining-Expression","isActive":true},{"text":" ","type":"text"},{"text":"must appear within a postfix expression.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Protocol casts are no longer limited to "},{"type":"codeVoice","code":"@objc"},{"text":" protocols.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Type casts that can fail at runtime","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now use the "},{"type":"codeVoice","code":"as?"},{"type":"text","text":" or "},{"code":"as!","type":"codeVoice"},{"type":"text","text":" operator,"},{"text":" ","type":"text"},{"text":"and type casts that are guaranteed not to fail use the ","type":"text"},{"type":"codeVoice","code":"as"},{"text":" operator.","type":"text"},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Type-Casting-Operators","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2014-10-16"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 1.1.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a full guide to "},{"text":"doc:Initialization#Failable-Initializers","type":"text"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Added a description of ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Failable-Initializer-Requirements","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"for protocols."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Constants and variables of type ","type":"text"},{"code":"Any","type":"codeVoice"},{"type":"text","text":" can now contain"},{"text":" ","type":"text"},{"text":"function instances. Updated the example in ","type":"text"},{"text":"doc:TypeCasting#Type-Casting-for-Any-and-AnyObject","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to show how to check for and cast to a function type"},{"text":" ","type":"text"},{"text":"within a ","type":"text"},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Enumerations with raw values"},{"type":"text","text":" "},{"type":"text","text":"now have a "},{"code":"rawValue","type":"codeVoice"},{"type":"text","text":" property rather than a "},{"type":"codeVoice","code":"toRaw()"},{"type":"text","text":" method"},{"text":" ","type":"text"},{"text":"and a failable initializer with a ","type":"text"},{"type":"codeVoice","code":"rawValue"},{"type":"text","text":" parameter"},{"type":"text","text":" "},{"type":"text","text":"rather than a "},{"type":"codeVoice","code":"fromRaw()"},{"type":"text","text":" method."},{"text":" ","type":"text"},{"type":"text","text":"For more information, see "},{"type":"text","text":"doc:Enumerations#Raw-Values"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new reference section about","type":"text"},{"text":" ","type":"text"},{"text":"doc:Declarations#Failable-Initializers","type":"text"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which can trigger initialization failure."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Custom operators can now contain the ","type":"text"},{"type":"codeVoice","code":"?"},{"type":"text","text":" character."},{"type":"text","text":" "},{"type":"text","text":"Updated the "},{"text":"doc:LexicalStructure#Operators","type":"text"},{"text":" reference to describe","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the revised rules."},{"text":" ","type":"text"},{"type":"text","text":"Removed a duplicate description of the valid set of operator characters"},{"type":"text","text":" "},{"type":"text","text":"from "},{"text":"doc:AdvancedOperators#Custom-Operators","type":"text"},{"text":".","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2014-08-18","type":"text"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"New document that describes Swift 1.0,","type":"text"},{"type":"text","text":" "},{"text":"Apple’s new programming language for building iOS and OS X apps.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a new section about"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Initializer-Requirements","isActive":true,"type":"reference"},{"text":" in protocols.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added a new section about ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"doc:TheBasics#Assertions-and-Preconditions","type":"text"},{"type":"text","text":" can now use string interpolation."},{"type":"text","text":" "},{"text":"Removed a note to the contrary.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the"},{"type":"text","text":" "},{"type":"text","text":"doc:StringsAndCharacters#Concatenating-Strings-and-Characters"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"to reflect the fact that ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Character"},{"text":" values","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can no longer be combined with the addition operator ("},{"code":"+","type":"codeVoice"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"or addition assignment operator ("},{"code":"+=","type":"codeVoice"},{"text":").","type":"text"},{"text":" ","type":"text"},{"text":"These operators are now used only with ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" values."},{"type":"text","text":" "},{"text":"Use the ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" type’s "},{"code":"append(_:)","type":"codeVoice"},{"text":" method","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to append a single "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value onto the end of a string."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"code":"availability","type":"codeVoice"},{"type":"text","text":" attribute to"},{"type":"text","text":" "},{"type":"text","text":"the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"doc:TheBasics#Optionals","type":"text"},{"type":"text","text":" no longer implicitly evaluate to"},{"text":" ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" when they have a value and "},{"type":"codeVoice","code":"false"},{"text":" when they do not,","type":"text"},{"type":"text","text":" "},{"text":"to avoid confusion when working with optional ","type":"text"},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" values."},{"text":" ","type":"text"},{"type":"text","text":"Instead, make an explicit check against "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"=="},{"text":" or ","type":"text"},{"code":"!=","type":"codeVoice"},{"type":"text","text":" operators"},{"type":"text","text":" "},{"text":"to find out if an optional contains a value.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Swift now has a "},{"text":"doc:BasicOperators#Nil-Coalescing-Operator","type":"text"},{"type":"text","text":" "},{"type":"text","text":"("},{"code":"a ?? b","type":"codeVoice"},{"type":"text","text":"), which unwraps an optional’s value if it exists,"},{"type":"text","text":" "},{"type":"text","text":"or returns a default value if the optional is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated and expanded"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#Comparing-Strings"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to reflect and demonstrate that string and character comparison","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and prefix \/ suffix comparison are now based on"},{"type":"text","text":" "},{"text":"Unicode canonical equivalence of extended grapheme clusters.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now try to set a property’s value, assign to a subscript,"},{"type":"text","text":" "},{"type":"text","text":"or call a mutating method or operator through"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"The information about","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"has been updated accordingly,"},{"type":"text","text":" "},{"type":"text","text":"and the examples of checking for method call success in"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Calling-Methods-Through-Optional-Chaining"},{"type":"text","text":" "},{"text":"have been expanded to show how to check for property setting success.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added a new section about","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Subscripts-of-Optional-Type","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"through optional chaining."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:CollectionTypes#Accessing-and-Modifying-an-Array"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to note that you can no longer append a single item to an array"},{"text":" ","type":"text"},{"type":"text","text":"with the "},{"code":"+=","type":"codeVoice"},{"type":"text","text":" operator."},{"type":"text","text":" "},{"type":"text","text":"Instead, use the "},{"code":"append(_:)","type":"codeVoice"},{"text":" method,","type":"text"},{"type":"text","text":" "},{"text":"or append a single-item array with the ","type":"text"},{"code":"+=","type":"codeVoice"},{"text":" operator.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note that the start value "},{"type":"codeVoice","code":"a"},{"type":"text","text":" "},{"type":"text","text":"for the "},{"text":"doc:BasicOperators#Range-Operators","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"a...b"},{"text":" and ","type":"text"},{"code":"a..<b","type":"codeVoice"},{"type":"text","text":" "},{"text":"must not be greater than the end value ","type":"text"},{"type":"codeVoice","code":"b"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Rewrote the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","isActive":true},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"to remove its introductory coverage of initializer overrides."},{"type":"text","text":" "},{"type":"text","text":"This chapter now focuses more on the addition of"},{"type":"text","text":" "},{"type":"text","text":"new functionality in a subclass,"},{"type":"text","text":" "},{"type":"text","text":"and the modification of existing functionality with overrides."},{"text":" ","type":"text"},{"type":"text","text":"The chapter’s example of"},{"type":"text","text":" "},{"text":"doc:Inheritance#Overriding-Property-Getters-and-Setters","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"has been rewritten to show how to override a "},{"code":"description","type":"codeVoice"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"(The examples of modifying an inherited property’s default value"},{"text":" ","type":"text"},{"type":"text","text":"in a subclass initializer have been moved to"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization"},{"type":"text","text":" chapter.)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"doc:Initialization#Initializer-Inheritance-and-Overriding"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to note that overrides of a designated initializer"},{"text":" ","type":"text"},{"type":"text","text":"must now be marked with the "},{"type":"codeVoice","code":"override"},{"text":" modifier.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:Initialization#Required-Initializers"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to note that the "},{"code":"required","type":"codeVoice"},{"type":"text","text":" modifier is now written before"},{"text":" ","type":"text"},{"type":"text","text":"every subclass implementation of a required initializer,"},{"text":" ","type":"text"},{"type":"text","text":"and that the requirements for required initializers"},{"text":" ","type":"text"},{"text":"can now be satisfied by automatically inherited initializers.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Infix "},{"text":"doc:AdvancedOperators#Operator-Methods","type":"text"},{"text":" no longer require","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"@infix"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@prefix"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@postfix"},{"type":"text","text":" attributes"},{"text":" ","type":"text"},{"text":"for ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Prefix-and-Postfix-Operators"},{"type":"text","text":" "},{"type":"text","text":"have been replaced by "},{"code":"prefix","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"postfix","type":"codeVoice"},{"text":" declaration modifiers.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note about the order in which"},{"type":"text","text":" "},{"type":"text","text":"doc:AdvancedOperators#Prefix-and-Postfix-Operators"},{"type":"text","text":" are applied"},{"type":"text","text":" "},{"text":"when both a prefix and a postfix operator are applied to","type":"text"},{"type":"text","text":" "},{"text":"the same operand.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Operator functions for"},{"type":"text","text":" "},{"text":"doc:AdvancedOperators#Compound-Assignment-Operators","type":"text"},{"text":" no longer use","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"@assignment"},{"type":"text","text":" attribute when defining the function."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The order in which modifiers are specified when defining"},{"type":"text","text":" "},{"text":"doc:AdvancedOperators#Custom-Operators","type":"text"},{"type":"text","text":" has changed."},{"type":"text","text":" "},{"text":"You now write ","type":"text"},{"type":"codeVoice","code":"prefix operator"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":"operator prefix"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for example."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"dynamic"},{"type":"text","text":" declaration modifier"},{"type":"text","text":" "},{"text":"in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Added information about how type inference works","type":"text"},{"text":" ","type":"text"},{"text":"with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added more information about curried functions."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a new chapter about "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","isActive":true},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to reflect the fact that Swift’s "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" type now represents"},{"text":" ","type":"text"},{"type":"text","text":"a single Unicode extended grapheme cluster."},{"text":" ","type":"text"},{"type":"text","text":"Includes a new section on"},{"text":" ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#Extended-Grapheme-Clusters"},{"type":"text","text":" "},{"type":"text","text":"and more information about"},{"text":" ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#Unicode-Scalar-Values"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"text","text":"doc:StringsAndCharacters#Comparing-Strings"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#String-Literals"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"to note that Unicode scalars inside string literals","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are now written as "},{"code":"\\u{n}","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"where ","type":"text"},{"type":"codeVoice","code":"n"},{"type":"text","text":" is a hexadecimal number between 0 and 10FFFF,"},{"type":"text","text":" "},{"text":"the range of Unicode’s codespace.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" "},{"type":"codeVoice","code":"length"},{"text":" property is now mapped onto","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift’s native "},{"code":"String","type":"codeVoice"},{"type":"text","text":" type as "},{"code":"utf16Count","type":"codeVoice"},{"text":", not ","type":"text"},{"type":"codeVoice","code":"utf16count"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s native "},{"code":"String","type":"codeVoice"},{"type":"text","text":" type no longer has"},{"text":" ","type":"text"},{"text":"an ","type":"text"},{"code":"uppercaseString","type":"codeVoice"},{"type":"text","text":" or "},{"code":"lowercaseString","type":"codeVoice"},{"text":" property.","type":"text"},{"text":" ","type":"text"},{"text":"The corresponding section in","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","type":"reference"},{"type":"text","text":" "},{"text":"has been removed, and various code examples have been updated.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about"},{"type":"text","text":" "},{"text":"doc:Initialization#Initializer-Parameters-Without-Argument-Labels","type":"text"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added a new section about","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"doc:Initialization#Required-Initializers"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about "},{"text":"doc:Functions#Optional-Tuple-Return-Types","type":"text"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:TheBasics#Type-Annotations"},{"text":" section to note that","type":"text"},{"text":" ","type":"text"},{"text":"multiple related variables can be defined on a single line","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with one type annotation."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@optional"},{"text":", ","type":"text"},{"type":"codeVoice","code":"@lazy"},{"type":"text","text":", "},{"code":"@final","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"@required"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"text":"are now the ","type":"text"},{"code":"optional","type":"codeVoice"},{"text":", ","type":"text"},{"code":"lazy","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"final"},{"type":"text","text":", and "},{"code":"required","type":"codeVoice"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the entire book to refer to "},{"code":"..<","type":"codeVoice"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"text","text":"doc:BasicOperators#Half-Open-Range-Operator"},{"text":" ","type":"text"},{"text":"(rather than the “half-closed range operator”).","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:CollectionTypes#Accessing-and-Modifying-a-Dictionary"},{"text":" ","type":"text"},{"text":"section to note that ","type":"text"},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":" now has"},{"text":" ","type":"text"},{"type":"text","text":"a Boolean "},{"type":"codeVoice","code":"isEmpty"},{"text":" property.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Clarified the full list of characters that can be used","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when defining "},{"type":"text","text":"doc:AdvancedOperators#Custom-Operators"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"nil"},{"type":"text","text":" and the Booleans "},{"code":"true","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"false"},{"text":" are now ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift’s ","type":"text"},{"type":"codeVoice","code":"Array"},{"text":" type now has full value semantics.","type":"text"},{"type":"text","text":" "},{"text":"Updated the information about ","type":"text"},{"text":"doc:CollectionTypes#Mutability-of-Collections","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"text","text":"doc:CollectionTypes#Arrays"},{"type":"text","text":" to reflect the new approach."},{"text":" ","type":"text"},{"type":"text","text":"Also clarified the assignment and copy behavior for strings arrays and dictionaries."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"doc:CollectionTypes#Array-Type-Shorthand-Syntax"},{"text":" is now written as","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"[SomeType]"},{"text":" rather than ","type":"text"},{"type":"codeVoice","code":"SomeType[]"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about "},{"type":"text","text":"doc:CollectionTypes#Dictionary-Type-Shorthand-Syntax"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which is written as "},{"type":"codeVoice","code":"[KeyType: ValueType]"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about "},{"text":"doc:CollectionTypes#Hash-Values-for-Set-Types","type":"text"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Examples of "},{"type":"text","text":"doc:Closures#Closure-Expressions"},{"text":" now use","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the global "},{"type":"codeVoice","code":"sorted(_:_:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"rather than the global "},{"code":"sort(_:_:)","type":"codeVoice"},{"text":" function,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to reflect the new array value semantics."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the information about ","type":"text"},{"type":"text","text":"doc:Initialization#Memberwise-Initializers-for-Structure-Types"},{"type":"text","text":" "},{"type":"text","text":"to clarify that the memberwise structure initializer is made available"},{"text":" ","type":"text"},{"type":"text","text":"even if a structure’s stored properties don’t have default values."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated to "},{"type":"codeVoice","code":"..<"},{"text":" rather than ","type":"text"},{"code":"..","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"for the "},{"type":"text","text":"doc:BasicOperators#Half-Open-Range-Operator"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added an example of "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type","type":"reference"},{"text":".","type":"text"}]}]}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/RevisionHistory","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","abstract":[{"type":"text","text":"Review the recent changes to this book."}],"sections":[],"metadata":{"title":"Historial de Revisiones"},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GuidedTour":{"abstract":[{"type":"text","text":"Explora las características y la sintaxis de Swift."}],"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","url":"\/documentation\/the-swift-programming-language\/guidedtour","role":"article","type":"topic","title":"Un Recorrido por Swift"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Availability-Condition":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Availability-Condition","url":"\/documentation\/the-swift-programming-language\/statements#Availability-Condition","title":"Availability Condition","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#unchecked":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unchecked","url":"\/documentation\/the-swift-programming-language\/attributes#unchecked","title":"unchecked","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Optional-Protocol-Requirements":{"type":"topic","abstract":[],"title":"Optional Protocol Requirements","url":"\/documentation\/the-swift-programming-language\/protocols#Optional-Protocol-Requirements","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Optional-Protocol-Requirements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Contextual-Where-Clauses":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Contextual-Where-Clauses","url":"\/documentation\/the-swift-programming-language\/generics#Contextual-Where-Clauses","title":"Contextual Where Clauses","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Associated-Types":{"type":"topic","abstract":[],"title":"Associated Types","url":"\/documentation\/the-swift-programming-language\/generics#Associated-Types","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Await-Operator":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Await-Operator","url":"\/documentation\/the-swift-programming-language\/expressions#Await-Operator","title":"Await Operator","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Stored-Variable-Observers-and-Property-Observers":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Stored-Variable-Observers-and-Property-Observers","url":"\/documentation\/the-swift-programming-language\/declarations#Stored-Variable-Observers-and-Property-Observers","title":"Stored Variable Observers and Property Observers","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Compile-Time-Diagnostic-Statement":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compile-Time-Diagnostic-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Compile-Time-Diagnostic-Statement","title":"Compile-Time Diagnostic Statement","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety","role":"article","abstract":[{"type":"text","text":"Structure your code to avoid conflicts when accessing memory."}],"title":"Memory Safety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Result-Transformations":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Result-Transformations","url":"\/documentation\/the-swift-programming-language\/attributes#Result-Transformations","title":"Result Transformations","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"kind":"article","abstract":[{"type":"text","text":"Define and call functions, label their arguments, and use their return values."}],"role":"article","type":"topic","title":"Funciones","url":"\/documentation\/the-swift-programming-language\/functions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics","role":"article","abstract":[{"type":"text","text":"Trabaja con tipos comunes de datos y escribe sintaxis básica."}],"title":"Fundamentos"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Macros":{"abstract":[{"type":"text","text":"Use macros to generate code at compile time."}],"role":"article","title":"Macros","kind":"article","url":"\/documentation\/the-swift-programming-language\/macros","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Function-Declaration":{"kind":"section","abstract":[],"title":"Function Declaration","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Function-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#String-Literals":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#String-Literals","title":"String Literals","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","url":"\/documentation\/the-swift-programming-language\/generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","title":"Using a Protocol in Its Associated Type’s Constraints","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Declaration-Attributes":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","url":"\/documentation\/the-swift-programming-language\/attributes#Declaration-Attributes","title":"Declaration Attributes","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Protocol-Declaration":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Protocol-Declaration","title":"Protocol Declaration","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Throw-Statement":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Throw-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Throw-Statement","title":"Throw Statement","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Conditional-Compilation-Block":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","url":"\/documentation\/the-swift-programming-language\/statements#Conditional-Compilation-Block","title":"Conditional Compilation Block","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"abstract":[{"text":"Structure code with branches, loops, and early exits.","type":"text"}],"url":"\/documentation\/the-swift-programming-language\/controlflow","role":"article","kind":"article","title":"Flujo de control","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Rethrowing-Functions-and-Methods":{"url":"\/documentation\/the-swift-programming-language\/declarations#Rethrowing-Functions-and-Methods","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","title":"Rethrowing Functions and Methods","kind":"section","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Extension-Declaration":{"url":"\/documentation\/the-swift-programming-language\/declarations#Extension-Declaration","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","title":"Extension Declaration","kind":"section","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"kind":"article","abstract":[{"type":"text","text":"Respond to and recover from errors."}],"role":"article","type":"topic","title":"Manejo de errores","url":"\/documentation\/the-swift-programming-language\/errorhandling","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"abstract":[{"type":"text","text":"Hide implementation details about a value’s type."}],"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","url":"\/documentation\/the-swift-programming-language\/opaquetypes","role":"article","type":"topic","title":"Opaque and Boxed Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","role":"collection","url":"\/documentation\/the-swift-programming-language","abstract":[],"title":"The Swift Programming Language (6)","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Where-Clauses":{"abstract":[],"kind":"section","title":"Generic Where Clauses","url":"\/documentation\/the-swift-programming-language\/generics#Generic-Where-Clauses","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Checking-for-Protocol-Conformance":{"abstract":[],"kind":"section","type":"topic","title":"Checking for Protocol Conformance","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance","url":"\/documentation\/the-swift-programming-language\/protocols#Checking-for-Protocol-Conformance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"url":"\/documentation\/the-swift-programming-language\/initialization","kind":"article","role":"article","type":"topic","abstract":[{"text":"Set the initial values for a type’s stored properties and perform one-time setup.","type":"text"}],"title":"Inicialización","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Keywords-and-Punctuation":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Keywords-and-Punctuation","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Keywords-and-Punctuation","title":"Keywords and Punctuation","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions":{"abstract":[{"type":"text","text":"Access, modify, and assign values."}],"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","url":"\/documentation\/the-swift-programming-language\/expressions","role":"article","type":"topic","title":"Expressions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"kind":"article","role":"article","url":"\/documentation\/the-swift-programming-language\/advancedoperators","abstract":[{"text":"Define custom operators, perform bitwise operations, and use builder syntax.","type":"text"}],"title":"Operadores avanzados","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Type-Properties":{"type":"topic","abstract":[],"title":"Type Properties","url":"\/documentation\/the-swift-programming-language\/properties#Type-Properties","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Associated-Types-with-a-Generic-Where-Clause":{"type":"topic","abstract":[],"title":"Associated Types with a Generic Where Clause","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types-with-a-Generic-Where-Clause","url":"\/documentation\/the-swift-programming-language\/generics#Associated-Types-with-a-Generic-Where-Clause","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Metatype-Type":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type","url":"\/documentation\/the-swift-programming-language\/types#Metatype-Type","title":"Metatype Type","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Precedence-Group-Declaration":{"type":"topic","abstract":[],"title":"Precedence Group Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Precedence-Group-Declaration","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Precedence-Group-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"url":"\/documentation\/the-swift-programming-language\/protocols","kind":"article","role":"article","type":"topic","abstract":[{"text":"Define requirements that conforming types must implement.","type":"text"}],"title":"Protocols","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/lexicalstructure","role":"article","abstract":[{"type":"text","text":"Use the lowest-level components of the syntax."}],"title":"Lexical Structure"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#While-Statement":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#While-Statement","url":"\/documentation\/the-swift-programming-language\/statements#While-Statement","title":"While Statement","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Identifiers":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers","abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Identifiers","title":"Identifiers","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Self-Type":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type","url":"\/documentation\/the-swift-programming-language\/types#Self-Type","title":"Self Type","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Wrappers":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Wrappers","url":"\/documentation\/the-swift-programming-language\/properties#Property-Wrappers","title":"Property Wrappers","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Optional-Chaining-Expression":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Optional-Chaining-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Optional-Chaining-Expression","title":"Optional-Chaining Expression","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switch-Statement":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switch-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Switch-Statement","title":"Switch Statement","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Constant-Declaration":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Constant-Declaration","title":"Constant Declaration","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Observers":{"type":"topic","abstract":[],"title":"Property Observers","url":"\/documentation\/the-swift-programming-language\/properties#Property-Observers","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Protocol-Associated-Type-Declaration":{"type":"topic","abstract":[],"title":"Protocol Associated Type Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Protocol-Associated-Type-Declaration","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Associated-Type-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Subscripts-of-Optional-Type":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Subscripts-of-Optional-Type","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Subscripts-of-Optional-Type","title":"Accessing Subscripts of Optional Type","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Methods-with-Special-Names":{"kind":"section","abstract":[],"title":"Methods with Special Names","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Methods-with-Special-Names","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Methods-with-Special-Names"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Type-Attributes":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Type-Attributes","url":"\/documentation\/the-swift-programming-language\/attributes#Type-Attributes","title":"Type Attributes","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Line-Control-Statement":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Line-Control-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Line-Control-Statement","title":"Line Control Statement","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Function-Type":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","kind":"section","url":"\/documentation\/the-swift-programming-language\/types#Function-Type","title":"Function Type","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switching-Over-Future-Enumeration-Cases":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","kind":"section","url":"\/documentation\/the-swift-programming-language\/statements#Switching-Over-Future-Enumeration-Cases","title":"Switching Over Future Enumeration Cases","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Guard-Statement":{"type":"topic","abstract":[],"title":"Guard Statement","url":"\/documentation\/the-swift-programming-language\/statements#Guard-Statement","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Guard-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Enumerations-with-Cases-of-Any-Type":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type","url":"\/documentation\/the-swift-programming-language\/declarations#Enumerations-with-Cases-of-Any-Type","title":"Enumerations with Cases of Any Type","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Actor-Declaration":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Actor-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Actor-Declaration","title":"Actor Declaration","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Subscripts":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Subscripts","url":"\/documentation\/the-swift-programming-language\/generics#Generic-Subscripts","title":"Generic Subscripts","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Literal-Expression":{"url":"\/documentation\/the-swift-programming-language\/expressions#Literal-Expression","kind":"section","title":"Literal Expression","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Implicit-Member-Expression":{"type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Implicit-Member-Expression","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Member-Expression","title":"Implicit Member Expression","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extending-a-Generic-Type":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type","url":"\/documentation\/the-swift-programming-language\/generics#Extending-a-Generic-Type","title":"Extending a Generic Type","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extensions-with-a-Generic-Where-Clause":{"type":"topic","abstract":[],"title":"Extensions with a Generic Where Clause","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause","url":"\/documentation\/the-swift-programming-language\/generics#Extensions-with-a-Generic-Where-Clause","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Sets":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Sets","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Sets","title":"Sets","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Failable-Initializer-Requirements":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Failable-Initializer-Requirements","url":"\/documentation\/the-swift-programming-language\/protocols#Failable-Initializer-Requirements","title":"Failable Initializer Requirements","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Class-Only-Protocols":{"kind":"section","type":"topic","abstract":[],"title":"Class-Only Protocols","url":"\/documentation\/the-swift-programming-language\/protocols#Class-Only-Protocols","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Properties-Through-Optional-Chaining":{"type":"topic","title":"Accessing Properties Through Optional Chaining","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","kind":"section","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Properties-Through-Optional-Chaining","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Type-Variable-Properties":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Variable-Properties","url":"\/documentation\/the-swift-programming-language\/declarations#Type-Variable-Properties","title":"Type Variable Properties","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#main":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#main","url":"\/documentation\/the-swift-programming-language\/attributes#main","title":"main","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"abstract":[{"type":"text","text":"Manage the visibility of code by declaration, file, and module."}],"role":"article","title":"Control de acceso","kind":"article","url":"\/documentation\/the-swift-programming-language\/accesscontrol","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"abstract":[{"type":"text","text":"Access members of an optional value without unwrapping."}],"role":"article","title":"Optional Chaining","kind":"article","url":"\/documentation\/the-swift-programming-language\/optionalchaining","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#unknown":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unknown","url":"\/documentation\/the-swift-programming-language\/attributes#unknown","title":"unknown","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#dynamicMemberLookup":{"type":"topic","abstract":[],"title":"dynamicMemberLookup","url":"\/documentation\/the-swift-programming-language\/attributes#dynamicMemberLookup","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicMemberLookup"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#available":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#available","url":"\/documentation\/the-swift-programming-language\/attributes#available","title":"available","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Function-Call-Expression":{"kind":"section","url":"\/documentation\/the-swift-programming-language\/expressions#Function-Call-Expression","type":"topic","title":"Function Call Expression","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Function-Call-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","kind":"article","title":"Cadenas y caracteres","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters","abstract":[{"text":"Store and manipulate text.","type":"text"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations","role":"article","abstract":[{"type":"text","text":"Model custom types that define a list of possible values."}],"title":"Enumeraciones"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","url":"\/documentation\/the-swift-programming-language\/attributes","type":"topic","role":"article","abstract":[{"text":"Add information to declarations and types.","type":"text"}],"title":"Attributes","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#dynamicCallable":{"type":"topic","abstract":[],"title":"dynamicCallable","url":"\/documentation\/the-swift-programming-language\/attributes#dynamicCallable","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicCallable"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"kind":"article","role":"article","abstract":[{"text":"Write code that works for multiple types and specify requirements for those types.","type":"text"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","url":"\/documentation\/the-swift-programming-language\/generics","type":"topic","title":"Generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Initializer-Expression":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Initializer-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Initializer-Expression","title":"Initializer Expression","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Type-Alias-Declaration":{"type":"topic","abstract":[],"title":"Type Alias Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Type-Alias-Declaration","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Alias-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/types","role":"article","abstract":[{"type":"text","text":"Use built-in named and compound types."}],"title":"Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Regular-Expression-Literals":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Regular-Expression-Literals","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Regular-Expression-Literals","title":"Regular Expression Literals","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Declaration-Modifiers":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","url":"\/documentation\/the-swift-programming-language\/declarations#Declaration-Modifiers","title":"Declaration Modifiers","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Type-Casting-Operators":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Type-Casting-Operators","url":"\/documentation\/the-swift-programming-language\/expressions#Type-Casting-Operators","title":"Type-Casting Operators","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","abstract":[{"text":"Perform asynchronous operations.","type":"text"}],"kind":"article","role":"article","url":"\/documentation\/the-swift-programming-language\/concurrency","type":"topic","title":"Concurrencia"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Initializer-Requirements":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Initializer-Requirements","url":"\/documentation\/the-swift-programming-language\/protocols#Initializer-Requirements","title":"Initializer Requirements","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Conditionally-Conforming-to-a-Protocol":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Conditionally-Conforming-to-a-Protocol","url":"\/documentation\/the-swift-programming-language\/protocols#Conditionally-Conforming-to-a-Protocol","title":"Conditionally Conforming to a Protocol","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#resultBuilder":{"title":"resultBuilder","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#resultBuilder","url":"\/documentation\/the-swift-programming-language\/attributes#resultBuilder","kind":"section","type":"topic","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Break-Statement":{"abstract":[],"kind":"section","title":"Break Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Break-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Literals":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Literals","title":"Literals","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Asynchronous-Functions-and-Methods":{"url":"\/documentation\/the-swift-programming-language\/declarations#Asynchronous-Functions-and-Methods","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods","title":"Asynchronous Functions and Methods","kind":"section","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Patterns":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","url":"\/documentation\/the-swift-programming-language\/patterns","type":"topic","role":"article","abstract":[{"text":"Match and destructure values.","type":"text"}],"title":"Patrones","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Calling-Methods-Through-Optional-Chaining":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Calling-Methods-Through-Optional-Chaining","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Calling-Methods-Through-Optional-Chaining","title":"Calling Methods Through Optional Chaining","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Selector-Expression":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Selector-Expression","title":"Selector Expression","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Implicit-Conversion-to-a-Pointer-Type":{"kind":"section","url":"\/documentation\/the-swift-programming-language\/expressions#Implicit-Conversion-to-a-Pointer-Type","type":"topic","title":"Implicit Conversion to a Pointer Type","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Conversion-to-a-Pointer-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"url":"\/documentation\/the-swift-programming-language\/inheritance","kind":"article","role":"article","type":"topic","abstract":[{"text":"Subclass to add or override functionality.","type":"text"}],"title":"Herencia","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Explicit-Member-Expression":{"abstract":[],"kind":"section","title":"Explicit Member Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Explicit-Member-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"title":"Conteo automático de referencias","kind":"article","role":"article","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting","abstract":[{"text":"Model the lifetime of objects and their relationships.","type":"text"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations","role":"article","abstract":[{"type":"text","text":"Introduce types, operators, variables, and other names and constructs."}],"title":"Declaraciones"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Do-Statement":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Do-Statement","title":"Do Statement","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Any-Type":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Any-Type","url":"\/documentation\/the-swift-programming-language\/types#Any-Type","title":"Any Type","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Compiler-Control-Statements":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compiler-Control-Statements","url":"\/documentation\/the-swift-programming-language\/statements#Compiler-Control-Statements","title":"Compiler Control Statements","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocol-Extensions":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions","url":"\/documentation\/the-swift-programming-language\/protocols#Protocol-Extensions","title":"Protocol Extensions","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Defer-Statement":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Defer-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Defer-Statement","title":"Defer Statement","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Functions-that-Never-Return":{"abstract":[],"kind":"section","title":"Functions that Never Return","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Functions-that-Never-Return"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements":{"abstract":[{"type":"text","text":"Group expressions and control the flow of execution."}],"role":"article","title":"Statements","kind":"article","url":"\/documentation\/the-swift-programming-language\/statements","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","url":"\/documentation\/the-swift-programming-language\/declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","title":"Enumerations with Cases of a Raw-Value Type","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Protocol-Composition-Type":{"type":"topic","abstract":[],"title":"Protocol Composition Type","url":"\/documentation\/the-swift-programming-language\/types#Protocol-Composition-Type","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocol-Composition":{"type":"topic","abstract":[],"title":"Protocol Composition","url":"\/documentation\/the-swift-programming-language\/protocols#Protocol-Composition","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GenericParametersAndArguments":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/genericparametersandarguments","role":"article","abstract":[{"type":"text","text":"Generalize declarations to abstract away concrete types."}],"title":"Generic Parameters and Arguments"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Sendable":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Sendable","url":"\/documentation\/the-swift-programming-language\/attributes#Sendable","title":"Sendable","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Key-Path-Expression":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Key-Path-Expression","title":"Key-Path Expression","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Conditional-Expression":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Conditional-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Conditional-Expression","title":"Conditional Expression","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#frozen":{"abstract":[],"kind":"section","title":"frozen","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen","type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#frozen"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Try-Operator":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Try-Operator","url":"\/documentation\/the-swift-programming-language\/expressions#Try-Operator","title":"Try Operator","type":"topic","abstract":[],"kind":"section"}}}
=======
{"sections":[],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"abstract":[{"text":"Review the recent changes to this book.","type":"text"}],"metadata":{"title":"Historial de Revisiones"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/RevisionHistory"},"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2023-09-18"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.9."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about "},{"type":"codeVoice","code":"if"},{"type":"text","text":" and "},{"code":"switch","type":"codeVoice"},{"text":" expressions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","type":"reference","isActive":true},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Conditional-Expression","type":"reference","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros","isActive":true},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"text":"with information about generating code at compile time.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Expanded the discussion of optionals in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added an example of concurrency to "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","type":"reference"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about boxed protocol types"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes"},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about the ","type":"text"},{"code":"buildPartialBlock(first:)","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"code":"buildPartialBlock(accumulated:next:)","type":"codeVoice"},{"text":" methods","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Result-Transformations","isActive":true,"type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added visionOS to the lists of platforms in","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#available"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Formatted the formal grammar to use blank lines for grouping.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2023-03-30"}],"type":"strong"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 5.8."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"type":"text","text":"doc:ControlFlow#Deferred-Actions"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"showing "},{"code":"defer","type":"codeVoice"},{"text":" outside of error handling.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Adopted Swift-DocC for publication."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Minor corrections and additions throughout."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2022-09-12"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 5.7.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"text":"doc:Concurrency#Sendable-Types","type":"text"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"with information about sending data between actors and tasks,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and added information about the "},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":" and "},{"code":"@unchecked","type":"codeVoice"},{"text":" attributes","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Sendable"},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unchecked","isActive":true},{"text":" sections.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Regular-Expression-Literals","type":"reference","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"with information about creating a regular expression.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the short form of "},{"type":"codeVoice","code":"if"},{"text":"-","type":"text"},{"code":"let","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about "},{"code":"#unavailable","type":"codeVoice"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"text","text":"doc:ControlFlow#Checking-API-Availability"},{"text":" section.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"2022-03-14","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.6."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"with information about using ","type":"text"},{"code":"#if","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"around chained method calls and other postfix expressions."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the visual styling of figures throughout."}]}]}]},{"inlineContent":[{"inlineContent":[{"text":"2021-09-20","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 5.5.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about asynchronous functions, tasks, and actors","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","isActive":true},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"text":"and to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Actor-Declaration","type":"reference"},{"type":"text","text":","},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods","isActive":true,"type":"reference"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Await-Operator"},{"type":"text","text":" sections."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with information about identifiers that start with an underscore."}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2021-04-26"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 5.4.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"text":"doc:AdvancedOperators#Result-Builders","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#resultBuilder","isActive":true},{"text":" sections","type":"text"},{"text":" ","type":"text"},{"text":"with information about result builders.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Conversion-to-a-Pointer-Type","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about how in-out parameters"},{"text":" ","type":"text"},{"type":"text","text":"can be implicitly converted to unsafe pointers in a function call."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:Functions#Variadic-Parameters"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","isActive":true,"type":"reference"},{"type":"text","text":" sections,"},{"type":"text","text":" "},{"type":"text","text":"now that a function can have multiple variadic parameters."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Member-Expression","isActive":true},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that implicit member expressions can be chained together."}]}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2020-09-16"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.3."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about multiple trailing closures","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:Closures#Trailing-Closures"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"and added information about how trailing closures are matched to parameters"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Function-Call-Expression","isActive":true,"type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about synthesized implementations"},{"text":" ","type":"text"},{"type":"text","text":"of "},{"code":"Comparable","type":"codeVoice"},{"text":" for enumerations","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Contextual-Where-Clauses"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that you can write a generic "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause in more places."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:AutomaticReferenceCounting#Unowned-Optional-References"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"with information about using unowned references with optional values.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"@main"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#main","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added ","type":"text"},{"type":"codeVoice","code":"#filePath"},{"text":" to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","type":"reference"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"and updated the discussion of "},{"type":"codeVoice","code":"#file"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Closures#Escaping-Closures"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that closures can refer to "},{"code":"self","type":"codeVoice"},{"text":" implicitly in more scenarios.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:ErrorHandling#Handling-Errors-Using-Do-Catch"},{"type":"text","text":" "},{"type":"text","text":"and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","type":"reference","isActive":true},{"type":"text","text":" sections,"},{"type":"text","text":" "},{"text":"now that a ","type":"text"},{"type":"codeVoice","code":"catch"},{"text":" clause can match against multiple errors.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added more information about ","type":"text"},{"code":"Any","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and moved it into the new "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Any-Type","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","isActive":true,"type":"reference"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that lazy properties can have observers."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration","isActive":true},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that members of an enumeration can satisfy protocol requirements."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Stored-Variable-Observers-and-Property-Observers"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to describe when the getter is called before the observer."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","type":"reference"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"to mention atomic operations.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2020-03-24"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.2."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about passing a key path instead of a closure"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Methods-with-Special-Names","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about syntactic sugar the lets instances of"},{"type":"text","text":" "},{"type":"text","text":"classes, structures, and enumerations be used with function call syntax."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:Subscripts#Subscript-Options","type":"text"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that subscripts support parameters with default values."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that the "},{"code":"Self","type":"codeVoice"},{"type":"text","text":" can be used in more contexts."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:TheBasics#Implicitly-Unwrapped-Optionals","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to make it clearer that an implicitly unwrapped optional value","type":"text"},{"type":"text","text":" "},{"text":"can be used as either an optional or non-optional value.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"2019-09-10","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 5.1.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about functions"},{"type":"text","text":" "},{"type":"text","text":"that specify a protocol that their return value conforms to,"},{"type":"text","text":" "},{"text":"instead of providing a specific named return type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes"},{"text":" chapter.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about property wrappers","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Wrappers","isActive":true,"type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about enumerations and structures","type":"text"},{"text":" ","type":"text"},{"text":"that are frozen for library evolution","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:Functions#Functions-With-an-Implicit-Return"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"type":"text","text":"doc:Properties#Shorthand-Getter-Declaration"},{"text":" sections","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with information about functions that omit "},{"type":"codeVoice","code":"return"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about using subscripts on types"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Subscripts#Type-Subscripts"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Patterns#Enumeration-Case-Pattern"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"now that an enumeration case pattern can match an optional value.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:Initialization#Memberwise-Initializers-for-Structure-Types","type":"text"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that memberwise initializers support"},{"type":"text","text":" "},{"text":"omitting parameters for properties that have a default value.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about dynamic members"},{"text":" ","type":"text"},{"type":"text","text":"that are looked up by key path at runtime"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicMemberLookup"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Added ","type":"text"},{"type":"codeVoice","code":"macCatalyst"},{"type":"text","text":" to the list of target environments"},{"text":" ","type":"text"},{"text":"in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"now that ","type":"text"},{"type":"codeVoice","code":"Self"},{"text":" can be used to refer to the type","type":"text"},{"text":" ","type":"text"},{"text":"introduced by the current class, structure, or enumeration declaration.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2019-03-25"}]}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 5.0."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#Extended-String-Delimiters"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"and updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"with information about extended string delimiters.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicCallable","type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with information about dynamically calling instances as functions","type":"text"},{"type":"text","text":" "},{"type":"text","text":"using the "},{"type":"codeVoice","code":"dynamicCallable"},{"text":" attribute.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unknown","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","isActive":true,"type":"reference"},{"type":"text","text":" sections"},{"text":" ","type":"text"},{"text":"with information about handling future enumeration cases","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in switch statements using"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"unknown","type":"codeVoice"},{"type":"text","text":" switch case attribute."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the identity key path ("},{"type":"codeVoice","code":"\\.self"},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about using the less than ("},{"code":"<","type":"codeVoice"},{"type":"text","text":") operator"},{"type":"text","text":" "},{"type":"text","text":"in platform conditions to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"reference","isActive":true},{"text":" section.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2018-09-17"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 4.2.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about accessing all of an enumeration’s cases","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:Enumerations#Iterating-over-Enumeration-Cases"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about "},{"code":"#error","type":"codeVoice"},{"type":"text","text":" and "},{"code":"#warning","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compile-Time-Diagnostic-Statement","type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about inlining"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"under the ","type":"text"},{"type":"codeVoice","code":"inlinable"},{"type":"text","text":" and  "},{"type":"codeVoice","code":"usableFromInline"},{"text":" attributes.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about members that are looked up by name at runtime","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"under the "},{"code":"dynamicMemberLookup","type":"codeVoice"},{"type":"text","text":" attribute."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about the ","type":"text"},{"type":"codeVoice","code":"requires_stored_property_inits"},{"type":"text","text":" and "},{"type":"codeVoice","code":"warn_unqualified_access"},{"text":" attributes","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about how to conditionally compile code","type":"text"},{"type":"text","text":" "},{"type":"text","text":"depending on the Swift compiler version being used"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true,"type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about ","type":"text"},{"code":"#dsohandle","type":"codeVoice"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","type":"reference","isActive":true},{"text":" section.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2018-03-29"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 4.1."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about synthesized implementations of equivalence operators"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:AdvancedOperators#Equivalence-Operators"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about conditional protocol conformance"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"text":"and to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Conditionally-Conforming-to-a-Protocol","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true,"type":"reference"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about recursive protocol constraints"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"canImport()"},{"type":"text","text":" and "},{"type":"codeVoice","code":"targetEnvironment()"},{"text":" platform conditions","type":"text"},{"type":"text","text":" "},{"text":"to ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2017-12-04","type":"text"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 4.0.3."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","isActive":true},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"text":"now that key paths support subscript components.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2017-09-19"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 4.0.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about exclusive access to memory","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types-with-a-Generic-Where-Clause","isActive":true},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that you can use generic "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clauses"},{"type":"text","text":" "},{"text":"to constrain associated types.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about multiline string literals"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#String-Literals"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"text":"and to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure"},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"now that this attribute is inferred in fewer places.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Subscripts","isActive":true,"type":"reference"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"text":"now that subscripts can be generic.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true,"type":"reference"},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"text":"and in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","isActive":true,"type":"reference"},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"text":"now that protocol composition types can contain a superclass requirement.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of protocol extensions"},{"type":"text","text":" "},{"type":"text","text":"in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"now that "},{"type":"codeVoice","code":"final"},{"type":"text","text":" isn’t allowed in them."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about preconditions and fatal errors"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"text","text":"doc:TheBasics#Assertions-and-Preconditions"},{"text":" section.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"inlineContent":[{"text":"2017-03-27","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 3.1."}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about extensions that include requirements."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added examples of iterating over a range","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:ControlFlow#For-In-Loops"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added an example of failable numeric conversions"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Initialization#Failable-Initializers"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"about using the "},{"code":"available","type":"codeVoice"},{"text":" attribute with a Swift language version.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"to note that argument labels aren’t allowed when writing a function type.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of Swift language version numbers"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"reference"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"now that an optional patch number is allowed.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","type":"reference","isActive":true},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that Swift distinguishes between functions that take multiple parameters"},{"text":" ","type":"text"},{"type":"text","text":"and functions that take a single parameter of a tuple type."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Removed the Dynamic Type Expression section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","isActive":true,"type":"reference"},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that "},{"code":"type(of:)","type":"codeVoice"},{"type":"text","text":" is a Swift standard library function."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"2016-10-27","type":"text"}],"type":"strong"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 3.0.1."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the discussion of weak and unowned references","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","isActive":true},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about the ","type":"text"},{"type":"codeVoice","code":"unowned"},{"text":", ","type":"text"},{"type":"codeVoice","code":"unowned(safe)"},{"type":"text","text":", and "},{"type":"codeVoice","code":"unowned(unsafe)"},{"type":"text","text":" "},{"text":"declaration modifiers","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"text":"doc:TypeCasting#Type-Casting-for-Any-and-AnyObject","type":"text"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"about using an optional value when a value of type ","type":"text"},{"code":"Any","type":"codeVoice"},{"type":"text","text":" is expected."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","isActive":true},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"text":"to separate the discussion of parenthesized expressions and tuple expressions.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2016-09-13"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 3.0."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of functions in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","isActive":true},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","isActive":true},{"type":"text","text":" section to note that"},{"type":"text","text":" "},{"type":"text","text":"all parameters get an argument label by default."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of operators"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","type":"reference"},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"type":"text","text":"now that you implement them as type methods instead of as global functions."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about the ","type":"text"},{"code":"open","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"fileprivate"},{"type":"text","text":" access-level modifiers"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","type":"reference"},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of "},{"type":"codeVoice","code":"inout"},{"type":"text","text":" in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"to note that it appears in front of a parameter’s type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"instead of in front of a parameter’s name."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"type":"codeVoice","code":"@noescape"},{"type":"text","text":" and "},{"code":"@autoclosure","type":"codeVoice"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"text","text":"doc:Closures#Escaping-Closures"},{"type":"text","text":" and "},{"text":"doc:Closures#Autoclosures","type":"text"},{"type":"text","text":" sections"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","isActive":true},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that they’re type attributes, rather than declaration attributes."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about operator precedence groups"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:AdvancedOperators#Precedence-for-Custom-Infix-Operators","type":"text"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","type":"reference","isActive":true},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Precedence-Group-Declaration","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated discussion throughout","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to use macOS instead of OS X,"},{"type":"text","text":" "},{"code":"Error","type":"codeVoice"},{"type":"text","text":" instead of "},{"code":"ErrorProtocol","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and protocol names such as "},{"code":"ExpressibleByStringLiteral","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"instead of "},{"type":"codeVoice","code":"StringLiteralConvertible"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses","type":"reference","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","type":"reference"},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"text":"and in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","isActive":true,"type":"reference"},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that generic "},{"type":"codeVoice","code":"where"},{"text":" clauses are written at the end of a declaration.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"type":"text","text":"doc:Closures#Escaping-Closures"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that closures are nonescaping by default."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the discussion","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","isActive":true},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#While-Statement","type":"reference","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","type":"reference"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"now that "},{"code":"if","type":"codeVoice"},{"text":", ","type":"text"},{"code":"while","type":"codeVoice"},{"type":"text","text":", and "},{"code":"guard","type":"codeVoice"},{"text":" statements","type":"text"},{"type":"text","text":" "},{"text":"use a comma-separated list of conditions without ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" clauses.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about switch cases that have multiple patterns","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:ControlFlow#Switch","type":"text"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switch-Statement"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of function types"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"now that function argument labels are no longer part of a function’s type.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of protocol composition types"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","type":"reference","isActive":true},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"type":"text","text":"and in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","type":"reference"},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"text":"to use the new ","type":"text"},{"code":"Protocol1 & Protocol2","type":"codeVoice"},{"type":"text","text":" syntax."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion in the Dynamic Type Expression section","type":"text"},{"type":"text","text":" "},{"text":"to use the new ","type":"text"},{"code":"type(of:)","type":"codeVoice"},{"text":" syntax for dynamic type expressions.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of line control statements","type":"text"},{"type":"text","text":" "},{"text":"to use the ","type":"text"},{"type":"codeVoice","code":"#sourceLocation(file:line:)"},{"text":" syntax","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Line-Control-Statement"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return","type":"reference"},{"text":" ","type":"text"},{"text":"to use the new ","type":"text"},{"type":"codeVoice","code":"Never"},{"type":"text","text":" type."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about playground literals"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"text":"doc:Declarations#In-Out-Parameters","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to note that only nonescaping closures can capture in-out parameters."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion about default parameters"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"text":"doc:Functions#Default-Parameter-Values","type":"text"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"now that they can’t be reordered in function calls.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated attribute arguments to use a colon","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","isActive":true},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about throwing an error"},{"text":" ","type":"text"},{"text":"inside the catch block of a rethrowing function","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about accessing the selector"},{"type":"text","text":" "},{"text":"of an Objective-C property’s getter or setter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression","type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Alias-Declaration"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"about generic type aliases and using type aliases inside of protocols."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of function types in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to note that parentheses around the parameter types are required.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","isActive":true},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"text":"to note that the ","type":"text"},{"type":"codeVoice","code":"@IBAction"},{"type":"text","text":", "},{"type":"codeVoice","code":"@IBOutlet"},{"type":"text","text":", and "},{"type":"codeVoice","code":"@NSManaged"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"text":"imply the ","type":"text"},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" attribute."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"@GKInspectable"},{"text":" attribute","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of optional protocol requirements"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Optional-Protocol-Requirements","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to clarify that they’re used only in code that interoperates with Objective-C."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Removed the discussion of explicitly using "},{"code":"let","type":"codeVoice"},{"type":"text","text":" in function parameters"},{"text":" ","type":"text"},{"type":"text","text":"from the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","isActive":true,"type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Removed the discussion of the "},{"type":"codeVoice","code":"Boolean"},{"type":"text","text":" protocol"},{"type":"text","text":" "},{"type":"text","text":"from the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","isActive":true},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"text":"now that the protocol has been removed from the Swift standard library.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Corrected the discussion of the ","type":"text"},{"type":"codeVoice","code":"@NSApplicationMain"},{"text":" attribute","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"text":" section.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2016-03-21","type":"text"}]}]},{"items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 2.2.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about how to conditionally compile code","type":"text"},{"text":" ","type":"text"},{"text":"depending on the version of Swift being used","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true,"type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about how to distinguish","type":"text"},{"text":" ","type":"text"},{"text":"between methods or initializers whose names differ","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"only by the names of their arguments"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","type":"reference","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"code":"#selector","type":"codeVoice"},{"text":" syntax","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for Objective-C selectors"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of associated types"},{"text":" ","type":"text"},{"text":"to use the ","type":"text"},{"code":"associatedtype","type":"codeVoice"},{"text":" keyword","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types","type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Associated-Type-Declaration"},{"text":" sections.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated information about initializers that return "},{"code":"nil","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"before the instance is fully initialized"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"text","text":"doc:Initialization#Failable-Initializers"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about comparing tuples"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:BasicOperators#Comparison-Operators"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about using keywords as external parameter names","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Keywords-and-Punctuation"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"code":"@objc","type":"codeVoice"},{"text":" attribute","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true,"type":"reference"},{"type":"text","text":" section to note that"},{"text":" ","type":"text"},{"text":"enumerations and enumeration cases can use this attribute.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:LexicalStructure#Operators","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with discussion of custom operators that contain a dot.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"that rethrowing functions can’t directly throw errors."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"about property observers being called","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when you pass a property as an in-out parameter."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a section about error handling"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","isActive":true},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated figures in the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"doc:AutomaticReferenceCounting#Weak-References"},{"type":"text","text":" "},{"type":"text","text":"section to show the deallocation process more clearly."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Removed discussion of C-style "},{"type":"codeVoice","code":"for"},{"type":"text","text":" loops,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"++"},{"type":"text","text":" prefix and postfix operators,"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"code":"--","type":"codeVoice"},{"type":"text","text":" prefix and postfix operators."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Removed discussion of variable function arguments"},{"type":"text","text":" "},{"type":"text","text":"and the special syntax for curried functions."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2015-10-20","type":"text"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 2.1.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:StringsAndCharacters#String-Interpolation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","isActive":true},{"type":"text","text":" sections"},{"text":" ","type":"text"},{"type":"text","text":"now that string interpolations can contain string literals."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"text":"doc:Closures#Escaping-Closures","type":"text"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with information about the "},{"type":"codeVoice","code":"@noescape"},{"text":" attribute.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"text":" sections","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with information about tvOS."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the behavior of in-out parameters"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:Declarations#In-Out-Parameters"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information to the ","type":"text"},{"text":"doc:Expressions#Capture-Lists","type":"text"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"about how values specified in closure capture lists are captured."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","isActive":true},{"type":"text","text":" "},{"type":"text","text":"section to clarify how assignment through optional chaining"},{"type":"text","text":" "},{"type":"text","text":"behaves."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Improved the discussion of autoclosures"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"text":"doc:Closures#Autoclosures","type":"text"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added an example that uses the ","type":"text"},{"code":"??","type":"codeVoice"},{"type":"text","text":" operator"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","isActive":true},{"type":"text","text":" chapter."}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2015-09-16","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 2.0.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about error handling","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","isActive":true},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","isActive":true,"type":"reference"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Throw-Statement","isActive":true},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Defer-Statement"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Try-Operator"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:ErrorHandling#Representing-and-Throwing-Errors"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that all types can conform to the "},{"type":"codeVoice","code":"ErrorType"},{"type":"text","text":" protocol."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the new ","type":"text"},{"type":"codeVoice","code":"try?"},{"text":" keyword","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"text":"doc:ErrorHandling#Converting-Errors-to-Optional-Values","type":"text"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about recursive enumerations","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Enumerations#Recursive-Enumerations"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","isActive":true,"type":"reference"},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type","type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about API availability checking","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:ControlFlow#Checking-API-Availability"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","type":"reference"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Availability-Condition","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","isActive":true,"type":"reference"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the new ","type":"text"},{"code":"guard","type":"codeVoice"},{"text":" statement","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:ControlFlow#Early-Exit"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Guard-Statement"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about protocol extensions","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","type":"reference","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about access control for unit testing"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:AccessControl#Access-Levels-for-Unit-Test-Targets","type":"text"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","isActive":true,"type":"reference"},{"text":" chapter.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about the new optional pattern","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:Patterns#Optional-Pattern","type":"text"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","isActive":true,"type":"reference"},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:ControlFlow#Repeat-While"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about the "},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"-"},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that "},{"type":"codeVoice","code":"String"},{"type":"text","text":" no longer conforms"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"codeVoice","code":"CollectionType"},{"type":"text","text":" protocol from the Swift standard library."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the new Swift standard library"},{"type":"text","text":" "},{"code":"print(_:separator:terminator)","type":"codeVoice"},{"text":" function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:TheBasics#Printing-Constants-and-Variables","type":"text"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about the behavior","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of enumeration cases with "},{"type":"codeVoice","code":"String"},{"text":" raw values","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"text":"doc:Enumerations#Implicitly-Assigned-Raw-Values","type":"text"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","isActive":true},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"@autoclosure"},{"type":"text","text":" attribute —"},{"text":" ","type":"text"},{"type":"text","text":"including its "},{"type":"codeVoice","code":"@autoclosure(escaping)"},{"type":"text","text":" form —"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Closures#Autoclosures"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about the "},{"code":"@available","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"codeVoice","code":"@warn_unused_result"},{"type":"text","text":" attributes."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Type-Attributes"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about the "},{"code":"@convention","type":"codeVoice"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added an example of using multiple optional bindings","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with a "},{"type":"codeVoice","code":"where"},{"text":" clause","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"about how concatenating string literals using the ","type":"text"},{"type":"codeVoice","code":"+"},{"type":"text","text":" operator"},{"text":" ","type":"text"},{"type":"text","text":"happens at compile time."}]}]},{"content":[{"inlineContent":[{"text":"Added information to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"about comparing metatype values and using them"},{"type":"text","text":" "},{"text":"to construct instances with initializer expressions.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"text","text":"doc:TheBasics#Debugging-with-Assertions"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"about when user-defined assertions are disabled.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"code":"@NSManaged","type":"codeVoice"},{"text":" attribute","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true,"type":"reference"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that the attribute can be applied to certain instance methods."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:Functions#Variadic-Parameters"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"now that variadic parameters can be declared in any position","type":"text"},{"type":"text","text":" "},{"text":"in a function’s parameter list.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:Initialization#Overriding-a-Failable-Initializer","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"about how a nonfailable initializer can delegate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"up to a failable initializer"},{"type":"text","text":" "},{"type":"text","text":"by force-unwrapping the result of the superclass’s initializer."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about using enumeration cases as functions"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type","isActive":true,"type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about explicitly referencing an initializer","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Initializer-Expression","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about build configuration"},{"type":"text","text":" "},{"type":"text","text":"and line control statements"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compiler-Control-Statements","isActive":true,"type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"about constructing class instances from metatype values.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added a note to the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:AutomaticReferenceCounting#Weak-References"},{"type":"text","text":" "},{"type":"text","text":"section about weak references being unsuitable for caching."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated a note in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to mention that stored type properties are lazily initialized."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Closures#Capturing-Values"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to clarify how variables and constants are captured in closures."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to describe when you can apply the "},{"code":"@objc","type":"codeVoice"},{"text":" attribute to classes.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added a note to the ","type":"text"},{"text":"doc:ErrorHandling#Handling-Errors","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"about the performance of executing a ","type":"text"},{"type":"codeVoice","code":"throw"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"text":"Added similar information about the ","type":"text"},{"type":"codeVoice","code":"do"},{"text":" statement","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","isActive":true},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties","type":"reference","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"with information about stored and computed type properties"},{"text":" ","type":"text"},{"type":"text","text":"for classes, structures, and enumerations."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with information about labeled break statements.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated a note in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to clarify the behavior of ","type":"text"},{"code":"willSet","type":"codeVoice"},{"type":"text","text":" and "},{"code":"didSet","type":"codeVoice"},{"type":"text","text":" observers."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"text","text":"doc:AccessControl#Access-Levels"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about the scope of "},{"type":"codeVoice","code":"private"},{"type":"text","text":" access."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the"},{"type":"text","text":" "},{"type":"text","text":"doc:AutomaticReferenceCounting#Weak-References"},{"type":"text","text":" "},{"type":"text","text":"section about the differences in weak references"},{"type":"text","text":" "},{"type":"text","text":"between garbage collected systems and ARC."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the"},{"text":" ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#Special-Characters-in-String-Literals"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with a more precise definition of Unicode scalars."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"2015-04-08","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 1.2."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Swift now has a native "},{"code":"Set","type":"codeVoice"},{"type":"text","text":" collection type."},{"text":" ","type":"text"},{"text":"For more information, see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Sets"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"@autoclosure","type":"codeVoice"},{"type":"text","text":" is now an attribute of the parameter declaration,"},{"text":" ","type":"text"},{"type":"text","text":"not its type."},{"type":"text","text":" "},{"text":"There’s also a new ","type":"text"},{"type":"codeVoice","code":"@noescape"},{"type":"text","text":" parameter declaration attribute."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Type methods and properties now use the "},{"code":"static","type":"codeVoice"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"as a declaration modifier."},{"text":" ","type":"text"},{"type":"text","text":"For more information see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Variable-Properties","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Swift now includes the "},{"code":"as?","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"as!"},{"type":"text","text":" failable downcast operators."},{"type":"text","text":" "},{"text":"For more information,","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added a new guide section about","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#String-Indices"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Removed the overflow division (","type":"text"},{"type":"codeVoice","code":"&\/"},{"type":"text","text":") and"},{"type":"text","text":" "},{"text":"overflow remainder (","type":"text"},{"code":"&%","type":"codeVoice"},{"text":") operators","type":"text"},{"text":" ","type":"text"},{"text":"from ","type":"text"},{"text":"doc:AdvancedOperators#Overflow-Operators","type":"text"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the rules for constant and"},{"type":"text","text":" "},{"text":"constant property declaration and initialization.","type":"text"},{"text":" ","type":"text"},{"text":"For more information, see ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the definition of Unicode scalars in string literals.","type":"text"},{"text":" ","type":"text"},{"text":"See ","type":"text"},{"text":"doc:StringsAndCharacters#Special-Characters-in-String-Literals","type":"text"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated ","type":"text"},{"type":"text","text":"doc:BasicOperators#Range-Operators"},{"type":"text","text":" to note that"},{"text":" ","type":"text"},{"text":"a half-open range with the same start and end index will be empty.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated ","type":"text"},{"type":"text","text":"doc:Closures#Closures-Are-Reference-Types"},{"type":"text","text":" to clarify"},{"text":" ","type":"text"},{"type":"text","text":"the capturing rules for variables."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated "},{"text":"doc:AdvancedOperators#Value-Overflow","type":"text"},{"text":" to clarify","type":"text"},{"type":"text","text":" "},{"text":"the overflow behavior of signed and unsigned integers","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration","isActive":true,"type":"reference"},{"type":"text","text":" to clarify"},{"type":"text","text":" "},{"text":"protocol declaration scope and members.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated ","type":"text"},{"type":"text","text":"doc:AutomaticReferenceCounting#Defining-a-Capture-List"},{"text":" ","type":"text"},{"text":"to clarify the syntax for","type":"text"},{"text":" ","type":"text"},{"text":"weak and unowned references in closure capture lists.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"type":"text","text":"doc:LexicalStructure#Operators"},{"type":"text","text":" to explicitly mention"},{"text":" ","type":"text"},{"type":"text","text":"examples of supported characters for custom operators,"},{"text":" ","type":"text"},{"type":"text","text":"such as those in the Mathematical Operators, Miscellaneous Symbols,"},{"text":" ","type":"text"},{"type":"text","text":"and Dingbats Unicode blocks."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Constants can now be declared without being initialized","type":"text"},{"text":" ","type":"text"},{"text":"in local function scope.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"They must have a set value before first use."},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In an initializer, constant properties can now only assign a value once."},{"type":"text","text":" "},{"text":"For more information,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"text":"doc:Initialization#Assigning-Constant-Properties-During-Initialization","type":"text"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Multiple optional bindings can now appear in a single ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"as a comma-separated list of assignment expressions."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Optional-Chaining-Expression","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"must appear within a postfix expression."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Protocol casts are no longer limited to ","type":"text"},{"code":"@objc","type":"codeVoice"},{"type":"text","text":" protocols."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Type casts that can fail at runtime"},{"type":"text","text":" "},{"type":"text","text":"now use the "},{"type":"codeVoice","code":"as?"},{"text":" or ","type":"text"},{"code":"as!","type":"codeVoice"},{"type":"text","text":" operator,"},{"type":"text","text":" "},{"type":"text","text":"and type casts that are guaranteed not to fail use the "},{"type":"codeVoice","code":"as"},{"type":"text","text":" operator."},{"text":" ","type":"text"},{"type":"text","text":"For more information, see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Type-Casting-Operators"},{"text":".","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2014-10-16"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 1.1.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a full guide to "},{"type":"text","text":"doc:Initialization#Failable-Initializers"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added a description of ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Failable-Initializer-Requirements","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"for protocols."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Constants and variables of type "},{"type":"codeVoice","code":"Any"},{"text":" can now contain","type":"text"},{"type":"text","text":" "},{"type":"text","text":"function instances. Updated the example in "},{"text":"doc:TypeCasting#Type-Casting-for-Any-and-AnyObject","type":"text"},{"type":"text","text":" "},{"text":"to show how to check for and cast to a function type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"within a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Enumerations with raw values"},{"text":" ","type":"text"},{"type":"text","text":"now have a "},{"code":"rawValue","type":"codeVoice"},{"type":"text","text":" property rather than a "},{"type":"codeVoice","code":"toRaw()"},{"text":" method","type":"text"},{"type":"text","text":" "},{"text":"and a failable initializer with a ","type":"text"},{"type":"codeVoice","code":"rawValue"},{"text":" parameter","type":"text"},{"text":" ","type":"text"},{"text":"rather than a ","type":"text"},{"code":"fromRaw()","type":"codeVoice"},{"text":" method.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For more information, see "},{"type":"text","text":"doc:Enumerations#Raw-Values"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new reference section about","type":"text"},{"text":" ","type":"text"},{"text":"doc:Declarations#Failable-Initializers","type":"text"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which can trigger initialization failure.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Custom operators can now contain the ","type":"text"},{"type":"codeVoice","code":"?"},{"type":"text","text":" character."},{"text":" ","type":"text"},{"type":"text","text":"Updated the "},{"text":"doc:LexicalStructure#Operators","type":"text"},{"text":" reference to describe","type":"text"},{"type":"text","text":" "},{"text":"the revised rules.","type":"text"},{"type":"text","text":" "},{"text":"Removed a duplicate description of the valid set of operator characters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from "},{"type":"text","text":"doc:AdvancedOperators#Custom-Operators"},{"text":".","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2014-08-18"}],"type":"strong"}]},{"items":[{"content":[{"inlineContent":[{"text":"New document that describes Swift 1.0,","type":"text"},{"type":"text","text":" "},{"text":"Apple’s new programming language for building iOS and OS X apps.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Initializer-Requirements","isActive":true},{"type":"text","text":" in protocols."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a new section about "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"doc:TheBasics#Assertions-and-Preconditions","type":"text"},{"text":" can now use string interpolation.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Removed a note to the contrary."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the"},{"type":"text","text":" "},{"text":"doc:StringsAndCharacters#Concatenating-Strings-and-Characters","type":"text"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to reflect the fact that "},{"code":"String","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Character","type":"codeVoice"},{"type":"text","text":" values"},{"type":"text","text":" "},{"type":"text","text":"can no longer be combined with the addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"or addition assignment operator ("},{"code":"+=","type":"codeVoice"},{"text":").","type":"text"},{"type":"text","text":" "},{"type":"text","text":"These operators are now used only with "},{"code":"String","type":"codeVoice"},{"text":" values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Use the "},{"type":"codeVoice","code":"String"},{"text":" type’s ","type":"text"},{"type":"codeVoice","code":"append(_:)"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"to append a single "},{"type":"codeVoice","code":"Character"},{"text":" value onto the end of a string.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"type":"codeVoice","code":"availability"},{"text":" attribute to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"doc:TheBasics#Optionals"},{"type":"text","text":" no longer implicitly evaluate to"},{"text":" ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" when they have a value and ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":" when they do not,"},{"text":" ","type":"text"},{"type":"text","text":"to avoid confusion when working with optional "},{"code":"Bool","type":"codeVoice"},{"text":" values.","type":"text"},{"text":" ","type":"text"},{"text":"Instead, make an explicit check against ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"=="},{"type":"text","text":" or "},{"code":"!=","type":"codeVoice"},{"type":"text","text":" operators"},{"text":" ","type":"text"},{"type":"text","text":"to find out if an optional contains a value."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Swift now has a "},{"type":"text","text":"doc:BasicOperators#Nil-Coalescing-Operator"},{"type":"text","text":" "},{"type":"text","text":"("},{"code":"a ?? b","type":"codeVoice"},{"text":"), which unwraps an optional’s value if it exists,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or returns a default value if the optional is "},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated and expanded"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"text","text":"doc:StringsAndCharacters#Comparing-Strings"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to reflect and demonstrate that string and character comparison"},{"type":"text","text":" "},{"text":"and prefix \/ suffix comparison are now based on","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Unicode canonical equivalence of extended grapheme clusters."}]}]},{"content":[{"inlineContent":[{"text":"You can now try to set a property’s value, assign to a subscript,","type":"text"},{"text":" ","type":"text"},{"text":"or call a mutating method or operator through","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","isActive":true,"type":"reference"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"The information about","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","type":"reference"},{"text":" ","type":"text"},{"text":"has been updated accordingly,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the examples of checking for method call success in"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Calling-Methods-Through-Optional-Chaining"},{"type":"text","text":" "},{"type":"text","text":"have been expanded to show how to check for property setting success."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a new section about"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Subscripts-of-Optional-Type","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"through optional chaining."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:CollectionTypes#Accessing-and-Modifying-an-Array","type":"text"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"to note that you can no longer append a single item to an array","type":"text"},{"text":" ","type":"text"},{"text":"with the ","type":"text"},{"type":"codeVoice","code":"+="},{"type":"text","text":" operator."},{"text":" ","type":"text"},{"type":"text","text":"Instead, use the "},{"type":"codeVoice","code":"append(_:)"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"text":"or append a single-item array with the ","type":"text"},{"type":"codeVoice","code":"+="},{"text":" operator.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a note that the start value "},{"type":"codeVoice","code":"a"},{"text":" ","type":"text"},{"type":"text","text":"for the "},{"type":"text","text":"doc:BasicOperators#Range-Operators"},{"text":" ","type":"text"},{"code":"a...b","type":"codeVoice"},{"type":"text","text":" and "},{"code":"a..<b","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"must not be greater than the end value "},{"type":"codeVoice","code":"b"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Rewrote the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","isActive":true,"type":"reference"},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"type":"text","text":"to remove its introductory coverage of initializer overrides."},{"type":"text","text":" "},{"text":"This chapter now focuses more on the addition of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"new functionality in a subclass,"},{"type":"text","text":" "},{"type":"text","text":"and the modification of existing functionality with overrides."},{"text":" ","type":"text"},{"type":"text","text":"The chapter’s example of"},{"type":"text","text":" "},{"type":"text","text":"doc:Inheritance#Overriding-Property-Getters-and-Setters"},{"type":"text","text":" "},{"text":"has been rewritten to show how to override a ","type":"text"},{"type":"codeVoice","code":"description"},{"text":" property.","type":"text"},{"text":" ","type":"text"},{"text":"(The examples of modifying an inherited property’s default value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in a subclass initializer have been moved to"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","isActive":true,"type":"reference"},{"type":"text","text":" chapter.)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the"},{"text":" ","type":"text"},{"text":"doc:Initialization#Initializer-Inheritance-and-Overriding","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to note that overrides of a designated initializer"},{"text":" ","type":"text"},{"text":"must now be marked with the ","type":"text"},{"type":"codeVoice","code":"override"},{"type":"text","text":" modifier."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:Initialization#Required-Initializers","type":"text"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to note that the "},{"code":"required","type":"codeVoice"},{"type":"text","text":" modifier is now written before"},{"text":" ","type":"text"},{"type":"text","text":"every subclass implementation of a required initializer,"},{"type":"text","text":" "},{"type":"text","text":"and that the requirements for required initializers"},{"type":"text","text":" "},{"type":"text","text":"can now be satisfied by automatically inherited initializers."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Infix "},{"type":"text","text":"doc:AdvancedOperators#Operator-Methods"},{"type":"text","text":" no longer require"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"@infix"},{"text":" attribute.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@prefix"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@postfix"},{"text":" attributes","type":"text"},{"type":"text","text":" "},{"text":"for ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Prefix-and-Postfix-Operators"},{"type":"text","text":" "},{"type":"text","text":"have been replaced by "},{"code":"prefix","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"postfix","type":"codeVoice"},{"text":" declaration modifiers.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note about the order in which","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Prefix-and-Postfix-Operators"},{"type":"text","text":" are applied"},{"type":"text","text":" "},{"text":"when both a prefix and a postfix operator are applied to","type":"text"},{"text":" ","type":"text"},{"text":"the same operand.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Operator functions for"},{"type":"text","text":" "},{"type":"text","text":"doc:AdvancedOperators#Compound-Assignment-Operators"},{"type":"text","text":" no longer use"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"@assignment"},{"text":" attribute when defining the function.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The order in which modifiers are specified when defining","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:AdvancedOperators#Custom-Operators"},{"type":"text","text":" has changed."},{"type":"text","text":" "},{"type":"text","text":"You now write "},{"type":"codeVoice","code":"prefix operator"},{"text":" rather than ","type":"text"},{"type":"codeVoice","code":"operator prefix"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"for example.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"dynamic"},{"type":"text","text":" declaration modifier"},{"type":"text","text":" "},{"type":"text","text":"in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about how type inference works","type":"text"},{"type":"text","text":" "},{"text":"with ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added more information about curried functions."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new chapter about "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"to reflect the fact that Swift’s ","type":"text"},{"type":"codeVoice","code":"Character"},{"type":"text","text":" type now represents"},{"type":"text","text":" "},{"type":"text","text":"a single Unicode extended grapheme cluster."},{"type":"text","text":" "},{"type":"text","text":"Includes a new section on"},{"type":"text","text":" "},{"type":"text","text":"doc:StringsAndCharacters#Extended-Grapheme-Clusters"},{"text":" ","type":"text"},{"text":"and more information about","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:StringsAndCharacters#Unicode-Scalar-Values"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"text","text":"doc:StringsAndCharacters#Comparing-Strings"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:StringsAndCharacters#String-Literals"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to note that Unicode scalars inside string literals"},{"type":"text","text":" "},{"text":"are now written as ","type":"text"},{"type":"codeVoice","code":"\\u{n}"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"where "},{"type":"codeVoice","code":"n"},{"text":" is a hexadecimal number between 0 and 10FFFF,","type":"text"},{"type":"text","text":" "},{"text":"the range of Unicode’s codespace.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"NSString","type":"codeVoice"},{"text":" ","type":"text"},{"type":"codeVoice","code":"length"},{"text":" property is now mapped onto","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift’s native "},{"code":"String","type":"codeVoice"},{"text":" type as ","type":"text"},{"code":"utf16Count","type":"codeVoice"},{"text":", not ","type":"text"},{"type":"codeVoice","code":"utf16count"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s native "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type no longer has"},{"text":" ","type":"text"},{"type":"text","text":"an "},{"type":"codeVoice","code":"uppercaseString"},{"type":"text","text":" or "},{"type":"codeVoice","code":"lowercaseString"},{"type":"text","text":" property."},{"type":"text","text":" "},{"text":"The corresponding section in","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},{"type":"text","text":" "},{"text":"has been removed, and various code examples have been updated.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new section about","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:Initialization#Initializer-Parameters-Without-Argument-Labels"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about"},{"text":" ","type":"text"},{"text":"doc:Initialization#Required-Initializers","type":"text"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added a new section about ","type":"text"},{"type":"text","text":"doc:Functions#Optional-Tuple-Return-Types"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:TheBasics#Type-Annotations","type":"text"},{"text":" section to note that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"multiple related variables can be defined on a single line"},{"text":" ","type":"text"},{"text":"with one type annotation.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@optional"},{"text":", ","type":"text"},{"code":"@lazy","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"@final"},{"text":", and ","type":"text"},{"code":"@required","type":"codeVoice"},{"text":" attributes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are now the "},{"code":"optional","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"lazy"},{"type":"text","text":", "},{"type":"codeVoice","code":"final"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"required"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the entire book to refer to "},{"type":"codeVoice","code":"..<"},{"type":"text","text":" as"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"text":"doc:BasicOperators#Half-Open-Range-Operator","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(rather than the “half-closed range operator”)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:CollectionTypes#Accessing-and-Modifying-a-Dictionary","type":"text"},{"text":" ","type":"text"},{"text":"section to note that ","type":"text"},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" now has"},{"type":"text","text":" "},{"type":"text","text":"a Boolean "},{"type":"codeVoice","code":"isEmpty"},{"type":"text","text":" property."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Clarified the full list of characters that can be used"},{"text":" ","type":"text"},{"type":"text","text":"when defining "},{"type":"text","text":"doc:AdvancedOperators#Custom-Operators"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"nil","type":"codeVoice"},{"text":" and the Booleans ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":" are now "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" type now has full value semantics."},{"text":" ","type":"text"},{"type":"text","text":"Updated the information about "},{"text":"doc:CollectionTypes#Mutability-of-Collections","type":"text"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"text":"doc:CollectionTypes#Arrays","type":"text"},{"text":" to reflect the new approach.","type":"text"},{"text":" ","type":"text"},{"text":"Also clarified the assignment and copy behavior for strings arrays and dictionaries.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"doc:CollectionTypes#Array-Type-Shorthand-Syntax","type":"text"},{"text":" is now written as","type":"text"},{"type":"text","text":" "},{"code":"[SomeType]","type":"codeVoice"},{"type":"text","text":" rather than "},{"code":"SomeType[]","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about "},{"type":"text","text":"doc:CollectionTypes#Dictionary-Type-Shorthand-Syntax"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is written as "},{"type":"codeVoice","code":"[KeyType: ValueType]"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new section about ","type":"text"},{"type":"text","text":"doc:CollectionTypes#Hash-Values-for-Set-Types"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Examples of ","type":"text"},{"text":"doc:Closures#Closure-Expressions","type":"text"},{"text":" now use","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the global "},{"code":"sorted(_:_:)","type":"codeVoice"},{"type":"text","text":" function"},{"text":" ","type":"text"},{"type":"text","text":"rather than the global "},{"code":"sort(_:_:)","type":"codeVoice"},{"type":"text","text":" function,"},{"type":"text","text":" "},{"text":"to reflect the new array value semantics.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the information about "},{"text":"doc:Initialization#Memberwise-Initializers-for-Structure-Types","type":"text"},{"type":"text","text":" "},{"text":"to clarify that the memberwise structure initializer is made available","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"even if a structure’s stored properties don’t have default values."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated to ","type":"text"},{"type":"codeVoice","code":"..<"},{"text":" rather than ","type":"text"},{"code":"..","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"for the "},{"text":"doc:BasicOperators#Half-Open-Range-Operator","type":"text"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added an example of "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type","isActive":true},{"type":"text","text":"."}]}]}],"type":"unorderedList"}]}],"kind":"article","references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Patterns":{"title":"Patrones","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","url":"\/documentation\/the-swift-programming-language\/patterns","role":"article","kind":"article","abstract":[{"type":"text","text":"Match and destructure values."}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Rethrowing-Functions-and-Methods":{"type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Rethrowing-Functions-and-Methods","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","title":"Rethrowing Functions and Methods","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Declaration-Modifiers":{"abstract":[],"kind":"section","title":"Declaration Modifiers","url":"\/documentation\/the-swift-programming-language\/declarations#Declaration-Modifiers","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations":{"role":"article","title":"Declaraciones","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","type":"topic","abstract":[{"type":"text","text":"Introduce types, operators, variables, and other names and constructs."}],"url":"\/documentation\/the-swift-programming-language\/declarations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extending-a-Generic-Type":{"abstract":[],"kind":"section","title":"Extending a Generic Type","url":"\/documentation\/the-swift-programming-language\/generics#Extending-a-Generic-Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Extension-Declaration":{"type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Extension-Declaration","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","title":"Extension Declaration","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Optional-Chaining-Expression":{"abstract":[],"kind":"section","title":"Optional-Chaining Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Optional-Chaining-Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Optional-Chaining-Expression","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure":{"title":"Lexical Structure","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure","abstract":[{"type":"text","text":"Use the lowest-level components of the syntax."}],"type":"topic","url":"\/documentation\/the-swift-programming-language\/lexicalstructure","kind":"article","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Result-Transformations":{"abstract":[],"kind":"section","title":"Result Transformations","url":"\/documentation\/the-swift-programming-language\/attributes#Result-Transformations","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Result-Transformations","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Function-Declaration":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Function-Declaration","abstract":[],"kind":"section","title":"Function Declaration","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Type-Casting-Operators":{"abstract":[],"kind":"section","title":"Type-Casting Operators","url":"\/documentation\/the-swift-programming-language\/expressions#Type-Casting-Operators","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Type-Casting-Operators","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Function-Call-Expression":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Function-Call-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Function-Call-Expression","abstract":[],"kind":"section","title":"Function Call Expression","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Keywords-and-Punctuation":{"abstract":[],"kind":"section","title":"Keywords and Punctuation","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Keywords-and-Punctuation","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Keywords-and-Punctuation","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Observers":{"abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","type":"topic","title":"Property Observers","url":"\/documentation\/the-swift-programming-language\/properties#Property-Observers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Initializer-Requirements":{"abstract":[],"kind":"section","title":"Initializer Requirements","url":"\/documentation\/the-swift-programming-language\/protocols#Initializer-Requirements","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Initializer-Requirements","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Type-Variable-Properties":{"abstract":[],"kind":"section","title":"Type Variable Properties","url":"\/documentation\/the-swift-programming-language\/declarations#Type-Variable-Properties","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Variable-Properties","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Properties-Through-Optional-Chaining":{"title":"Accessing Properties Through Optional Chaining","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Properties-Through-Optional-Chaining","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Failable-Initializer-Requirements":{"abstract":[],"kind":"section","title":"Failable Initializer Requirements","url":"\/documentation\/the-swift-programming-language\/protocols#Failable-Initializer-Requirements","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Failable-Initializer-Requirements","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Implicit-Conversion-to-a-Pointer-Type":{"url":"\/documentation\/the-swift-programming-language\/expressions#Implicit-Conversion-to-a-Pointer-Type","kind":"section","abstract":[],"type":"topic","title":"Implicit Conversion to a Pointer Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Conversion-to-a-Pointer-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Conditional-Compilation-Block":{"abstract":[],"kind":"section","title":"Conditional Compilation Block","url":"\/documentation\/the-swift-programming-language\/statements#Conditional-Compilation-Block","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Constant-Declaration":{"abstract":[],"kind":"section","title":"Constant Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Constant-Declaration","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#While-Statement":{"abstract":[],"kind":"section","title":"While Statement","url":"\/documentation\/the-swift-programming-language\/statements#While-Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#While-Statement","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Type-Alias-Declaration":{"abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Alias-Declaration","type":"topic","title":"Type Alias Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Type-Alias-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"title":"Flujo de control","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","abstract":[{"type":"text","text":"Structure code with branches, loops, and early exits."}],"type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow","kind":"article","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Actor-Declaration":{"abstract":[],"kind":"section","title":"Actor Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Actor-Declaration","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Actor-Declaration","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switch-Statement":{"abstract":[],"kind":"section","title":"Switch Statement","url":"\/documentation\/the-swift-programming-language\/statements#Switch-Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switch-Statement","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Asynchronous-Functions-and-Methods":{"type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Asynchronous-Functions-and-Methods","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods","title":"Asynchronous Functions and Methods","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Function-Type":{"abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","kind":"section","type":"topic","title":"Function Type","url":"\/documentation\/the-swift-programming-language\/types#Function-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Associated-Types":{"abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types","type":"topic","title":"Associated Types","url":"\/documentation\/the-swift-programming-language\/generics#Associated-Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Availability-Condition":{"abstract":[],"kind":"section","title":"Availability Condition","url":"\/documentation\/the-swift-programming-language\/statements#Availability-Condition","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Availability-Condition","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions":{"title":"Expressions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","abstract":[{"type":"text","text":"Access, modify, and assign values."}],"type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions","kind":"article","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#String-Literals":{"abstract":[],"kind":"section","title":"String Literals","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#String-Literals","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Herencia","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","type":"topic","abstract":[{"type":"text","text":"Subclass to add or override functionality."}],"url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Metatype-Type":{"abstract":[],"kind":"section","title":"Metatype Type","url":"\/documentation\/the-swift-programming-language\/types#Metatype-Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Sendable":{"abstract":[],"kind":"section","title":"Sendable","url":"\/documentation\/the-swift-programming-language\/attributes#Sendable","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Sendable","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Checking-for-Protocol-Conformance":{"url":"\/documentation\/the-swift-programming-language\/protocols#Checking-for-Protocol-Conformance","abstract":[],"type":"topic","title":"Checking for Protocol Conformance","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Control de acceso","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","type":"topic","abstract":[{"type":"text","text":"Manage the visibility of code by declaration, file, and module."}],"url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements":{"title":"Statements","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","abstract":[{"type":"text","text":"Group expressions and control the flow of execution."}],"type":"topic","url":"\/documentation\/the-swift-programming-language\/statements","kind":"article","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Inicialización","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","type":"topic","abstract":[{"type":"text","text":"Set the initial values for a type’s stored properties and perform one-time setup."}],"url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#available":{"abstract":[],"kind":"section","title":"available","url":"\/documentation\/the-swift-programming-language\/attributes#available","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#available","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"role":"collection","type":"topic","url":"\/documentation\/the-swift-programming-language","abstract":[],"title":"The Swift Programming Language (6)","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Compile-Time-Diagnostic-Statement":{"abstract":[],"kind":"section","title":"Compile-Time Diagnostic Statement","url":"\/documentation\/the-swift-programming-language\/statements#Compile-Time-Diagnostic-Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compile-Time-Diagnostic-Statement","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Enumerations-with-Cases-of-Any-Type":{"abstract":[],"kind":"section","title":"Enumerations with Cases of Any Type","url":"\/documentation\/the-swift-programming-language\/declarations#Enumerations-with-Cases-of-Any-Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Optional-Protocol-Requirements":{"title":"Optional Protocol Requirements","url":"\/documentation\/the-swift-programming-language\/protocols#Optional-Protocol-Requirements","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Optional-Protocol-Requirements","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Initializer-Expression":{"abstract":[],"kind":"section","title":"Initializer Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Initializer-Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Initializer-Expression","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switching-Over-Future-Enumeration-Cases":{"abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","kind":"section","type":"topic","title":"Switching Over Future Enumeration Cases","url":"\/documentation\/the-swift-programming-language\/statements#Switching-Over-Future-Enumeration-Cases"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Break-Statement":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement","title":"Break Statement","url":"\/documentation\/the-swift-programming-language\/statements#Break-Statement","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#dynamicMemberLookup":{"title":"dynamicMemberLookup","url":"\/documentation\/the-swift-programming-language\/attributes#dynamicMemberLookup","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicMemberLookup","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type":{"abstract":[],"kind":"section","title":"Enumerations with Cases of a Raw-Value Type","url":"\/documentation\/the-swift-programming-language\/declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"title":"Protocols","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","abstract":[{"type":"text","text":"Define requirements that conforming types must implement."}],"type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols","kind":"article","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Type-Properties":{"abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties","type":"topic","title":"Type Properties","url":"\/documentation\/the-swift-programming-language\/properties#Type-Properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque and Boxed Types","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","type":"topic","abstract":[{"type":"text","text":"Hide implementation details about a value’s type."}],"url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"title":"Conteo automático de referencias","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","abstract":[{"type":"text","text":"Model the lifetime of objects and their relationships."}],"type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting","kind":"article","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#main":{"abstract":[],"kind":"section","title":"main","url":"\/documentation\/the-swift-programming-language\/attributes#main","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#main","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#unchecked":{"abstract":[],"kind":"section","title":"unchecked","url":"\/documentation\/the-swift-programming-language\/attributes#unchecked","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unchecked","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extensions-with-a-Generic-Where-Clause":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause","url":"\/documentation\/the-swift-programming-language\/generics#Extensions-with-a-Generic-Where-Clause","title":"Extensions with a Generic Where Clause","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Try-Operator":{"abstract":[],"kind":"section","title":"Try Operator","url":"\/documentation\/the-swift-programming-language\/expressions#Try-Operator","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Try-Operator","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","type":"topic","abstract":[{"type":"text","text":"Structure your code to avoid conflicts when accessing memory."}],"url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Sets":{"abstract":[],"kind":"section","title":"Sets","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Sets","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Sets","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Subscripts-of-Optional-Type":{"abstract":[],"kind":"section","title":"Accessing Subscripts of Optional Type","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Subscripts-of-Optional-Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Subscripts-of-Optional-Type","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Line-Control-Statement":{"abstract":[],"kind":"section","title":"Line Control Statement","url":"\/documentation\/the-swift-programming-language\/statements#Line-Control-Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Line-Control-Statement","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Literal-Expression":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","title":"Literal Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Literal-Expression","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Manejo de errores","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","type":"topic","abstract":[{"type":"text","text":"Respond to and recover from errors."}],"url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#unknown":{"abstract":[],"kind":"section","title":"unknown","url":"\/documentation\/the-swift-programming-language\/attributes#unknown","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unknown","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Associated-Types-with-a-Generic-Where-Clause":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types-with-a-Generic-Where-Clause","url":"\/documentation\/the-swift-programming-language\/generics#Associated-Types-with-a-Generic-Where-Clause","title":"Associated Types with a Generic Where Clause","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types":{"role":"article","title":"Types","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","type":"topic","abstract":[{"type":"text","text":"Use built-in named and compound types."}],"url":"\/documentation\/the-swift-programming-language\/types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Defer-Statement":{"abstract":[],"kind":"section","title":"Defer Statement","url":"\/documentation\/the-swift-programming-language\/statements#Defer-Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Defer-Statement","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Guard-Statement":{"abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Guard-Statement","type":"topic","title":"Guard Statement","url":"\/documentation\/the-swift-programming-language\/statements#Guard-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Regular-Expression-Literals":{"abstract":[],"kind":"section","title":"Regular Expression Literals","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Regular-Expression-Literals","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Regular-Expression-Literals","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"title":"Optional Chaining","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","abstract":[{"type":"text","text":"Access members of an optional value without unwrapping."}],"type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining","kind":"article","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Protocol-Composition-Type":{"abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type","type":"topic","title":"Protocol Composition Type","url":"\/documentation\/the-swift-programming-language\/types#Protocol-Composition-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Conditional-Expression":{"abstract":[],"kind":"section","title":"Conditional Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Conditional-Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Conditional-Expression","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Compiler-Control-Statements":{"abstract":[],"kind":"section","title":"Compiler Control Statements","url":"\/documentation\/the-swift-programming-language\/statements#Compiler-Control-Statements","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compiler-Control-Statements","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Where-Clauses":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses","abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/generics#Generic-Where-Clauses","type":"topic","title":"Generic Where Clauses"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Macros":{"title":"Macros","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros","abstract":[{"type":"text","text":"Use macros to generate code at compile time."}],"type":"topic","url":"\/documentation\/the-swift-programming-language\/macros","kind":"article","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes":{"role":"article","title":"Attributes","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","type":"topic","abstract":[{"type":"text","text":"Add information to declarations and types."}],"url":"\/documentation\/the-swift-programming-language\/attributes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Implicit-Member-Expression":{"title":"Implicit Member Expression","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Member-Expression","type":"topic","kind":"section","url":"\/documentation\/the-swift-programming-language\/expressions#Implicit-Member-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#dynamicCallable":{"abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicCallable","type":"topic","title":"dynamicCallable","url":"\/documentation\/the-swift-programming-language\/attributes#dynamicCallable"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GuidedTour":{"role":"article","title":"Un Recorrido por Swift","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","type":"topic","abstract":[{"type":"text","text":"Explora las características y la sintaxis de Swift."}],"url":"\/documentation\/the-swift-programming-language\/guidedtour"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Stored-Variable-Observers-and-Property-Observers":{"abstract":[],"kind":"section","title":"Stored Variable Observers and Property Observers","url":"\/documentation\/the-swift-programming-language\/declarations#Stored-Variable-Observers-and-Property-Observers","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Stored-Variable-Observers-and-Property-Observers","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Selector-Expression":{"abstract":[],"kind":"section","title":"Selector Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Selector-Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#frozen":{"url":"\/documentation\/the-swift-programming-language\/attributes#frozen","abstract":[],"type":"topic","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen","title":"frozen"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Precedence-Group-Declaration":{"abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Precedence-Group-Declaration","type":"topic","title":"Precedence Group Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Precedence-Group-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Self-Type":{"abstract":[],"kind":"section","title":"Self Type","url":"\/documentation\/the-swift-programming-language\/types#Self-Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Contextual-Where-Clauses":{"abstract":[],"kind":"section","title":"Contextual Where Clauses","url":"\/documentation\/the-swift-programming-language\/generics#Contextual-Where-Clauses","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Contextual-Where-Clauses","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Explicit-Member-Expression":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","title":"Explicit Member Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Explicit-Member-Expression","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Class-Only-Protocols":{"type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Class-Only-Protocols","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols","title":"Class-Only Protocols","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Funciones","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","type":"topic","abstract":[{"type":"text","text":"Define and call functions, label their arguments, and use their return values."}],"url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Any-Type":{"abstract":[],"kind":"section","title":"Any Type","url":"\/documentation\/the-swift-programming-language\/types#Any-Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Any-Type","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#resultBuilder":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#resultBuilder","kind":"section","title":"resultBuilder","url":"\/documentation\/the-swift-programming-language\/attributes#resultBuilder","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"title":"Operadores avanzados","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","abstract":[{"type":"text","text":"Define custom operators, perform bitwise operations, and use builder syntax."}],"type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators","kind":"article","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocol-Composition":{"abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition","type":"topic","title":"Protocol Composition","url":"\/documentation\/the-swift-programming-language\/protocols#Protocol-Composition"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Calling-Methods-Through-Optional-Chaining":{"abstract":[],"kind":"section","title":"Calling Methods Through Optional Chaining","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Calling-Methods-Through-Optional-Chaining","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Calling-Methods-Through-Optional-Chaining","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Conditionally-Conforming-to-a-Protocol":{"abstract":[],"kind":"section","title":"Conditionally Conforming to a Protocol","url":"\/documentation\/the-swift-programming-language\/protocols#Conditionally-Conforming-to-a-Protocol","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Conditionally-Conforming-to-a-Protocol","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Declaration-Attributes":{"abstract":[],"kind":"section","title":"Declaration Attributes","url":"\/documentation\/the-swift-programming-language\/attributes#Declaration-Attributes","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Protocol-Associated-Type-Declaration":{"abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Associated-Type-Declaration","type":"topic","title":"Protocol Associated Type Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Protocol-Associated-Type-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Do-Statement":{"abstract":[],"kind":"section","title":"Do Statement","url":"\/documentation\/the-swift-programming-language\/statements#Do-Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Methods-with-Special-Names":{"url":"\/documentation\/the-swift-programming-language\/declarations#Methods-with-Special-Names","kind":"section","abstract":[],"type":"topic","title":"Methods with Special Names","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Methods-with-Special-Names"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Protocol-Declaration":{"abstract":[],"kind":"section","title":"Protocol Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Protocol-Declaration","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"title":"Cadenas y caracteres","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","abstract":[{"type":"text","text":"Store and manipulate text."}],"type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters","kind":"article","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Identifiers":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers","kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Identifiers","abstract":[],"title":"Identifiers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Wrappers":{"abstract":[],"kind":"section","title":"Property Wrappers","url":"\/documentation\/the-swift-programming-language\/properties#Property-Wrappers","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Wrappers","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"title":"Enumeraciones","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","abstract":[{"type":"text","text":"Model custom types that define a list of possible values."}],"type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations","kind":"article","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Throw-Statement":{"abstract":[],"kind":"section","title":"Throw Statement","url":"\/documentation\/the-swift-programming-language\/statements#Throw-Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Throw-Statement","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Await-Operator":{"abstract":[],"kind":"section","title":"Await Operator","url":"\/documentation\/the-swift-programming-language\/expressions#Await-Operator","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Await-Operator","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Key-Path-Expression":{"abstract":[],"kind":"section","title":"Key-Path Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Key-Path-Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"kind":"article","title":"Generics","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","url":"\/documentation\/the-swift-programming-language\/generics","role":"article","type":"topic","abstract":[{"type":"text","text":"Write code that works for multiple types and specify requirements for those types."}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Literals":{"abstract":[],"kind":"section","title":"Literals","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Literals","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GenericParametersAndArguments":{"title":"Generic Parameters and Arguments","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","abstract":[{"type":"text","text":"Generalize declarations to abstract away concrete types."}],"type":"topic","url":"\/documentation\/the-swift-programming-language\/genericparametersandarguments","kind":"article","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Type-Attributes":{"abstract":[],"kind":"section","title":"Type Attributes","url":"\/documentation\/the-swift-programming-language\/attributes#Type-Attributes","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Type-Attributes","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocol-Extensions":{"abstract":[],"kind":"section","title":"Protocol Extensions","url":"\/documentation\/the-swift-programming-language\/protocols#Protocol-Extensions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"title":"Fundamentos","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","abstract":[{"type":"text","text":"Trabaja con tipos comunes de datos y escribe sintaxis básica."}],"type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics","kind":"article","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Functions-that-Never-Return":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return","title":"Functions that Never Return","url":"\/documentation\/the-swift-programming-language\/declarations#Functions-that-Never-Return","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"title":"Concurrencia","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","abstract":[{"type":"text","text":"Perform asynchronous operations."}],"type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency","kind":"article","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Subscripts":{"abstract":[],"kind":"section","title":"Generic Subscripts","url":"\/documentation\/the-swift-programming-language\/generics#Generic-Subscripts","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Subscripts","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints":{"abstract":[],"kind":"section","title":"Using a Protocol in Its Associated Type’s Constraints","url":"\/documentation\/the-swift-programming-language\/generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","type":"topic"}}}
>>>>>>> 2fa5d86d (yet one more fix attempt)
