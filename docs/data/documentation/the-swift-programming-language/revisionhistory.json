{"metadata":{"title":"Historial de Revisiones"},"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"abstract":[{"text":"Review the recent changes to this book.","type":"text"}],"primaryContentSections":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"2023-09-18"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 5.9.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about "},{"code":"if","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"switch"},{"type":"text","text":" expressions"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Conditional-Expression","type":"reference","isActive":true},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"with information about generating code at compile time."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Expanded the discussion of optionals in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added an example of concurrency to "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about boxed protocol types"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"buildPartialBlock(first:)"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"buildPartialBlock(accumulated:next:)","type":"codeVoice"},{"text":" methods","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Result-Transformations","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Added visionOS to the lists of platforms in","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#available"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Formatted the formal grammar to use blank lines for grouping.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2023-03-30"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.8."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:ControlFlow#Deferred-Actions"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"showing "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" outside of error handling."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Adopted Swift-DocC for publication."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Minor corrections and additions throughout.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2022-09-12","type":"text"}]}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.7."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"text":"doc:Concurrency#Sendable-Types","type":"text"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"with information about sending data between actors and tasks,"},{"text":" ","type":"text"},{"text":"and added information about the ","type":"text"},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":" and "},{"code":"@unchecked","type":"codeVoice"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Sendable","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unchecked","isActive":true,"type":"reference"},{"type":"text","text":" sections."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Regular-Expression-Literals","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with information about creating a regular expression.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the short form of "},{"type":"codeVoice","code":"if"},{"text":"-","type":"text"},{"code":"let","type":"codeVoice"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about ","type":"text"},{"code":"#unavailable","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:ControlFlow#Checking-API-Availability","type":"text"},{"text":" section.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2022-03-14"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.6."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with information about using ","type":"text"},{"code":"#if","type":"codeVoice"},{"text":" ","type":"text"},{"text":"around chained method calls and other postfix expressions.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the visual styling of figures throughout."}]}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2021-09-20","type":"text"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 5.5.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about asynchronous functions, tasks, and actors"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"text":"and to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Actor-Declaration","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods","isActive":true},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Await-Operator","isActive":true,"type":"reference"},{"type":"text","text":" sections."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers","type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"with information about identifiers that start with an underscore."}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"2021-04-26","type":"text"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 5.4.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Result-Builders"},{"type":"text","text":" "},{"type":"text","text":"and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#resultBuilder","isActive":true,"type":"reference"},{"type":"text","text":" sections"},{"text":" ","type":"text"},{"type":"text","text":"with information about result builders."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Conversion-to-a-Pointer-Type"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about how in-out parameters"},{"type":"text","text":" "},{"type":"text","text":"can be implicitly converted to unsafe pointers in a function call."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:Functions#Variadic-Parameters","type":"text"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","isActive":true},{"text":" sections,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that a function can have multiple variadic parameters."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Member-Expression","isActive":true},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that implicit member expressions can be chained together."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2020-09-16"}]}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 5.3.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about multiple trailing closures","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Closures#Trailing-Closures"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and added information about how trailing closures are matched to parameters"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Function-Call-Expression"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about synthesized implementations","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" for enumerations"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Contextual-Where-Clauses","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"now that you can write a generic ","type":"text"},{"type":"codeVoice","code":"where"},{"text":" clause in more places.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:AutomaticReferenceCounting#Unowned-Optional-References"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"with information about using unowned references with optional values.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"code":"@main","type":"codeVoice"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#main","isActive":true,"type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added "},{"type":"codeVoice","code":"#filePath"},{"type":"text","text":" to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","type":"reference","isActive":true},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and updated the discussion of "},{"type":"codeVoice","code":"#file"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:Closures#Escaping-Closures"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"now that closures can refer to ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":" implicitly in more scenarios."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:ErrorHandling#Handling-Errors-Using-Do-Catch"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement"},{"text":" sections,","type":"text"},{"type":"text","text":" "},{"text":"now that a ","type":"text"},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause can match against multiple errors."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added more information about ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"and moved it into the new "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Any-Type"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","isActive":true,"type":"reference"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"now that lazy properties can have observers.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that members of an enumeration can satisfy protocol requirements."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Stored-Variable-Observers-and-Property-Observers","type":"reference"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"to describe when the getter is called before the observer.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety"},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"text":"to mention atomic operations.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2020-03-24"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 5.2.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about passing a key path instead of a closure"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","type":"reference","isActive":true},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Methods-with-Special-Names","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"with information about syntactic sugar the lets instances of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"classes, structures, and enumerations be used with function call syntax."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:Subscripts#Subscript-Options"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that subscripts support parameters with default values."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type","isActive":true},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that the "},{"code":"Self","type":"codeVoice"},{"type":"text","text":" can be used in more contexts."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:TheBasics#Implicitly-Unwrapped-Optionals"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to make it clearer that an implicitly unwrapped optional value"},{"text":" ","type":"text"},{"text":"can be used as either an optional or non-optional value.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2019-09-10"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.1."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about functions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that specify a protocol that their return value conforms to,"},{"type":"text","text":" "},{"type":"text","text":"instead of providing a specific named return type,"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","type":"reference"},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about property wrappers","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Wrappers"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about enumerations and structures","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that are frozen for library evolution"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"text":"doc:Functions#Functions-With-an-Implicit-Return","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"text","text":"doc:Properties#Shorthand-Getter-Declaration"},{"text":" sections","type":"text"},{"type":"text","text":" "},{"text":"with information about functions that omit ","type":"text"},{"type":"codeVoice","code":"return"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Added information about using subscripts on types","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Subscripts#Type-Subscripts"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Patterns#Enumeration-Case-Pattern"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that an enumeration case pattern can match an optional value."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Initialization#Memberwise-Initializers-for-Structure-Types"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that memberwise initializers support"},{"type":"text","text":" "},{"type":"text","text":"omitting parameters for properties that have a default value."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about dynamic members"},{"type":"text","text":" "},{"text":"that are looked up by key path at runtime","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicMemberLookup"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added ","type":"text"},{"type":"codeVoice","code":"macCatalyst"},{"type":"text","text":" to the list of target environments"},{"type":"text","text":" "},{"type":"text","text":"in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type","isActive":true},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"now that ","type":"text"},{"code":"Self","type":"codeVoice"},{"type":"text","text":" can be used to refer to the type"},{"text":" ","type":"text"},{"text":"introduced by the current class, structure, or enumeration declaration.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2019-03-25"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 5.0.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"text":"doc:StringsAndCharacters#Extended-String-Delimiters","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"and updated the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"with information about extended string delimiters."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicCallable"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about dynamically calling instances as functions"},{"type":"text","text":" "},{"type":"text","text":"using the "},{"type":"codeVoice","code":"dynamicCallable"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unknown","type":"reference","isActive":true},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","isActive":true},{"type":"text","text":" sections"},{"type":"text","text":" "},{"text":"with information about handling future enumeration cases","type":"text"},{"type":"text","text":" "},{"text":"in switch statements using","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"code":"unknown","type":"codeVoice"},{"type":"text","text":" switch case attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the identity key path (","type":"text"},{"type":"codeVoice","code":"\\.self"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","type":"reference","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about using the less than ("},{"type":"codeVoice","code":"<"},{"text":") operator","type":"text"},{"text":" ","type":"text"},{"text":"in platform conditions to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true,"type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2018-09-17","type":"text"}]}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 4.2.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about accessing all of an enumeration’s cases"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Enumerations#Iterating-over-Enumeration-Cases"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about "},{"code":"#error","type":"codeVoice"},{"type":"text","text":" and "},{"code":"#warning","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compile-Time-Diagnostic-Statement","isActive":true},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about inlining","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"under the ","type":"text"},{"code":"inlinable","type":"codeVoice"},{"type":"text","text":" and  "},{"type":"codeVoice","code":"usableFromInline"},{"text":" attributes.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about members that are looked up by name at runtime","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"under the ","type":"text"},{"type":"codeVoice","code":"dynamicMemberLookup"},{"text":" attribute.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"requires_stored_property_inits"},{"type":"text","text":" and "},{"code":"warn_unqualified_access","type":"codeVoice"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about how to conditionally compile code","type":"text"},{"text":" ","type":"text"},{"text":"depending on the Swift compiler version being used","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about "},{"type":"codeVoice","code":"#dsohandle"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","isActive":true},{"type":"text","text":" section."}]}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2018-03-29"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 4.1."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about synthesized implementations of equivalence operators"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:AdvancedOperators#Equivalence-Operators","type":"text"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about conditional protocol conformance","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","type":"reference","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","isActive":true},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"type":"text","text":"and to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Conditionally-Conforming-to-a-Protocol"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true},{"text":" chapter.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about recursive protocol constraints"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"canImport()"},{"text":" and ","type":"text"},{"code":"targetEnvironment()","type":"codeVoice"},{"type":"text","text":" platform conditions"},{"type":"text","text":" "},{"text":"to ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2017-12-04"}]}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 4.0.3.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","type":"reference","isActive":true},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"text":"now that key paths support subscript components.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2017-09-19"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 4.0."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about exclusive access to memory"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","isActive":true,"type":"reference"},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types-with-a-Generic-Where-Clause"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that you can use generic "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clauses"},{"type":"text","text":" "},{"type":"text","text":"to constrain associated types."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about multiline string literals"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:StringsAndCharacters#String-Literals","type":"text"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","type":"reference"},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"text":"and to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure","isActive":true},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"type":"codeVoice","code":"objc"},{"text":" attribute","type":"text"},{"type":"text","text":" "},{"text":"in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"now that this attribute is inferred in fewer places.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Subscripts","isActive":true,"type":"reference"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that subscripts can be generic."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","type":"reference","isActive":true},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that protocol composition types can contain a superclass requirement."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the discussion of protocol extensions","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"now that "},{"type":"codeVoice","code":"final"},{"text":" isn’t allowed in them.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about preconditions and fatal errors"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:TheBasics#Assertions-and-Preconditions"},{"type":"text","text":" section."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2017-03-27","type":"text"}]}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 3.1."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about extensions that include requirements."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added examples of iterating over a range"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:ControlFlow#For-In-Loops"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Added an example of failable numeric conversions","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:Initialization#Failable-Initializers","type":"text"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about using the "},{"type":"codeVoice","code":"available"},{"type":"text","text":" attribute with a Swift language version."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to note that argument labels aren’t allowed when writing a function type.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of Swift language version numbers","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that an optional patch number is allowed."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"now that Swift distinguishes between functions that take multiple parameters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and functions that take a single parameter of a tuple type."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Removed the Dynamic Type Expression section"},{"type":"text","text":" "},{"text":"from the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","isActive":true},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"text":"now that ","type":"text"},{"code":"type(of:)","type":"codeVoice"},{"text":" is a Swift standard library function.","type":"text"}]}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2016-10-27"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 3.0.1."}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion of weak and unowned references","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","isActive":true},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about the ","type":"text"},{"code":"unowned","type":"codeVoice"},{"type":"text","text":", "},{"code":"unowned(safe)","type":"codeVoice"},{"type":"text","text":", and "},{"code":"unowned(unsafe)","type":"codeVoice"},{"text":" ","type":"text"},{"text":"declaration modifiers","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","isActive":true},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added a note to the ","type":"text"},{"text":"doc:TypeCasting#Type-Casting-for-Any-and-AnyObject","type":"text"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"about using an optional value when a value of type ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" is expected.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions"},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"text":"to separate the discussion of parenthesized expressions and tuple expressions.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2016-09-13"}]}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 3.0."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the discussion of functions in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","isActive":true,"type":"reference"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","isActive":true},{"type":"text","text":" section to note that"},{"type":"text","text":" "},{"text":"all parameters get an argument label by default.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of operators"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","type":"reference"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"now that you implement them as type methods instead of as global functions."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"code":"open","type":"codeVoice"},{"type":"text","text":" and "},{"code":"fileprivate","type":"codeVoice"},{"text":" access-level modifiers","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl"},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of "},{"type":"codeVoice","code":"inout"},{"type":"text","text":" in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to note that it appears in front of a parameter’s type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"instead of in front of a parameter’s name."}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion of the ","type":"text"},{"code":"@noescape","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"@autoclosure"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"text","text":"doc:Closures#Escaping-Closures"},{"type":"text","text":" and "},{"text":"doc:Closures#Autoclosures","type":"text"},{"text":" sections","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","isActive":true},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"text":"now that they’re type attributes, rather than declaration attributes.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about operator precedence groups"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:AdvancedOperators#Precedence-for-Custom-Infix-Operators","type":"text"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Precedence-Group-Declaration","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","type":"reference","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated discussion throughout"},{"text":" ","type":"text"},{"text":"to use macOS instead of OS X,","type":"text"},{"type":"text","text":" "},{"code":"Error","type":"codeVoice"},{"type":"text","text":" instead of "},{"code":"ErrorProtocol","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"and protocol names such as ","type":"text"},{"type":"codeVoice","code":"ExpressibleByStringLiteral"},{"text":" ","type":"text"},{"type":"text","text":"instead of "},{"type":"codeVoice","code":"StringLiteralConvertible"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics"},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","isActive":true,"type":"reference"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"now that generic "},{"type":"codeVoice","code":"where"},{"text":" clauses are written at the end of a declaration.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"text":"doc:Closures#Escaping-Closures","type":"text"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"now that closures are nonescaping by default.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"text":"doc:TheBasics#Optional-Binding","type":"text"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","isActive":true},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#While-Statement","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","type":"reference","isActive":true},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"now that "},{"type":"codeVoice","code":"if"},{"text":", ","type":"text"},{"type":"codeVoice","code":"while"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"guard"},{"text":" statements","type":"text"},{"type":"text","text":" "},{"type":"text","text":"use a comma-separated list of conditions without "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clauses."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about switch cases that have multiple patterns","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:ControlFlow#Switch"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","type":"reference","isActive":true},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switch-Statement","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of function types"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"now that function argument labels are no longer part of a function’s type.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of protocol composition types","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition","type":"reference","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"and in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","isActive":true},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to use the new "},{"code":"Protocol1 & Protocol2","type":"codeVoice"},{"text":" syntax.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the Dynamic Type Expression section"},{"text":" ","type":"text"},{"type":"text","text":"to use the new "},{"type":"codeVoice","code":"type(of:)"},{"text":" syntax for dynamic type expressions.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of line control statements"},{"text":" ","type":"text"},{"text":"to use the ","type":"text"},{"type":"codeVoice","code":"#sourceLocation(file:line:)"},{"type":"text","text":" syntax"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Line-Control-Statement","isActive":true,"type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"to use the new "},{"type":"codeVoice","code":"Never"},{"text":" type.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about playground literals","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"type":"text","text":"doc:Declarations#In-Out-Parameters"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to note that only nonescaping closures can capture in-out parameters."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion about default parameters"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"text","text":"doc:Functions#Default-Parameter-Values"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"text":"now that they can’t be reordered in function calls.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated attribute arguments to use a colon","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","isActive":true},{"text":" chapter.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about throwing an error"},{"text":" ","type":"text"},{"type":"text","text":"inside the catch block of a rethrowing function"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about accessing the selector","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of an Objective-C property’s getter or setter"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Alias-Declaration","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"about generic type aliases and using type aliases inside of protocols.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of function types in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to note that parentheses around the parameter types are required."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes"},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to note that the "},{"code":"@IBAction","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"@IBOutlet"},{"type":"text","text":", and "},{"type":"codeVoice","code":"@NSManaged"},{"type":"text","text":" attributes"},{"text":" ","type":"text"},{"type":"text","text":"imply the "},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" attribute."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"@GKInspectable"},{"text":" attribute","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of optional protocol requirements"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Optional-Protocol-Requirements","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to clarify that they’re used only in code that interoperates with Objective-C."}]}]},{"content":[{"inlineContent":[{"text":"Removed the discussion of explicitly using ","type":"text"},{"code":"let","type":"codeVoice"},{"type":"text","text":" in function parameters"},{"type":"text","text":" "},{"text":"from the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Removed the discussion of the ","type":"text"},{"code":"Boolean","type":"codeVoice"},{"type":"text","text":" protocol"},{"type":"text","text":" "},{"text":"from the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","isActive":true},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"text":"now that the protocol has been removed from the Swift standard library.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Corrected the discussion of the ","type":"text"},{"type":"codeVoice","code":"@NSApplicationMain"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section."}],"type":"paragraph"}]}]},{"inlineContent":[{"inlineContent":[{"text":"2016-03-21","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 2.2."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about how to conditionally compile code","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"depending on the version of Swift being used"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about how to distinguish"},{"text":" ","type":"text"},{"type":"text","text":"between methods or initializers whose names differ"},{"text":" ","type":"text"},{"type":"text","text":"only by the names of their arguments"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","isActive":true,"type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"#selector"},{"text":" syntax","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for Objective-C selectors"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of associated types","type":"text"},{"type":"text","text":" "},{"text":"to use the ","type":"text"},{"code":"associatedtype","type":"codeVoice"},{"text":" keyword","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Associated-Type-Declaration"},{"text":" sections.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated information about initializers that return ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"type":"text","text":"before the instance is fully initialized"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"text":"doc:Initialization#Failable-Initializers","type":"text"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about comparing tuples","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"text","text":"doc:BasicOperators#Comparison-Operators"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about using keywords as external parameter names","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Keywords-and-Punctuation"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"text":" section to note that","type":"text"},{"text":" ","type":"text"},{"text":"enumerations and enumeration cases can use this attribute.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:LexicalStructure#Operators"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with discussion of custom operators that contain a dot."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"that rethrowing functions can’t directly throw errors.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about property observers being called"},{"type":"text","text":" "},{"text":"when you pass a property as an in-out parameter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a section about error handling"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated figures in the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:AutomaticReferenceCounting#Weak-References"},{"type":"text","text":" "},{"text":"section to show the deallocation process more clearly.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Removed discussion of C-style "},{"code":"for","type":"codeVoice"},{"type":"text","text":" loops,"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"++"},{"type":"text","text":" prefix and postfix operators,"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"code":"--","type":"codeVoice"},{"text":" prefix and postfix operators.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Removed discussion of variable function arguments","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the special syntax for curried functions."}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2015-10-20"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 2.1."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:StringsAndCharacters#String-Interpolation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals"},{"type":"text","text":" sections"},{"type":"text","text":" "},{"text":"now that string interpolations can contain string literals.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"text":"doc:Closures#Escaping-Closures","type":"text"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"with information about the "},{"code":"@noescape","type":"codeVoice"},{"text":" attribute.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"type":"text","text":" sections"},{"text":" ","type":"text"},{"type":"text","text":"with information about tvOS."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the behavior of in-out parameters"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"text":"doc:Declarations#In-Out-Parameters","type":"text"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information to the "},{"type":"text","text":"doc:Expressions#Capture-Lists"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"about how values specified in closure capture lists are captured."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining"},{"type":"text","text":" "},{"text":"section to clarify how assignment through optional chaining","type":"text"},{"type":"text","text":" "},{"type":"text","text":"behaves."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Improved the discussion of autoclosures"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"text":"doc:Closures#Autoclosures","type":"text"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added an example that uses the ","type":"text"},{"type":"codeVoice","code":"??"},{"text":" operator","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","isActive":true},{"type":"text","text":" chapter."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2015-09-16"}]}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 2.0."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about error handling","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","type":"reference"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Throw-Statement","type":"reference","isActive":true},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Defer-Statement"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Try-Operator"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:ErrorHandling#Representing-and-Throwing-Errors","type":"text"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that all types can conform to the "},{"code":"ErrorType","type":"codeVoice"},{"type":"text","text":" protocol."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about the new ","type":"text"},{"code":"try?","type":"codeVoice"},{"type":"text","text":" keyword"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:ErrorHandling#Converting-Errors-to-Optional-Values","type":"text"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about recursive enumerations","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:Enumerations#Recursive-Enumerations"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations"},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","type":"reference"},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about API availability checking"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:ControlFlow#Checking-API-Availability","type":"text"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true,"type":"reference"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Availability-Condition","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the new ","type":"text"},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:ControlFlow#Early-Exit","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Guard-Statement","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","type":"reference","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about protocol extensions"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions","type":"reference","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true,"type":"reference"},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about access control for unit testing"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:AccessControl#Access-Levels-for-Unit-Test-Targets"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","type":"reference"},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the new optional pattern"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:Patterns#Optional-Pattern"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","type":"reference","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:ControlFlow#Repeat-While","type":"text"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"with information about the ","type":"text"},{"code":"repeat","type":"codeVoice"},{"text":"-","type":"text"},{"type":"codeVoice","code":"while"},{"text":" loop.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","type":"reference"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"text":"now that ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" no longer conforms"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"codeVoice","code":"CollectionType"},{"text":" protocol from the Swift standard library.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the new Swift standard library","type":"text"},{"type":"text","text":" "},{"code":"print(_:separator:terminator)","type":"codeVoice"},{"text":" function","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:TheBasics#Printing-Constants-and-Variables","type":"text"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the behavior"},{"type":"text","text":" "},{"text":"of enumeration cases with ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" raw values","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Enumerations#Implicitly-Assigned-Raw-Values"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","type":"reference","isActive":true},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","type":"reference","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","isActive":true,"type":"reference"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"type":"codeVoice","code":"@autoclosure"},{"type":"text","text":" attribute —"},{"type":"text","text":" "},{"type":"text","text":"including its "},{"type":"codeVoice","code":"@autoclosure(escaping)"},{"text":" form —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:Closures#Autoclosures"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with information about the "},{"code":"@available","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"@warn_unused_result","type":"codeVoice"},{"text":" attributes.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Type-Attributes","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with information about the ","type":"text"},{"type":"codeVoice","code":"@convention"},{"text":" attribute.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added an example of using multiple optional bindings","type":"text"},{"text":" ","type":"text"},{"text":"with a ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" clause","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"about how concatenating string literals using the "},{"code":"+","type":"codeVoice"},{"text":" operator","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"happens at compile time."}]}]},{"content":[{"inlineContent":[{"text":"Added information to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"about comparing metatype values and using them"},{"type":"text","text":" "},{"type":"text","text":"to construct instances with initializer expressions."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"text","text":"doc:TheBasics#Debugging-with-Assertions"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"about when user-defined assertions are disabled."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of the ","type":"text"},{"type":"codeVoice","code":"@NSManaged"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference","isActive":true},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"text":"now that the attribute can be applied to certain instance methods.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:Functions#Variadic-Parameters"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that variadic parameters can be declared in any position"},{"text":" ","type":"text"},{"text":"in a function’s parameter list.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Initialization#Overriding-a-Failable-Initializer"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"about how a nonfailable initializer can delegate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"up to a failable initializer"},{"type":"text","text":" "},{"type":"text","text":"by force-unwrapping the result of the superclass’s initializer."}]}]},{"content":[{"inlineContent":[{"text":"Added information about using enumeration cases as functions","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type","isActive":true},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about explicitly referencing an initializer"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Initializer-Expression","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about build configuration","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and line control statements"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compiler-Control-Statements"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"about constructing class instances from metatype values.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the"},{"type":"text","text":" "},{"type":"text","text":"doc:AutomaticReferenceCounting#Weak-References"},{"text":" ","type":"text"},{"text":"section about weak references being unsuitable for caching.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated a note in the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties","type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to mention that stored type properties are lazily initialized."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:Closures#Capturing-Values","type":"text"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to clarify how variables and constants are captured in closures."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to describe when you can apply the "},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" attribute to classes."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added a note to the ","type":"text"},{"type":"text","text":"doc:ErrorHandling#Handling-Errors"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"about the performance of executing a ","type":"text"},{"type":"codeVoice","code":"throw"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"text":"Added similar information about the ","type":"text"},{"code":"do","type":"codeVoice"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"with information about stored and computed type properties"},{"text":" ","type":"text"},{"text":"for classes, structures, and enumerations.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement","type":"reference"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about labeled break statements."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated a note in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to clarify the behavior of "},{"code":"willSet","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"didSet"},{"text":" observers.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added a note to the ","type":"text"},{"type":"text","text":"doc:AccessControl#Access-Levels"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about the scope of "},{"code":"private","type":"codeVoice"},{"type":"text","text":" access."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a note to the"},{"type":"text","text":" "},{"type":"text","text":"doc:AutomaticReferenceCounting#Weak-References"},{"type":"text","text":" "},{"text":"section about the differences in weak references","type":"text"},{"type":"text","text":" "},{"text":"between garbage collected systems and ARC.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the"},{"text":" ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#Special-Characters-in-String-Literals"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with a more precise definition of Unicode scalars.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2015-04-08"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 1.2."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift now has a native ","type":"text"},{"type":"codeVoice","code":"Set"},{"type":"text","text":" collection type."},{"text":" ","type":"text"},{"text":"For more information, see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Sets"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@autoclosure"},{"text":" is now an attribute of the parameter declaration,","type":"text"},{"type":"text","text":" "},{"text":"not its type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"There’s also a new "},{"type":"codeVoice","code":"@noescape"},{"type":"text","text":" parameter declaration attribute."},{"text":" ","type":"text"},{"type":"text","text":"For more information, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Type methods and properties now use the "},{"code":"static","type":"codeVoice"},{"text":" keyword","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as a declaration modifier."},{"type":"text","text":" "},{"type":"text","text":"For more information see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Variable-Properties","type":"reference","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift now includes the ","type":"text"},{"code":"as?","type":"codeVoice"},{"type":"text","text":" and "},{"code":"as!","type":"codeVoice"},{"type":"text","text":" failable downcast operators."},{"type":"text","text":" "},{"text":"For more information,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new guide section about"},{"type":"text","text":" "},{"type":"text","text":"doc:StringsAndCharacters#String-Indices"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Removed the overflow division (","type":"text"},{"type":"codeVoice","code":"&\/"},{"type":"text","text":") and"},{"type":"text","text":" "},{"type":"text","text":"overflow remainder ("},{"type":"codeVoice","code":"&%"},{"text":") operators","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from "},{"text":"doc:AdvancedOperators#Overflow-Operators","type":"text"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the rules for constant and"},{"text":" ","type":"text"},{"type":"text","text":"constant property declaration and initialization."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the definition of Unicode scalars in string literals.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"See "},{"text":"doc:StringsAndCharacters#Special-Characters-in-String-Literals","type":"text"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated "},{"type":"text","text":"doc:BasicOperators#Range-Operators"},{"text":" to note that","type":"text"},{"type":"text","text":" "},{"text":"a half-open range with the same start and end index will be empty.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated ","type":"text"},{"text":"doc:Closures#Closures-Are-Reference-Types","type":"text"},{"type":"text","text":" to clarify"},{"text":" ","type":"text"},{"text":"the capturing rules for variables.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Value-Overflow"},{"text":" to clarify","type":"text"},{"text":" ","type":"text"},{"text":"the overflow behavior of signed and unsigned integers","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration"},{"type":"text","text":" to clarify"},{"text":" ","type":"text"},{"text":"protocol declaration scope and members.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"text":"doc:AutomaticReferenceCounting#Defining-a-Capture-List","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to clarify the syntax for"},{"type":"text","text":" "},{"text":"weak and unowned references in closure capture lists.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"text":"doc:LexicalStructure#Operators","type":"text"},{"text":" to explicitly mention","type":"text"},{"text":" ","type":"text"},{"text":"examples of supported characters for custom operators,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"such as those in the Mathematical Operators, Miscellaneous Symbols,"},{"type":"text","text":" "},{"text":"and Dingbats Unicode blocks.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Constants can now be declared without being initialized","type":"text"},{"type":"text","text":" "},{"text":"in local function scope.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"They must have a set value before first use."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"In an initializer, constant properties can now only assign a value once."},{"text":" ","type":"text"},{"text":"For more information,","type":"text"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"type":"text","text":"doc:Initialization#Assigning-Constant-Properties-During-Initialization"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Multiple optional bindings can now appear in a single "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"type":"text","text":"as a comma-separated list of assignment expressions."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Optional-Chaining-Expression","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"must appear within a postfix expression."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Protocol casts are no longer limited to "},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" protocols."}]}]},{"content":[{"inlineContent":[{"text":"Type casts that can fail at runtime","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now use the "},{"type":"codeVoice","code":"as?"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"as!"},{"type":"text","text":" operator,"},{"text":" ","type":"text"},{"text":"and type casts that are guaranteed not to fail use the ","type":"text"},{"type":"codeVoice","code":"as"},{"type":"text","text":" operator."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Type-Casting-Operators"},{"text":".","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2014-10-16"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 1.1."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a full guide to ","type":"text"},{"text":"doc:Initialization#Failable-Initializers","type":"text"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a description of ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Failable-Initializer-Requirements","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"for protocols."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Constants and variables of type "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" can now contain"},{"type":"text","text":" "},{"type":"text","text":"function instances. Updated the example in "},{"text":"doc:TypeCasting#Type-Casting-for-Any-and-AnyObject","type":"text"},{"type":"text","text":" "},{"text":"to show how to check for and cast to a function type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"within a "},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statement."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Enumerations with raw values"},{"text":" ","type":"text"},{"type":"text","text":"now have a "},{"type":"codeVoice","code":"rawValue"},{"text":" property rather than a ","type":"text"},{"type":"codeVoice","code":"toRaw()"},{"type":"text","text":" method"},{"text":" ","type":"text"},{"type":"text","text":"and a failable initializer with a "},{"code":"rawValue","type":"codeVoice"},{"text":" parameter","type":"text"},{"text":" ","type":"text"},{"text":"rather than a ","type":"text"},{"code":"fromRaw()","type":"codeVoice"},{"type":"text","text":" method."},{"text":" ","type":"text"},{"type":"text","text":"For more information, see "},{"text":"doc:Enumerations#Raw-Values","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new reference section about","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:Declarations#Failable-Initializers"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which can trigger initialization failure."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Custom operators can now contain the "},{"type":"codeVoice","code":"?"},{"type":"text","text":" character."},{"text":" ","type":"text"},{"type":"text","text":"Updated the "},{"type":"text","text":"doc:LexicalStructure#Operators"},{"type":"text","text":" reference to describe"},{"type":"text","text":" "},{"text":"the revised rules.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Removed a duplicate description of the valid set of operator characters"},{"type":"text","text":" "},{"text":"from ","type":"text"},{"text":"doc:AdvancedOperators#Custom-Operators","type":"text"},{"text":".","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2014-08-18"}],"type":"strong"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"New document that describes Swift 1.0,"},{"text":" ","type":"text"},{"type":"text","text":"Apple’s new programming language for building iOS and OS X apps."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Initializer-Requirements"},{"text":" in protocols.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new section about ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"doc:TheBasics#Assertions-and-Preconditions","type":"text"},{"text":" can now use string interpolation.","type":"text"},{"type":"text","text":" "},{"text":"Removed a note to the contrary.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the"},{"type":"text","text":" "},{"text":"doc:StringsAndCharacters#Concatenating-Strings-and-Characters","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to reflect the fact that "},{"type":"codeVoice","code":"String"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values"},{"text":" ","type":"text"},{"text":"can no longer be combined with the addition operator (","type":"text"},{"code":"+","type":"codeVoice"},{"text":")","type":"text"},{"type":"text","text":" "},{"text":"or addition assignment operator (","type":"text"},{"type":"codeVoice","code":"+="},{"type":"text","text":")."},{"text":" ","type":"text"},{"text":"These operators are now used only with ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" values."},{"type":"text","text":" "},{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" type’s "},{"type":"codeVoice","code":"append(_:)"},{"text":" method","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to append a single "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value onto the end of a string."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"availability"},{"type":"text","text":" attribute to"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"doc:TheBasics#Optionals","type":"text"},{"text":" no longer implicitly evaluate to","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" when they have a value and "},{"type":"codeVoice","code":"false"},{"type":"text","text":" when they do not,"},{"text":" ","type":"text"},{"text":"to avoid confusion when working with optional ","type":"text"},{"type":"codeVoice","code":"Bool"},{"text":" values.","type":"text"},{"text":" ","type":"text"},{"text":"Instead, make an explicit check against ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"code":"==","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"!=","type":"codeVoice"},{"type":"text","text":" operators"},{"type":"text","text":" "},{"text":"to find out if an optional contains a value.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift now has a ","type":"text"},{"type":"text","text":"doc:BasicOperators#Nil-Coalescing-Operator"},{"type":"text","text":" "},{"type":"text","text":"("},{"code":"a ?? b","type":"codeVoice"},{"text":"), which unwraps an optional’s value if it exists,","type":"text"},{"text":" ","type":"text"},{"text":"or returns a default value if the optional is ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated and expanded","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"text","text":"doc:StringsAndCharacters#Comparing-Strings"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to reflect and demonstrate that string and character comparison","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and prefix \/ suffix comparison are now based on"},{"text":" ","type":"text"},{"text":"Unicode canonical equivalence of extended grapheme clusters.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"You can now try to set a property’s value, assign to a subscript,","type":"text"},{"text":" ","type":"text"},{"text":"or call a mutating method or operator through","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","isActive":true},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"The information about","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","type":"reference"},{"type":"text","text":" "},{"text":"has been updated accordingly,","type":"text"},{"text":" ","type":"text"},{"text":"and the examples of checking for method call success in","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Calling-Methods-Through-Optional-Chaining"},{"type":"text","text":" "},{"type":"text","text":"have been expanded to show how to check for property setting success."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added a new section about","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Subscripts-of-Optional-Type","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"through optional chaining.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:CollectionTypes#Accessing-and-Modifying-an-Array","type":"text"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"to note that you can no longer append a single item to an array","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with the "},{"code":"+=","type":"codeVoice"},{"text":" operator.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Instead, use the "},{"type":"codeVoice","code":"append(_:)"},{"text":" method,","type":"text"},{"type":"text","text":" "},{"text":"or append a single-item array with the ","type":"text"},{"code":"+=","type":"codeVoice"},{"text":" operator.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note that the start value "},{"type":"codeVoice","code":"a"},{"type":"text","text":" "},{"text":"for the ","type":"text"},{"type":"text","text":"doc:BasicOperators#Range-Operators"},{"type":"text","text":" "},{"type":"codeVoice","code":"a...b"},{"type":"text","text":" and "},{"type":"codeVoice","code":"a..<b"},{"text":" ","type":"text"},{"text":"must not be greater than the end value ","type":"text"},{"type":"codeVoice","code":"b"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Rewrote the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","isActive":true,"type":"reference"},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"type":"text","text":"to remove its introductory coverage of initializer overrides."},{"text":" ","type":"text"},{"type":"text","text":"This chapter now focuses more on the addition of"},{"text":" ","type":"text"},{"type":"text","text":"new functionality in a subclass,"},{"text":" ","type":"text"},{"type":"text","text":"and the modification of existing functionality with overrides."},{"text":" ","type":"text"},{"type":"text","text":"The chapter’s example of"},{"type":"text","text":" "},{"type":"text","text":"doc:Inheritance#Overriding-Property-Getters-and-Setters"},{"type":"text","text":" "},{"text":"has been rewritten to show how to override a ","type":"text"},{"type":"codeVoice","code":"description"},{"text":" property.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(The examples of modifying an inherited property’s default value"},{"type":"text","text":" "},{"text":"in a subclass initializer have been moved to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","type":"reference"},{"text":" chapter.)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the"},{"text":" ","type":"text"},{"type":"text","text":"doc:Initialization#Initializer-Inheritance-and-Overriding"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to note that overrides of a designated initializer","type":"text"},{"type":"text","text":" "},{"text":"must now be marked with the ","type":"text"},{"type":"codeVoice","code":"override"},{"text":" modifier.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:Initialization#Required-Initializers"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to note that the "},{"code":"required","type":"codeVoice"},{"type":"text","text":" modifier is now written before"},{"type":"text","text":" "},{"type":"text","text":"every subclass implementation of a required initializer,"},{"type":"text","text":" "},{"type":"text","text":"and that the requirements for required initializers"},{"text":" ","type":"text"},{"text":"can now be satisfied by automatically inherited initializers.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Infix "},{"text":"doc:AdvancedOperators#Operator-Methods","type":"text"},{"type":"text","text":" no longer require"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"@infix"},{"text":" attribute.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"@prefix"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"@postfix"},{"type":"text","text":" attributes"},{"text":" ","type":"text"},{"type":"text","text":"for "},{"text":"doc:AdvancedOperators#Prefix-and-Postfix-Operators","type":"text"},{"type":"text","text":" "},{"text":"have been replaced by ","type":"text"},{"code":"prefix","type":"codeVoice"},{"type":"text","text":" and "},{"code":"postfix","type":"codeVoice"},{"text":" declaration modifiers.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added a note about the order in which","type":"text"},{"text":" ","type":"text"},{"text":"doc:AdvancedOperators#Prefix-and-Postfix-Operators","type":"text"},{"text":" are applied","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when both a prefix and a postfix operator are applied to"},{"type":"text","text":" "},{"text":"the same operand.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Operator functions for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Compound-Assignment-Operators"},{"text":" no longer use","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"@assignment"},{"type":"text","text":" attribute when defining the function."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"The order in which modifiers are specified when defining"},{"text":" ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Custom-Operators"},{"text":" has changed.","type":"text"},{"type":"text","text":" "},{"text":"You now write ","type":"text"},{"type":"codeVoice","code":"prefix operator"},{"text":" rather than ","type":"text"},{"type":"codeVoice","code":"operator prefix"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"for example."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"code":"dynamic","type":"codeVoice"},{"type":"text","text":" declaration modifier"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about how type inference works"},{"type":"text","text":" "},{"type":"text","text":"with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added more information about curried functions."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a new chapter about "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to reflect the fact that Swift’s "},{"code":"Character","type":"codeVoice"},{"text":" type now represents","type":"text"},{"type":"text","text":" "},{"text":"a single Unicode extended grapheme cluster.","type":"text"},{"type":"text","text":" "},{"text":"Includes a new section on","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#Extended-Grapheme-Clusters"},{"type":"text","text":" "},{"type":"text","text":"and more information about"},{"type":"text","text":" "},{"type":"text","text":"doc:StringsAndCharacters#Unicode-Scalar-Values"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"text":"doc:StringsAndCharacters#Comparing-Strings","type":"text"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:StringsAndCharacters#String-Literals"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to note that Unicode scalars inside string literals"},{"text":" ","type":"text"},{"type":"text","text":"are now written as "},{"type":"codeVoice","code":"\\u{n}"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"where ","type":"text"},{"code":"n","type":"codeVoice"},{"type":"text","text":" is a hexadecimal number between 0 and 10FFFF,"},{"type":"text","text":" "},{"type":"text","text":"the range of Unicode’s codespace."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"NSString","type":"codeVoice"},{"text":" ","type":"text"},{"type":"codeVoice","code":"length"},{"text":" property is now mapped onto","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift’s native "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type as "},{"type":"codeVoice","code":"utf16Count"},{"type":"text","text":", not "},{"type":"codeVoice","code":"utf16count"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Swift’s native ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" type no longer has","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"an "},{"type":"codeVoice","code":"uppercaseString"},{"type":"text","text":" or "},{"code":"lowercaseString","type":"codeVoice"},{"type":"text","text":" property."},{"type":"text","text":" "},{"text":"The corresponding section in","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"has been removed, and various code examples have been updated."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about"},{"type":"text","text":" "},{"type":"text","text":"doc:Initialization#Initializer-Parameters-Without-Argument-Labels"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about"},{"type":"text","text":" "},{"text":"doc:Initialization#Required-Initializers","type":"text"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about "},{"text":"doc:Functions#Optional-Tuple-Return-Types","type":"text"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:TheBasics#Type-Annotations","type":"text"},{"type":"text","text":" section to note that"},{"type":"text","text":" "},{"text":"multiple related variables can be defined on a single line","type":"text"},{"type":"text","text":" "},{"text":"with one type annotation.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"code":"@optional","type":"codeVoice"},{"type":"text","text":", "},{"code":"@lazy","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"@final"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"@required"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"text":"are now the ","type":"text"},{"code":"optional","type":"codeVoice"},{"type":"text","text":", "},{"code":"lazy","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"final"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"required"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the entire book to refer to ","type":"text"},{"type":"codeVoice","code":"..<"},{"text":" as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"text","text":"doc:BasicOperators#Half-Open-Range-Operator"},{"text":" ","type":"text"},{"text":"(rather than the “half-closed range operator”).","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:CollectionTypes#Accessing-and-Modifying-a-Dictionary"},{"type":"text","text":" "},{"text":"section to note that ","type":"text"},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":" now has"},{"type":"text","text":" "},{"text":"a Boolean ","type":"text"},{"code":"isEmpty","type":"codeVoice"},{"type":"text","text":" property."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Clarified the full list of characters that can be used"},{"type":"text","text":" "},{"type":"text","text":"when defining "},{"text":"doc:AdvancedOperators#Custom-Operators","type":"text"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"nil"},{"text":" and the Booleans ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":" are now "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift’s ","type":"text"},{"type":"codeVoice","code":"Array"},{"type":"text","text":" type now has full value semantics."},{"text":" ","type":"text"},{"type":"text","text":"Updated the information about "},{"type":"text","text":"doc:CollectionTypes#Mutability-of-Collections"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"text","text":"doc:CollectionTypes#Arrays"},{"text":" to reflect the new approach.","type":"text"},{"type":"text","text":" "},{"text":"Also clarified the assignment and copy behavior for strings arrays and dictionaries.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"doc:CollectionTypes#Array-Type-Shorthand-Syntax"},{"type":"text","text":" is now written as"},{"type":"text","text":" "},{"type":"codeVoice","code":"[SomeType]"},{"type":"text","text":" rather than "},{"code":"SomeType[]","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new section about ","type":"text"},{"type":"text","text":"doc:CollectionTypes#Dictionary-Type-Shorthand-Syntax"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which is written as "},{"type":"codeVoice","code":"[KeyType: ValueType]"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Added a new section about ","type":"text"},{"type":"text","text":"doc:CollectionTypes#Hash-Values-for-Set-Types"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Examples of "},{"type":"text","text":"doc:Closures#Closure-Expressions"},{"text":" now use","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the global "},{"type":"codeVoice","code":"sorted(_:_:)"},{"text":" function","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"rather than the global "},{"code":"sort(_:_:)","type":"codeVoice"},{"type":"text","text":" function,"},{"type":"text","text":" "},{"text":"to reflect the new array value semantics.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the information about "},{"type":"text","text":"doc:Initialization#Memberwise-Initializers-for-Structure-Types"},{"type":"text","text":" "},{"type":"text","text":"to clarify that the memberwise structure initializer is made available"},{"type":"text","text":" "},{"text":"even if a structure’s stored properties don’t have default values.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated to "},{"code":"..<","type":"codeVoice"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":".."},{"type":"text","text":" "},{"type":"text","text":"for the "},{"text":"doc:BasicOperators#Half-Open-Range-Operator","type":"text"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added an example of ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type"},{"type":"text","text":"."}]}]}],"type":"unorderedList"}],"kind":"content"}],"sections":[],"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/RevisionHistory"},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Regular-Expression-Literals":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Regular-Expression-Literals","abstract":[],"title":"Regular Expression Literals","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Regular-Expression-Literals"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Properties-Through-Optional-Chaining":{"url":"\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Properties-Through-Optional-Chaining","type":"topic","kind":"section","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","title":"Accessing Properties Through Optional Chaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"title":"The Swift Programming Language (5.9)","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","type":"topic","url":"\/documentation\/the-swift-programming-language","abstract":[],"role":"collection"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Associated-Types-with-a-Generic-Where-Clause":{"title":"Associated Types with a Generic Where Clause","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types-with-a-Generic-Where-Clause","abstract":[],"url":"\/documentation\/the-swift-programming-language\/generics#Associated-Types-with-a-Generic-Where-Clause","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"abstract":[{"type":"text","text":"Model custom types that define a list of possible values."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","type":"topic","title":"Enumeraciones","kind":"article","url":"\/documentation\/the-swift-programming-language\/enumerations","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switch-Statement":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Switch-Statement","abstract":[],"title":"Switch Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switch-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Precedence-Group-Declaration":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Precedence-Group-Declaration","abstract":[],"title":"Precedence Group Declaration","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Precedence-Group-Declaration","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","url":"\/documentation\/the-swift-programming-language\/initialization","abstract":[{"type":"text","text":"Set the initial values for a type’s stored properties and perform one-time setup."}],"role":"article","title":"Inicialización","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Initializer-Requirements":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Initializer-Requirements","abstract":[],"title":"Initializer Requirements","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Initializer-Requirements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions":{"url":"\/documentation\/the-swift-programming-language\/expressions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","title":"Expressions","abstract":[{"type":"text","text":"Access, modify, and assign values."}],"kind":"article","role":"article","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#available":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#available","abstract":[],"title":"available","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#available"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Await-Operator":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Await-Operator","abstract":[],"title":"Await Operator","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Await-Operator"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#While-Statement":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#While-Statement","abstract":[],"title":"While Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#While-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements":{"url":"\/documentation\/the-swift-programming-language\/statements","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","title":"Statements","abstract":[{"type":"text","text":"Group expressions and control the flow of execution."}],"kind":"article","role":"article","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Subscripts":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics#Generic-Subscripts","abstract":[],"title":"Generic Subscripts","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GenericParametersAndArguments":{"url":"\/documentation\/the-swift-programming-language\/genericparametersandarguments","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","title":"Generic Parameters and Arguments","abstract":[{"type":"text","text":"Generalize declarations to abstract away concrete types."}],"kind":"article","role":"article","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes":{"url":"\/documentation\/the-swift-programming-language\/attributes","role":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","abstract":[{"text":"Add information to declarations and types.","type":"text"}],"title":"Attributes","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Break-Statement":{"title":"Break Statement","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Break-Statement","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"url":"\/documentation\/the-swift-programming-language\/concurrency","kind":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","abstract":[{"type":"text","text":"Perform asynchronous operations."}],"title":"Concurrencia","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#main":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#main","abstract":[],"title":"main","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#main"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Literal-Expression":{"title":"Literal Expression","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Literal-Expression","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Type-Alias-Declaration":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Alias-Declaration","abstract":[],"title":"Type Alias Declaration","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Type-Alias-Declaration","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types":{"abstract":[{"type":"text","text":"Use built-in named and compound types."}],"role":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","url":"\/documentation\/the-swift-programming-language\/types","kind":"article","title":"Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Macros":{"abstract":[{"type":"text","text":"Use macros to generate code at compile time."}],"role":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros","url":"\/documentation\/the-swift-programming-language\/macros","kind":"article","title":"Macros"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Enumerations-with-Cases-of-Any-Type":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Enumerations-with-Cases-of-Any-Type","abstract":[],"title":"Enumerations with Cases of Any Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Sets":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Sets","abstract":[],"title":"Sets","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Sets"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Asynchronous-Functions-and-Methods":{"url":"\/documentation\/the-swift-programming-language\/declarations#Asynchronous-Functions-and-Methods","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods","abstract":[],"type":"topic","title":"Asynchronous Functions and Methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Key-Path-Expression":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Key-Path-Expression","abstract":[],"title":"Key-Path Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Methods-with-Special-Names":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Methods-with-Special-Names","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Methods-with-Special-Names","kind":"section","abstract":[],"title":"Methods with Special Names"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Do-Statement":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Do-Statement","abstract":[],"title":"Do Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"abstract":[{"type":"text","text":"Manage the visibility of code by declaration, file, and module."}],"role":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","url":"\/documentation\/the-swift-programming-language\/accesscontrol","kind":"article","title":"Control de acceso"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","role":"article","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters","title":"Cadenas y caracteres","abstract":[{"text":"Store and manipulate text.","type":"text"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Failable-Initializer-Requirements":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Failable-Initializer-Requirements","abstract":[],"title":"Failable Initializer Requirements","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Failable-Initializer-Requirements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"title":"Opaque and Boxed Types","abstract":[{"type":"text","text":"Hide implementation details about a value’s type."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","url":"\/documentation\/the-swift-programming-language\/opaquetypes","kind":"article","type":"topic","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Implicit-Member-Expression":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Member-Expression","abstract":[],"title":"Implicit Member Expression","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Implicit-Member-Expression","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Actor-Declaration":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Actor-Declaration","abstract":[],"title":"Actor Declaration","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Actor-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Initializer-Expression":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Initializer-Expression","abstract":[],"title":"Initializer Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Initializer-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Literals":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Literals","abstract":[],"title":"Literals","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Optional-Protocol-Requirements":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Optional-Protocol-Requirements","abstract":[],"title":"Optional Protocol Requirements","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Optional-Protocol-Requirements","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Observers":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","abstract":[],"title":"Property Observers","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties#Property-Observers","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Protocol-Composition-Type":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type","abstract":[],"title":"Protocol Composition Type","type":"topic","url":"\/documentation\/the-swift-programming-language\/types#Protocol-Composition-Type","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"abstract":[{"type":"text","text":"Structure your code to avoid conflicts when accessing memory."}],"type":"topic","kind":"article","title":"Memory Safety","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure":{"url":"\/documentation\/the-swift-programming-language\/lexicalstructure","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure","title":"Lexical Structure","abstract":[{"type":"text","text":"Use the lowest-level components of the syntax."}],"kind":"article","role":"article","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Conditionally-Conforming-to-a-Protocol":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Conditionally-Conforming-to-a-Protocol","abstract":[],"title":"Conditionally Conforming to a Protocol","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Conditionally-Conforming-to-a-Protocol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Calling-Methods-Through-Optional-Chaining":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Calling-Methods-Through-Optional-Chaining","abstract":[],"title":"Calling Methods Through Optional Chaining","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Calling-Methods-Through-Optional-Chaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Metatype-Type":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/types#Metatype-Type","abstract":[],"title":"Metatype Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Identifiers":{"url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Identifiers","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers","title":"Identifiers","type":"topic","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"type":"topic","role":"article","url":"\/documentation\/the-swift-programming-language\/protocols","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","title":"Protocols","abstract":[{"type":"text","text":"Define requirements that conforming types must implement."}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Defer-Statement":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Defer-Statement","abstract":[],"title":"Defer Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Defer-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Class-Only-Protocols":{"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols","url":"\/documentation\/the-swift-programming-language\/protocols#Class-Only-Protocols","title":"Class-Only Protocols","type":"topic","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Function-Type":{"abstract":[],"title":"Function Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","type":"topic","kind":"section","url":"\/documentation\/the-swift-programming-language\/types#Function-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"url":"\/documentation\/the-swift-programming-language\/errorhandling","role":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","abstract":[{"text":"Respond to and recover from errors.","type":"text"}],"title":"Manejo de errores","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Implicit-Conversion-to-a-Pointer-Type":{"kind":"section","type":"topic","title":"Implicit Conversion to a Pointer Type","url":"\/documentation\/the-swift-programming-language\/expressions#Implicit-Conversion-to-a-Pointer-Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Conversion-to-a-Pointer-Type","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extensions-with-a-Generic-Where-Clause":{"title":"Extensions with a Generic Where Clause","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause","abstract":[],"url":"\/documentation\/the-swift-programming-language\/generics#Extensions-with-a-Generic-Where-Clause","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#unknown":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#unknown","abstract":[],"title":"unknown","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unknown"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Try-Operator":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Try-Operator","abstract":[],"title":"Try Operator","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Try-Operator"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Type-Properties":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties","abstract":[],"title":"Type Properties","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties#Type-Properties","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"type":"topic","role":"article","url":"\/documentation\/the-swift-programming-language\/inheritance","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","title":"Herencia","abstract":[{"type":"text","text":"Subclass to add or override functionality."}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Functions-that-Never-Return":{"title":"Functions that Never Return","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return","url":"\/documentation\/the-swift-programming-language\/declarations#Functions-that-Never-Return","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#dynamicMemberLookup":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicMemberLookup","abstract":[],"title":"dynamicMemberLookup","type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#dynamicMemberLookup","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Protocol-Associated-Type-Declaration":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Associated-Type-Declaration","abstract":[],"title":"Protocol Associated Type Declaration","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Protocol-Associated-Type-Declaration","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Subscripts-of-Optional-Type":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Subscripts-of-Optional-Type","abstract":[],"title":"Accessing Subscripts of Optional Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Subscripts-of-Optional-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Rethrowing-Functions-and-Methods":{"url":"\/documentation\/the-swift-programming-language\/declarations#Rethrowing-Functions-and-Methods","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","abstract":[],"type":"topic","title":"Rethrowing Functions and Methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switching-Over-Future-Enumeration-Cases":{"abstract":[],"title":"Switching Over Future Enumeration Cases","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","type":"topic","kind":"section","url":"\/documentation\/the-swift-programming-language\/statements#Switching-Over-Future-Enumeration-Cases"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","url":"\/documentation\/the-swift-programming-language\/advancedoperators","type":"topic","role":"article","title":"Operadores avanzados","abstract":[{"text":"Define custom operators, perform bitwise operations, and use builder syntax.","type":"text"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations":{"url":"\/documentation\/the-swift-programming-language\/declarations","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","title":"Declaraciones","abstract":[{"type":"text","text":"Introduce types, operators, variables, and other names and constructs."}],"kind":"article","role":"article","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Wrappers":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties#Property-Wrappers","abstract":[],"title":"Property Wrappers","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Wrappers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Associated-Types":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types","abstract":[],"title":"Associated Types","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics#Associated-Types","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Selector-Expression":{"kind":"section","url":"\/documentation\/the-swift-programming-language\/expressions#Selector-Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression","type":"topic","abstract":[],"title":"Selector Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"url":"\/documentation\/the-swift-programming-language\/controlflow","abstract":[{"type":"text","text":"Structure code with branches, loops, and early exits."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","title":"Flujo de control","type":"topic","role":"article","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Explicit-Member-Expression":{"kind":"section","title":"Explicit Member Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Explicit-Member-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Self-Type":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/types#Self-Type","abstract":[],"title":"Self Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Declaration-Attributes":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#Declaration-Attributes","abstract":[],"title":"Declaration Attributes","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Stored-Variable-Observers-and-Property-Observers":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Stored-Variable-Observers-and-Property-Observers","abstract":[],"title":"Stored Variable Observers and Property Observers","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Stored-Variable-Observers-and-Property-Observers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"url":"\/documentation\/the-swift-programming-language\/thebasics","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","title":"Fundamentos","abstract":[{"type":"text","text":"Trabaja con tipos comunes de datos y escribe sintaxis básica."}],"kind":"article","role":"article","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#dynamicCallable":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicCallable","abstract":[],"title":"dynamicCallable","type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#dynamicCallable","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Line-Control-Statement":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Line-Control-Statement","abstract":[],"title":"Line Control Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Line-Control-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Optional-Chaining-Expression":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Optional-Chaining-Expression","abstract":[],"title":"Optional-Chaining Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Optional-Chaining-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocol-Extensions":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Protocol-Extensions","abstract":[],"title":"Protocol Extensions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Checking-for-Protocol-Conformance":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance","abstract":[],"type":"topic","title":"Checking for Protocol Conformance","url":"\/documentation\/the-swift-programming-language\/protocols#Checking-for-Protocol-Conformance","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocol-Composition":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition","abstract":[],"title":"Protocol Composition","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Protocol-Composition","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Patterns":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","type":"topic","title":"Patrones","kind":"article","role":"article","abstract":[{"type":"text","text":"Match and destructure values."}],"url":"\/documentation\/the-swift-programming-language\/patterns"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Contextual-Where-Clauses":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics#Contextual-Where-Clauses","abstract":[],"title":"Contextual Where Clauses","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Contextual-Where-Clauses"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Type-Attributes":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#Type-Attributes","abstract":[],"title":"Type Attributes","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Type-Attributes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#frozen":{"kind":"section","title":"frozen","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#frozen"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Conditional-Compilation-Block":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Conditional-Compilation-Block","abstract":[],"title":"Conditional Compilation Block","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Conditional-Expression":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Conditional-Expression","abstract":[],"title":"Conditional Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Conditional-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Compiler-Control-Statements":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Compiler-Control-Statements","abstract":[],"title":"Compiler Control Statements","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compiler-Control-Statements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Compile-Time-Diagnostic-Statement":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Compile-Time-Diagnostic-Statement","abstract":[],"title":"Compile-Time Diagnostic Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compile-Time-Diagnostic-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Availability-Condition":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Availability-Condition","abstract":[],"title":"Availability Condition","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Availability-Condition"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Type-Casting-Operators":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Type-Casting-Operators","abstract":[],"title":"Type-Casting Operators","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Type-Casting-Operators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting","kind":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","abstract":[{"type":"text","text":"Model the lifetime of objects and their relationships."}],"title":"Conteo automático de referencias","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GuidedTour":{"abstract":[{"type":"text","text":"Explora las características y la sintaxis de Swift."}],"role":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","url":"\/documentation\/the-swift-programming-language\/guidedtour","kind":"article","title":"Un Recorrido por Swift"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Keywords-and-Punctuation":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Keywords-and-Punctuation","abstract":[],"title":"Keywords and Punctuation","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Keywords-and-Punctuation"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Where-Clauses":{"title":"Generic Where Clauses","url":"\/documentation\/the-swift-programming-language\/generics#Generic-Where-Clauses","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extending-a-Generic-Type":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics#Extending-a-Generic-Type","abstract":[],"title":"Extending a Generic Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","abstract":[{"type":"text","text":"Write code that works for multiple types and specify requirements for those types."}],"kind":"article","url":"\/documentation\/the-swift-programming-language\/generics","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Sendable":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#Sendable","abstract":[],"title":"Sendable","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Sendable"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Declaration-Modifiers":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Declaration-Modifiers","abstract":[],"title":"Declaration Modifiers","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Throw-Statement":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Throw-Statement","abstract":[],"title":"Throw Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Throw-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#resultBuilder":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#resultBuilder","url":"\/documentation\/the-swift-programming-language\/attributes#resultBuilder","title":"resultBuilder","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Extension-Declaration":{"url":"\/documentation\/the-swift-programming-language\/declarations#Extension-Declaration","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","abstract":[],"type":"topic","title":"Extension Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Type-Variable-Properties":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Type-Variable-Properties","abstract":[],"title":"Type Variable Properties","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Variable-Properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Result-Transformations":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#Result-Transformations","abstract":[],"title":"Result Transformations","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Result-Transformations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#String-Literals":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#String-Literals","abstract":[],"title":"String Literals","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Function-Call-Expression":{"kind":"section","type":"topic","title":"Function Call Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Function-Call-Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Function-Call-Expression","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Function-Declaration":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Function-Declaration","kind":"section","abstract":[],"title":"Function Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","abstract":[],"title":"Using a Protocol in Its Associated Type’s Constraints","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","abstract":[{"type":"text","text":"Access members of an optional value without unwrapping."}],"url":"\/documentation\/the-swift-programming-language\/optionalchaining","title":"Optional Chaining","role":"article","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Protocol-Declaration":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Protocol-Declaration","abstract":[],"title":"Protocol Declaration","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Constant-Declaration":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Constant-Declaration","abstract":[],"title":"Constant Declaration","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Guard-Statement":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Guard-Statement","abstract":[],"title":"Guard Statement","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Guard-Statement","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Any-Type":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/types#Any-Type","abstract":[],"title":"Any Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Any-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Funciones","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","type":"topic","abstract":[{"type":"text","text":"Define and call functions, label their arguments, and use their return values."}],"url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","abstract":[],"title":"Enumerations with Cases of a Raw-Value Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#unchecked":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#unchecked","abstract":[],"title":"unchecked","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unchecked"}}}