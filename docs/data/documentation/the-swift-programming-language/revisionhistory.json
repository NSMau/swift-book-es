{"metadata":{"title":"Historial de Revisiones"},"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"Review the recent changes to this book."}],"primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2023-09-18"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.9."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about "},{"type":"codeVoice","code":"if"},{"type":"text","text":" and "},{"type":"codeVoice","code":"switch"},{"text":" expressions","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true,"type":"reference"},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Conditional-Expression","type":"reference","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros"},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"text":"with information about generating code at compile time.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Expanded the discussion of optionals in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added an example of concurrency to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about boxed protocol types"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","isActive":true},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"code":"buildPartialBlock(first:)","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"buildPartialBlock(accumulated:next:)","type":"codeVoice"},{"text":" methods","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Result-Transformations","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added visionOS to the lists of platforms in","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#available"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Formatted the formal grammar to use blank lines for grouping."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2023-03-30","type":"text"}]}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.8."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:ControlFlow#Deferred-Actions"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"text":"showing ","type":"text"},{"type":"codeVoice","code":"defer"},{"text":" outside of error handling.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Adopted Swift-DocC for publication."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Minor corrections and additions throughout.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2022-09-12"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.7."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"type":"text","text":"doc:Concurrency#Sendable-Types"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with information about sending data between actors and tasks,"},{"type":"text","text":" "},{"text":"and added information about the ","type":"text"},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@unchecked"},{"text":" attributes","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Sendable"},{"type":"text","text":" and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unchecked","isActive":true,"type":"reference"},{"text":" sections.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Regular-Expression-Literals","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"with information about creating a regular expression.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about the short form of ","type":"text"},{"type":"codeVoice","code":"if"},{"text":"-","type":"text"},{"type":"codeVoice","code":"let"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about ","type":"text"},{"type":"codeVoice","code":"#unavailable"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:ControlFlow#Checking-API-Availability"},{"type":"text","text":" section."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2022-03-14","type":"text"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 5.6."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with information about using ","type":"text"},{"type":"codeVoice","code":"#if"},{"text":" ","type":"text"},{"text":"around chained method calls and other postfix expressions.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the visual styling of figures throughout.","type":"text"}]}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2021-09-20"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.5."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about asynchronous functions, tasks, and actors"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","isActive":true,"type":"reference"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"and to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Actor-Declaration","isActive":true},{"text":",","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Await-Operator"},{"text":" sections.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with information about identifiers that start with an underscore."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2021-04-26"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.4."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:AdvancedOperators#Result-Builders"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#resultBuilder","type":"reference"},{"type":"text","text":" sections"},{"type":"text","text":" "},{"text":"with information about result builders.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Conversion-to-a-Pointer-Type"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about how in-out parameters"},{"type":"text","text":" "},{"type":"text","text":"can be implicitly converted to unsafe pointers in a function call."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:Functions#Variadic-Parameters"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","isActive":true},{"text":" sections,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that a function can have multiple variadic parameters."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Member-Expression"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"text":"now that implicit member expressions can be chained together.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2020-09-16"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.3."}]}]},{"content":[{"inlineContent":[{"text":"Added information about multiple trailing closures","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:Closures#Trailing-Closures","type":"text"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"and added information about how trailing closures are matched to parameters"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Function-Call-Expression","type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about synthesized implementations"},{"type":"text","text":" "},{"type":"text","text":"of "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" for enumerations"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:Protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Contextual-Where-Clauses","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that you can write a generic "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause in more places."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"text":"doc:AutomaticReferenceCounting#Unowned-Optional-References","type":"text"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"with information about using unowned references with optional values.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"code":"@main","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#main","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added ","type":"text"},{"type":"codeVoice","code":"#filePath"},{"type":"text","text":" to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"and updated the discussion of ","type":"text"},{"code":"#file","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Closures#Escaping-Closures"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that closures can refer to "},{"type":"codeVoice","code":"self"},{"text":" implicitly in more scenarios.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:ErrorHandling#Handling-Errors-Using-Do-Catch"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement"},{"text":" sections,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that a "},{"code":"catch","type":"codeVoice"},{"type":"text","text":" clause can match against multiple errors."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added more information about "},{"type":"codeVoice","code":"Any"},{"text":" ","type":"text"},{"type":"text","text":"and moved it into the new "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Any-Type","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","isActive":true,"type":"reference"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that lazy properties can have observers."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that members of an enumeration can satisfy protocol requirements."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Stored-Variable-Observers-and-Property-Observers","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to describe when the getter is called before the observer."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","type":"reference","isActive":true},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"to mention atomic operations."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2020-03-24"}]}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 5.2.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about passing a key path instead of a closure"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","isActive":true,"type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Methods-with-Special-Names"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with information about syntactic sugar the lets instances of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"classes, structures, and enumerations be used with function call syntax."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:Subscripts#Subscript-Options","type":"text"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that subscripts support parameters with default values."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type","isActive":true},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"text":"now that the ","type":"text"},{"code":"Self","type":"codeVoice"},{"text":" can be used in more contexts.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:TheBasics#Implicitly-Unwrapped-Optionals","type":"text"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to make it clearer that an implicitly unwrapped optional value"},{"type":"text","text":" "},{"type":"text","text":"can be used as either an optional or non-optional value."}]}]}]},{"inlineContent":[{"inlineContent":[{"text":"2019-09-10","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 5.1."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about functions"},{"type":"text","text":" "},{"type":"text","text":"that specify a protocol that their return value conforms to,"},{"text":" ","type":"text"},{"text":"instead of providing a specific named return type,","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes"},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"text":"Added information about property wrappers","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Wrappers"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about enumerations and structures"},{"type":"text","text":" "},{"text":"that are frozen for library evolution","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:Functions#Functions-With-an-Implicit-Return"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"text":"doc:Properties#Shorthand-Getter-Declaration","type":"text"},{"type":"text","text":" sections"},{"text":" ","type":"text"},{"type":"text","text":"with information about functions that omit "},{"code":"return","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about using subscripts on types"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:Subscripts#Type-Subscripts","type":"text"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Patterns#Enumeration-Case-Pattern"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that an enumeration case pattern can match an optional value."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:Initialization#Memberwise-Initializers-for-Structure-Types","type":"text"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that memberwise initializers support"},{"type":"text","text":" "},{"type":"text","text":"omitting parameters for properties that have a default value."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about dynamic members","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that are looked up by key path at runtime"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicMemberLookup"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added ","type":"text"},{"type":"codeVoice","code":"macCatalyst"},{"type":"text","text":" to the list of target environments"},{"type":"text","text":" "},{"type":"text","text":"in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type","isActive":true},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"now that ","type":"text"},{"type":"codeVoice","code":"Self"},{"type":"text","text":" can be used to refer to the type"},{"type":"text","text":" "},{"type":"text","text":"introduced by the current class, structure, or enumeration declaration."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"2019-03-25","type":"text"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.0."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:StringsAndCharacters#Extended-String-Delimiters"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with information about extended string delimiters."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicCallable","type":"reference","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"with information about dynamically calling instances as functions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"using the "},{"code":"dynamicCallable","type":"codeVoice"},{"type":"text","text":" attribute."}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unknown"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","isActive":true,"type":"reference"},{"text":" sections","type":"text"},{"text":" ","type":"text"},{"text":"with information about handling future enumeration cases","type":"text"},{"text":" ","type":"text"},{"text":"in switch statements using","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"unknown"},{"type":"text","text":" switch case attribute."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the identity key path ("},{"code":"\\.self","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","isActive":true,"type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about using the less than (","type":"text"},{"code":"<","type":"codeVoice"},{"text":") operator","type":"text"},{"text":" ","type":"text"},{"text":"in platform conditions to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2018-09-17"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 4.2.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about accessing all of an enumeration’s cases"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:Enumerations#Iterating-over-Enumeration-Cases","type":"text"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Added information about ","type":"text"},{"type":"codeVoice","code":"#error"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"#warning"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compile-Time-Diagnostic-Statement"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about inlining","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"under the "},{"type":"codeVoice","code":"inlinable"},{"type":"text","text":" and  "},{"type":"codeVoice","code":"usableFromInline"},{"text":" attributes.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about members that are looked up by name at runtime","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"under the "},{"type":"codeVoice","code":"dynamicMemberLookup"},{"text":" attribute.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"requires_stored_property_inits"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"warn_unqualified_access"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about how to conditionally compile code"},{"type":"text","text":" "},{"type":"text","text":"depending on the Swift compiler version being used"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true,"type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about "},{"code":"#dsohandle","type":"codeVoice"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2018-03-29","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 4.1."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about synthesized implementations of equivalence operators"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:AdvancedOperators#Equivalence-Operators"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about conditional protocol conformance","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations"},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"text":"and to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Conditionally-Conforming-to-a-Protocol"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","type":"reference"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about recursive protocol constraints","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"canImport()","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"targetEnvironment()"},{"text":" platform conditions","type":"text"},{"text":" ","type":"text"},{"text":"to ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"reference"},{"type":"text","text":"."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2017-12-04"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 4.0.3.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that key paths support subscript components."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2017-09-19","type":"text"}]}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 4.0."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about exclusive access to memory"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety"},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types-with-a-Generic-Where-Clause","type":"reference","isActive":true},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"now that you can use generic ","type":"text"},{"type":"codeVoice","code":"where"},{"text":" clauses","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to constrain associated types."}]}]},{"content":[{"inlineContent":[{"text":"Added information about multiline string literals","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:StringsAndCharacters#String-Literals","type":"text"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","isActive":true},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"text":"and to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure","isActive":true,"type":"reference"},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"now that this attribute is inferred in fewer places.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Subscripts"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that subscripts can be generic."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"and in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"text":"now that protocol composition types can contain a superclass requirement.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion of protocol extensions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","type":"reference"},{"text":" ","type":"text"},{"text":"now that ","type":"text"},{"code":"final","type":"codeVoice"},{"text":" isn’t allowed in them.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about preconditions and fatal errors","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"text":"doc:TheBasics#Assertions-and-Preconditions","type":"text"},{"type":"text","text":" section."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"2017-03-27","type":"text"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 3.1."}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"with information about extensions that include requirements.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added examples of iterating over a range"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"text":"doc:ControlFlow#For-In-Loops","type":"text"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added an example of failable numeric conversions","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Initialization#Failable-Initializers"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"about using the ","type":"text"},{"code":"available","type":"codeVoice"},{"text":" attribute with a Swift language version.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to note that argument labels aren’t allowed when writing a function type."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of Swift language version numbers","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"text":"now that an optional patch number is allowed.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","isActive":true},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"text":"now that Swift distinguishes between functions that take multiple parameters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and functions that take a single parameter of a tuple type."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Removed the Dynamic Type Expression section","type":"text"},{"text":" ","type":"text"},{"text":"from the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","isActive":true,"type":"reference"},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that "},{"code":"type(of:)","type":"codeVoice"},{"text":" is a Swift standard library function.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"2016-10-27","type":"text"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 3.0.1.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of weak and unowned references"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","type":"reference","isActive":true},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"code":"unowned","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"unowned(safe)"},{"text":", and ","type":"text"},{"code":"unowned(unsafe)","type":"codeVoice"},{"type":"text","text":" "},{"text":"declaration modifiers","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","isActive":true,"type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added a note to the ","type":"text"},{"type":"text","text":"doc:TypeCasting#Type-Casting-for-Any-and-AnyObject"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"about using an optional value when a value of type ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" is expected.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","isActive":true},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"text":"to separate the discussion of parenthesized expressions and tuple expressions.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2016-09-13"}]}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 3.0."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of functions in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","isActive":true},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","type":"reference"},{"type":"text","text":" section to note that"},{"text":" ","type":"text"},{"type":"text","text":"all parameters get an argument label by default."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of operators","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","isActive":true},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that you implement them as type methods instead of as global functions."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"code":"open","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"fileprivate"},{"text":" access-level modifiers","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of "},{"code":"inout","type":"codeVoice"},{"text":" in the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to note that it appears in front of a parameter’s type","type":"text"},{"text":" ","type":"text"},{"text":"instead of in front of a parameter’s name.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"code":"@noescape","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@autoclosure"},{"text":" attributes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"text":"doc:Closures#Escaping-Closures","type":"text"},{"text":" and ","type":"text"},{"type":"text","text":"doc:Closures#Autoclosures"},{"type":"text","text":" sections"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"now that they’re type attributes, rather than declaration attributes.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about operator precedence groups"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:AdvancedOperators#Precedence-for-Custom-Infix-Operators"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Precedence-Group-Declaration","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","isActive":true},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated discussion throughout"},{"text":" ","type":"text"},{"type":"text","text":"to use macOS instead of OS X,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Error"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"ErrorProtocol"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and protocol names such as ","type":"text"},{"code":"ExpressibleByStringLiteral","type":"codeVoice"},{"type":"text","text":" "},{"text":"instead of ","type":"text"},{"code":"StringLiteralConvertible","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","type":"reference","isActive":true},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"text":"and in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","isActive":true},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that generic "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clauses are written at the end of a declaration."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion in the ","type":"text"},{"text":"doc:Closures#Escaping-Closures","type":"text"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that closures are nonescaping by default."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics"},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#While-Statement","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","type":"reference"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"text":"now that ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"while"},{"type":"text","text":", and "},{"code":"guard","type":"codeVoice"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"use a comma-separated list of conditions without "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clauses."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about switch cases that have multiple patterns","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:ControlFlow#Switch","type":"text"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true,"type":"reference"},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switch-Statement","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},{"text":" chapter.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of function types"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","type":"reference"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"now that function argument labels are no longer part of a function’s type.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of protocol composition types"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"type":"text","text":"and in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","type":"reference"},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"type":"text","text":"to use the new "},{"type":"codeVoice","code":"Protocol1 & Protocol2"},{"text":" syntax.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion in the Dynamic Type Expression section"},{"type":"text","text":" "},{"type":"text","text":"to use the new "},{"code":"type(of:)","type":"codeVoice"},{"type":"text","text":" syntax for dynamic type expressions."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of line control statements","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to use the "},{"type":"codeVoice","code":"#sourceLocation(file:line:)"},{"type":"text","text":" syntax"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Line-Control-Statement","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return"},{"text":" ","type":"text"},{"type":"text","text":"to use the new "},{"code":"Never","type":"codeVoice"},{"text":" type.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about playground literals","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"type":"text","text":"doc:Declarations#In-Out-Parameters"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to note that only nonescaping closures can capture in-out parameters."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion about default parameters","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"text":"doc:Functions#Default-Parameter-Values","type":"text"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"now that they can’t be reordered in function calls.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated attribute arguments to use a colon","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","isActive":true,"type":"reference"},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about throwing an error"},{"text":" ","type":"text"},{"text":"inside the catch block of a rethrowing function","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","isActive":true,"type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about accessing the selector"},{"text":" ","type":"text"},{"type":"text","text":"of an Objective-C property’s getter or setter"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression","type":"reference","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Alias-Declaration"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"about generic type aliases and using type aliases inside of protocols."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of function types in the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to note that parentheses around the parameter types are required."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","isActive":true},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to note that the "},{"type":"codeVoice","code":"@IBAction"},{"text":", ","type":"text"},{"type":"codeVoice","code":"@IBOutlet"},{"text":", and ","type":"text"},{"code":"@NSManaged","type":"codeVoice"},{"text":" attributes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"imply the "},{"code":"@objc","type":"codeVoice"},{"text":" attribute.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"code":"@GKInspectable","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of optional protocol requirements","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Optional-Protocol-Requirements"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to clarify that they’re used only in code that interoperates with Objective-C."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Removed the discussion of explicitly using ","type":"text"},{"type":"codeVoice","code":"let"},{"text":" in function parameters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Removed the discussion of the "},{"type":"codeVoice","code":"Boolean"},{"type":"text","text":" protocol"},{"type":"text","text":" "},{"type":"text","text":"from the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","isActive":true},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"text":"now that the protocol has been removed from the Swift standard library.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Corrected the discussion of the ","type":"text"},{"code":"@NSApplicationMain","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"text":" section.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"2016-03-21","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 2.2.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about how to conditionally compile code"},{"type":"text","text":" "},{"text":"depending on the version of Swift being used","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about how to distinguish","type":"text"},{"type":"text","text":" "},{"type":"text","text":"between methods or initializers whose names differ"},{"text":" ","type":"text"},{"type":"text","text":"only by the names of their arguments"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","type":"reference","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"type":"codeVoice","code":"#selector"},{"type":"text","text":" syntax"},{"text":" ","type":"text"},{"type":"text","text":"for Objective-C selectors"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of associated types"},{"text":" ","type":"text"},{"text":"to use the ","type":"text"},{"type":"codeVoice","code":"associatedtype"},{"type":"text","text":" keyword"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Associated-Type-Declaration","type":"reference","isActive":true},{"text":" sections.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated information about initializers that return "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"before the instance is fully initialized"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"text":"doc:Initialization#Failable-Initializers","type":"text"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about comparing tuples"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:BasicOperators#Comparison-Operators","type":"text"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about using keywords as external parameter names"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Keywords-and-Punctuation","type":"reference","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of the ","type":"text"},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference","isActive":true},{"type":"text","text":" section to note that"},{"type":"text","text":" "},{"type":"text","text":"enumerations and enumeration cases can use this attribute."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:LexicalStructure#Operators"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with discussion of custom operators that contain a dot."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"that rethrowing functions can’t directly throw errors."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a note to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","type":"reference","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"about property observers being called","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when you pass a property as an in-out parameter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a section about error handling"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","isActive":true,"type":"reference"},{"text":" chapter.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated figures in the"},{"text":" ","type":"text"},{"text":"doc:AutomaticReferenceCounting#Weak-References","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"section to show the deallocation process more clearly."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Removed discussion of C-style "},{"type":"codeVoice","code":"for"},{"text":" loops,","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"++","type":"codeVoice"},{"type":"text","text":" prefix and postfix operators,"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"codeVoice","code":"--"},{"type":"text","text":" prefix and postfix operators."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Removed discussion of variable function arguments","type":"text"},{"text":" ","type":"text"},{"text":"and the special syntax for curried functions.","type":"text"}]}]}]},{"inlineContent":[{"inlineContent":[{"text":"2015-10-20","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 2.1.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:StringsAndCharacters#String-Interpolation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","type":"reference","isActive":true},{"type":"text","text":" sections"},{"type":"text","text":" "},{"type":"text","text":"now that string interpolations can contain string literals."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"text":"doc:Closures#Escaping-Closures","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about the "},{"type":"codeVoice","code":"@noescape"},{"type":"text","text":" attribute."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" "},{"type":"text","text":"and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true,"type":"reference"},{"type":"text","text":" sections"},{"type":"text","text":" "},{"type":"text","text":"with information about tvOS."}]}]},{"content":[{"inlineContent":[{"text":"Added information about the behavior of in-out parameters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:Declarations#In-Out-Parameters","type":"text"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information to the ","type":"text"},{"type":"text","text":"doc:Expressions#Capture-Lists"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"about how values specified in closure capture lists are captured.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"section to clarify how assignment through optional chaining"},{"text":" ","type":"text"},{"type":"text","text":"behaves."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Improved the discussion of autoclosures","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"text","text":"doc:Closures#Autoclosures"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added an example that uses the ","type":"text"},{"type":"codeVoice","code":"??"},{"text":" operator","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","type":"reference"},{"type":"text","text":" chapter."}],"type":"paragraph"}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2015-09-16"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 2.0.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about error handling","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","type":"reference","isActive":true},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","isActive":true,"type":"reference"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Throw-Statement"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Defer-Statement","type":"reference","isActive":true},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Try-Operator","type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:ErrorHandling#Representing-and-Throwing-Errors","type":"text"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that all types can conform to the "},{"type":"codeVoice","code":"ErrorType"},{"type":"text","text":" protocol."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the new "},{"type":"codeVoice","code":"try?"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:ErrorHandling#Converting-Errors-to-Optional-Values"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about recursive enumerations"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"text":"doc:Enumerations#Recursive-Enumerations","type":"text"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","isActive":true,"type":"reference"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","isActive":true,"type":"reference"},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about API availability checking"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:ControlFlow#Checking-API-Availability","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Availability-Condition","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the new ","type":"text"},{"code":"guard","type":"codeVoice"},{"text":" statement","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:ControlFlow#Early-Exit","type":"text"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Guard-Statement","type":"reference"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about protocol extensions"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},{"text":" chapter.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about access control for unit testing","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:AccessControl#Access-Levels-for-Unit-Test-Targets"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","isActive":true},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the new optional pattern","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:Patterns#Optional-Pattern","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:ControlFlow#Repeat-While","type":"text"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"with information about the ","type":"text"},{"type":"codeVoice","code":"repeat"},{"text":"-","type":"text"},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","type":"reference","isActive":true},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that "},{"type":"codeVoice","code":"String"},{"type":"text","text":" no longer conforms"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"codeVoice","code":"CollectionType"},{"type":"text","text":" protocol from the Swift standard library."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the new Swift standard library"},{"text":" ","type":"text"},{"code":"print(_:separator:terminator)","type":"codeVoice"},{"text":" function","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:TheBasics#Printing-Constants-and-Variables"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the behavior","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of enumeration cases with "},{"code":"String","type":"codeVoice"},{"type":"text","text":" raw values"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Enumerations#Implicitly-Assigned-Raw-Values"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations"},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations"},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"code":"@autoclosure","type":"codeVoice"},{"text":" attribute —","type":"text"},{"type":"text","text":" "},{"text":"including its ","type":"text"},{"code":"@autoclosure(escaping)","type":"codeVoice"},{"text":" form —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:Closures#Autoclosures"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with information about the ","type":"text"},{"type":"codeVoice","code":"@available"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"type":"codeVoice","code":"@warn_unused_result"},{"type":"text","text":" attributes."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Type-Attributes","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about the "},{"type":"codeVoice","code":"@convention"},{"text":" attribute.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added an example of using multiple optional bindings","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with a "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:TheBasics#Optional-Binding","type":"text"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","type":"reference"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"about how concatenating string literals using the ","type":"text"},{"type":"codeVoice","code":"+"},{"text":" operator","type":"text"},{"type":"text","text":" "},{"type":"text","text":"happens at compile time."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"about comparing metatype values and using them"},{"text":" ","type":"text"},{"text":"to construct instances with initializer expressions.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the ","type":"text"},{"text":"doc:TheBasics#Debugging-with-Assertions","type":"text"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"about when user-defined assertions are disabled."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of the ","type":"text"},{"code":"@NSManaged","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference","isActive":true},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that the attribute can be applied to certain instance methods."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:Functions#Variadic-Parameters","type":"text"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"now that variadic parameters can be declared in any position","type":"text"},{"text":" ","type":"text"},{"text":"in a function’s parameter list.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:Initialization#Overriding-a-Failable-Initializer","type":"text"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"about how a nonfailable initializer can delegate"},{"text":" ","type":"text"},{"type":"text","text":"up to a failable initializer"},{"type":"text","text":" "},{"text":"by force-unwrapping the result of the superclass’s initializer.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about using enumeration cases as functions"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about explicitly referencing an initializer"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Initializer-Expression","isActive":true,"type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about build configuration","type":"text"},{"type":"text","text":" "},{"text":"and line control statements","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compiler-Control-Statements","isActive":true,"type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Added a note to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"about constructing class instances from metatype values."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the","type":"text"},{"type":"text","text":" "},{"text":"doc:AutomaticReferenceCounting#Weak-References","type":"text"},{"type":"text","text":" "},{"type":"text","text":"section about weak references being unsuitable for caching."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated a note in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"to mention that stored type properties are lazily initialized.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Closures#Capturing-Values"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to clarify how variables and constants are captured in closures.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to describe when you can apply the ","type":"text"},{"code":"@objc","type":"codeVoice"},{"text":" attribute to classes.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"text","text":"doc:ErrorHandling#Handling-Errors"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"about the performance of executing a "},{"code":"throw","type":"codeVoice"},{"text":" statement.","type":"text"},{"type":"text","text":" "},{"text":"Added similar information about the ","type":"text"},{"code":"do","type":"codeVoice"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about stored and computed type properties"},{"type":"text","text":" "},{"text":"for classes, structures, and enumerations.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about labeled break statements."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated a note in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"to clarify the behavior of ","type":"text"},{"code":"willSet","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"didSet","type":"codeVoice"},{"type":"text","text":" observers."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"text","text":"doc:AccessControl#Access-Levels"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with information about the scope of "},{"type":"codeVoice","code":"private"},{"text":" access.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the","type":"text"},{"text":" ","type":"text"},{"text":"doc:AutomaticReferenceCounting#Weak-References","type":"text"},{"text":" ","type":"text"},{"text":"section about the differences in weak references","type":"text"},{"type":"text","text":" "},{"text":"between garbage collected systems and ARC.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the"},{"type":"text","text":" "},{"type":"text","text":"doc:StringsAndCharacters#Special-Characters-in-String-Literals"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with a more precise definition of Unicode scalars.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2015-04-08"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 1.2."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift now has a native ","type":"text"},{"code":"Set","type":"codeVoice"},{"type":"text","text":" collection type."},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Sets","type":"reference","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"@autoclosure"},{"text":" is now an attribute of the parameter declaration,","type":"text"},{"type":"text","text":" "},{"text":"not its type.","type":"text"},{"text":" ","type":"text"},{"text":"There’s also a new ","type":"text"},{"type":"codeVoice","code":"@noescape"},{"type":"text","text":" parameter declaration attribute."},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Type methods and properties now use the ","type":"text"},{"type":"codeVoice","code":"static"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"as a declaration modifier."},{"type":"text","text":" "},{"type":"text","text":"For more information see "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Variable-Properties","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Swift now includes the "},{"code":"as?","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"as!"},{"text":" failable downcast operators.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For more information,"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a new guide section about"},{"text":" ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#String-Indices"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Removed the overflow division (","type":"text"},{"code":"&\/","type":"codeVoice"},{"text":") and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"overflow remainder ("},{"code":"&%","type":"codeVoice"},{"type":"text","text":") operators"},{"type":"text","text":" "},{"text":"from ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Overflow-Operators"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the rules for constant and"},{"type":"text","text":" "},{"text":"constant property declaration and initialization.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the definition of Unicode scalars in string literals."},{"text":" ","type":"text"},{"text":"See ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#Special-Characters-in-String-Literals"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"type":"text","text":"doc:BasicOperators#Range-Operators"},{"type":"text","text":" to note that"},{"type":"text","text":" "},{"type":"text","text":"a half-open range with the same start and end index will be empty."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"type":"text","text":"doc:Closures#Closures-Are-Reference-Types"},{"type":"text","text":" to clarify"},{"text":" ","type":"text"},{"type":"text","text":"the capturing rules for variables."}]}]},{"content":[{"inlineContent":[{"text":"Updated ","type":"text"},{"text":"doc:AdvancedOperators#Value-Overflow","type":"text"},{"type":"text","text":" to clarify"},{"type":"text","text":" "},{"text":"the overflow behavior of signed and unsigned integers","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration"},{"type":"text","text":" to clarify"},{"text":" ","type":"text"},{"type":"text","text":"protocol declaration scope and members."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated ","type":"text"},{"text":"doc:AutomaticReferenceCounting#Defining-a-Capture-List","type":"text"},{"type":"text","text":" "},{"text":"to clarify the syntax for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"weak and unowned references in closure capture lists."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"type":"text","text":"doc:LexicalStructure#Operators"},{"type":"text","text":" to explicitly mention"},{"text":" ","type":"text"},{"type":"text","text":"examples of supported characters for custom operators,"},{"text":" ","type":"text"},{"text":"such as those in the Mathematical Operators, Miscellaneous Symbols,","type":"text"},{"text":" ","type":"text"},{"text":"and Dingbats Unicode blocks.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Constants can now be declared without being initialized"},{"type":"text","text":" "},{"text":"in local function scope.","type":"text"},{"type":"text","text":" "},{"text":"They must have a set value before first use.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In an initializer, constant properties can now only assign a value once."},{"type":"text","text":" "},{"type":"text","text":"For more information,"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"text":"doc:Initialization#Assigning-Constant-Properties-During-Initialization","type":"text"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Multiple optional bindings can now appear in a single "},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"as a comma-separated list of assignment expressions."},{"text":" ","type":"text"},{"text":"For more information, see ","type":"text"},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Optional-Chaining-Expression","isActive":true},{"type":"text","text":" "},{"text":"must appear within a postfix expression.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Protocol casts are no longer limited to ","type":"text"},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" protocols."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Type casts that can fail at runtime","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now use the "},{"type":"codeVoice","code":"as?"},{"type":"text","text":" or "},{"type":"codeVoice","code":"as!"},{"text":" operator,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and type casts that are guaranteed not to fail use the "},{"code":"as","type":"codeVoice"},{"text":" operator.","type":"text"},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Type-Casting-Operators","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2014-10-16"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 1.1."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a full guide to "},{"text":"doc:Initialization#Failable-Initializers","type":"text"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a description of "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Failable-Initializer-Requirements","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"for protocols.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Constants and variables of type "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" can now contain"},{"type":"text","text":" "},{"type":"text","text":"function instances. Updated the example in "},{"text":"doc:TypeCasting#Type-Casting-for-Any-and-AnyObject","type":"text"},{"type":"text","text":" "},{"text":"to show how to check for and cast to a function type","type":"text"},{"type":"text","text":" "},{"text":"within a ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" statement.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Enumerations with raw values","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now have a "},{"code":"rawValue","type":"codeVoice"},{"text":" property rather than a ","type":"text"},{"type":"codeVoice","code":"toRaw()"},{"text":" method","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and a failable initializer with a "},{"code":"rawValue","type":"codeVoice"},{"type":"text","text":" parameter"},{"type":"text","text":" "},{"type":"text","text":"rather than a "},{"type":"codeVoice","code":"fromRaw()"},{"type":"text","text":" method."},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"type":"text","text":"doc:Enumerations#Raw-Values"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Added a new reference section about","type":"text"},{"text":" ","type":"text"},{"text":"doc:Declarations#Failable-Initializers","type":"text"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which can trigger initialization failure."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Custom operators can now contain the ","type":"text"},{"type":"codeVoice","code":"?"},{"type":"text","text":" character."},{"text":" ","type":"text"},{"type":"text","text":"Updated the "},{"type":"text","text":"doc:LexicalStructure#Operators"},{"type":"text","text":" reference to describe"},{"text":" ","type":"text"},{"type":"text","text":"the revised rules."},{"type":"text","text":" "},{"type":"text","text":"Removed a duplicate description of the valid set of operator characters"},{"type":"text","text":" "},{"type":"text","text":"from "},{"type":"text","text":"doc:AdvancedOperators#Custom-Operators"},{"text":".","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2014-08-18"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"New document that describes Swift 1.0,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Apple’s new programming language for building iOS and OS X apps."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Initializer-Requirements","isActive":true},{"type":"text","text":" in protocols."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"doc:TheBasics#Assertions-and-Preconditions"},{"text":" can now use string interpolation.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Removed a note to the contrary."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the","type":"text"},{"text":" ","type":"text"},{"text":"doc:StringsAndCharacters#Concatenating-Strings-and-Characters","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to reflect the fact that "},{"code":"String","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values"},{"type":"text","text":" "},{"text":"can no longer be combined with the addition operator (","type":"text"},{"type":"codeVoice","code":"+"},{"text":")","type":"text"},{"text":" ","type":"text"},{"text":"or addition assignment operator (","type":"text"},{"type":"codeVoice","code":"+="},{"text":").","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"These operators are now used only with "},{"code":"String","type":"codeVoice"},{"text":" values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Use the "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type’s "},{"code":"append(_:)","type":"codeVoice"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"to append a single "},{"code":"Character","type":"codeVoice"},{"text":" value onto the end of a string.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about the ","type":"text"},{"type":"codeVoice","code":"availability"},{"text":" attribute to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true,"type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"doc:TheBasics#Optionals"},{"text":" no longer implicitly evaluate to","type":"text"},{"text":" ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" when they have a value and ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":" when they do not,"},{"type":"text","text":" "},{"type":"text","text":"to avoid confusion when working with optional "},{"code":"Bool","type":"codeVoice"},{"text":" values.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Instead, make an explicit check against "},{"type":"codeVoice","code":"nil"},{"text":" ","type":"text"},{"type":"text","text":"with the "},{"code":"==","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"!="},{"type":"text","text":" operators"},{"text":" ","type":"text"},{"type":"text","text":"to find out if an optional contains a value."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift now has a "},{"type":"text","text":"doc:BasicOperators#Nil-Coalescing-Operator"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"a ?? b"},{"type":"text","text":"), which unwraps an optional’s value if it exists,"},{"type":"text","text":" "},{"type":"text","text":"or returns a default value if the optional is "},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated and expanded","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#Comparing-Strings"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to reflect and demonstrate that string and character comparison"},{"type":"text","text":" "},{"text":"and prefix \/ suffix comparison are now based on","type":"text"},{"type":"text","text":" "},{"text":"Unicode canonical equivalence of extended grapheme clusters.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now try to set a property’s value, assign to a subscript,"},{"text":" ","type":"text"},{"type":"text","text":"or call a mutating method or operator through"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The information about"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining"},{"text":" ","type":"text"},{"type":"text","text":"has been updated accordingly,"},{"type":"text","text":" "},{"text":"and the examples of checking for method call success in","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Calling-Methods-Through-Optional-Chaining","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"have been expanded to show how to check for property setting success."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Subscripts-of-Optional-Type","isActive":true},{"type":"text","text":" "},{"text":"through optional chaining.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:CollectionTypes#Accessing-and-Modifying-an-Array"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to note that you can no longer append a single item to an array","type":"text"},{"text":" ","type":"text"},{"text":"with the ","type":"text"},{"code":"+=","type":"codeVoice"},{"type":"text","text":" operator."},{"type":"text","text":" "},{"type":"text","text":"Instead, use the "},{"type":"codeVoice","code":"append(_:)"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"text":"or append a single-item array with the ","type":"text"},{"type":"codeVoice","code":"+="},{"type":"text","text":" operator."}]}]},{"content":[{"inlineContent":[{"text":"Added a note that the start value ","type":"text"},{"type":"codeVoice","code":"a"},{"type":"text","text":" "},{"type":"text","text":"for the "},{"text":"doc:BasicOperators#Range-Operators","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"a...b"},{"type":"text","text":" and "},{"code":"a..<b","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"must not be greater than the end value "},{"type":"codeVoice","code":"b"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Rewrote the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","type":"reference"},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to remove its introductory coverage of initializer overrides."},{"type":"text","text":" "},{"type":"text","text":"This chapter now focuses more on the addition of"},{"text":" ","type":"text"},{"text":"new functionality in a subclass,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the modification of existing functionality with overrides."},{"text":" ","type":"text"},{"text":"The chapter’s example of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:Inheritance#Overriding-Property-Getters-and-Setters"},{"type":"text","text":" "},{"type":"text","text":"has been rewritten to show how to override a "},{"code":"description","type":"codeVoice"},{"text":" property.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(The examples of modifying an inherited property’s default value"},{"text":" ","type":"text"},{"text":"in a subclass initializer have been moved to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","type":"reference"},{"type":"text","text":" chapter.)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:Initialization#Initializer-Inheritance-and-Overriding"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to note that overrides of a designated initializer"},{"type":"text","text":" "},{"text":"must now be marked with the ","type":"text"},{"code":"override","type":"codeVoice"},{"type":"text","text":" modifier."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:Initialization#Required-Initializers"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to note that the "},{"type":"codeVoice","code":"required"},{"type":"text","text":" modifier is now written before"},{"type":"text","text":" "},{"type":"text","text":"every subclass implementation of a required initializer,"},{"text":" ","type":"text"},{"type":"text","text":"and that the requirements for required initializers"},{"text":" ","type":"text"},{"text":"can now be satisfied by automatically inherited initializers.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Infix ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Operator-Methods"},{"text":" no longer require","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"@infix"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@prefix"},{"text":" and ","type":"text"},{"code":"@postfix","type":"codeVoice"},{"text":" attributes","type":"text"},{"text":" ","type":"text"},{"text":"for ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Prefix-and-Postfix-Operators"},{"text":" ","type":"text"},{"text":"have been replaced by ","type":"text"},{"code":"prefix","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"postfix","type":"codeVoice"},{"type":"text","text":" declaration modifiers."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note about the order in which"},{"type":"text","text":" "},{"type":"text","text":"doc:AdvancedOperators#Prefix-and-Postfix-Operators"},{"type":"text","text":" are applied"},{"type":"text","text":" "},{"type":"text","text":"when both a prefix and a postfix operator are applied to"},{"text":" ","type":"text"},{"type":"text","text":"the same operand."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Operator functions for","type":"text"},{"type":"text","text":" "},{"text":"doc:AdvancedOperators#Compound-Assignment-Operators","type":"text"},{"text":" no longer use","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"@assignment","type":"codeVoice"},{"type":"text","text":" attribute when defining the function."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The order in which modifiers are specified when defining"},{"text":" ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Custom-Operators"},{"type":"text","text":" has changed."},{"text":" ","type":"text"},{"type":"text","text":"You now write "},{"code":"prefix operator","type":"codeVoice"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":"operator prefix"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"for example.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about the ","type":"text"},{"code":"dynamic","type":"codeVoice"},{"type":"text","text":" declaration modifier"},{"type":"text","text":" "},{"text":"in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about how type inference works","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals","type":"reference","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added more information about curried functions.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new chapter about "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","type":"reference","isActive":true},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"type":"text","text":"to reflect the fact that Swift’s "},{"type":"codeVoice","code":"Character"},{"text":" type now represents","type":"text"},{"text":" ","type":"text"},{"text":"a single Unicode extended grapheme cluster.","type":"text"},{"type":"text","text":" "},{"text":"Includes a new section on","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#Extended-Grapheme-Clusters"},{"type":"text","text":" "},{"type":"text","text":"and more information about"},{"text":" ","type":"text"},{"text":"doc:StringsAndCharacters#Unicode-Scalar-Values","type":"text"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#Comparing-Strings"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:StringsAndCharacters#String-Literals","type":"text"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"to note that Unicode scalars inside string literals","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are now written as "},{"type":"codeVoice","code":"\\u{n}"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"where ","type":"text"},{"type":"codeVoice","code":"n"},{"type":"text","text":" is a hexadecimal number between 0 and 10FFFF,"},{"type":"text","text":" "},{"type":"text","text":"the range of Unicode’s codespace."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"NSString","type":"codeVoice"},{"text":" ","type":"text"},{"code":"length","type":"codeVoice"},{"type":"text","text":" property is now mapped onto"},{"text":" ","type":"text"},{"type":"text","text":"Swift’s native "},{"type":"codeVoice","code":"String"},{"text":" type as ","type":"text"},{"code":"utf16Count","type":"codeVoice"},{"type":"text","text":", not "},{"type":"codeVoice","code":"utf16count"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift’s native ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" type no longer has","type":"text"},{"text":" ","type":"text"},{"text":"an ","type":"text"},{"code":"uppercaseString","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"lowercaseString"},{"type":"text","text":" property."},{"text":" ","type":"text"},{"type":"text","text":"The corresponding section in"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},{"type":"text","text":" "},{"type":"text","text":"has been removed, and various code examples have been updated."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a new section about"},{"text":" ","type":"text"},{"text":"doc:Initialization#Initializer-Parameters-Without-Argument-Labels","type":"text"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about"},{"text":" ","type":"text"},{"type":"text","text":"doc:Initialization#Required-Initializers"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about "},{"text":"doc:Functions#Optional-Tuple-Return-Types","type":"text"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:TheBasics#Type-Annotations","type":"text"},{"type":"text","text":" section to note that"},{"type":"text","text":" "},{"type":"text","text":"multiple related variables can be defined on a single line"},{"type":"text","text":" "},{"text":"with one type annotation.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"@optional","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"@lazy"},{"text":", ","type":"text"},{"type":"codeVoice","code":"@final"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"@required"},{"text":" attributes","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are now the "},{"type":"codeVoice","code":"optional"},{"type":"text","text":", "},{"code":"lazy","type":"codeVoice"},{"type":"text","text":", "},{"code":"final","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"required"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","type":"reference","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the entire book to refer to "},{"code":"..<","type":"codeVoice"},{"type":"text","text":" as"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"text","text":"doc:BasicOperators#Half-Open-Range-Operator"},{"text":" ","type":"text"},{"type":"text","text":"(rather than the “half-closed range operator”)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:CollectionTypes#Accessing-and-Modifying-a-Dictionary"},{"type":"text","text":" "},{"type":"text","text":"section to note that "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" now has"},{"text":" ","type":"text"},{"type":"text","text":"a Boolean "},{"code":"isEmpty","type":"codeVoice"},{"text":" property.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Clarified the full list of characters that can be used"},{"text":" ","type":"text"},{"type":"text","text":"when defining "},{"type":"text","text":"doc:AdvancedOperators#Custom-Operators"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"nil"},{"type":"text","text":" and the Booleans "},{"type":"codeVoice","code":"true"},{"type":"text","text":" and "},{"type":"codeVoice","code":"false"},{"text":" are now ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals","type":"reference"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"code":"Array","type":"codeVoice"},{"type":"text","text":" type now has full value semantics."},{"text":" ","type":"text"},{"text":"Updated the information about ","type":"text"},{"type":"text","text":"doc:CollectionTypes#Mutability-of-Collections"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"text":"doc:CollectionTypes#Arrays","type":"text"},{"type":"text","text":" to reflect the new approach."},{"type":"text","text":" "},{"type":"text","text":"Also clarified the assignment and copy behavior for strings arrays and dictionaries."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"doc:CollectionTypes#Array-Type-Shorthand-Syntax"},{"type":"text","text":" is now written as"},{"text":" ","type":"text"},{"code":"[SomeType]","type":"codeVoice"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":"SomeType[]"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about "},{"text":"doc:CollectionTypes#Dictionary-Type-Shorthand-Syntax","type":"text"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is written as "},{"type":"codeVoice","code":"[KeyType: ValueType]"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a new section about "},{"type":"text","text":"doc:CollectionTypes#Hash-Values-for-Set-Types"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Examples of ","type":"text"},{"text":"doc:Closures#Closure-Expressions","type":"text"},{"type":"text","text":" now use"},{"type":"text","text":" "},{"type":"text","text":"the global "},{"type":"codeVoice","code":"sorted(_:_:)"},{"type":"text","text":" function"},{"text":" ","type":"text"},{"text":"rather than the global ","type":"text"},{"code":"sort(_:_:)","type":"codeVoice"},{"type":"text","text":" function,"},{"text":" ","type":"text"},{"text":"to reflect the new array value semantics.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the information about ","type":"text"},{"text":"doc:Initialization#Memberwise-Initializers-for-Structure-Types","type":"text"},{"type":"text","text":" "},{"text":"to clarify that the memberwise structure initializer is made available","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"even if a structure’s stored properties don’t have default values."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated to "},{"code":"..<","type":"codeVoice"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":".."},{"text":" ","type":"text"},{"type":"text","text":"for the "},{"text":"doc:BasicOperators#Half-Open-Range-Operator","type":"text"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added an example of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type"},{"type":"text","text":"."}]}]}]}],"kind":"content"}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/RevisionHistory","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"sections":[],"kind":"article","references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Failable-Initializer-Requirements":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Failable-Initializer-Requirements","url":"\/documentation\/the-swift-programming-language\/protocols#Failable-Initializer-Requirements","title":"Failable Initializer Requirements","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Initializer-Expression":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Initializer-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Initializer-Expression","title":"Initializer Expression","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"title":"Cadenas y caracteres","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","abstract":[{"text":"Store and manipulate text.","type":"text"}],"role":"article","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Optional-Chaining-Expression":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Optional-Chaining-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Optional-Chaining-Expression","title":"Optional-Chaining Expression","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Macros":{"kind":"article","abstract":[{"type":"text","text":"Use macros to generate code at compile time."}],"role":"article","url":"\/documentation\/the-swift-programming-language\/macros","type":"topic","title":"Macros","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Throw-Statement":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Throw-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Throw-Statement","title":"Throw Statement","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Literal-Expression":{"type":"topic","title":"Literal Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Literal-Expression","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Sets":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Sets","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Sets","title":"Sets","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Any-Type":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Any-Type","url":"\/documentation\/the-swift-programming-language\/types#Any-Type","title":"Any Type","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switch-Statement":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switch-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Switch-Statement","title":"Switch Statement","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Wrappers":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Wrappers","url":"\/documentation\/the-swift-programming-language\/properties#Property-Wrappers","title":"Property Wrappers","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Contextual-Where-Clauses":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Contextual-Where-Clauses","url":"\/documentation\/the-swift-programming-language\/generics#Contextual-Where-Clauses","title":"Contextual Where Clauses","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"abstract":[{"text":"Define and call functions, label their arguments, and use their return values.","type":"text"}],"title":"Funciones","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Associated-Types":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/generics#Associated-Types","kind":"section","title":"Associated Types","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Rethrowing-Functions-and-Methods":{"type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Rethrowing-Functions-and-Methods","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","title":"Rethrowing Functions and Methods","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Implicit-Conversion-to-a-Pointer-Type":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Conversion-to-a-Pointer-Type","url":"\/documentation\/the-swift-programming-language\/expressions#Implicit-Conversion-to-a-Pointer-Type","kind":"section","title":"Implicit Conversion to a Pointer Type","type":"topic","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#resultBuilder":{"url":"\/documentation\/the-swift-programming-language\/attributes#resultBuilder","title":"resultBuilder","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#resultBuilder","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Calling-Methods-Through-Optional-Chaining":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Calling-Methods-Through-Optional-Chaining","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Calling-Methods-Through-Optional-Chaining","title":"Calling Methods Through Optional Chaining","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Identifiers":{"abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers","title":"Identifiers","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Identifiers","kind":"section","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"type":"topic","abstract":[{"text":"Perform asynchronous operations.","type":"text"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","role":"article","kind":"article","title":"Concurrencia","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","role":"article","abstract":[{"text":"Add information to declarations and types.","type":"text"}],"type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes","title":"Attributes","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Metatype-Type":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type","url":"\/documentation\/the-swift-programming-language\/types#Metatype-Type","title":"Metatype Type","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Await-Operator":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Await-Operator","url":"\/documentation\/the-swift-programming-language\/expressions#Await-Operator","title":"Await Operator","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Conditional-Expression":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Conditional-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Conditional-Expression","title":"Conditional Expression","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Type-Attributes":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Type-Attributes","url":"\/documentation\/the-swift-programming-language\/attributes#Type-Attributes","title":"Type Attributes","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Herencia","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","abstract":[{"type":"text","text":"Subclass to add or override functionality."}],"type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements":{"kind":"article","abstract":[{"type":"text","text":"Group expressions and control the flow of execution."}],"role":"article","url":"\/documentation\/the-swift-programming-language\/statements","type":"topic","title":"Statements","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Initializer-Requirements":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Initializer-Requirements","url":"\/documentation\/the-swift-programming-language\/protocols#Initializer-Requirements","title":"Initializer Requirements","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#frozen":{"type":"topic","title":"frozen","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen","url":"\/documentation\/the-swift-programming-language\/attributes#frozen","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types":{"type":"topic","title":"Types","url":"\/documentation\/the-swift-programming-language\/types","kind":"article","abstract":[{"type":"text","text":"Use built-in named and compound types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#unknown":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unknown","url":"\/documentation\/the-swift-programming-language\/attributes#unknown","title":"unknown","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","role":"article","title":"Manejo de errores","url":"\/documentation\/the-swift-programming-language\/errorhandling","type":"topic","abstract":[{"type":"text","text":"Respond to and recover from errors."}],"kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Type-Properties":{"abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/properties#Type-Properties","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties","title":"Type Properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Explicit-Member-Expression":{"type":"topic","title":"Explicit Member Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Explicit-Member-Expression","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","url":"\/documentation\/the-swift-programming-language\/generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","title":"Using a Protocol in Its Associated Type’s Constraints","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Function-Declaration":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Function-Declaration","kind":"section","title":"Function Declaration","type":"topic","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"kind":"article","abstract":[{"type":"text","text":"Structure your code to avoid conflicts when accessing memory."}],"role":"article","url":"\/documentation\/the-swift-programming-language\/memorysafety","type":"topic","title":"Memory Safety","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Selector-Expression":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Selector-Expression","title":"Selector Expression","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Constant-Declaration":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Constant-Declaration","title":"Constant Declaration","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Class-Only-Protocols":{"type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Class-Only-Protocols","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols","title":"Class-Only Protocols","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Key-Path-Expression":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Key-Path-Expression","title":"Key-Path Expression","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Try-Operator":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Try-Operator","url":"\/documentation\/the-swift-programming-language\/expressions#Try-Operator","title":"Try Operator","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extending-a-Generic-Type":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type","url":"\/documentation\/the-swift-programming-language\/generics#Extending-a-Generic-Type","title":"Extending a Generic Type","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Defer-Statement":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Defer-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Defer-Statement","title":"Defer Statement","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Extension-Declaration":{"type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Extension-Declaration","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","title":"Extension Declaration","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Sendable":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Sendable","url":"\/documentation\/the-swift-programming-language\/attributes#Sendable","title":"Sendable","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#dynamicCallable":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/attributes#dynamicCallable","kind":"section","title":"dynamicCallable","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicCallable"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Where-Clauses":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses","kind":"section","type":"topic","title":"Generic Where Clauses","url":"\/documentation\/the-swift-programming-language\/generics#Generic-Where-Clauses","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GuidedTour":{"kind":"article","abstract":[{"type":"text","text":"Explora las características y la sintaxis de Swift."}],"role":"article","url":"\/documentation\/the-swift-programming-language\/guidedtour","type":"topic","title":"Un Recorrido por Swift","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Break-Statement":{"type":"topic","title":"Break Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Break-Statement","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#While-Statement":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#While-Statement","url":"\/documentation\/the-swift-programming-language\/statements#While-Statement","title":"While Statement","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#available":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#available","url":"\/documentation\/the-swift-programming-language\/attributes#available","title":"available","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#unchecked":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unchecked","url":"\/documentation\/the-swift-programming-language\/attributes#unchecked","title":"unchecked","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Conditionally-Conforming-to-a-Protocol":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Conditionally-Conforming-to-a-Protocol","url":"\/documentation\/the-swift-programming-language\/protocols#Conditionally-Conforming-to-a-Protocol","title":"Conditionally Conforming to a Protocol","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Function-Call-Expression":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Function-Call-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Function-Call-Expression","kind":"section","title":"Function Call Expression","type":"topic","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Checking-for-Protocol-Conformance":{"url":"\/documentation\/the-swift-programming-language\/protocols#Checking-for-Protocol-Conformance","title":"Checking for Protocol Conformance","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance","abstract":[],"kind":"section","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Do-Statement":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Do-Statement","title":"Do Statement","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"url":"\/documentation\/the-swift-programming-language\/generics","abstract":[{"type":"text","text":"Write code that works for multiple types and specify requirements for those types."}],"kind":"article","title":"Generics","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","type":"topic","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"title":"Enumeraciones","abstract":[{"type":"text","text":"Model custom types that define a list of possible values."}],"url":"\/documentation\/the-swift-programming-language\/enumerations","role":"article","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Declaration-Modifiers":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","url":"\/documentation\/the-swift-programming-language\/declarations#Declaration-Modifiers","title":"Declaration Modifiers","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Associated-Types-with-a-Generic-Where-Clause":{"url":"\/documentation\/the-swift-programming-language\/generics#Associated-Types-with-a-Generic-Where-Clause","title":"Associated Types with a Generic Where Clause","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types-with-a-Generic-Where-Clause","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Type-Variable-Properties":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Variable-Properties","url":"\/documentation\/the-swift-programming-language\/declarations#Type-Variable-Properties","title":"Type Variable Properties","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Stored-Variable-Observers-and-Property-Observers":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Stored-Variable-Observers-and-Property-Observers","url":"\/documentation\/the-swift-programming-language\/declarations#Stored-Variable-Observers-and-Property-Observers","title":"Stored Variable Observers and Property Observers","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure":{"type":"topic","title":"Lexical Structure","url":"\/documentation\/the-swift-programming-language\/lexicalstructure","kind":"article","abstract":[{"type":"text","text":"Use the lowest-level components of the syntax."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Literals":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Literals","title":"Literals","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Subscripts-of-Optional-Type":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Subscripts-of-Optional-Type","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Subscripts-of-Optional-Type","title":"Accessing Subscripts of Optional Type","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"abstract":[{"type":"text","text":"Model the lifetime of objects and their relationships."}],"url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting","kind":"article","title":"Conteo automático de referencias","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","type":"topic","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#dynamicMemberLookup":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/attributes#dynamicMemberLookup","kind":"section","title":"dynamicMemberLookup","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicMemberLookup"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Type-Casting-Operators":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Type-Casting-Operators","url":"\/documentation\/the-swift-programming-language\/expressions#Type-Casting-Operators","title":"Type-Casting Operators","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Function-Type":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","kind":"section","title":"Function Type","type":"topic","abstract":[],"url":"\/documentation\/the-swift-programming-language\/types#Function-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Declaration-Attributes":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","url":"\/documentation\/the-swift-programming-language\/attributes#Declaration-Attributes","title":"Declaration Attributes","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Implicit-Member-Expression":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/expressions#Implicit-Member-Expression","kind":"section","title":"Implicit Member Expression","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Member-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Compile-Time-Diagnostic-Statement":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compile-Time-Diagnostic-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Compile-Time-Diagnostic-Statement","title":"Compile-Time Diagnostic Statement","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#main":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#main","url":"\/documentation\/the-swift-programming-language\/attributes#main","title":"main","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Type-Alias-Declaration":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/declarations#Type-Alias-Declaration","kind":"section","title":"Type Alias Declaration","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Alias-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"title":"Protocols","url":"\/documentation\/the-swift-programming-language\/protocols","kind":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","abstract":[{"type":"text","text":"Define requirements that conforming types must implement."}],"role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Line-Control-Statement":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Line-Control-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Line-Control-Statement","title":"Line Control Statement","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Regular-Expression-Literals":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Regular-Expression-Literals","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Regular-Expression-Literals","title":"Regular Expression Literals","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Methods-with-Special-Names":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Methods-with-Special-Names","url":"\/documentation\/the-swift-programming-language\/declarations#Methods-with-Special-Names","kind":"section","title":"Methods with Special Names","type":"topic","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Optional-Protocol-Requirements":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/protocols#Optional-Protocol-Requirements","kind":"section","title":"Optional Protocol Requirements","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Optional-Protocol-Requirements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Result-Transformations":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Result-Transformations","url":"\/documentation\/the-swift-programming-language\/attributes#Result-Transformations","title":"Result Transformations","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","url":"\/documentation\/the-swift-programming-language\/declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","title":"Enumerations with Cases of a Raw-Value Type","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Protocol-Declaration":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Protocol-Declaration","title":"Protocol Declaration","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Precedence-Group-Declaration":{"abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/declarations#Precedence-Group-Declaration","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Precedence-Group-Declaration","title":"Precedence Group Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Properties-Through-Optional-Chaining":{"title":"Accessing Properties Through Optional Chaining","kind":"section","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Properties-Through-Optional-Chaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions":{"type":"topic","title":"Expressions","url":"\/documentation\/the-swift-programming-language\/expressions","kind":"article","abstract":[{"type":"text","text":"Access, modify, and assign values."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"role":"collection","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","url":"\/documentation\/the-swift-programming-language","title":"The Swift Programming Language (6)","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocol-Extensions":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions","url":"\/documentation\/the-swift-programming-language\/protocols#Protocol-Extensions","title":"Protocol Extensions","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"kind":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","title":"Operadores avanzados","role":"article","abstract":[{"type":"text","text":"Define custom operators, perform bitwise operations, and use builder syntax."}],"url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"title":"Inicialización","url":"\/documentation\/the-swift-programming-language\/initialization","kind":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","abstract":[{"type":"text","text":"Set the initial values for a type’s stored properties and perform one-time setup."}],"role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocol-Composition":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/protocols#Protocol-Composition","kind":"section","title":"Protocol Composition","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Self-Type":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type","url":"\/documentation\/the-swift-programming-language\/types#Self-Type","title":"Self Type","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Functions-that-Never-Return":{"type":"topic","title":"Functions that Never Return","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return","url":"\/documentation\/the-swift-programming-language\/declarations#Functions-that-Never-Return","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Actor-Declaration":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Actor-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Actor-Declaration","title":"Actor Declaration","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"type":"topic","title":"Fundamentos","url":"\/documentation\/the-swift-programming-language\/thebasics","kind":"article","abstract":[{"type":"text","text":"Trabaja con tipos comunes de datos y escribe sintaxis básica."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Guard-Statement":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/statements#Guard-Statement","kind":"section","title":"Guard Statement","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Guard-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Protocol-Associated-Type-Declaration":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/declarations#Protocol-Associated-Type-Declaration","kind":"section","title":"Protocol Associated Type Declaration","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Associated-Type-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#String-Literals":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#String-Literals","title":"String Literals","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"kind":"article","abstract":[{"type":"text","text":"Access members of an optional value without unwrapping."}],"role":"article","url":"\/documentation\/the-swift-programming-language\/optionalchaining","type":"topic","title":"Optional Chaining","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"type":"topic","title":"Opaque and Boxed Types","url":"\/documentation\/the-swift-programming-language\/opaquetypes","kind":"article","abstract":[{"type":"text","text":"Hide implementation details about a value’s type."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations":{"type":"topic","title":"Declaraciones","url":"\/documentation\/the-swift-programming-language\/declarations","kind":"article","abstract":[{"type":"text","text":"Introduce types, operators, variables, and other names and constructs."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Subscripts":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Subscripts","url":"\/documentation\/the-swift-programming-language\/generics#Generic-Subscripts","title":"Generic Subscripts","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"kind":"article","abstract":[{"type":"text","text":"Manage the visibility of code by declaration, file, and module."}],"role":"article","url":"\/documentation\/the-swift-programming-language\/accesscontrol","type":"topic","title":"Control de acceso","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Enumerations-with-Cases-of-Any-Type":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type","url":"\/documentation\/the-swift-programming-language\/declarations#Enumerations-with-Cases-of-Any-Type","title":"Enumerations with Cases of Any Type","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switching-Over-Future-Enumeration-Cases":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","kind":"section","title":"Switching Over Future Enumeration Cases","type":"topic","abstract":[],"url":"\/documentation\/the-swift-programming-language\/statements#Switching-Over-Future-Enumeration-Cases"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extensions-with-a-Generic-Where-Clause":{"url":"\/documentation\/the-swift-programming-language\/generics#Extensions-with-a-Generic-Where-Clause","title":"Extensions with a Generic Where Clause","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Compiler-Control-Statements":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compiler-Control-Statements","url":"\/documentation\/the-swift-programming-language\/statements#Compiler-Control-Statements","title":"Compiler Control Statements","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Protocol-Composition-Type":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/types#Protocol-Composition-Type","kind":"section","title":"Protocol Composition Type","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Patterns":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","role":"article","abstract":[{"text":"Match and destructure values.","type":"text"}],"kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/patterns","title":"Patrones"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Observers":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/properties#Property-Observers","kind":"section","title":"Property Observers","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Keywords-and-Punctuation":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Keywords-and-Punctuation","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Keywords-and-Punctuation","title":"Keywords and Punctuation","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Availability-Condition":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Availability-Condition","url":"\/documentation\/the-swift-programming-language\/statements#Availability-Condition","title":"Availability Condition","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GenericParametersAndArguments":{"type":"topic","title":"Generic Parameters and Arguments","url":"\/documentation\/the-swift-programming-language\/genericparametersandarguments","kind":"article","abstract":[{"type":"text","text":"Generalize declarations to abstract away concrete types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","abstract":[{"type":"text","text":"Structure code with branches, loops, and early exits."}],"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","title":"Flujo de control","url":"\/documentation\/the-swift-programming-language\/controlflow","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Asynchronous-Functions-and-Methods":{"type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Asynchronous-Functions-and-Methods","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods","title":"Asynchronous Functions and Methods","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Conditional-Compilation-Block":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","url":"\/documentation\/the-swift-programming-language\/statements#Conditional-Compilation-Block","title":"Conditional Compilation Block","kind":"section","abstract":[]}}}