{"kind":"article","identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/RevisionHistory","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"abstract":[{"text":"Review the recent changes to this book.","type":"text"}],"sections":[],"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2023-09-18"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.9."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about "},{"type":"codeVoice","code":"if"},{"type":"text","text":" and "},{"code":"switch","type":"codeVoice"},{"text":" expressions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Conditional-Expression","type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros","type":"reference","isActive":true},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"text":"with information about generating code at compile time.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Expanded the discussion of optionals in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added an example of concurrency to "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","type":"reference"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about boxed protocol types"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","isActive":true},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"buildPartialBlock(first:)"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"type":"codeVoice","code":"buildPartialBlock(accumulated:next:)"},{"type":"text","text":" methods"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Result-Transformations","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Added visionOS to the lists of platforms in","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#available","isActive":true},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Formatted the formal grammar to use blank lines for grouping.","type":"text"}]}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2023-03-30"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 5.8."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"type":"text","text":"doc:ControlFlow#Deferred-Actions"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"showing "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" outside of error handling."}]}]},{"content":[{"inlineContent":[{"text":"Adopted Swift-DocC for publication.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Minor corrections and additions throughout."}],"type":"paragraph"}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2022-09-12"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 5.7.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"text":"doc:Concurrency#Sendable-Types","type":"text"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"text":"with information about sending data between actors and tasks,","type":"text"},{"type":"text","text":" "},{"text":"and added information about the ","type":"text"},{"type":"codeVoice","code":"@Sendable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"@unchecked"},{"text":" attributes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Sendable"},{"type":"text","text":" and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unchecked","type":"reference","isActive":true},{"text":" sections.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Regular-Expression-Literals","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about creating a regular expression."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the short form of "},{"code":"if","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"let"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about "},{"type":"codeVoice","code":"#unavailable"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:ControlFlow#Checking-API-Availability","type":"text"},{"text":" section.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2022-03-14"}],"type":"strong"}]},{"items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 5.6.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"with information about using ","type":"text"},{"type":"codeVoice","code":"#if"},{"text":" ","type":"text"},{"type":"text","text":"around chained method calls and other postfix expressions."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the visual styling of figures throughout.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2021-09-20"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 5.5.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about asynchronous functions, tasks, and actors","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","isActive":true},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"text":"and to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Actor-Declaration","isActive":true,"type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods","type":"reference","isActive":true},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Await-Operator","isActive":true},{"text":" sections.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about identifiers that start with an underscore."}],"type":"paragraph"}]}]},{"inlineContent":[{"inlineContent":[{"text":"2021-04-26","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 5.4.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"text":"doc:AdvancedOperators#Result-Builders","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#resultBuilder","type":"reference","isActive":true},{"text":" sections","type":"text"},{"type":"text","text":" "},{"text":"with information about result builders.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Conversion-to-a-Pointer-Type","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with information about how in-out parameters","type":"text"},{"type":"text","text":" "},{"text":"can be implicitly converted to unsafe pointers in a function call.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:Functions#Variadic-Parameters","type":"text"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","isActive":true},{"text":" sections,","type":"text"},{"text":" ","type":"text"},{"text":"now that a function can have multiple variadic parameters.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Member-Expression","type":"reference"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"text":"now that implicit member expressions can be chained together.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2020-09-16","type":"text"}]}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 5.3."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about multiple trailing closures"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:Closures#Trailing-Closures"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"and added information about how trailing closures are matched to parameters","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Function-Call-Expression","isActive":true,"type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about synthesized implementations"},{"text":" ","type":"text"},{"text":"of ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" for enumerations"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Contextual-Where-Clauses"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"now that you can write a generic "},{"type":"codeVoice","code":"where"},{"text":" clause in more places.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"text":"doc:AutomaticReferenceCounting#Unowned-Optional-References","type":"text"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with information about using unowned references with optional values."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"@main"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#main"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added "},{"type":"codeVoice","code":"#filePath"},{"type":"text","text":" to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","type":"reference"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"and updated the discussion of "},{"type":"codeVoice","code":"#file"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Closures#Escaping-Closures"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that closures can refer to "},{"code":"self","type":"codeVoice"},{"type":"text","text":" implicitly in more scenarios."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:ErrorHandling#Handling-Errors-Using-Do-Catch","type":"text"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","type":"reference","isActive":true},{"type":"text","text":" sections,"},{"type":"text","text":" "},{"type":"text","text":"now that a "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause can match against multiple errors."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added more information about "},{"code":"Any","type":"codeVoice"},{"type":"text","text":" "},{"text":"and moved it into the new ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Any-Type","isActive":true,"type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","type":"reference"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that lazy properties can have observers."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"now that members of an enumeration can satisfy protocol requirements.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Stored-Variable-Observers-and-Property-Observers","type":"reference"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to describe when the getter is called before the observer."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety"},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to mention atomic operations."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2020-03-24"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 5.2."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about passing a key path instead of a closure"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Methods-with-Special-Names","type":"reference","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about syntactic sugar the lets instances of"},{"text":" ","type":"text"},{"type":"text","text":"classes, structures, and enumerations be used with function call syntax."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Subscripts#Subscript-Options"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"now that subscripts support parameters with default values.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type","type":"reference","isActive":true},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that the "},{"type":"codeVoice","code":"Self"},{"type":"text","text":" can be used in more contexts."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:TheBasics#Implicitly-Unwrapped-Optionals"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"to make it clearer that an implicitly unwrapped optional value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can be used as either an optional or non-optional value."}]}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2019-09-10"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.1."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about functions"},{"text":" ","type":"text"},{"type":"text","text":"that specify a protocol that their return value conforms to,"},{"text":" ","type":"text"},{"type":"text","text":"instead of providing a specific named return type,"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","isActive":true},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about property wrappers"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Wrappers","type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about enumerations and structures","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that are frozen for library evolution"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:Functions#Functions-With-an-Implicit-Return"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"text":"doc:Properties#Shorthand-Getter-Declaration","type":"text"},{"text":" sections","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with information about functions that omit "},{"type":"codeVoice","code":"return"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about using subscripts on types"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Subscripts#Type-Subscripts"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Patterns#Enumeration-Case-Pattern"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that an enumeration case pattern can match an optional value."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:Initialization#Memberwise-Initializers-for-Structure-Types","type":"text"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that memberwise initializers support"},{"text":" ","type":"text"},{"type":"text","text":"omitting parameters for properties that have a default value."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about dynamic members"},{"text":" ","type":"text"},{"type":"text","text":"that are looked up by key path at runtime"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicMemberLookup","type":"reference","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added ","type":"text"},{"type":"codeVoice","code":"macCatalyst"},{"text":" to the list of target environments","type":"text"},{"text":" ","type":"text"},{"text":"in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type","type":"reference","isActive":true},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that "},{"type":"codeVoice","code":"Self"},{"type":"text","text":" can be used to refer to the type"},{"type":"text","text":" "},{"type":"text","text":"introduced by the current class, structure, or enumeration declaration."}]}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2019-03-25"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 5.0.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#Extended-String-Delimiters"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and updated the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about extended string delimiters."}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicCallable","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with information about dynamically calling instances as functions","type":"text"},{"type":"text","text":" "},{"text":"using the ","type":"text"},{"code":"dynamicCallable","type":"codeVoice"},{"type":"text","text":" attribute."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unknown","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","type":"reference","isActive":true},{"text":" sections","type":"text"},{"type":"text","text":" "},{"text":"with information about handling future enumeration cases","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in switch statements using"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"unknown"},{"text":" switch case attribute.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the identity key path ("},{"type":"codeVoice","code":"\\.self"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about using the less than ("},{"type":"codeVoice","code":"<"},{"text":") operator","type":"text"},{"text":" ","type":"text"},{"text":"in platform conditions to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2018-09-17"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 4.2."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about accessing all of an enumeration’s cases"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"text":"doc:Enumerations#Iterating-over-Enumeration-Cases","type":"text"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about ","type":"text"},{"type":"codeVoice","code":"#error"},{"type":"text","text":" and "},{"type":"codeVoice","code":"#warning"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compile-Time-Diagnostic-Statement","type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about inlining"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"under the "},{"type":"codeVoice","code":"inlinable"},{"type":"text","text":" and  "},{"type":"codeVoice","code":"usableFromInline"},{"type":"text","text":" attributes."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about members that are looked up by name at runtime"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"under the "},{"code":"dynamicMemberLookup","type":"codeVoice"},{"type":"text","text":" attribute."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"type":"codeVoice","code":"requires_stored_property_inits"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"warn_unqualified_access"},{"text":" attributes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about how to conditionally compile code"},{"text":" ","type":"text"},{"type":"text","text":"depending on the Swift compiler version being used"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about "},{"type":"codeVoice","code":"#dsohandle"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","isActive":true,"type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2018-03-29","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 4.1.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about synthesized implementations of equivalence operators"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"text":"doc:AdvancedOperators#Equivalence-Operators","type":"text"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about conditional protocol conformance"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","type":"reference","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations"},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"text":"and to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Conditionally-Conforming-to-a-Protocol"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about recursive protocol constraints"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"canImport()"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"targetEnvironment()"},{"type":"text","text":" platform conditions"},{"type":"text","text":" "},{"type":"text","text":"to "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2017-12-04","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 4.0.3."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"text":"now that key paths support subscript components.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2017-09-19"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 4.0.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about exclusive access to memory"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety"},{"text":" chapter.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types-with-a-Generic-Where-Clause"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that you can use generic "},{"code":"where","type":"codeVoice"},{"text":" clauses","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to constrain associated types."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about multiline string literals","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#String-Literals"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","type":"reference","isActive":true},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"text":"and to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure","type":"reference"},{"text":" chapter.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"code":"objc","type":"codeVoice"},{"text":" attribute","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that this attribute is inferred in fewer places."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Subscripts","isActive":true,"type":"reference"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that subscripts can be generic."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition","type":"reference"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true,"type":"reference"},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"text":"and in the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","isActive":true},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"type":"text","text":"now that protocol composition types can contain a superclass requirement."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of protocol extensions"},{"type":"text","text":" "},{"text":"in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration"},{"text":" ","type":"text"},{"type":"text","text":"now that "},{"type":"codeVoice","code":"final"},{"text":" isn’t allowed in them.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about preconditions and fatal errors"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:TheBasics#Assertions-and-Preconditions","type":"text"},{"text":" section.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2017-03-27"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 3.1."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about extensions that include requirements."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added examples of iterating over a range","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:ControlFlow#For-In-Loops"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added an example of failable numeric conversions"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Initialization#Failable-Initializers"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"about using the ","type":"text"},{"type":"codeVoice","code":"available"},{"text":" attribute with a Swift language version.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to note that argument labels aren’t allowed when writing a function type.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of Swift language version numbers"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"reference","isActive":true},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"text":"now that an optional patch number is allowed.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","isActive":true,"type":"reference"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that Swift distinguishes between functions that take multiple parameters"},{"type":"text","text":" "},{"type":"text","text":"and functions that take a single parameter of a tuple type."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Removed the Dynamic Type Expression section","type":"text"},{"text":" ","type":"text"},{"text":"from the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"now that "},{"type":"codeVoice","code":"type(of:)"},{"type":"text","text":" is a Swift standard library function."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2016-10-27"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 3.0.1.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of weak and unowned references"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"code":"unowned","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"unowned(safe)"},{"type":"text","text":", and "},{"code":"unowned(unsafe)","type":"codeVoice"},{"text":" ","type":"text"},{"text":"declaration modifiers","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"text","text":"doc:TypeCasting#Type-Casting-for-Any-and-AnyObject"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"about using an optional value when a value of type "},{"type":"codeVoice","code":"Any"},{"text":" is expected.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","type":"reference","isActive":true},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"to separate the discussion of parenthesized expressions and tuple expressions."}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2016-09-13"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 3.0.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of functions in the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","type":"reference"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","isActive":true},{"type":"text","text":" section to note that"},{"type":"text","text":" "},{"type":"text","text":"all parameters get an argument label by default."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of operators","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","isActive":true,"type":"reference"},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"type":"text","text":"now that you implement them as type methods instead of as global functions."}]}]},{"content":[{"inlineContent":[{"text":"Added information about the ","type":"text"},{"code":"open","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"fileprivate"},{"type":"text","text":" access-level modifiers"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","type":"reference","isActive":true},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of "},{"code":"inout","type":"codeVoice"},{"type":"text","text":" in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to note that it appears in front of a parameter’s type"},{"text":" ","type":"text"},{"text":"instead of in front of a parameter’s name.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"type":"codeVoice","code":"@noescape"},{"type":"text","text":" and "},{"code":"@autoclosure","type":"codeVoice"},{"type":"text","text":" attributes"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"text","text":"doc:Closures#Escaping-Closures"},{"type":"text","text":" and "},{"text":"doc:Closures#Autoclosures","type":"text"},{"text":" sections","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","isActive":true},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"now that they’re type attributes, rather than declaration attributes."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about operator precedence groups"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:AdvancedOperators#Precedence-for-Custom-Infix-Operators"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","type":"reference"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"text":"and to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Precedence-Group-Declaration","type":"reference","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated discussion throughout"},{"text":" ","type":"text"},{"text":"to use macOS instead of OS X,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Error"},{"text":" instead of ","type":"text"},{"type":"codeVoice","code":"ErrorProtocol"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and protocol names such as "},{"code":"ExpressibleByStringLiteral","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"instead of "},{"code":"StringLiteralConvertible","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","isActive":true},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"and in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","isActive":true},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"text":"now that generic ","type":"text"},{"type":"codeVoice","code":"where"},{"type":"text","text":" clauses are written at the end of a declaration."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"text":"doc:Closures#Escaping-Closures","type":"text"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that closures are nonescaping by default."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"text":"doc:TheBasics#Optional-Binding","type":"text"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","isActive":true,"type":"reference"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#While-Statement","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","type":"reference","isActive":true},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that "},{"type":"codeVoice","code":"if"},{"text":", ","type":"text"},{"code":"while","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"text":"use a comma-separated list of conditions without ","type":"text"},{"type":"codeVoice","code":"where"},{"type":"text","text":" clauses."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about switch cases that have multiple patterns","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:ControlFlow#Switch","type":"text"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switch-Statement","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","type":"reference","isActive":true},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of function types","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that function argument labels are no longer part of a function’s type."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of protocol composition types"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition","type":"reference","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"and in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type","type":"reference","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","isActive":true},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"to use the new "},{"code":"Protocol1 & Protocol2","type":"codeVoice"},{"type":"text","text":" syntax."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion in the Dynamic Type Expression section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to use the new "},{"type":"codeVoice","code":"type(of:)"},{"text":" syntax for dynamic type expressions.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion of line control statements","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to use the "},{"type":"codeVoice","code":"#sourceLocation(file:line:)"},{"text":" syntax","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Line-Control-Statement","isActive":true,"type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"to use the new "},{"type":"codeVoice","code":"Never"},{"type":"text","text":" type."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about playground literals","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion in the ","type":"text"},{"type":"text","text":"doc:Declarations#In-Out-Parameters"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"to note that only nonescaping closures can capture in-out parameters.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion about default parameters"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"text":"doc:Functions#Default-Parameter-Values","type":"text"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"now that they can’t be reordered in function calls.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated attribute arguments to use a colon","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes"},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about throwing an error"},{"type":"text","text":" "},{"type":"text","text":"inside the catch block of a rethrowing function"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about accessing the selector"},{"type":"text","text":" "},{"type":"text","text":"of an Objective-C property’s getter or setter"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression","isActive":true,"type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Added information to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Alias-Declaration","type":"reference","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"about generic type aliases and using type aliases inside of protocols.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of function types in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to note that parentheses around the parameter types are required."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes"},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to note that the "},{"code":"@IBAction","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"@IBOutlet"},{"type":"text","text":", and "},{"type":"codeVoice","code":"@NSManaged"},{"text":" attributes","type":"text"},{"text":" ","type":"text"},{"text":"imply the ","type":"text"},{"code":"@objc","type":"codeVoice"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"code":"@GKInspectable","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true,"type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of optional protocol requirements"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Optional-Protocol-Requirements"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"to clarify that they’re used only in code that interoperates with Objective-C.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Removed the discussion of explicitly using ","type":"text"},{"type":"codeVoice","code":"let"},{"type":"text","text":" in function parameters"},{"text":" ","type":"text"},{"text":"from the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Removed the discussion of the ","type":"text"},{"type":"codeVoice","code":"Boolean"},{"text":" protocol","type":"text"},{"type":"text","text":" "},{"text":"from the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"text":"now that the protocol has been removed from the Swift standard library.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Corrected the discussion of the ","type":"text"},{"type":"codeVoice","code":"@NSApplicationMain"},{"text":" attribute","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"text":" section.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2016-03-21"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 2.2.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about how to conditionally compile code","type":"text"},{"type":"text","text":" "},{"text":"depending on the version of Swift being used","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about how to distinguish"},{"text":" ","type":"text"},{"text":"between methods or initializers whose names differ","type":"text"},{"type":"text","text":" "},{"type":"text","text":"only by the names of their arguments"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Added information about the ","type":"text"},{"code":"#selector","type":"codeVoice"},{"type":"text","text":" syntax"},{"text":" ","type":"text"},{"type":"text","text":"for Objective-C selectors"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression","type":"reference","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of associated types","type":"text"},{"type":"text","text":" "},{"text":"to use the ","type":"text"},{"type":"codeVoice","code":"associatedtype"},{"type":"text","text":" keyword"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Associated-Type-Declaration","isActive":true},{"type":"text","text":" sections."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated information about initializers that return "},{"type":"codeVoice","code":"nil"},{"text":" ","type":"text"},{"type":"text","text":"before the instance is fully initialized"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"text":"doc:Initialization#Failable-Initializers","type":"text"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about comparing tuples","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:BasicOperators#Comparison-Operators","type":"text"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about using keywords as external parameter names"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Keywords-and-Punctuation"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion of the ","type":"text"},{"code":"@objc","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"text":" section to note that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"enumerations and enumeration cases can use this attribute."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:LexicalStructure#Operators"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"with discussion of custom operators that contain a dot."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a note"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"that rethrowing functions can’t directly throw errors.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about property observers being called"},{"text":" ","type":"text"},{"text":"when you pass a property as an in-out parameter.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a section about error handling"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","type":"reference","isActive":true},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated figures in the"},{"text":" ","type":"text"},{"type":"text","text":"doc:AutomaticReferenceCounting#Weak-References"},{"type":"text","text":" "},{"text":"section to show the deallocation process more clearly.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Removed discussion of C-style "},{"code":"for","type":"codeVoice"},{"type":"text","text":" loops,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"++"},{"type":"text","text":" prefix and postfix operators,"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"type":"codeVoice","code":"--"},{"type":"text","text":" prefix and postfix operators."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Removed discussion of variable function arguments"},{"text":" ","type":"text"},{"text":"and the special syntax for curried functions.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2015-10-20"}],"type":"strong"}]},{"items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 2.1.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:StringsAndCharacters#String-Interpolation"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","isActive":true},{"text":" sections","type":"text"},{"type":"text","text":" "},{"text":"now that string interpolations can contain string literals.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:Closures#Escaping-Closures"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"with information about the ","type":"text"},{"type":"codeVoice","code":"@noescape"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" "},{"type":"text","text":"and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"reference","isActive":true},{"type":"text","text":" sections"},{"text":" ","type":"text"},{"type":"text","text":"with information about tvOS."}]}]},{"content":[{"inlineContent":[{"text":"Added information about the behavior of in-out parameters","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:Declarations#In-Out-Parameters"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information to the ","type":"text"},{"type":"text","text":"doc:Expressions#Capture-Lists"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"about how values specified in closure capture lists are captured.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"section to clarify how assignment through optional chaining"},{"type":"text","text":" "},{"type":"text","text":"behaves."}]}]},{"content":[{"inlineContent":[{"text":"Improved the discussion of autoclosures","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"text","text":"doc:Closures#Autoclosures"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added an example that uses the "},{"type":"codeVoice","code":"??"},{"text":" operator","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","isActive":true},{"text":" chapter.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2015-09-16"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 2.0."}]}]},{"content":[{"inlineContent":[{"text":"Added information about error handling","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling"},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","isActive":true,"type":"reference"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Throw-Statement"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Defer-Statement","type":"reference","isActive":true},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Try-Operator","type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:ErrorHandling#Representing-and-Throwing-Errors"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"text":"now that all types can conform to the ","type":"text"},{"code":"ErrorType","type":"codeVoice"},{"text":" protocol.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the new "},{"code":"try?","type":"codeVoice"},{"text":" keyword","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:ErrorHandling#Converting-Errors-to-Optional-Values"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about recursive enumerations"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:Enumerations#Recursive-Enumerations","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","isActive":true},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about API availability checking"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:ControlFlow#Checking-API-Availability"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Availability-Condition","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","type":"reference","isActive":true},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the new ","type":"text"},{"code":"guard","type":"codeVoice"},{"text":" statement","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:ControlFlow#Early-Exit"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true,"type":"reference"},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Guard-Statement"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","type":"reference","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about protocol extensions"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions","type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about access control for unit testing"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"text","text":"doc:AccessControl#Access-Levels-for-Unit-Test-Targets"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","type":"reference","isActive":true},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the new optional pattern","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:Patterns#Optional-Pattern"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:ControlFlow#Repeat-While"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"with information about the "},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"-"},{"code":"while","type":"codeVoice"},{"text":" loop.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","isActive":true,"type":"reference"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"text":"now that ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" no longer conforms"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"code":"CollectionType","type":"codeVoice"},{"type":"text","text":" protocol from the Swift standard library."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the new Swift standard library","type":"text"},{"type":"text","text":" "},{"code":"print(_:separator:terminator)","type":"codeVoice"},{"type":"text","text":" function"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:TheBasics#Printing-Constants-and-Variables"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the behavior"},{"type":"text","text":" "},{"text":"of enumeration cases with ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" raw values"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"text":"doc:Enumerations#Implicitly-Assigned-Raw-Values","type":"text"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations"},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","isActive":true,"type":"reference"},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"type":"codeVoice","code":"@autoclosure"},{"text":" attribute —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"including its "},{"code":"@autoclosure(escaping)","type":"codeVoice"},{"type":"text","text":" form —"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:Closures#Autoclosures","type":"text"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about the "},{"code":"@available","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"codeVoice","code":"@warn_unused_result"},{"text":" attributes.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Type-Attributes","type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with information about the ","type":"text"},{"type":"codeVoice","code":"@convention"},{"type":"text","text":" attribute."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added an example of using multiple optional bindings"},{"type":"text","text":" "},{"text":"with a ","type":"text"},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:TheBasics#Optional-Binding","type":"text"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"about how concatenating string literals using the ","type":"text"},{"type":"codeVoice","code":"+"},{"type":"text","text":" operator"},{"type":"text","text":" "},{"type":"text","text":"happens at compile time."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type","type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about comparing metatype values and using them"},{"text":" ","type":"text"},{"type":"text","text":"to construct instances with initializer expressions."}]}]},{"content":[{"inlineContent":[{"text":"Added a note to the ","type":"text"},{"text":"doc:TheBasics#Debugging-with-Assertions","type":"text"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"about when user-defined assertions are disabled.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of the ","type":"text"},{"code":"@NSManaged","type":"codeVoice"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that the attribute can be applied to certain instance methods."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:Functions#Variadic-Parameters","type":"text"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that variadic parameters can be declared in any position"},{"text":" ","type":"text"},{"type":"text","text":"in a function’s parameter list."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:Initialization#Overriding-a-Failable-Initializer","type":"text"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"about how a nonfailable initializer can delegate"},{"text":" ","type":"text"},{"text":"up to a failable initializer","type":"text"},{"text":" ","type":"text"},{"text":"by force-unwrapping the result of the superclass’s initializer.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about using enumeration cases as functions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type","type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about explicitly referencing an initializer"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Initializer-Expression","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about build configuration","type":"text"},{"type":"text","text":" "},{"text":"and line control statements","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compiler-Control-Statements"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about constructing class instances from metatype values."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the"},{"type":"text","text":" "},{"text":"doc:AutomaticReferenceCounting#Weak-References","type":"text"},{"type":"text","text":" "},{"text":"section about weak references being unsuitable for caching.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated a note in the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"to mention that stored type properties are lazily initialized.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Closures#Capturing-Values"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to clarify how variables and constants are captured in closures."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to describe when you can apply the ","type":"text"},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" attribute to classes."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"text","text":"doc:ErrorHandling#Handling-Errors"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"about the performance of executing a "},{"type":"codeVoice","code":"throw"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"text":"Added similar information about the ","type":"text"},{"code":"do","type":"codeVoice"},{"text":" statement","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"with information about stored and computed type properties"},{"type":"text","text":" "},{"type":"text","text":"for classes, structures, and enumerations."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement","type":"reference"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with information about labeled break statements."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated a note in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to clarify the behavior of "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" and "},{"code":"didSet","type":"codeVoice"},{"type":"text","text":" observers."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a note to the "},{"text":"doc:AccessControl#Access-Levels","type":"text"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about the scope of "},{"type":"codeVoice","code":"private"},{"type":"text","text":" access."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a note to the"},{"text":" ","type":"text"},{"type":"text","text":"doc:AutomaticReferenceCounting#Weak-References"},{"type":"text","text":" "},{"text":"section about the differences in weak references","type":"text"},{"type":"text","text":" "},{"type":"text","text":"between garbage collected systems and ARC."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the"},{"text":" ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#Special-Characters-in-String-Literals"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"with a more precise definition of Unicode scalars.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"inlineContent":[{"text":"2015-04-08","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 1.2."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift now has a native ","type":"text"},{"code":"Set","type":"codeVoice"},{"text":" collection type.","type":"text"},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Sets","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@autoclosure"},{"text":" is now an attribute of the parameter declaration,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"not its type."},{"type":"text","text":" "},{"type":"text","text":"There’s also a new "},{"code":"@noescape","type":"codeVoice"},{"text":" parameter declaration attribute.","type":"text"},{"text":" ","type":"text"},{"text":"For more information, see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Type methods and properties now use the "},{"code":"static","type":"codeVoice"},{"type":"text","text":" keyword"},{"text":" ","type":"text"},{"text":"as a declaration modifier.","type":"text"},{"text":" ","type":"text"},{"text":"For more information see ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Variable-Properties"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Swift now includes the "},{"type":"codeVoice","code":"as?"},{"text":" and ","type":"text"},{"code":"as!","type":"codeVoice"},{"type":"text","text":" failable downcast operators."},{"text":" ","type":"text"},{"text":"For more information,","type":"text"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new guide section about"},{"text":" ","type":"text"},{"text":"doc:StringsAndCharacters#String-Indices","type":"text"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Removed the overflow division ("},{"type":"codeVoice","code":"&\/"},{"type":"text","text":") and"},{"text":" ","type":"text"},{"text":"overflow remainder (","type":"text"},{"code":"&%","type":"codeVoice"},{"type":"text","text":") operators"},{"type":"text","text":" "},{"text":"from ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Overflow-Operators"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the rules for constant and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"constant property declaration and initialization."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the definition of Unicode scalars in string literals."},{"type":"text","text":" "},{"text":"See ","type":"text"},{"text":"doc:StringsAndCharacters#Special-Characters-in-String-Literals","type":"text"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Updated ","type":"text"},{"text":"doc:BasicOperators#Range-Operators","type":"text"},{"type":"text","text":" to note that"},{"type":"text","text":" "},{"text":"a half-open range with the same start and end index will be empty.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated ","type":"text"},{"type":"text","text":"doc:Closures#Closures-Are-Reference-Types"},{"type":"text","text":" to clarify"},{"type":"text","text":" "},{"type":"text","text":"the capturing rules for variables."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Value-Overflow"},{"text":" to clarify","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the overflow behavior of signed and unsigned integers"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration"},{"type":"text","text":" to clarify"},{"type":"text","text":" "},{"type":"text","text":"protocol declaration scope and members."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"text":"doc:AutomaticReferenceCounting#Defining-a-Capture-List","type":"text"},{"text":" ","type":"text"},{"text":"to clarify the syntax for","type":"text"},{"type":"text","text":" "},{"text":"weak and unowned references in closure capture lists.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated "},{"text":"doc:LexicalStructure#Operators","type":"text"},{"text":" to explicitly mention","type":"text"},{"type":"text","text":" "},{"type":"text","text":"examples of supported characters for custom operators,"},{"type":"text","text":" "},{"type":"text","text":"such as those in the Mathematical Operators, Miscellaneous Symbols,"},{"type":"text","text":" "},{"type":"text","text":"and Dingbats Unicode blocks."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Constants can now be declared without being initialized"},{"type":"text","text":" "},{"type":"text","text":"in local function scope."},{"type":"text","text":" "},{"text":"They must have a set value before first use.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"In an initializer, constant properties can now only assign a value once.","type":"text"},{"text":" ","type":"text"},{"text":"For more information,","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"type":"text","text":"doc:Initialization#Assigning-Constant-Properties-During-Initialization"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Multiple optional bindings can now appear in a single ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"text":"as a comma-separated list of assignment expressions.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For more information, see "},{"text":"doc:TheBasics#Optional-Binding","type":"text"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Optional-Chaining-Expression"},{"text":" ","type":"text"},{"text":"must appear within a postfix expression.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Protocol casts are no longer limited to "},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" protocols."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Type casts that can fail at runtime"},{"type":"text","text":" "},{"text":"now use the ","type":"text"},{"code":"as?","type":"codeVoice"},{"type":"text","text":" or "},{"code":"as!","type":"codeVoice"},{"type":"text","text":" operator,"},{"type":"text","text":" "},{"type":"text","text":"and type casts that are guaranteed not to fail use the "},{"type":"codeVoice","code":"as"},{"type":"text","text":" operator."},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Type-Casting-Operators","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"2014-10-16","type":"text"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 1.1."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a full guide to "},{"type":"text","text":"doc:Initialization#Failable-Initializers"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a description of "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Failable-Initializer-Requirements","isActive":true},{"text":" ","type":"text"},{"text":"for protocols.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Constants and variables of type "},{"type":"codeVoice","code":"Any"},{"text":" can now contain","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"function instances. Updated the example in "},{"type":"text","text":"doc:TypeCasting#Type-Casting-for-Any-and-AnyObject"},{"text":" ","type":"text"},{"text":"to show how to check for and cast to a function type","type":"text"},{"type":"text","text":" "},{"text":"within a ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" statement.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Enumerations with raw values"},{"text":" ","type":"text"},{"type":"text","text":"now have a "},{"type":"codeVoice","code":"rawValue"},{"type":"text","text":" property rather than a "},{"type":"codeVoice","code":"toRaw()"},{"text":" method","type":"text"},{"type":"text","text":" "},{"text":"and a failable initializer with a ","type":"text"},{"type":"codeVoice","code":"rawValue"},{"type":"text","text":" parameter"},{"type":"text","text":" "},{"type":"text","text":"rather than a "},{"type":"codeVoice","code":"fromRaw()"},{"type":"text","text":" method."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"text","text":"doc:Enumerations#Raw-Values"},{"type":"text","text":" "},{"type":"text","text":"and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new reference section about","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:Declarations#Failable-Initializers"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which can trigger initialization failure.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Custom operators can now contain the ","type":"text"},{"code":"?","type":"codeVoice"},{"type":"text","text":" character."},{"type":"text","text":" "},{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:LexicalStructure#Operators"},{"text":" reference to describe","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the revised rules."},{"text":" ","type":"text"},{"text":"Removed a duplicate description of the valid set of operator characters","type":"text"},{"type":"text","text":" "},{"text":"from ","type":"text"},{"text":"doc:AdvancedOperators#Custom-Operators","type":"text"},{"text":".","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2014-08-18","type":"text"}]}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"New document that describes Swift 1.0,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Apple’s new programming language for building iOS and OS X apps."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a new section about"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Initializer-Requirements","type":"reference"},{"text":" in protocols.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a new section about "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"doc:TheBasics#Assertions-and-Preconditions","type":"text"},{"text":" can now use string interpolation.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Removed a note to the contrary."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the"},{"type":"text","text":" "},{"text":"doc:StringsAndCharacters#Concatenating-Strings-and-Characters","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to reflect the fact that ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values"},{"type":"text","text":" "},{"type":"text","text":"can no longer be combined with the addition operator ("},{"type":"codeVoice","code":"+"},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or addition assignment operator ("},{"code":"+=","type":"codeVoice"},{"text":").","type":"text"},{"type":"text","text":" "},{"text":"These operators are now used only with ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" values."},{"type":"text","text":" "},{"text":"Use the ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" type’s ","type":"text"},{"code":"append(_:)","type":"codeVoice"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"to append a single "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value onto the end of a string."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"code":"availability","type":"codeVoice"},{"type":"text","text":" attribute to"},{"type":"text","text":" "},{"type":"text","text":"the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"doc:TheBasics#Optionals","type":"text"},{"text":" no longer implicitly evaluate to","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"text":" when they have a value and ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":" when they do not,"},{"type":"text","text":" "},{"type":"text","text":"to avoid confusion when working with optional "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":" values."},{"type":"text","text":" "},{"text":"Instead, make an explicit check against ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" ","type":"text"},{"text":"with the ","type":"text"},{"type":"codeVoice","code":"=="},{"text":" or ","type":"text"},{"code":"!=","type":"codeVoice"},{"type":"text","text":" operators"},{"type":"text","text":" "},{"type":"text","text":"to find out if an optional contains a value."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift now has a ","type":"text"},{"type":"text","text":"doc:BasicOperators#Nil-Coalescing-Operator"},{"type":"text","text":" "},{"text":"(","type":"text"},{"code":"a ?? b","type":"codeVoice"},{"text":"), which unwraps an optional’s value if it exists,","type":"text"},{"type":"text","text":" "},{"text":"or returns a default value if the optional is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated and expanded"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"text","text":"doc:StringsAndCharacters#Comparing-Strings"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to reflect and demonstrate that string and character comparison"},{"text":" ","type":"text"},{"type":"text","text":"and prefix \/ suffix comparison are now based on"},{"type":"text","text":" "},{"type":"text","text":"Unicode canonical equivalence of extended grapheme clusters."}]}]},{"content":[{"inlineContent":[{"text":"You can now try to set a property’s value, assign to a subscript,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or call a mutating method or operator through"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","type":"reference","isActive":true},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The information about","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"has been updated accordingly,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the examples of checking for method call success in"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Calling-Methods-Through-Optional-Chaining","isActive":true},{"type":"text","text":" "},{"type":"text","text":"have been expanded to show how to check for property setting success."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new section about","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Subscripts-of-Optional-Type","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"through optional chaining.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:CollectionTypes#Accessing-and-Modifying-an-Array"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"to note that you can no longer append a single item to an array","type":"text"},{"type":"text","text":" "},{"text":"with the ","type":"text"},{"code":"+=","type":"codeVoice"},{"text":" operator.","type":"text"},{"text":" ","type":"text"},{"text":"Instead, use the ","type":"text"},{"code":"append(_:)","type":"codeVoice"},{"type":"text","text":" method,"},{"text":" ","type":"text"},{"text":"or append a single-item array with the ","type":"text"},{"code":"+=","type":"codeVoice"},{"text":" operator.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added a note that the start value ","type":"text"},{"code":"a","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"for the "},{"text":"doc:BasicOperators#Range-Operators","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"a...b"},{"type":"text","text":" and "},{"code":"a..<b","type":"codeVoice"},{"type":"text","text":" "},{"text":"must not be greater than the end value ","type":"text"},{"code":"b","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Rewrote the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","type":"reference"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"to remove its introductory coverage of initializer overrides."},{"text":" ","type":"text"},{"text":"This chapter now focuses more on the addition of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"new functionality in a subclass,"},{"type":"text","text":" "},{"type":"text","text":"and the modification of existing functionality with overrides."},{"text":" ","type":"text"},{"text":"The chapter’s example of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:Inheritance#Overriding-Property-Getters-and-Setters"},{"text":" ","type":"text"},{"text":"has been rewritten to show how to override a ","type":"text"},{"type":"codeVoice","code":"description"},{"type":"text","text":" property."},{"type":"text","text":" "},{"text":"(The examples of modifying an inherited property’s default value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in a subclass initializer have been moved to"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","isActive":true,"type":"reference"},{"text":" chapter.)","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the","type":"text"},{"type":"text","text":" "},{"text":"doc:Initialization#Initializer-Inheritance-and-Overriding","type":"text"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"to note that overrides of a designated initializer","type":"text"},{"type":"text","text":" "},{"text":"must now be marked with the ","type":"text"},{"code":"override","type":"codeVoice"},{"text":" modifier.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:Initialization#Required-Initializers"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to note that the "},{"type":"codeVoice","code":"required"},{"type":"text","text":" modifier is now written before"},{"type":"text","text":" "},{"type":"text","text":"every subclass implementation of a required initializer,"},{"text":" ","type":"text"},{"type":"text","text":"and that the requirements for required initializers"},{"type":"text","text":" "},{"type":"text","text":"can now be satisfied by automatically inherited initializers."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Infix ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Operator-Methods"},{"text":" no longer require","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"@infix","type":"codeVoice"},{"type":"text","text":" attribute."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@prefix"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@postfix"},{"text":" attributes","type":"text"},{"type":"text","text":" "},{"text":"for ","type":"text"},{"text":"doc:AdvancedOperators#Prefix-and-Postfix-Operators","type":"text"},{"text":" ","type":"text"},{"text":"have been replaced by ","type":"text"},{"type":"codeVoice","code":"prefix"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"postfix"},{"type":"text","text":" declaration modifiers."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note about the order in which"},{"text":" ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Prefix-and-Postfix-Operators"},{"text":" are applied","type":"text"},{"type":"text","text":" "},{"text":"when both a prefix and a postfix operator are applied to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the same operand."}]}]},{"content":[{"inlineContent":[{"text":"Operator functions for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:AdvancedOperators#Compound-Assignment-Operators"},{"type":"text","text":" no longer use"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"@assignment"},{"text":" attribute when defining the function.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The order in which modifiers are specified when defining"},{"type":"text","text":" "},{"text":"doc:AdvancedOperators#Custom-Operators","type":"text"},{"type":"text","text":" has changed."},{"type":"text","text":" "},{"text":"You now write ","type":"text"},{"type":"codeVoice","code":"prefix operator"},{"type":"text","text":" rather than "},{"code":"operator prefix","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"for example.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"type":"codeVoice","code":"dynamic"},{"text":" declaration modifier","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Added information about how type inference works","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added more information about curried functions."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new chapter about "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","type":"reference","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","type":"reference"},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"text":"to reflect the fact that Swift’s ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":" type now represents","type":"text"},{"type":"text","text":" "},{"text":"a single Unicode extended grapheme cluster.","type":"text"},{"text":" ","type":"text"},{"text":"Includes a new section on","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:StringsAndCharacters#Extended-Grapheme-Clusters"},{"text":" ","type":"text"},{"type":"text","text":"and more information about"},{"type":"text","text":" "},{"text":"doc:StringsAndCharacters#Unicode-Scalar-Values","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"text","text":"doc:StringsAndCharacters#Comparing-Strings"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:StringsAndCharacters#String-Literals","type":"text"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"to note that Unicode scalars inside string literals","type":"text"},{"type":"text","text":" "},{"text":"are now written as ","type":"text"},{"code":"\\u{n}","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"where "},{"type":"codeVoice","code":"n"},{"type":"text","text":" is a hexadecimal number between 0 and 10FFFF,"},{"type":"text","text":" "},{"type":"text","text":"the range of Unicode’s codespace."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" "},{"code":"length","type":"codeVoice"},{"type":"text","text":" property is now mapped onto"},{"text":" ","type":"text"},{"type":"text","text":"Swift’s native "},{"code":"String","type":"codeVoice"},{"text":" type as ","type":"text"},{"type":"codeVoice","code":"utf16Count"},{"text":", not ","type":"text"},{"code":"utf16count","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Swift’s native "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type no longer has"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"uppercaseString"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"lowercaseString"},{"type":"text","text":" property."},{"text":" ","type":"text"},{"text":"The corresponding section in","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},{"type":"text","text":" "},{"type":"text","text":"has been removed, and various code examples have been updated."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added a new section about","type":"text"},{"text":" ","type":"text"},{"text":"doc:Initialization#Initializer-Parameters-Without-Argument-Labels","type":"text"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new section about","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:Initialization#Required-Initializers"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about "},{"type":"text","text":"doc:Functions#Optional-Tuple-Return-Types"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:TheBasics#Type-Annotations","type":"text"},{"text":" section to note that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"multiple related variables can be defined on a single line"},{"type":"text","text":" "},{"text":"with one type annotation.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"@optional","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"@lazy"},{"type":"text","text":", "},{"code":"@final","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"@required"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"type":"text","text":"are now the "},{"code":"optional","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"lazy"},{"text":", ","type":"text"},{"code":"final","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"required","type":"codeVoice"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the entire book to refer to ","type":"text"},{"code":"..<","type":"codeVoice"},{"type":"text","text":" as"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"text":"doc:BasicOperators#Half-Open-Range-Operator","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(rather than the “half-closed range operator”)."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:CollectionTypes#Accessing-and-Modifying-a-Dictionary"},{"text":" ","type":"text"},{"type":"text","text":"section to note that "},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":" now has"},{"text":" ","type":"text"},{"type":"text","text":"a Boolean "},{"code":"isEmpty","type":"codeVoice"},{"type":"text","text":" property."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Clarified the full list of characters that can be used"},{"text":" ","type":"text"},{"text":"when defining ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Custom-Operators"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"nil"},{"text":" and the Booleans ","type":"text"},{"type":"codeVoice","code":"true"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":" are now "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" type now has full value semantics."},{"text":" ","type":"text"},{"type":"text","text":"Updated the information about "},{"text":"doc:CollectionTypes#Mutability-of-Collections","type":"text"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"text":"doc:CollectionTypes#Arrays","type":"text"},{"type":"text","text":" to reflect the new approach."},{"type":"text","text":" "},{"text":"Also clarified the assignment and copy behavior for strings arrays and dictionaries.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"doc:CollectionTypes#Array-Type-Shorthand-Syntax"},{"text":" is now written as","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"[SomeType]"},{"type":"text","text":" rather than "},{"code":"SomeType[]","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a new section about "},{"text":"doc:CollectionTypes#Dictionary-Type-Shorthand-Syntax","type":"text"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which is written as "},{"type":"codeVoice","code":"[KeyType: ValueType]"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new section about ","type":"text"},{"text":"doc:CollectionTypes#Hash-Values-for-Set-Types","type":"text"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Examples of "},{"type":"text","text":"doc:Closures#Closure-Expressions"},{"type":"text","text":" now use"},{"text":" ","type":"text"},{"text":"the global ","type":"text"},{"type":"codeVoice","code":"sorted(_:_:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"rather than the global "},{"code":"sort(_:_:)","type":"codeVoice"},{"text":" function,","type":"text"},{"type":"text","text":" "},{"text":"to reflect the new array value semantics.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the information about ","type":"text"},{"text":"doc:Initialization#Memberwise-Initializers-for-Structure-Types","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to clarify that the memberwise structure initializer is made available"},{"type":"text","text":" "},{"type":"text","text":"even if a structure’s stored properties don’t have default values."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated to "},{"type":"codeVoice","code":"..<"},{"text":" rather than ","type":"text"},{"type":"codeVoice","code":".."},{"type":"text","text":" "},{"text":"for the ","type":"text"},{"text":"doc:BasicOperators#Half-Open-Range-Operator","type":"text"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added an example of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type"},{"text":".","type":"text"}],"type":"paragraph"}]}]}]}],"metadata":{"title":"Historial de Revisiones"},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Throw-Statement":{"url":"\/documentation\/the-swift-programming-language\/statements#Throw-Statement","kind":"section","title":"Throw Statement","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Throw-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Line-Control-Statement":{"url":"\/documentation\/the-swift-programming-language\/statements#Line-Control-Statement","kind":"section","title":"Line Control Statement","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Line-Control-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Await-Operator":{"url":"\/documentation\/the-swift-programming-language\/expressions#Await-Operator","kind":"section","title":"Await Operator","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Await-Operator"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#main":{"url":"\/documentation\/the-swift-programming-language\/attributes#main","kind":"section","title":"main","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#main"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#frozen":{"kind":"section","abstract":[],"url":"\/documentation\/the-swift-programming-language\/attributes#frozen","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen","title":"frozen","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"abstract":[{"type":"text","text":"Subclass to add or override functionality."}],"kind":"article","type":"topic","role":"article","title":"Herencia","url":"\/documentation\/the-swift-programming-language\/inheritance","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Type-Properties":{"kind":"section","title":"Type Properties","url":"\/documentation\/the-swift-programming-language\/properties#Type-Properties","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Function-Call-Expression":{"type":"topic","kind":"section","abstract":[],"title":"Function Call Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Function-Call-Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Function-Call-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Key-Path-Expression":{"url":"\/documentation\/the-swift-programming-language\/expressions#Key-Path-Expression","kind":"section","title":"Key-Path Expression","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Conditionally-Conforming-to-a-Protocol":{"url":"\/documentation\/the-swift-programming-language\/protocols#Conditionally-Conforming-to-a-Protocol","kind":"section","title":"Conditionally Conforming to a Protocol","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Conditionally-Conforming-to-a-Protocol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Result-Transformations":{"url":"\/documentation\/the-swift-programming-language\/attributes#Result-Transformations","kind":"section","title":"Result Transformations","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Result-Transformations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Extension-Declaration":{"url":"\/documentation\/the-swift-programming-language\/declarations#Extension-Declaration","title":"Extension Declaration","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Where-Clauses":{"title":"Generic Where Clauses","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses","type":"topic","kind":"section","abstract":[],"url":"\/documentation\/the-swift-programming-language\/generics#Generic-Where-Clauses"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","abstract":[{"type":"text","text":"Group expressions and control the flow of execution."}],"title":"Statements","url":"\/documentation\/the-swift-programming-language\/statements","type":"topic","kind":"article","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Precedence-Group-Declaration":{"kind":"section","title":"Precedence Group Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Precedence-Group-Declaration","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Precedence-Group-Declaration","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"title":"Operadores avanzados","abstract":[{"type":"text","text":"Define custom operators, perform bitwise operations, and use builder syntax."}],"url":"\/documentation\/the-swift-programming-language\/advancedoperators","type":"topic","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switch-Statement":{"url":"\/documentation\/the-swift-programming-language\/statements#Switch-Statement","kind":"section","title":"Switch Statement","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switch-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#available":{"url":"\/documentation\/the-swift-programming-language\/attributes#available","kind":"section","title":"available","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#available"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GuidedTour":{"type":"topic","abstract":[{"type":"text","text":"Explora las características y la sintaxis de Swift."}],"title":"Un Recorrido por Swift","role":"article","url":"\/documentation\/the-swift-programming-language\/guidedtour","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Associated-Types-with-a-Generic-Where-Clause":{"title":"Associated Types with a Generic Where Clause","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types-with-a-Generic-Where-Clause","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics#Associated-Types-with-a-Generic-Where-Clause","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Declaration-Modifiers":{"url":"\/documentation\/the-swift-programming-language\/declarations#Declaration-Modifiers","kind":"section","title":"Declaration Modifiers","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Methods-with-Special-Names":{"type":"topic","kind":"section","abstract":[],"title":"Methods with Special Names","url":"\/documentation\/the-swift-programming-language\/declarations#Methods-with-Special-Names","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Methods-with-Special-Names"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Function-Type":{"url":"\/documentation\/the-swift-programming-language\/types#Function-Type","title":"Function Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Wrappers":{"url":"\/documentation\/the-swift-programming-language\/properties#Property-Wrappers","kind":"section","title":"Property Wrappers","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Wrappers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Calling-Methods-Through-Optional-Chaining":{"url":"\/documentation\/the-swift-programming-language\/optionalchaining#Calling-Methods-Through-Optional-Chaining","kind":"section","title":"Calling Methods Through Optional Chaining","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Calling-Methods-Through-Optional-Chaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure":{"abstract":[{"type":"text","text":"Use the lowest-level components of the syntax."}],"kind":"article","type":"topic","role":"article","title":"Lexical Structure","url":"\/documentation\/the-swift-programming-language\/lexicalstructure","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Optional-Protocol-Requirements":{"kind":"section","title":"Optional Protocol Requirements","url":"\/documentation\/the-swift-programming-language\/protocols#Optional-Protocol-Requirements","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Optional-Protocol-Requirements","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","url":"\/documentation\/the-swift-programming-language","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","type":"topic","role":"collection","title":"The Swift Programming Language (5.9)","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Properties-Through-Optional-Chaining":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","title":"Accessing Properties Through Optional Chaining","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Properties-Through-Optional-Chaining","kind":"section","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#dynamicMemberLookup":{"kind":"section","title":"dynamicMemberLookup","url":"\/documentation\/the-swift-programming-language\/attributes#dynamicMemberLookup","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicMemberLookup","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Break-Statement":{"kind":"section","abstract":[],"url":"\/documentation\/the-swift-programming-language\/statements#Break-Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement","title":"Break Statement","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Enumerations-with-Cases-of-Any-Type":{"url":"\/documentation\/the-swift-programming-language\/declarations#Enumerations-with-Cases-of-Any-Type","kind":"section","title":"Enumerations with Cases of Any Type","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GenericParametersAndArguments":{"abstract":[{"type":"text","text":"Generalize declarations to abstract away concrete types."}],"kind":"article","type":"topic","role":"article","title":"Generic Parameters and Arguments","url":"\/documentation\/the-swift-programming-language\/genericparametersandarguments","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes":{"role":"article","title":"Attributes","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","abstract":[{"type":"text","text":"Add information to declarations and types."}],"url":"\/documentation\/the-swift-programming-language\/attributes","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Availability-Condition":{"url":"\/documentation\/the-swift-programming-language\/statements#Availability-Condition","kind":"section","title":"Availability Condition","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Availability-Condition"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"abstract":[{"type":"text","text":"Store and manipulate text."}],"kind":"article","type":"topic","role":"article","title":"Cadenas y caracteres","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Identifiers":{"abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Identifiers","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers","title":"Identifiers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Asynchronous-Functions-and-Methods":{"url":"\/documentation\/the-swift-programming-language\/declarations#Asynchronous-Functions-and-Methods","abstract":[],"kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods","title":"Asynchronous Functions and Methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations":{"type":"topic","abstract":[{"type":"text","text":"Introduce types, operators, variables, and other names and constructs."}],"title":"Declaraciones","role":"article","url":"\/documentation\/the-swift-programming-language\/declarations","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"abstract":[{"type":"text","text":"Perform asynchronous operations."}],"kind":"article","type":"topic","role":"article","title":"Concurrencia","url":"\/documentation\/the-swift-programming-language\/concurrency","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Guard-Statement":{"kind":"section","title":"Guard Statement","url":"\/documentation\/the-swift-programming-language\/statements#Guard-Statement","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Guard-Statement","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Do-Statement":{"url":"\/documentation\/the-swift-programming-language\/statements#Do-Statement","kind":"section","title":"Do Statement","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Failable-Initializer-Requirements":{"url":"\/documentation\/the-swift-programming-language\/protocols#Failable-Initializer-Requirements","kind":"section","title":"Failable Initializer Requirements","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Failable-Initializer-Requirements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Function-Declaration":{"type":"topic","kind":"section","abstract":[],"title":"Function Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Function-Declaration","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Actor-Declaration":{"url":"\/documentation\/the-swift-programming-language\/declarations#Actor-Declaration","kind":"section","title":"Actor Declaration","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Actor-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Functions-that-Never-Return":{"kind":"section","abstract":[],"url":"\/documentation\/the-swift-programming-language\/declarations#Functions-that-Never-Return","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return","title":"Functions that Never Return","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Protocol-Declaration":{"url":"\/documentation\/the-swift-programming-language\/declarations#Protocol-Declaration","kind":"section","title":"Protocol Declaration","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Sets":{"url":"\/documentation\/the-swift-programming-language\/collectiontypes#Sets","kind":"section","title":"Sets","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Sets"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints":{"url":"\/documentation\/the-swift-programming-language\/generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","kind":"section","title":"Using a Protocol in Its Associated Type’s Constraints","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Class-Only-Protocols":{"title":"Class-Only Protocols","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Class-Only-Protocols","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Compile-Time-Diagnostic-Statement":{"url":"\/documentation\/the-swift-programming-language\/statements#Compile-Time-Diagnostic-Statement","kind":"section","title":"Compile-Time Diagnostic Statement","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compile-Time-Diagnostic-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Type-Attributes":{"url":"\/documentation\/the-swift-programming-language\/attributes#Type-Attributes","kind":"section","title":"Type Attributes","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Type-Attributes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Self-Type":{"url":"\/documentation\/the-swift-programming-language\/types#Self-Type","kind":"section","title":"Self Type","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Literals":{"url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Literals","kind":"section","title":"Literals","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Defer-Statement":{"url":"\/documentation\/the-swift-programming-language\/statements#Defer-Statement","kind":"section","title":"Defer Statement","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Defer-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Optional-Chaining-Expression":{"url":"\/documentation\/the-swift-programming-language\/expressions#Optional-Chaining-Expression","kind":"section","title":"Optional-Chaining Expression","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Optional-Chaining-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Macros":{"type":"topic","abstract":[{"type":"text","text":"Use macros to generate code at compile time."}],"title":"Macros","role":"article","url":"\/documentation\/the-swift-programming-language\/macros","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Implicit-Conversion-to-a-Pointer-Type":{"type":"topic","kind":"section","abstract":[],"title":"Implicit Conversion to a Pointer Type","url":"\/documentation\/the-swift-programming-language\/expressions#Implicit-Conversion-to-a-Pointer-Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Conversion-to-a-Pointer-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type":{"url":"\/documentation\/the-swift-programming-language\/declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","kind":"section","title":"Enumerations with Cases of a Raw-Value Type","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Compiler-Control-Statements":{"url":"\/documentation\/the-swift-programming-language\/statements#Compiler-Control-Statements","kind":"section","title":"Compiler Control Statements","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compiler-Control-Statements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Type-Alias-Declaration":{"kind":"section","title":"Type Alias Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Type-Alias-Declaration","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Alias-Declaration","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Literal-Expression":{"kind":"section","abstract":[],"url":"\/documentation\/the-swift-programming-language\/expressions#Literal-Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","title":"Literal Expression","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Sendable":{"url":"\/documentation\/the-swift-programming-language\/attributes#Sendable","kind":"section","title":"Sendable","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Sendable"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Rethrowing-Functions-and-Methods":{"url":"\/documentation\/the-swift-programming-language\/declarations#Rethrowing-Functions-and-Methods","abstract":[],"kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","title":"Rethrowing Functions and Methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"url":"\/documentation\/the-swift-programming-language\/functions","kind":"article","type":"topic","title":"Funciones","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","abstract":[{"type":"text","text":"Define and call functions, label their arguments, and use their return values."}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Stored-Variable-Observers-and-Property-Observers":{"url":"\/documentation\/the-swift-programming-language\/declarations#Stored-Variable-Observers-and-Property-Observers","kind":"section","title":"Stored Variable Observers and Property Observers","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Stored-Variable-Observers-and-Property-Observers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"kind":"article","abstract":[{"type":"text","text":"Structure code with branches, loops, and early exits."}],"type":"topic","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","title":"Flujo de control","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Type-Variable-Properties":{"url":"\/documentation\/the-swift-programming-language\/declarations#Type-Variable-Properties","kind":"section","title":"Type Variable Properties","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Variable-Properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"type":"topic","abstract":[{"type":"text","text":"Define requirements that conforming types must implement."}],"kind":"article","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","title":"Protocols","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"kind":"article","url":"\/documentation\/the-swift-programming-language\/generics","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","type":"topic","role":"article","title":"Generics","abstract":[{"text":"Write code that works for multiple types and specify requirements for those types.","type":"text"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","abstract":[{"type":"text","text":"Structure your code to avoid conflicts when accessing memory."}],"title":"Memory Safety","url":"\/documentation\/the-swift-programming-language\/memorysafety","type":"topic","kind":"article","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","role":"article","url":"\/documentation\/the-swift-programming-language\/enumerations","title":"Enumeraciones","kind":"article","abstract":[{"type":"text","text":"Model custom types that define a list of possible values."}],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Patterns":{"abstract":[{"text":"Match and destructure values.","type":"text"}],"title":"Patrones","kind":"article","url":"\/documentation\/the-swift-programming-language\/patterns","type":"topic","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Selector-Expression":{"url":"\/documentation\/the-swift-programming-language\/expressions#Selector-Expression","kind":"section","title":"Selector Expression","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Constant-Declaration":{"url":"\/documentation\/the-swift-programming-language\/declarations#Constant-Declaration","kind":"section","title":"Constant Declaration","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#unknown":{"url":"\/documentation\/the-swift-programming-language\/attributes#unknown","kind":"section","title":"unknown","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unknown"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions":{"type":"topic","abstract":[{"type":"text","text":"Access, modify, and assign values."}],"title":"Expressions","role":"article","url":"\/documentation\/the-swift-programming-language\/expressions","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Conditional-Expression":{"url":"\/documentation\/the-swift-programming-language\/expressions#Conditional-Expression","kind":"section","title":"Conditional Expression","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Conditional-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Protocol-Associated-Type-Declaration":{"kind":"section","title":"Protocol Associated Type Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Protocol-Associated-Type-Declaration","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Associated-Type-Declaration","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Subscripts":{"url":"\/documentation\/the-swift-programming-language\/generics#Generic-Subscripts","kind":"section","title":"Generic Subscripts","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Try-Operator":{"url":"\/documentation\/the-swift-programming-language\/expressions#Try-Operator","kind":"section","title":"Try Operator","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Try-Operator"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"abstract":[{"type":"text","text":"Set the initial values for a type’s stored properties and perform one-time setup."}],"kind":"article","type":"topic","role":"article","title":"Inicialización","url":"\/documentation\/the-swift-programming-language\/initialization","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#String-Literals":{"url":"\/documentation\/the-swift-programming-language\/lexicalstructure#String-Literals","kind":"section","title":"String Literals","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Explicit-Member-Expression":{"kind":"section","abstract":[],"url":"\/documentation\/the-swift-programming-language\/expressions#Explicit-Member-Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","title":"Explicit Member Expression","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Keywords-and-Punctuation":{"url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Keywords-and-Punctuation","kind":"section","title":"Keywords and Punctuation","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Keywords-and-Punctuation"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Regular-Expression-Literals":{"url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Regular-Expression-Literals","kind":"section","title":"Regular Expression Literals","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Regular-Expression-Literals"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocol-Composition":{"kind":"section","title":"Protocol Composition","url":"\/documentation\/the-swift-programming-language\/protocols#Protocol-Composition","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Initializer-Expression":{"url":"\/documentation\/the-swift-programming-language\/expressions#Initializer-Expression","kind":"section","title":"Initializer Expression","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Initializer-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"abstract":[{"type":"text","text":"Hide implementation details about a value’s type."}],"kind":"article","type":"topic","role":"article","title":"Opaque and Boxed Types","url":"\/documentation\/the-swift-programming-language\/opaquetypes","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Initializer-Requirements":{"url":"\/documentation\/the-swift-programming-language\/protocols#Initializer-Requirements","kind":"section","title":"Initializer Requirements","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Initializer-Requirements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"abstract":[{"type":"text","text":"Model the lifetime of objects and their relationships."}],"kind":"article","type":"topic","role":"article","title":"Conteo automático de referencias","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Observers":{"kind":"section","title":"Property Observers","url":"\/documentation\/the-swift-programming-language\/properties#Property-Observers","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Contextual-Where-Clauses":{"url":"\/documentation\/the-swift-programming-language\/generics#Contextual-Where-Clauses","kind":"section","title":"Contextual Where Clauses","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Contextual-Where-Clauses"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Metatype-Type":{"url":"\/documentation\/the-swift-programming-language\/types#Metatype-Type","kind":"section","title":"Metatype Type","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Conditional-Compilation-Block":{"url":"\/documentation\/the-swift-programming-language\/statements#Conditional-Compilation-Block","kind":"section","title":"Conditional Compilation Block","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"type":"topic","abstract":[{"type":"text","text":"Respond to and recover from errors."}],"title":"Manejo de errores","role":"article","url":"\/documentation\/the-swift-programming-language\/errorhandling","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extensions-with-a-Generic-Where-Clause":{"title":"Extensions with a Generic Where Clause","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics#Extensions-with-a-Generic-Where-Clause","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Implicit-Member-Expression":{"kind":"section","title":"Implicit Member Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Implicit-Member-Expression","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Member-Expression","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#resultBuilder":{"title":"resultBuilder","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#resultBuilder","url":"\/documentation\/the-swift-programming-language\/attributes#resultBuilder","kind":"section","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extending-a-Generic-Type":{"url":"\/documentation\/the-swift-programming-language\/generics#Extending-a-Generic-Type","kind":"section","title":"Extending a Generic Type","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Any-Type":{"url":"\/documentation\/the-swift-programming-language\/types#Any-Type","kind":"section","title":"Any Type","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Any-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Protocol-Composition-Type":{"kind":"section","title":"Protocol Composition Type","url":"\/documentation\/the-swift-programming-language\/types#Protocol-Composition-Type","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"type":"topic","abstract":[{"type":"text","text":"Manage the visibility of code by declaration, file, and module."}],"title":"Control de acceso","role":"article","url":"\/documentation\/the-swift-programming-language\/accesscontrol","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"type":"topic","abstract":[{"type":"text","text":"Trabaja con tipos comunes de datos y escribe sintaxis básica."}],"title":"Fundamentos","role":"article","url":"\/documentation\/the-swift-programming-language\/thebasics","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"abstract":[{"type":"text","text":"Access members of an optional value without unwrapping."}],"kind":"article","type":"topic","role":"article","title":"Optional Chaining","url":"\/documentation\/the-swift-programming-language\/optionalchaining","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Associated-Types":{"kind":"section","title":"Associated Types","url":"\/documentation\/the-swift-programming-language\/generics#Associated-Types","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types":{"type":"topic","abstract":[{"type":"text","text":"Use built-in named and compound types."}],"title":"Types","role":"article","url":"\/documentation\/the-swift-programming-language\/types","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Subscripts-of-Optional-Type":{"url":"\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Subscripts-of-Optional-Type","kind":"section","title":"Accessing Subscripts of Optional Type","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Subscripts-of-Optional-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#dynamicCallable":{"kind":"section","title":"dynamicCallable","url":"\/documentation\/the-swift-programming-language\/attributes#dynamicCallable","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicCallable","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switching-Over-Future-Enumeration-Cases":{"type":"topic","abstract":[],"url":"\/documentation\/the-swift-programming-language\/statements#Switching-Over-Future-Enumeration-Cases","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","title":"Switching Over Future Enumeration Cases"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#unchecked":{"url":"\/documentation\/the-swift-programming-language\/attributes#unchecked","kind":"section","title":"unchecked","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unchecked"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Type-Casting-Operators":{"url":"\/documentation\/the-swift-programming-language\/expressions#Type-Casting-Operators","kind":"section","title":"Type-Casting Operators","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Type-Casting-Operators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#While-Statement":{"url":"\/documentation\/the-swift-programming-language\/statements#While-Statement","kind":"section","title":"While Statement","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#While-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Declaration-Attributes":{"url":"\/documentation\/the-swift-programming-language\/attributes#Declaration-Attributes","kind":"section","title":"Declaration Attributes","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Checking-for-Protocol-Conformance":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/protocols#Checking-for-Protocol-Conformance","type":"topic","kind":"section","title":"Checking for Protocol Conformance","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocol-Extensions":{"url":"\/documentation\/the-swift-programming-language\/protocols#Protocol-Extensions","kind":"section","title":"Protocol Extensions","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions"}}}