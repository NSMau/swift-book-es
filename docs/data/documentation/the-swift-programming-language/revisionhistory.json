{"kind":"article","primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2023-09-18"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.9."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" expressions"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","type":"reference","isActive":true},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Conditional-Expression","type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros"},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"type":"text","text":"with information about generating code at compile time."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Expanded the discussion of optionals in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added an example of concurrency to ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about boxed protocol types"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","isActive":true},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about the ","type":"text"},{"type":"codeVoice","code":"buildPartialBlock(first:)"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"buildPartialBlock(accumulated:next:)","type":"codeVoice"},{"type":"text","text":" methods"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Result-Transformations","type":"reference","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added visionOS to the lists of platforms in","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#available","isActive":true},{"type":"text","text":" "},{"text":"and ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Formatted the formal grammar to use blank lines for grouping.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2023-03-30","type":"text"}]}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 5.8.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:ControlFlow#Deferred-Actions"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"text":"showing ","type":"text"},{"type":"codeVoice","code":"defer"},{"type":"text","text":" outside of error handling."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Adopted Swift-DocC for publication.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Minor corrections and additions throughout."}]}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2022-09-12"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 5.7.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:Concurrency#Sendable-Types"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"with information about sending data between actors and tasks,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and added information about the "},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":" and "},{"code":"@unchecked","type":"codeVoice"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Sendable"},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unchecked"},{"type":"text","text":" sections."}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Regular-Expression-Literals"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with information about creating a regular expression.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the short form of "},{"code":"if","type":"codeVoice"},{"type":"text","text":"-"},{"code":"let","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:TheBasics#Optional-Binding","type":"text"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about "},{"type":"codeVoice","code":"#unavailable"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"text":"doc:ControlFlow#Checking-API-Availability","type":"text"},{"text":" section.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2022-03-14"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.6."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about using "},{"type":"codeVoice","code":"#if"},{"type":"text","text":" "},{"text":"around chained method calls and other postfix expressions.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the visual styling of figures throughout."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2021-09-20"}]}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 5.5."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about asynchronous functions, tasks, and actors","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency"},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Actor-Declaration","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Await-Operator","isActive":true},{"text":" sections.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"with information about identifiers that start with an underscore.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2021-04-26","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 5.4."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:AdvancedOperators#Result-Builders"},{"type":"text","text":" "},{"type":"text","text":"and "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#resultBuilder","type":"reference"},{"type":"text","text":" sections"},{"type":"text","text":" "},{"text":"with information about result builders.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Conversion-to-a-Pointer-Type","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"with information about how in-out parameters"},{"text":" ","type":"text"},{"text":"can be implicitly converted to unsafe pointers in a function call.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Functions#Variadic-Parameters"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","isActive":true},{"text":" sections,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that a function can have multiple variadic parameters."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Member-Expression","type":"reference","isActive":true},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that implicit member expressions can be chained together."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2020-09-16","type":"text"}]}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 5.3."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about multiple trailing closures"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:Closures#Trailing-Closures"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"and added information about how trailing closures are matched to parameters"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Function-Call-Expression"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about synthesized implementations"},{"text":" ","type":"text"},{"type":"text","text":"of "},{"code":"Comparable","type":"codeVoice"},{"text":" for enumerations","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:Protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Contextual-Where-Clauses"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"now that you can write a generic ","type":"text"},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause in more places."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"type":"text","text":"doc:AutomaticReferenceCounting#Unowned-Optional-References"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about using unowned references with optional values."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"type":"codeVoice","code":"@main"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#main","type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added "},{"code":"#filePath","type":"codeVoice"},{"type":"text","text":" to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","isActive":true,"type":"reference"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and updated the discussion of "},{"type":"codeVoice","code":"#file"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:Closures#Escaping-Closures","type":"text"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"now that closures can refer to ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":" implicitly in more scenarios."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:ErrorHandling#Handling-Errors-Using-Do-Catch"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","isActive":true},{"type":"text","text":" sections,"},{"text":" ","type":"text"},{"type":"text","text":"now that a "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause can match against multiple errors."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added more information about ","type":"text"},{"code":"Any","type":"codeVoice"},{"type":"text","text":" "},{"text":"and moved it into the new ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Any-Type","type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","isActive":true,"type":"reference"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"text":"now that lazy properties can have observers.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration","isActive":true},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that members of an enumeration can satisfy protocol requirements."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Stored-Variable-Observers-and-Property-Observers"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to describe when the getter is called before the observer."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","isActive":true},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"to mention atomic operations."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"2020-03-24","type":"text"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.2."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about passing a key path instead of a closure"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Methods-with-Special-Names","type":"reference"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"with information about syntactic sugar the lets instances of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"classes, structures, and enumerations be used with function call syntax."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:Subscripts#Subscript-Options","type":"text"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"text":"now that subscripts support parameters with default values.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that the "},{"code":"Self","type":"codeVoice"},{"type":"text","text":" can be used in more contexts."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:TheBasics#Implicitly-Unwrapped-Optionals"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"to make it clearer that an implicitly unwrapped optional value","type":"text"},{"type":"text","text":" "},{"text":"can be used as either an optional or non-optional value.","type":"text"}]}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2019-09-10","type":"text"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 5.1.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about functions"},{"type":"text","text":" "},{"text":"that specify a protocol that their return value conforms to,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"instead of providing a specific named return type,"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","isActive":true,"type":"reference"},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about property wrappers","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Wrappers","isActive":true,"type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about enumerations and structures","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that are frozen for library evolution"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen","type":"reference","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:Functions#Functions-With-an-Implicit-Return"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"text","text":"doc:Properties#Shorthand-Getter-Declaration"},{"text":" sections","type":"text"},{"type":"text","text":" "},{"text":"with information about functions that omit ","type":"text"},{"type":"codeVoice","code":"return"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about using subscripts on types"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Subscripts#Type-Subscripts"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:Patterns#Enumeration-Case-Pattern"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"now that an enumeration case pattern can match an optional value.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:Initialization#Memberwise-Initializers-for-Structure-Types","type":"text"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that memberwise initializers support"},{"text":" ","type":"text"},{"type":"text","text":"omitting parameters for properties that have a default value."}]}]},{"content":[{"inlineContent":[{"text":"Added information about dynamic members","type":"text"},{"text":" ","type":"text"},{"text":"that are looked up by key path at runtime","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicMemberLookup","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added "},{"code":"macCatalyst","type":"codeVoice"},{"type":"text","text":" to the list of target environments"},{"type":"text","text":" "},{"text":"in ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type","isActive":true,"type":"reference"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that "},{"type":"codeVoice","code":"Self"},{"type":"text","text":" can be used to refer to the type"},{"text":" ","type":"text"},{"type":"text","text":"introduced by the current class, structure, or enumeration declaration."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2019-03-25"}]}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 5.0."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"text":"doc:StringsAndCharacters#Extended-String-Delimiters","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"and updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"with information about extended string delimiters."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicCallable","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with information about dynamically calling instances as functions"},{"type":"text","text":" "},{"text":"using the ","type":"text"},{"type":"codeVoice","code":"dynamicCallable"},{"type":"text","text":" attribute."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unknown"},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","isActive":true},{"text":" sections","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with information about handling future enumeration cases"},{"text":" ","type":"text"},{"type":"text","text":"in switch statements using"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"unknown"},{"text":" switch case attribute.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the identity key path ("},{"code":"\\.self","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about using the less than ("},{"code":"<","type":"codeVoice"},{"type":"text","text":") operator"},{"text":" ","type":"text"},{"type":"text","text":"in platform conditions to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2018-09-17"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 4.2."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about accessing all of an enumeration’s cases"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:Enumerations#Iterating-over-Enumeration-Cases","type":"text"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about ","type":"text"},{"code":"#error","type":"codeVoice"},{"type":"text","text":" and "},{"code":"#warning","type":"codeVoice"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compile-Time-Diagnostic-Statement"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about inlining","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"under the "},{"code":"inlinable","type":"codeVoice"},{"text":" and  ","type":"text"},{"code":"usableFromInline","type":"codeVoice"},{"type":"text","text":" attributes."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about members that are looked up by name at runtime","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"under the ","type":"text"},{"code":"dynamicMemberLookup","type":"codeVoice"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"code":"requires_stored_property_inits","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"warn_unqualified_access","type":"codeVoice"},{"text":" attributes","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about how to conditionally compile code"},{"text":" ","type":"text"},{"text":"depending on the Swift compiler version being used","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about ","type":"text"},{"code":"#dsohandle","type":"codeVoice"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","isActive":true},{"text":" section.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2018-03-29"}],"type":"strong"}]},{"items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 4.1.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about synthesized implementations of equivalence operators"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:AdvancedOperators#Equivalence-Operators","type":"text"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about conditional protocol conformance","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","isActive":true,"type":"reference"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"and to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Conditionally-Conforming-to-a-Protocol"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about recursive protocol constraints","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"canImport()","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"targetEnvironment()","type":"codeVoice"},{"type":"text","text":" platform conditions"},{"text":" ","type":"text"},{"text":"to ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"2017-12-04","type":"text"}],"type":"strong"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 4.0.3."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that key paths support subscript components."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2017-09-19"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 4.0.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about exclusive access to memory"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety"},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types-with-a-Generic-Where-Clause","type":"reference","isActive":true},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that you can use generic "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clauses"},{"text":" ","type":"text"},{"text":"to constrain associated types.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about multiline string literals"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:StringsAndCharacters#String-Literals","type":"text"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","isActive":true},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"text":"and to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","type":"reference","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"code":"objc","type":"codeVoice"},{"text":" attribute","type":"text"},{"text":" ","type":"text"},{"text":"in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"now that this attribute is inferred in fewer places.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Subscripts"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that subscripts can be generic."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","type":"reference","isActive":true},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"text":"now that protocol composition types can contain a superclass requirement.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of protocol extensions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"now that "},{"type":"codeVoice","code":"final"},{"text":" isn’t allowed in them.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about preconditions and fatal errors","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:TheBasics#Assertions-and-Preconditions"},{"type":"text","text":" section."}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2017-03-27"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 3.1.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"with information about extensions that include requirements.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added examples of iterating over a range","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:ControlFlow#For-In-Loops"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added an example of failable numeric conversions","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:Initialization#Failable-Initializers","type":"text"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"about using the ","type":"text"},{"code":"available","type":"codeVoice"},{"type":"text","text":" attribute with a Swift language version."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to note that argument labels aren’t allowed when writing a function type."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of Swift language version numbers"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"reference","isActive":true},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that an optional patch number is allowed."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the discussion","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that Swift distinguishes between functions that take multiple parameters"},{"text":" ","type":"text"},{"type":"text","text":"and functions that take a single parameter of a tuple type."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Removed the Dynamic Type Expression section"},{"type":"text","text":" "},{"type":"text","text":"from the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","isActive":true},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that "},{"type":"codeVoice","code":"type(of:)"},{"text":" is a Swift standard library function.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"2016-10-27","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 3.0.1.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of weak and unowned references"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting"},{"text":" chapter.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":", "},{"type":"codeVoice","code":"unowned(safe)"},{"type":"text","text":", and "},{"code":"unowned(unsafe)","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"declaration modifiers"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","type":"reference","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"text","text":"doc:TypeCasting#Type-Casting-for-Any-and-AnyObject"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"about using an optional value when a value of type ","type":"text"},{"type":"codeVoice","code":"Any"},{"type":"text","text":" is expected."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions"},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to separate the discussion of parenthesized expressions and tuple expressions."}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2016-09-13"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 3.0.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of functions in the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","type":"reference"},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","isActive":true,"type":"reference"},{"type":"text","text":" section to note that"},{"type":"text","text":" "},{"type":"text","text":"all parameters get an argument label by default."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the discussion of operators","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"text":"now that you implement them as type methods instead of as global functions.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"code":"open","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"fileprivate"},{"type":"text","text":" access-level modifiers"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","isActive":true},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of "},{"type":"codeVoice","code":"inout"},{"text":" in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to note that it appears in front of a parameter’s type"},{"type":"text","text":" "},{"type":"text","text":"instead of in front of a parameter’s name."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"code":"@noescape","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"@autoclosure"},{"type":"text","text":" attributes"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"text","text":"doc:Closures#Escaping-Closures"},{"type":"text","text":" and "},{"type":"text","text":"doc:Closures#Autoclosures"},{"type":"text","text":" sections"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","isActive":true},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"text":"now that they’re type attributes, rather than declaration attributes.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about operator precedence groups","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:AdvancedOperators#Precedence-for-Custom-Infix-Operators","type":"text"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","isActive":true,"type":"reference"},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"text":"and to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Precedence-Group-Declaration","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated discussion throughout","type":"text"},{"type":"text","text":" "},{"text":"to use macOS instead of OS X,","type":"text"},{"type":"text","text":" "},{"code":"Error","type":"codeVoice"},{"text":" instead of ","type":"text"},{"type":"codeVoice","code":"ErrorProtocol"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"and protocol names such as ","type":"text"},{"code":"ExpressibleByStringLiteral","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"instead of "},{"type":"codeVoice","code":"StringLiteralConvertible"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"and in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","type":"reference","isActive":true},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"text":"now that generic ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" clauses are written at the end of a declaration.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the discussion in the ","type":"text"},{"type":"text","text":"doc:Closures#Escaping-Closures"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that closures are nonescaping by default."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","isActive":true},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#While-Statement","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","isActive":true,"type":"reference"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"now that "},{"code":"if","type":"codeVoice"},{"text":", ","type":"text"},{"code":"while","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"guard"},{"text":" statements","type":"text"},{"type":"text","text":" "},{"text":"use a comma-separated list of conditions without ","type":"text"},{"code":"where","type":"codeVoice"},{"type":"text","text":" clauses."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about switch cases that have multiple patterns"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:ControlFlow#Switch","type":"text"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","type":"reference"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switch-Statement"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of function types"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"now that function argument labels are no longer part of a function’s type.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of protocol composition types"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition","type":"reference","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true,"type":"reference"},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","type":"reference","isActive":true},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"text":"to use the new ","type":"text"},{"type":"codeVoice","code":"Protocol1 & Protocol2"},{"text":" syntax.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion in the Dynamic Type Expression section"},{"type":"text","text":" "},{"text":"to use the new ","type":"text"},{"code":"type(of:)","type":"codeVoice"},{"text":" syntax for dynamic type expressions.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of line control statements"},{"type":"text","text":" "},{"type":"text","text":"to use the "},{"type":"codeVoice","code":"#sourceLocation(file:line:)"},{"type":"text","text":" syntax"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Line-Control-Statement"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the discussion in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return"},{"type":"text","text":" "},{"text":"to use the new ","type":"text"},{"code":"Never","type":"codeVoice"},{"type":"text","text":" type."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about playground literals"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"type":"text","text":"doc:Declarations#In-Out-Parameters"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to note that only nonescaping closures can capture in-out parameters."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion about default parameters","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"text","text":"doc:Functions#Default-Parameter-Values"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that they can’t be reordered in function calls."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated attribute arguments to use a colon","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about throwing an error"},{"type":"text","text":" "},{"type":"text","text":"inside the catch block of a rethrowing function"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about accessing the selector","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of an Objective-C property’s getter or setter"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression","isActive":true,"type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Alias-Declaration","type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"about generic type aliases and using type aliases inside of protocols."}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion of function types in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"to note that parentheses around the parameter types are required.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes"},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to note that the "},{"code":"@IBAction","type":"codeVoice"},{"text":", ","type":"text"},{"code":"@IBOutlet","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"@NSManaged"},{"text":" attributes","type":"text"},{"type":"text","text":" "},{"text":"imply the ","type":"text"},{"code":"@objc","type":"codeVoice"},{"type":"text","text":" attribute."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"@GKInspectable"},{"text":" attribute","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of optional protocol requirements"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Optional-Protocol-Requirements","type":"reference","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"to clarify that they’re used only in code that interoperates with Objective-C.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Removed the discussion of explicitly using "},{"type":"codeVoice","code":"let"},{"text":" in function parameters","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"from the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Removed the discussion of the ","type":"text"},{"type":"codeVoice","code":"Boolean"},{"type":"text","text":" protocol"},{"type":"text","text":" "},{"type":"text","text":"from the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","isActive":true},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"text":"now that the protocol has been removed from the Swift standard library.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Corrected the discussion of the ","type":"text"},{"code":"@NSApplicationMain","type":"codeVoice"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"text":" section.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"2016-03-21","type":"text"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 2.2."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about how to conditionally compile code","type":"text"},{"type":"text","text":" "},{"text":"depending on the version of Swift being used","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about how to distinguish"},{"text":" ","type":"text"},{"type":"text","text":"between methods or initializers whose names differ"},{"text":" ","type":"text"},{"type":"text","text":"only by the names of their arguments"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"type":"codeVoice","code":"#selector"},{"text":" syntax","type":"text"},{"type":"text","text":" "},{"text":"for Objective-C selectors","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of associated types","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to use the "},{"type":"codeVoice","code":"associatedtype"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Associated-Type-Declaration","isActive":true,"type":"reference"},{"text":" sections.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated information about initializers that return ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"text":"before the instance is fully initialized","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"text","text":"doc:Initialization#Failable-Initializers"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about comparing tuples","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:BasicOperators#Comparison-Operators"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about using keywords as external parameter names"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Keywords-and-Punctuation"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"type":"codeVoice","code":"@objc"},{"text":" attribute","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true,"type":"reference"},{"type":"text","text":" section to note that"},{"type":"text","text":" "},{"type":"text","text":"enumerations and enumeration cases can use this attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:LexicalStructure#Operators","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with discussion of custom operators that contain a dot."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"that rethrowing functions can’t directly throw errors.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","type":"reference","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"about property observers being called","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when you pass a property as an in-out parameter."}]}]},{"content":[{"inlineContent":[{"text":"Added a section about error handling","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","type":"reference"},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated figures in the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:AutomaticReferenceCounting#Weak-References"},{"text":" ","type":"text"},{"text":"section to show the deallocation process more clearly.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Removed discussion of C-style ","type":"text"},{"type":"codeVoice","code":"for"},{"text":" loops,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"++"},{"type":"text","text":" prefix and postfix operators,"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"type":"codeVoice","code":"--"},{"text":" prefix and postfix operators.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Removed discussion of variable function arguments"},{"type":"text","text":" "},{"type":"text","text":"and the special syntax for curried functions."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2015-10-20"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 2.1.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:StringsAndCharacters#String-Interpolation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals"},{"text":" sections","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that string interpolations can contain string literals."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:Closures#Escaping-Closures"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"with information about the ","type":"text"},{"type":"codeVoice","code":"@noescape"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" "},{"text":"and ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true,"type":"reference"},{"type":"text","text":" sections"},{"text":" ","type":"text"},{"text":"with information about tvOS.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the behavior of in-out parameters"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:Declarations#In-Out-Parameters"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information to the "},{"type":"text","text":"doc:Expressions#Capture-Lists"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about how values specified in closure capture lists are captured."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","isActive":true},{"type":"text","text":" "},{"text":"section to clarify how assignment through optional chaining","type":"text"},{"type":"text","text":" "},{"text":"behaves.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Improved the discussion of autoclosures"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"text","text":"doc:Closures#Autoclosures"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added an example that uses the "},{"type":"codeVoice","code":"??"},{"text":" operator","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","type":"reference","isActive":true},{"text":" chapter.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2015-09-16","type":"text"}]}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 2.0.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about error handling"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","isActive":true},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","isActive":true,"type":"reference"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Throw-Statement","isActive":true},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Defer-Statement"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Try-Operator","isActive":true,"type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:ErrorHandling#Representing-and-Throwing-Errors"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that all types can conform to the "},{"code":"ErrorType","type":"codeVoice"},{"type":"text","text":" protocol."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the new "},{"code":"try?","type":"codeVoice"},{"text":" keyword","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:ErrorHandling#Converting-Errors-to-Optional-Values","type":"text"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about recursive enumerations"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"text":"doc:Enumerations#Recursive-Enumerations","type":"text"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","type":"reference","isActive":true},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations"},{"text":" chapter.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about API availability checking"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:ControlFlow#Checking-API-Availability","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Availability-Condition"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the new "},{"code":"guard","type":"codeVoice"},{"text":" statement","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:ControlFlow#Early-Exit","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Guard-Statement","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","type":"reference"},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about protocol extensions","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about access control for unit testing","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:AccessControl#Access-Levels-for-Unit-Test-Targets"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","isActive":true,"type":"reference"},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the new optional pattern","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:Patterns#Optional-Pattern","type":"text"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","type":"reference","isActive":true},{"text":" chapter.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:ControlFlow#Repeat-While"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with information about the "},{"type":"codeVoice","code":"repeat"},{"text":"-","type":"text"},{"code":"while","type":"codeVoice"},{"type":"text","text":" loop."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","type":"reference"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"now that "},{"type":"codeVoice","code":"String"},{"text":" no longer conforms","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"codeVoice","code":"CollectionType"},{"type":"text","text":" protocol from the Swift standard library."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the new Swift standard library","type":"text"},{"text":" ","type":"text"},{"code":"print(_:separator:terminator)","type":"codeVoice"},{"type":"text","text":" function"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:TheBasics#Printing-Constants-and-Variables"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the behavior"},{"text":" ","type":"text"},{"type":"text","text":"of enumeration cases with "},{"type":"codeVoice","code":"String"},{"text":" raw values","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:Enumerations#Implicitly-Assigned-Raw-Values"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","isActive":true},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations"},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"code":"@autoclosure","type":"codeVoice"},{"type":"text","text":" attribute —"},{"type":"text","text":" "},{"type":"text","text":"including its "},{"type":"codeVoice","code":"@autoclosure(escaping)"},{"type":"text","text":" form —"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:Closures#Autoclosures"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about the "},{"code":"@available","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"codeVoice","code":"@warn_unused_result"},{"type":"text","text":" attributes."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Type-Attributes","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about the "},{"code":"@convention","type":"codeVoice"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added an example of using multiple optional bindings"},{"type":"text","text":" "},{"text":"with a ","type":"text"},{"type":"codeVoice","code":"where"},{"text":" clause","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"about how concatenating string literals using the "},{"code":"+","type":"codeVoice"},{"text":" operator","type":"text"},{"type":"text","text":" "},{"type":"text","text":"happens at compile time."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"about comparing metatype values and using them","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to construct instances with initializer expressions."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"text":"doc:TheBasics#Debugging-with-Assertions","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about when user-defined assertions are disabled."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of the ","type":"text"},{"code":"@NSManaged","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that the attribute can be applied to certain instance methods."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Functions#Variadic-Parameters"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that variadic parameters can be declared in any position"},{"text":" ","type":"text"},{"type":"text","text":"in a function’s parameter list."}]}]},{"content":[{"inlineContent":[{"text":"Added information","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:Initialization#Overriding-a-Failable-Initializer"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about how a nonfailable initializer can delegate"},{"type":"text","text":" "},{"type":"text","text":"up to a failable initializer"},{"text":" ","type":"text"},{"text":"by force-unwrapping the result of the superclass’s initializer.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about using enumeration cases as functions","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about explicitly referencing an initializer"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Initializer-Expression","isActive":true},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about build configuration"},{"type":"text","text":" "},{"text":"and line control statements","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compiler-Control-Statements","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about constructing class instances from metatype values."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a note to the"},{"type":"text","text":" "},{"text":"doc:AutomaticReferenceCounting#Weak-References","type":"text"},{"type":"text","text":" "},{"text":"section about weak references being unsuitable for caching.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated a note in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to mention that stored type properties are lazily initialized.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:Closures#Capturing-Values","type":"text"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to clarify how variables and constants are captured in closures."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"to describe when you can apply the ","type":"text"},{"code":"@objc","type":"codeVoice"},{"type":"text","text":" attribute to classes."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"text":"doc:ErrorHandling#Handling-Errors","type":"text"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"about the performance of executing a "},{"type":"codeVoice","code":"throw"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"Added similar information about the "},{"type":"codeVoice","code":"do"},{"text":" statement","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"with information about stored and computed type properties"},{"text":" ","type":"text"},{"type":"text","text":"for classes, structures, and enumerations."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about labeled break statements."}]}]},{"content":[{"inlineContent":[{"text":"Updated a note in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","type":"reference","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to clarify the behavior of "},{"type":"codeVoice","code":"willSet"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observers."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the ","type":"text"},{"type":"text","text":"doc:AccessControl#Access-Levels"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"with information about the scope of ","type":"text"},{"type":"codeVoice","code":"private"},{"text":" access.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the"},{"type":"text","text":" "},{"type":"text","text":"doc:AutomaticReferenceCounting#Weak-References"},{"text":" ","type":"text"},{"type":"text","text":"section about the differences in weak references"},{"text":" ","type":"text"},{"type":"text","text":"between garbage collected systems and ARC."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the"},{"text":" ","type":"text"},{"text":"doc:StringsAndCharacters#Special-Characters-in-String-Literals","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with a more precise definition of Unicode scalars.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2015-04-08"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 1.2."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift now has a native ","type":"text"},{"code":"Set","type":"codeVoice"},{"text":" collection type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Sets","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@autoclosure"},{"text":" is now an attribute of the parameter declaration,","type":"text"},{"type":"text","text":" "},{"text":"not its type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"There’s also a new "},{"type":"codeVoice","code":"@noescape"},{"type":"text","text":" parameter declaration attribute."},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Type methods and properties now use the "},{"type":"codeVoice","code":"static"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"text":"as a declaration modifier.","type":"text"},{"type":"text","text":" "},{"text":"For more information see ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Variable-Properties","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift now includes the "},{"type":"codeVoice","code":"as?"},{"type":"text","text":" and "},{"code":"as!","type":"codeVoice"},{"text":" failable downcast operators.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For more information,"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new guide section about"},{"text":" ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#String-Indices"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Removed the overflow division (","type":"text"},{"type":"codeVoice","code":"&\/"},{"type":"text","text":") and"},{"text":" ","type":"text"},{"text":"overflow remainder (","type":"text"},{"type":"codeVoice","code":"&%"},{"text":") operators","type":"text"},{"text":" ","type":"text"},{"text":"from ","type":"text"},{"text":"doc:AdvancedOperators#Overflow-Operators","type":"text"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the rules for constant and"},{"text":" ","type":"text"},{"type":"text","text":"constant property declaration and initialization."},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the definition of Unicode scalars in string literals."},{"type":"text","text":" "},{"type":"text","text":"See "},{"type":"text","text":"doc:StringsAndCharacters#Special-Characters-in-String-Literals"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Updated ","type":"text"},{"type":"text","text":"doc:BasicOperators#Range-Operators"},{"text":" to note that","type":"text"},{"text":" ","type":"text"},{"text":"a half-open range with the same start and end index will be empty.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated "},{"type":"text","text":"doc:Closures#Closures-Are-Reference-Types"},{"text":" to clarify","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the capturing rules for variables."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated "},{"text":"doc:AdvancedOperators#Value-Overflow","type":"text"},{"type":"text","text":" to clarify"},{"text":" ","type":"text"},{"text":"the overflow behavior of signed and unsigned integers","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration","isActive":true,"type":"reference"},{"text":" to clarify","type":"text"},{"type":"text","text":" "},{"text":"protocol declaration scope and members.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated ","type":"text"},{"text":"doc:AutomaticReferenceCounting#Defining-a-Capture-List","type":"text"},{"type":"text","text":" "},{"text":"to clarify the syntax for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"weak and unowned references in closure capture lists."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated ","type":"text"},{"type":"text","text":"doc:LexicalStructure#Operators"},{"text":" to explicitly mention","type":"text"},{"text":" ","type":"text"},{"text":"examples of supported characters for custom operators,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"such as those in the Mathematical Operators, Miscellaneous Symbols,"},{"text":" ","type":"text"},{"text":"and Dingbats Unicode blocks.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Constants can now be declared without being initialized","type":"text"},{"text":" ","type":"text"},{"text":"in local function scope.","type":"text"},{"text":" ","type":"text"},{"text":"They must have a set value before first use.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For more information, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In an initializer, constant properties can now only assign a value once."},{"type":"text","text":" "},{"type":"text","text":"For more information,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"text","text":"doc:Initialization#Assigning-Constant-Properties-During-Initialization"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Multiple optional bindings can now appear in a single ","type":"text"},{"code":"if","type":"codeVoice"},{"text":" statement","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as a comma-separated list of assignment expressions."},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"text":"doc:TheBasics#Optional-Binding","type":"text"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Optional-Chaining-Expression"},{"text":" ","type":"text"},{"text":"must appear within a postfix expression.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Protocol casts are no longer limited to "},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" protocols."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Type casts that can fail at runtime"},{"type":"text","text":" "},{"type":"text","text":"now use the "},{"code":"as?","type":"codeVoice"},{"type":"text","text":" or "},{"code":"as!","type":"codeVoice"},{"type":"text","text":" operator,"},{"text":" ","type":"text"},{"text":"and type casts that are guaranteed not to fail use the ","type":"text"},{"type":"codeVoice","code":"as"},{"type":"text","text":" operator."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Type-Casting-Operators"},{"text":".","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"2014-10-16","type":"text"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 1.1.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a full guide to "},{"text":"doc:Initialization#Failable-Initializers","type":"text"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a description of ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Failable-Initializer-Requirements","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"for protocols."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Constants and variables of type "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" can now contain"},{"text":" ","type":"text"},{"type":"text","text":"function instances. Updated the example in "},{"type":"text","text":"doc:TypeCasting#Type-Casting-for-Any-and-AnyObject"},{"type":"text","text":" "},{"text":"to show how to check for and cast to a function type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"within a "},{"type":"codeVoice","code":"switch"},{"text":" statement.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Enumerations with raw values"},{"text":" ","type":"text"},{"text":"now have a ","type":"text"},{"code":"rawValue","type":"codeVoice"},{"type":"text","text":" property rather than a "},{"code":"toRaw()","type":"codeVoice"},{"type":"text","text":" method"},{"text":" ","type":"text"},{"type":"text","text":"and a failable initializer with a "},{"type":"codeVoice","code":"rawValue"},{"text":" parameter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"rather than a "},{"code":"fromRaw()","type":"codeVoice"},{"type":"text","text":" method."},{"text":" ","type":"text"},{"type":"text","text":"For more information, see "},{"text":"doc:Enumerations#Raw-Values","type":"text"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new reference section about","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"doc:Declarations#Failable-Initializers"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which can trigger initialization failure.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Custom operators can now contain the "},{"code":"?","type":"codeVoice"},{"type":"text","text":" character."},{"text":" ","type":"text"},{"type":"text","text":"Updated the "},{"text":"doc:LexicalStructure#Operators","type":"text"},{"text":" reference to describe","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the revised rules."},{"text":" ","type":"text"},{"type":"text","text":"Removed a duplicate description of the valid set of operator characters"},{"type":"text","text":" "},{"type":"text","text":"from "},{"type":"text","text":"doc:AdvancedOperators#Custom-Operators"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2014-08-18"}],"type":"strong"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"New document that describes Swift 1.0,"},{"type":"text","text":" "},{"text":"Apple’s new programming language for building iOS and OS X apps.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Initializer-Requirements"},{"text":" in protocols.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols","type":"reference","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"doc:TheBasics#Assertions-and-Preconditions"},{"type":"text","text":" can now use string interpolation."},{"type":"text","text":" "},{"text":"Removed a note to the contrary.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the"},{"type":"text","text":" "},{"text":"doc:StringsAndCharacters#Concatenating-Strings-and-Characters","type":"text"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"to reflect the fact that ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values"},{"type":"text","text":" "},{"type":"text","text":"can no longer be combined with the addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"or addition assignment operator ("},{"type":"codeVoice","code":"+="},{"type":"text","text":")."},{"text":" ","type":"text"},{"text":"These operators are now used only with ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Use the "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type’s "},{"code":"append(_:)","type":"codeVoice"},{"text":" method","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to append a single "},{"code":"Character","type":"codeVoice"},{"type":"text","text":" value onto the end of a string."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"code":"availability","type":"codeVoice"},{"type":"text","text":" attribute to"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"doc:TheBasics#Optionals","type":"text"},{"text":" no longer implicitly evaluate to","type":"text"},{"type":"text","text":" "},{"code":"true","type":"codeVoice"},{"text":" when they have a value and ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":" when they do not,"},{"text":" ","type":"text"},{"text":"to avoid confusion when working with optional ","type":"text"},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" values."},{"type":"text","text":" "},{"text":"Instead, make an explicit check against ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"code":"==","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"!="},{"type":"text","text":" operators"},{"text":" ","type":"text"},{"type":"text","text":"to find out if an optional contains a value."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Swift now has a "},{"type":"text","text":"doc:BasicOperators#Nil-Coalescing-Operator"},{"text":" ","type":"text"},{"type":"text","text":"("},{"code":"a ?? b","type":"codeVoice"},{"type":"text","text":"), which unwraps an optional’s value if it exists,"},{"text":" ","type":"text"},{"type":"text","text":"or returns a default value if the optional is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated and expanded"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"text","text":"doc:StringsAndCharacters#Comparing-Strings"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"to reflect and demonstrate that string and character comparison","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and prefix \/ suffix comparison are now based on"},{"text":" ","type":"text"},{"type":"text","text":"Unicode canonical equivalence of extended grapheme clusters."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now try to set a property’s value, assign to a subscript,"},{"type":"text","text":" "},{"text":"or call a mutating method or operator through","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The information about"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","isActive":true},{"text":" ","type":"text"},{"text":"has been updated accordingly,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the examples of checking for method call success in"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Calling-Methods-Through-Optional-Chaining","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"have been expanded to show how to check for property setting success.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a new section about"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Subscripts-of-Optional-Type","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"through optional chaining."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:CollectionTypes#Accessing-and-Modifying-an-Array"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"to note that you can no longer append a single item to an array","type":"text"},{"text":" ","type":"text"},{"text":"with the ","type":"text"},{"type":"codeVoice","code":"+="},{"type":"text","text":" operator."},{"text":" ","type":"text"},{"text":"Instead, use the ","type":"text"},{"code":"append(_:)","type":"codeVoice"},{"type":"text","text":" method,"},{"text":" ","type":"text"},{"type":"text","text":"or append a single-item array with the "},{"code":"+=","type":"codeVoice"},{"text":" operator.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note that the start value ","type":"text"},{"type":"codeVoice","code":"a"},{"type":"text","text":" "},{"type":"text","text":"for the "},{"type":"text","text":"doc:BasicOperators#Range-Operators"},{"type":"text","text":" "},{"type":"codeVoice","code":"a...b"},{"text":" and ","type":"text"},{"code":"a..<b","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"must not be greater than the end value "},{"code":"b","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Rewrote the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","isActive":true,"type":"reference"},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to remove its introductory coverage of initializer overrides."},{"text":" ","type":"text"},{"type":"text","text":"This chapter now focuses more on the addition of"},{"text":" ","type":"text"},{"type":"text","text":"new functionality in a subclass,"},{"type":"text","text":" "},{"type":"text","text":"and the modification of existing functionality with overrides."},{"text":" ","type":"text"},{"type":"text","text":"The chapter’s example of"},{"type":"text","text":" "},{"text":"doc:Inheritance#Overriding-Property-Getters-and-Setters","type":"text"},{"text":" ","type":"text"},{"text":"has been rewritten to show how to override a ","type":"text"},{"code":"description","type":"codeVoice"},{"text":" property.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(The examples of modifying an inherited property’s default value"},{"text":" ","type":"text"},{"type":"text","text":"in a subclass initializer have been moved to"},{"type":"text","text":" "},{"type":"text","text":"the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","type":"reference"},{"type":"text","text":" chapter.)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the"},{"text":" ","type":"text"},{"text":"doc:Initialization#Initializer-Inheritance-and-Overriding","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to note that overrides of a designated initializer"},{"type":"text","text":" "},{"type":"text","text":"must now be marked with the "},{"type":"codeVoice","code":"override"},{"type":"text","text":" modifier."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Initialization#Required-Initializers"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to note that the "},{"code":"required","type":"codeVoice"},{"type":"text","text":" modifier is now written before"},{"type":"text","text":" "},{"type":"text","text":"every subclass implementation of a required initializer,"},{"text":" ","type":"text"},{"text":"and that the requirements for required initializers","type":"text"},{"type":"text","text":" "},{"text":"can now be satisfied by automatically inherited initializers.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Infix ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Operator-Methods"},{"text":" no longer require","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"codeVoice","code":"@infix"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@prefix"},{"type":"text","text":" and "},{"code":"@postfix","type":"codeVoice"},{"text":" attributes","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for "},{"type":"text","text":"doc:AdvancedOperators#Prefix-and-Postfix-Operators"},{"type":"text","text":" "},{"type":"text","text":"have been replaced by "},{"code":"prefix","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"postfix","type":"codeVoice"},{"type":"text","text":" declaration modifiers."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note about the order in which"},{"type":"text","text":" "},{"text":"doc:AdvancedOperators#Prefix-and-Postfix-Operators","type":"text"},{"type":"text","text":" are applied"},{"text":" ","type":"text"},{"text":"when both a prefix and a postfix operator are applied to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the same operand."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Operator functions for"},{"type":"text","text":" "},{"type":"text","text":"doc:AdvancedOperators#Compound-Assignment-Operators"},{"type":"text","text":" no longer use"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"@assignment"},{"type":"text","text":" attribute when defining the function."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The order in which modifiers are specified when defining"},{"text":" ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Custom-Operators"},{"type":"text","text":" has changed."},{"text":" ","type":"text"},{"type":"text","text":"You now write "},{"type":"codeVoice","code":"prefix operator"},{"type":"text","text":" rather than "},{"code":"operator prefix","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"for example.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"dynamic"},{"type":"text","text":" declaration modifier"},{"text":" ","type":"text"},{"text":"in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about how type inference works","type":"text"},{"text":" ","type":"text"},{"text":"with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added more information about curried functions."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new chapter about ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to reflect the fact that Swift’s "},{"code":"Character","type":"codeVoice"},{"text":" type now represents","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a single Unicode extended grapheme cluster."},{"type":"text","text":" "},{"text":"Includes a new section on","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#Extended-Grapheme-Clusters"},{"text":" ","type":"text"},{"text":"and more information about","type":"text"},{"type":"text","text":" "},{"text":"doc:StringsAndCharacters#Unicode-Scalar-Values","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"text","text":"doc:StringsAndCharacters#Comparing-Strings"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:StringsAndCharacters#String-Literals"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"to note that Unicode scalars inside string literals","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are now written as "},{"type":"codeVoice","code":"\\u{n}"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"where "},{"code":"n","type":"codeVoice"},{"text":" is a hexadecimal number between 0 and 10FFFF,","type":"text"},{"text":" ","type":"text"},{"text":"the range of Unicode’s codespace.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"NSString"},{"text":" ","type":"text"},{"type":"codeVoice","code":"length"},{"type":"text","text":" property is now mapped onto"},{"type":"text","text":" "},{"text":"Swift’s native ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" type as "},{"code":"utf16Count","type":"codeVoice"},{"type":"text","text":", not "},{"code":"utf16count","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s native "},{"code":"String","type":"codeVoice"},{"type":"text","text":" type no longer has"},{"text":" ","type":"text"},{"type":"text","text":"an "},{"code":"uppercaseString","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"lowercaseString"},{"type":"text","text":" property."},{"text":" ","type":"text"},{"text":"The corresponding section in","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},{"type":"text","text":" "},{"type":"text","text":"has been removed, and various code examples have been updated."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new section about","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:Initialization#Initializer-Parameters-Without-Argument-Labels"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new section about","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:Initialization#Required-Initializers"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new section about ","type":"text"},{"text":"doc:Functions#Optional-Tuple-Return-Types","type":"text"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:TheBasics#Type-Annotations"},{"type":"text","text":" section to note that"},{"text":" ","type":"text"},{"type":"text","text":"multiple related variables can be defined on a single line"},{"text":" ","type":"text"},{"type":"text","text":"with one type annotation."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"@optional"},{"text":", ","type":"text"},{"code":"@lazy","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"@final"},{"type":"text","text":", and "},{"code":"@required","type":"codeVoice"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"type":"text","text":"are now the "},{"code":"optional","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"lazy"},{"type":"text","text":", "},{"type":"codeVoice","code":"final"},{"type":"text","text":", and "},{"code":"required","type":"codeVoice"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","type":"reference","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the entire book to refer to "},{"type":"codeVoice","code":"..<"},{"type":"text","text":" as"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"text","text":"doc:BasicOperators#Half-Open-Range-Operator"},{"type":"text","text":" "},{"type":"text","text":"(rather than the “half-closed range operator”)."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:CollectionTypes#Accessing-and-Modifying-a-Dictionary"},{"type":"text","text":" "},{"type":"text","text":"section to note that "},{"type":"codeVoice","code":"Dictionary"},{"text":" now has","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a Boolean "},{"type":"codeVoice","code":"isEmpty"},{"text":" property.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Clarified the full list of characters that can be used","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when defining "},{"type":"text","text":"doc:AdvancedOperators#Custom-Operators"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"code":"nil","type":"codeVoice"},{"text":" and the Booleans ","type":"text"},{"type":"codeVoice","code":"true"},{"text":" and ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" are now ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"code":"Array","type":"codeVoice"},{"type":"text","text":" type now has full value semantics."},{"text":" ","type":"text"},{"type":"text","text":"Updated the information about "},{"type":"text","text":"doc:CollectionTypes#Mutability-of-Collections"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"text","text":"doc:CollectionTypes#Arrays"},{"text":" to reflect the new approach.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Also clarified the assignment and copy behavior for strings arrays and dictionaries."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"doc:CollectionTypes#Array-Type-Shorthand-Syntax"},{"type":"text","text":" is now written as"},{"type":"text","text":" "},{"code":"[SomeType]","type":"codeVoice"},{"text":" rather than ","type":"text"},{"type":"codeVoice","code":"SomeType[]"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about "},{"text":"doc:CollectionTypes#Dictionary-Type-Shorthand-Syntax","type":"text"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which is written as "},{"code":"[KeyType: ValueType]","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about "},{"type":"text","text":"doc:CollectionTypes#Hash-Values-for-Set-Types"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Examples of ","type":"text"},{"type":"text","text":"doc:Closures#Closure-Expressions"},{"text":" now use","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the global "},{"type":"codeVoice","code":"sorted(_:_:)"},{"text":" function","type":"text"},{"text":" ","type":"text"},{"text":"rather than the global ","type":"text"},{"code":"sort(_:_:)","type":"codeVoice"},{"text":" function,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to reflect the new array value semantics."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the information about ","type":"text"},{"text":"doc:Initialization#Memberwise-Initializers-for-Structure-Types","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to clarify that the memberwise structure initializer is made available"},{"type":"text","text":" "},{"text":"even if a structure’s stored properties don’t have default values.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated to ","type":"text"},{"code":"..<","type":"codeVoice"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":".."},{"text":" ","type":"text"},{"type":"text","text":"for the "},{"type":"text","text":"doc:BasicOperators#Half-Open-Range-Operator"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added an example of "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type","isActive":true},{"type":"text","text":"."}]}]}],"type":"unorderedList"}]}],"metadata":{"title":"Historial de Revisiones"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/RevisionHistory"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"sections":[],"abstract":[{"text":"Review the recent changes to this book.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GenericParametersAndArguments":{"role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","abstract":[{"text":"Generalize declarations to abstract away concrete types.","type":"text"}],"type":"topic","title":"Generic Parameters and Arguments","url":"\/documentation\/the-swift-programming-language\/genericparametersandarguments","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Failable-Initializer-Requirements":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Failable-Initializer-Requirements","title":"Failable Initializer Requirements","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Failable-Initializer-Requirements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Checking-for-Protocol-Conformance":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Checking-for-Protocol-Conformance","title":"Checking for Protocol Conformance","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switching-Over-Future-Enumeration-Cases":{"kind":"section","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","title":"Switching Over Future Enumeration Cases","url":"\/documentation\/the-swift-programming-language\/statements#Switching-Over-Future-Enumeration-Cases"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Literals":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Literals","title":"Literals","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Identifiers":{"abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers","kind":"section","title":"Identifiers","type":"topic","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Identifiers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Protocol-Composition-Type":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/types#Protocol-Composition-Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type","title":"Protocol Composition Type","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","url":"\/documentation\/the-swift-programming-language\/accesscontrol","title":"Control de acceso","kind":"article","type":"topic","abstract":[{"text":"Manage the visibility of code by declaration, file, and module.","type":"text"}],"role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Methods-with-Special-Names":{"abstract":[],"kind":"section","title":"Methods with Special Names","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Methods-with-Special-Names","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Methods-with-Special-Names"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Subscripts":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/generics#Generic-Subscripts","title":"Generic Subscripts","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","abstract":[{"text":"Access members of an optional value without unwrapping.","type":"text"}],"type":"topic","title":"Optional Chaining","url":"\/documentation\/the-swift-programming-language\/optionalchaining","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extending-a-Generic-Type":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/generics#Extending-a-Generic-Type","title":"Extending a Generic Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Calling-Methods-Through-Optional-Chaining":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Calling-Methods-Through-Optional-Chaining","title":"Calling Methods Through Optional Chaining","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Calling-Methods-Through-Optional-Chaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions":{"role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","abstract":[{"text":"Access, modify, and assign values.","type":"text"}],"type":"topic","title":"Expressions","url":"\/documentation\/the-swift-programming-language\/expressions","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#dynamicCallable":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#dynamicCallable","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicCallable","title":"dynamicCallable","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Initializer-Expression":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Initializer-Expression","title":"Initializer Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Initializer-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Type-Variable-Properties":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Type-Variable-Properties","title":"Type Variable Properties","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Variable-Properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Sets":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Sets","title":"Sets","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Sets"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Properties-Through-Optional-Chaining":{"title":"Accessing Properties Through Optional Chaining","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Properties-Through-Optional-Chaining","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Stored-Variable-Observers-and-Property-Observers":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Stored-Variable-Observers-and-Property-Observers","title":"Stored Variable Observers and Property Observers","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Stored-Variable-Observers-and-Property-Observers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Observers":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties#Property-Observers","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","title":"Property Observers","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Declaration-Attributes":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#Declaration-Attributes","title":"Declaration Attributes","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","url":"\/documentation\/the-swift-programming-language\/statements","title":"Statements","kind":"article","type":"topic","abstract":[{"text":"Group expressions and control the flow of execution.","type":"text"}],"role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#frozen":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen","title":"frozen","abstract":[],"url":"\/documentation\/the-swift-programming-language\/attributes#frozen","kind":"section","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Class-Only-Protocols":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols","url":"\/documentation\/the-swift-programming-language\/protocols#Class-Only-Protocols","kind":"section","title":"Class-Only Protocols","type":"topic","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Function-Call-Expression":{"abstract":[],"kind":"section","title":"Function Call Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Function-Call-Expression","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Function-Call-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Rethrowing-Functions-and-Methods":{"title":"Rethrowing Functions and Methods","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Rethrowing-Functions-and-Methods","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Guard-Statement":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Guard-Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Guard-Statement","title":"Guard Statement","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"title":"Conteo automático de referencias","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","role":"article","abstract":[{"text":"Model the lifetime of objects and their relationships.","type":"text"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","abstract":[{"text":"Subclass to add or override functionality.","type":"text"}],"type":"topic","title":"Herencia","url":"\/documentation\/the-swift-programming-language\/inheritance","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#dynamicMemberLookup":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#dynamicMemberLookup","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicMemberLookup","title":"dynamicMemberLookup","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Metatype-Type":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/types#Metatype-Type","title":"Metatype Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Function-Declaration":{"abstract":[],"kind":"section","title":"Function Declaration","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Function-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Associated-Types":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics#Associated-Types","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types","title":"Associated Types","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Implicit-Conversion-to-a-Pointer-Type":{"abstract":[],"kind":"section","title":"Implicit Conversion to a Pointer Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Conversion-to-a-Pointer-Type","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Implicit-Conversion-to-a-Pointer-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Conditional-Compilation-Block":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Conditional-Compilation-Block","title":"Conditional Compilation Block","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Conditionally-Conforming-to-a-Protocol":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Conditionally-Conforming-to-a-Protocol","title":"Conditionally Conforming to a Protocol","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Conditionally-Conforming-to-a-Protocol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Any-Type":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/types#Any-Type","title":"Any Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Any-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Do-Statement":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Do-Statement","title":"Do Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Wrappers":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/properties#Property-Wrappers","title":"Property Wrappers","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Wrappers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GuidedTour":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","url":"\/documentation\/the-swift-programming-language\/guidedtour","title":"Un Recorrido por Swift","kind":"article","type":"topic","abstract":[{"text":"Explora las características y la sintaxis de Swift.","type":"text"}],"role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Function-Type":{"kind":"section","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","title":"Function Type","url":"\/documentation\/the-swift-programming-language\/types#Function-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","abstract":[{"type":"text","text":"Write code that works for multiple types and specify requirements for those types."}],"url":"\/documentation\/the-swift-programming-language\/generics","type":"topic","title":"Generics","kind":"article","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Compiler-Control-Statements":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Compiler-Control-Statements","title":"Compiler Control Statements","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compiler-Control-Statements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Self-Type":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/types#Self-Type","title":"Self Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","abstract":[{"text":"Store and manipulate text.","type":"text"}],"type":"topic","title":"Cadenas y caracteres","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"type":"topic","abstract":[{"type":"text","text":"Define and call functions, label their arguments, and use their return values."}],"role":"article","title":"Funciones","url":"\/documentation\/the-swift-programming-language\/functions","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"url":"\/documentation\/the-swift-programming-language","type":"topic","abstract":[],"kind":"article","title":"The Swift Programming Language (5.9)","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","role":"collection"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Protocol-Associated-Type-Declaration":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Protocol-Associated-Type-Declaration","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Associated-Type-Declaration","title":"Protocol Associated Type Declaration","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Conditional-Expression":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Conditional-Expression","title":"Conditional Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Conditional-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"title":"Concurrencia","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","abstract":[{"type":"text","text":"Perform asynchronous operations."}],"type":"topic","role":"article","kind":"article","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Optional-Chaining-Expression":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Optional-Chaining-Expression","title":"Optional-Chaining Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Optional-Chaining-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Where-Clauses":{"url":"\/documentation\/the-swift-programming-language\/generics#Generic-Where-Clauses","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses","type":"topic","title":"Generic Where Clauses"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Associated-Types-with-a-Generic-Where-Clause":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types-with-a-Generic-Where-Clause","url":"\/documentation\/the-swift-programming-language\/generics#Associated-Types-with-a-Generic-Where-Clause","type":"topic","abstract":[],"kind":"section","title":"Associated Types with a Generic Where Clause"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety","title":"Memory Safety","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","role":"article","kind":"article","abstract":[{"text":"Structure your code to avoid conflicts when accessing memory.","type":"text"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Break-Statement":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement","title":"Break Statement","abstract":[],"url":"\/documentation\/the-swift-programming-language\/statements#Break-Statement","kind":"section","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Sendable":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#Sendable","title":"Sendable","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Sendable"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Implicit-Member-Expression":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Implicit-Member-Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Member-Expression","title":"Implicit Member Expression","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Type-Alias-Declaration":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Type-Alias-Declaration","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Alias-Declaration","title":"Type Alias Declaration","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Literal-Expression":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","title":"Literal Expression","abstract":[],"url":"\/documentation\/the-swift-programming-language\/expressions#Literal-Expression","kind":"section","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","url":"\/documentation\/the-swift-programming-language\/advancedoperators","title":"Operadores avanzados","kind":"article","type":"topic","abstract":[{"text":"Define custom operators, perform bitwise operations, and use builder syntax.","type":"text"}],"role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Throw-Statement":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Throw-Statement","title":"Throw Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Throw-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Defer-Statement":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Defer-Statement","title":"Defer Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Defer-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Declaration-Modifiers":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Declaration-Modifiers","title":"Declaration Modifiers","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extensions-with-a-Generic-Where-Clause":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause","url":"\/documentation\/the-swift-programming-language\/generics#Extensions-with-a-Generic-Where-Clause","type":"topic","abstract":[],"kind":"section","title":"Extensions with a Generic Where Clause"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Keywords-and-Punctuation":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Keywords-and-Punctuation","title":"Keywords and Punctuation","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Keywords-and-Punctuation"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","url":"\/documentation\/the-swift-programming-language\/initialization","title":"Inicialización","kind":"article","type":"topic","abstract":[{"text":"Set the initial values for a type’s stored properties and perform one-time setup.","type":"text"}],"role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Extension-Declaration":{"title":"Extension Declaration","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Extension-Declaration","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Type-Casting-Operators":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Type-Casting-Operators","title":"Type-Casting Operators","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Type-Casting-Operators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Await-Operator":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Await-Operator","title":"Await Operator","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Await-Operator"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","url":"\/documentation\/the-swift-programming-language\/opaquetypes","title":"Opaque and Boxed Types","kind":"article","type":"topic","abstract":[{"text":"Hide implementation details about a value’s type.","type":"text"}],"role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#unknown":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#unknown","title":"unknown","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unknown"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Functions-that-Never-Return":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return","title":"Functions that Never Return","abstract":[],"url":"\/documentation\/the-swift-programming-language\/declarations#Functions-that-Never-Return","kind":"section","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Regular-Expression-Literals":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Regular-Expression-Literals","title":"Regular Expression Literals","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Regular-Expression-Literals"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Selector-Expression":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Selector-Expression","title":"Selector Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#unchecked":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#unchecked","title":"unchecked","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unchecked"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Key-Path-Expression":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Key-Path-Expression","title":"Key-Path Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Contextual-Where-Clauses":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/generics#Contextual-Where-Clauses","title":"Contextual Where Clauses","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Contextual-Where-Clauses"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes":{"kind":"article","title":"Attributes","url":"\/documentation\/the-swift-programming-language\/attributes","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","abstract":[{"text":"Add information to declarations and types.","type":"text"}],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Precedence-Group-Declaration":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Precedence-Group-Declaration","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Precedence-Group-Declaration","title":"Precedence Group Declaration","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocol-Extensions":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Protocol-Extensions","title":"Protocol Extensions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Macros":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros","url":"\/documentation\/the-swift-programming-language\/macros","title":"Macros","kind":"article","type":"topic","abstract":[{"text":"Use macros to generate code at compile time.","type":"text"}],"role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switch-Statement":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Switch-Statement","title":"Switch Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switch-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/the-swift-programming-language\/protocols","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","title":"Protocols","abstract":[{"text":"Define requirements that conforming types must implement.","type":"text"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Type-Properties":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/properties#Type-Properties","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties","title":"Type Properties","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","abstract":[{"text":"Trabaja con tipos comunes de datos y escribe sintaxis básica.","type":"text"}],"type":"topic","title":"Fundamentos","url":"\/documentation\/the-swift-programming-language\/thebasics","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Initializer-Requirements":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Initializer-Requirements","title":"Initializer Requirements","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Initializer-Requirements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","title":"Enumerations with Cases of a Raw-Value Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","role":"article","type":"topic","title":"Manejo de errores","kind":"article","url":"\/documentation\/the-swift-programming-language\/errorhandling","abstract":[{"text":"Respond to and recover from errors.","type":"text"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","title":"Using a Protocol in Its Associated Type’s Constraints","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#available":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#available","title":"available","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#available"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#String-Literals":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#String-Literals","title":"String Literals","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#While-Statement":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#While-Statement","title":"While Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#While-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Actor-Declaration":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Actor-Declaration","title":"Actor Declaration","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Actor-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Subscripts-of-Optional-Type":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Subscripts-of-Optional-Type","title":"Accessing Subscripts of Optional Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Subscripts-of-Optional-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations":{"type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations","title":"Declaraciones","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","role":"article","kind":"article","abstract":[{"text":"Introduce types, operators, variables, and other names and constructs.","type":"text"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Result-Transformations":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#Result-Transformations","title":"Result Transformations","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Result-Transformations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocol-Composition":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Protocol-Composition","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition","title":"Protocol Composition","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Line-Control-Statement":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Line-Control-Statement","title":"Line Control Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Line-Control-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Compile-Time-Diagnostic-Statement":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Compile-Time-Diagnostic-Statement","title":"Compile-Time Diagnostic Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compile-Time-Diagnostic-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Availability-Condition":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Availability-Condition","title":"Availability Condition","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Availability-Condition"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Optional-Protocol-Requirements":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Optional-Protocol-Requirements","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Optional-Protocol-Requirements","title":"Optional Protocol Requirements","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Protocol-Declaration":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Protocol-Declaration","title":"Protocol Declaration","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Type-Attributes":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#Type-Attributes","title":"Type Attributes","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Type-Attributes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#main":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#main","title":"main","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#main"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Explicit-Member-Expression":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","title":"Explicit Member Expression","abstract":[],"url":"\/documentation\/the-swift-programming-language\/expressions#Explicit-Member-Expression","kind":"section","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"type":"topic","kind":"article","role":"article","url":"\/documentation\/the-swift-programming-language\/controlflow","title":"Flujo de control","abstract":[{"text":"Structure code with branches, loops, and early exits.","type":"text"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Constant-Declaration":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Constant-Declaration","title":"Constant Declaration","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Patterns":{"abstract":[{"type":"text","text":"Match and destructure values."}],"url":"\/documentation\/the-swift-programming-language\/patterns","type":"topic","kind":"article","title":"Patrones","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure":{"type":"topic","url":"\/documentation\/the-swift-programming-language\/lexicalstructure","title":"Lexical Structure","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure","role":"article","kind":"article","abstract":[{"text":"Use the lowest-level components of the syntax.","type":"text"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types":{"role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","abstract":[{"text":"Use built-in named and compound types.","type":"text"}],"type":"topic","title":"Types","url":"\/documentation\/the-swift-programming-language\/types","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#resultBuilder":{"type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#resultBuilder","title":"resultBuilder","url":"\/documentation\/the-swift-programming-language\/attributes#resultBuilder","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/the-swift-programming-language\/enumerations","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","title":"Enumeraciones","abstract":[{"text":"Model custom types that define a list of possible values.","type":"text"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Asynchronous-Functions-and-Methods":{"title":"Asynchronous Functions and Methods","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Asynchronous-Functions-and-Methods","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Try-Operator":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Try-Operator","title":"Try Operator","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Try-Operator"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Enumerations-with-Cases-of-Any-Type":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Enumerations-with-Cases-of-Any-Type","title":"Enumerations with Cases of Any Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type"}}}