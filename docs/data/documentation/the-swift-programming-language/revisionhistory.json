{"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2023-09-18"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.9."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about "},{"type":"codeVoice","code":"if"},{"type":"text","text":" and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" expressions"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Conditional-Expression"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"with information about generating code at compile time."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Expanded the discussion of optionals in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added an example of concurrency to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about boxed protocol types"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"buildPartialBlock(first:)"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"buildPartialBlock(accumulated:next:)"},{"type":"text","text":" methods"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Result-Transformations"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added visionOS to the lists of platforms in"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#available"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Formatted the formal grammar to use blank lines for grouping."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2023-03-30"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.8."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:ControlFlow#Deferred-Actions"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"showing "},{"type":"codeVoice","code":"defer"},{"type":"text","text":" outside of error handling."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Adopted Swift-DocC for publication."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Minor corrections and additions throughout."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2022-09-12"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.7."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:Concurrency#Sendable-Types"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"with information about sending data between actors and tasks,"},{"type":"text","text":" "},{"type":"text","text":"and added information about the "},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@unchecked"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Sendable"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unchecked"},{"type":"text","text":" sections."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Regular-Expression-Literals"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about creating a regular expression."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the short form of "},{"type":"codeVoice","code":"if"},{"type":"text","text":"-"},{"type":"codeVoice","code":"let"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about "},{"type":"codeVoice","code":"#unavailable"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:ControlFlow#Checking-API-Availability"},{"type":"text","text":" section."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2022-03-14"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.6."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about using "},{"type":"codeVoice","code":"#if"},{"type":"text","text":" "},{"type":"text","text":"around chained method calls and other postfix expressions."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the visual styling of figures throughout."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2021-09-20"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.5."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about asynchronous functions, tasks, and actors"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"and to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Actor-Declaration"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Await-Operator"},{"type":"text","text":" sections."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about identifiers that start with an underscore."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2021-04-26"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.4."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:AdvancedOperators#Result-Builders"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#resultBuilder"},{"type":"text","text":" sections"},{"type":"text","text":" "},{"type":"text","text":"with information about result builders."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Conversion-to-a-Pointer-Type"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about how in-out parameters"},{"type":"text","text":" "},{"type":"text","text":"can be implicitly converted to unsafe pointers in a function call."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Functions#Variadic-Parameters"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration"},{"type":"text","text":" sections,"},{"type":"text","text":" "},{"type":"text","text":"now that a function can have multiple variadic parameters."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Member-Expression"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that implicit member expressions can be chained together."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2020-09-16"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.3."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about multiple trailing closures"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:Closures#Trailing-Closures"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"and added information about how trailing closures are matched to parameters"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Function-Call-Expression"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about synthesized implementations"},{"type":"text","text":" "},{"type":"text","text":"of "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" for enumerations"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:Protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Contextual-Where-Clauses"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"now that you can write a generic "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause in more places."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:AutomaticReferenceCounting#Unowned-Optional-References"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about using unowned references with optional values."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"@main"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#main"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added "},{"type":"codeVoice","code":"#filePath"},{"type":"text","text":" to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"and updated the discussion of "},{"type":"codeVoice","code":"#file"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Closures#Escaping-Closures"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that closures can refer to "},{"type":"codeVoice","code":"self"},{"type":"text","text":" implicitly in more scenarios."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:ErrorHandling#Handling-Errors-Using-Do-Catch"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement"},{"type":"text","text":" sections,"},{"type":"text","text":" "},{"type":"text","text":"now that a "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause can match against multiple errors."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added more information about "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" "},{"type":"text","text":"and moved it into the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Any-Type"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that lazy properties can have observers."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that members of an enumeration can satisfy protocol requirements."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Stored-Variable-Observers-and-Property-Observers"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to describe when the getter is called before the observer."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"to mention atomic operations."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2020-03-24"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.2."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about passing a key path instead of a closure"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Methods-with-Special-Names"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about syntactic sugar the lets instances of"},{"type":"text","text":" "},{"type":"text","text":"classes, structures, and enumerations be used with function call syntax."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Subscripts#Subscript-Options"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that subscripts support parameters with default values."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that the "},{"type":"codeVoice","code":"Self"},{"type":"text","text":" can be used in more contexts."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:TheBasics#Implicitly-Unwrapped-Optionals"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to make it clearer that an implicitly unwrapped optional value"},{"type":"text","text":" "},{"type":"text","text":"can be used as either an optional or non-optional value."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2019-09-10"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.1."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about functions"},{"type":"text","text":" "},{"type":"text","text":"that specify a protocol that their return value conforms to,"},{"type":"text","text":" "},{"type":"text","text":"instead of providing a specific named return type,"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about property wrappers"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Wrappers"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about enumerations and structures"},{"type":"text","text":" "},{"type":"text","text":"that are frozen for library evolution"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:Functions#Functions-With-an-Implicit-Return"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"text","text":"doc:Properties#Shorthand-Getter-Declaration"},{"type":"text","text":" sections"},{"type":"text","text":" "},{"type":"text","text":"with information about functions that omit "},{"type":"codeVoice","code":"return"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about using subscripts on types"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:Subscripts#Type-Subscripts"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Patterns#Enumeration-Case-Pattern"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that an enumeration case pattern can match an optional value."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Initialization#Memberwise-Initializers-for-Structure-Types"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that memberwise initializers support"},{"type":"text","text":" "},{"type":"text","text":"omitting parameters for properties that have a default value."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about dynamic members"},{"type":"text","text":" "},{"type":"text","text":"that are looked up by key path at runtime"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicMemberLookup"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added "},{"type":"codeVoice","code":"macCatalyst"},{"type":"text","text":" to the list of target environments"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that "},{"type":"codeVoice","code":"Self"},{"type":"text","text":" can be used to refer to the type"},{"type":"text","text":" "},{"type":"text","text":"introduced by the current class, structure, or enumeration declaration."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2019-03-25"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.0."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:StringsAndCharacters#Extended-String-Delimiters"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"and updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about extended string delimiters."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicCallable"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about dynamically calling instances as functions"},{"type":"text","text":" "},{"type":"text","text":"using the "},{"type":"codeVoice","code":"dynamicCallable"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unknown"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases"},{"type":"text","text":" sections"},{"type":"text","text":" "},{"type":"text","text":"with information about handling future enumeration cases"},{"type":"text","text":" "},{"type":"text","text":"in switch statements using"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"unknown"},{"type":"text","text":" switch case attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the identity key path ("},{"type":"codeVoice","code":"\\.self"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about using the less than ("},{"type":"codeVoice","code":"<"},{"type":"text","text":") operator"},{"type":"text","text":" "},{"type":"text","text":"in platform conditions to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"type":"text","text":" section."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2018-09-17"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 4.2."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about accessing all of an enumeration’s cases"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:Enumerations#Iterating-over-Enumeration-Cases"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about "},{"type":"codeVoice","code":"#error"},{"type":"text","text":" and "},{"type":"codeVoice","code":"#warning"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compile-Time-Diagnostic-Statement"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about inlining"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"under the "},{"type":"codeVoice","code":"inlinable"},{"type":"text","text":" and  "},{"type":"codeVoice","code":"usableFromInline"},{"type":"text","text":" attributes."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about members that are looked up by name at runtime"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"under the "},{"type":"codeVoice","code":"dynamicMemberLookup"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"requires_stored_property_inits"},{"type":"text","text":" and "},{"type":"codeVoice","code":"warn_unqualified_access"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about how to conditionally compile code"},{"type":"text","text":" "},{"type":"text","text":"depending on the Swift compiler version being used"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about "},{"type":"codeVoice","code":"#dsohandle"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression"},{"type":"text","text":" section."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2018-03-29"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 4.1."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about synthesized implementations of equivalence operators"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:AdvancedOperators#Equivalence-Operators"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about conditional protocol conformance"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"and to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Conditionally-Conforming-to-a-Protocol"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about recursive protocol constraints"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"canImport()"},{"type":"text","text":" and "},{"type":"codeVoice","code":"targetEnvironment()"},{"type":"text","text":" platform conditions"},{"type":"text","text":" "},{"type":"text","text":"to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2017-12-04"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 4.0.3."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that key paths support subscript components."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2017-09-19"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 4.0."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about exclusive access to memory"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types-with-a-Generic-Where-Clause"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that you can use generic "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clauses"},{"type":"text","text":" "},{"type":"text","text":"to constrain associated types."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about multiline string literals"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:StringsAndCharacters#String-Literals"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"and to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"now that this attribute is inferred in fewer places."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Subscripts"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that subscripts can be generic."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"and in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"now that protocol composition types can contain a superclass requirement."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of protocol extensions"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration"},{"type":"text","text":" "},{"type":"text","text":"now that "},{"type":"codeVoice","code":"final"},{"type":"text","text":" isn’t allowed in them."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about preconditions and fatal errors"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:TheBasics#Assertions-and-Preconditions"},{"type":"text","text":" section."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2017-03-27"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 3.1."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about extensions that include requirements."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added examples of iterating over a range"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:ControlFlow#For-In-Loops"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added an example of failable numeric conversions"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:Initialization#Failable-Initializers"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about using the "},{"type":"codeVoice","code":"available"},{"type":"text","text":" attribute with a Swift language version."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to note that argument labels aren’t allowed when writing a function type."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of Swift language version numbers"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that an optional patch number is allowed."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that Swift distinguishes between functions that take multiple parameters"},{"type":"text","text":" "},{"type":"text","text":"and functions that take a single parameter of a tuple type."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Removed the Dynamic Type Expression section"},{"type":"text","text":" "},{"type":"text","text":"from the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"now that "},{"type":"codeVoice","code":"type(of:)"},{"type":"text","text":" is a Swift standard library function."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2016-10-27"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 3.0.1."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of weak and unowned references"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":", "},{"type":"codeVoice","code":"unowned(safe)"},{"type":"text","text":", and "},{"type":"codeVoice","code":"unowned(unsafe)"},{"type":"text","text":" "},{"type":"text","text":"declaration modifiers"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"text","text":"doc:TypeCasting#Type-Casting-for-Any-and-AnyObject"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about using an optional value when a value of type "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" is expected."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"to separate the discussion of parenthesized expressions and tuple expressions."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2016-09-13"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 3.0."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of functions in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration"},{"type":"text","text":" section to note that"},{"type":"text","text":" "},{"type":"text","text":"all parameters get an argument label by default."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of operators"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"now that you implement them as type methods instead of as global functions."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"open"},{"type":"text","text":" and "},{"type":"codeVoice","code":"fileprivate"},{"type":"text","text":" access-level modifiers"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of "},{"type":"codeVoice","code":"inout"},{"type":"text","text":" in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to note that it appears in front of a parameter’s type"},{"type":"text","text":" "},{"type":"text","text":"instead of in front of a parameter’s name."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"type":"codeVoice","code":"@noescape"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@autoclosure"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"text","text":"doc:Closures#Escaping-Closures"},{"type":"text","text":" and "},{"type":"text","text":"doc:Closures#Autoclosures"},{"type":"text","text":" sections"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"now that they’re type attributes, rather than declaration attributes."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about operator precedence groups"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:AdvancedOperators#Precedence-for-Custom-Infix-Operators"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"and to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Precedence-Group-Declaration"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated discussion throughout"},{"type":"text","text":" "},{"type":"text","text":"to use macOS instead of OS X,"},{"type":"text","text":" "},{"type":"codeVoice","code":"Error"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"ErrorProtocol"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and protocol names such as "},{"type":"codeVoice","code":"ExpressibleByStringLiteral"},{"type":"text","text":" "},{"type":"text","text":"instead of "},{"type":"codeVoice","code":"StringLiteralConvertible"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"now that generic "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clauses are written at the end of a declaration."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"type":"text","text":"doc:Closures#Escaping-Closures"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that closures are nonescaping by default."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#While-Statement"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"now that "},{"type":"codeVoice","code":"if"},{"type":"text","text":", "},{"type":"codeVoice","code":"while"},{"type":"text","text":", and "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"use a comma-separated list of conditions without "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clauses."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about switch cases that have multiple patterns"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:ControlFlow#Switch"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switch-Statement"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of function types"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"now that function argument labels are no longer part of a function’s type."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of protocol composition types"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"to use the new "},{"type":"codeVoice","code":"Protocol1 & Protocol2"},{"type":"text","text":" syntax."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the Dynamic Type Expression section"},{"type":"text","text":" "},{"type":"text","text":"to use the new "},{"type":"codeVoice","code":"type(of:)"},{"type":"text","text":" syntax for dynamic type expressions."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of line control statements"},{"type":"text","text":" "},{"type":"text","text":"to use the "},{"type":"codeVoice","code":"#sourceLocation(file:line:)"},{"type":"text","text":" syntax"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Line-Control-Statement"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return"},{"type":"text","text":" "},{"type":"text","text":"to use the new "},{"type":"codeVoice","code":"Never"},{"type":"text","text":" type."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about playground literals"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"type":"text","text":"doc:Declarations#In-Out-Parameters"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to note that only nonescaping closures can capture in-out parameters."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion about default parameters"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"text","text":"doc:Functions#Default-Parameter-Values"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that they can’t be reordered in function calls."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated attribute arguments to use a colon"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about throwing an error"},{"type":"text","text":" "},{"type":"text","text":"inside the catch block of a rethrowing function"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about accessing the selector"},{"type":"text","text":" "},{"type":"text","text":"of an Objective-C property’s getter or setter"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Alias-Declaration"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about generic type aliases and using type aliases inside of protocols."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of function types in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to note that parentheses around the parameter types are required."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"to note that the "},{"type":"codeVoice","code":"@IBAction"},{"type":"text","text":", "},{"type":"codeVoice","code":"@IBOutlet"},{"type":"text","text":", and "},{"type":"codeVoice","code":"@NSManaged"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"type":"text","text":"imply the "},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"@GKInspectable"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of optional protocol requirements"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Optional-Protocol-Requirements"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to clarify that they’re used only in code that interoperates with Objective-C."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Removed the discussion of explicitly using "},{"type":"codeVoice","code":"let"},{"type":"text","text":" in function parameters"},{"type":"text","text":" "},{"type":"text","text":"from the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Removed the discussion of the "},{"type":"codeVoice","code":"Boolean"},{"type":"text","text":" protocol"},{"type":"text","text":" "},{"type":"text","text":"from the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"now that the protocol has been removed from the Swift standard library."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Corrected the discussion of the "},{"type":"codeVoice","code":"@NSApplicationMain"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2016-03-21"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 2.2."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about how to conditionally compile code"},{"type":"text","text":" "},{"type":"text","text":"depending on the version of Swift being used"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about how to distinguish"},{"type":"text","text":" "},{"type":"text","text":"between methods or initializers whose names differ"},{"type":"text","text":" "},{"type":"text","text":"only by the names of their arguments"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"#selector"},{"type":"text","text":" syntax"},{"type":"text","text":" "},{"type":"text","text":"for Objective-C selectors"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of associated types"},{"type":"text","text":" "},{"type":"text","text":"to use the "},{"type":"codeVoice","code":"associatedtype"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Associated-Type-Declaration"},{"type":"text","text":" sections."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated information about initializers that return "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"type":"text","text":"before the instance is fully initialized"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"text","text":"doc:Initialization#Failable-Initializers"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about comparing tuples"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:BasicOperators#Comparison-Operators"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about using keywords as external parameter names"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Keywords-and-Punctuation"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section to note that"},{"type":"text","text":" "},{"type":"text","text":"enumerations and enumeration cases can use this attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:LexicalStructure#Operators"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with discussion of custom operators that contain a dot."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"that rethrowing functions can’t directly throw errors."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about property observers being called"},{"type":"text","text":" "},{"type":"text","text":"when you pass a property as an in-out parameter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a section about error handling"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated figures in the"},{"type":"text","text":" "},{"type":"text","text":"doc:AutomaticReferenceCounting#Weak-References"},{"type":"text","text":" "},{"type":"text","text":"section to show the deallocation process more clearly."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Removed discussion of C-style "},{"type":"codeVoice","code":"for"},{"type":"text","text":" loops,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"++"},{"type":"text","text":" prefix and postfix operators,"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"codeVoice","code":"--"},{"type":"text","text":" prefix and postfix operators."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Removed discussion of variable function arguments"},{"type":"text","text":" "},{"type":"text","text":"and the special syntax for curried functions."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2015-10-20"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 2.1."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:StringsAndCharacters#String-Interpolation"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals"},{"type":"text","text":" sections"},{"type":"text","text":" "},{"type":"text","text":"now that string interpolations can contain string literals."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:Closures#Escaping-Closures"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about the "},{"type":"codeVoice","code":"@noescape"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"type":"text","text":" sections"},{"type":"text","text":" "},{"type":"text","text":"with information about tvOS."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the behavior of in-out parameters"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:Declarations#In-Out-Parameters"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information to the "},{"type":"text","text":"doc:Expressions#Capture-Lists"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about how values specified in closure capture lists are captured."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining"},{"type":"text","text":" "},{"type":"text","text":"section to clarify how assignment through optional chaining"},{"type":"text","text":" "},{"type":"text","text":"behaves."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Improved the discussion of autoclosures"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"text","text":"doc:Closures#Autoclosures"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added an example that uses the "},{"type":"codeVoice","code":"??"},{"type":"text","text":" operator"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour"},{"type":"text","text":" chapter."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2015-09-16"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 2.0."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about error handling"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Throw-Statement"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Defer-Statement"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Try-Operator"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:ErrorHandling#Representing-and-Throwing-Errors"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that all types can conform to the "},{"type":"codeVoice","code":"ErrorType"},{"type":"text","text":" protocol."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the new "},{"type":"codeVoice","code":"try?"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:ErrorHandling#Converting-Errors-to-Optional-Values"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about recursive enumerations"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:Enumerations#Recursive-Enumerations"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about API availability checking"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:ControlFlow#Checking-API-Availability"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Availability-Condition"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the new "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:ControlFlow#Early-Exit"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Guard-Statement"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about protocol extensions"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about access control for unit testing"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:AccessControl#Access-Levels-for-Unit-Test-Targets"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the new optional pattern"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:Patterns#Optional-Pattern"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:ControlFlow#Repeat-While"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about the "},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"-"},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"now that "},{"type":"codeVoice","code":"String"},{"type":"text","text":" no longer conforms"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"codeVoice","code":"CollectionType"},{"type":"text","text":" protocol from the Swift standard library."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the new Swift standard library"},{"type":"text","text":" "},{"type":"codeVoice","code":"print(_:separator:terminator)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:TheBasics#Printing-Constants-and-Variables"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the behavior"},{"type":"text","text":" "},{"type":"text","text":"of enumeration cases with "},{"type":"codeVoice","code":"String"},{"type":"text","text":" raw values"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:Enumerations#Implicitly-Assigned-Raw-Values"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"@autoclosure"},{"type":"text","text":" attribute —"},{"type":"text","text":" "},{"type":"text","text":"including its "},{"type":"codeVoice","code":"@autoclosure(escaping)"},{"type":"text","text":" form —"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:Closures#Autoclosures"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about the "},{"type":"codeVoice","code":"@available"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"@warn_unused_result"},{"type":"text","text":" attributes."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Type-Attributes"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about the "},{"type":"codeVoice","code":"@convention"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added an example of using multiple optional bindings"},{"type":"text","text":" "},{"type":"text","text":"with a "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about how concatenating string literals using the "},{"type":"codeVoice","code":"+"},{"type":"text","text":" operator"},{"type":"text","text":" "},{"type":"text","text":"happens at compile time."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about comparing metatype values and using them"},{"type":"text","text":" "},{"type":"text","text":"to construct instances with initializer expressions."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"text","text":"doc:TheBasics#Debugging-with-Assertions"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about when user-defined assertions are disabled."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"type":"codeVoice","code":"@NSManaged"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that the attribute can be applied to certain instance methods."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Functions#Variadic-Parameters"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that variadic parameters can be declared in any position"},{"type":"text","text":" "},{"type":"text","text":"in a function’s parameter list."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:Initialization#Overriding-a-Failable-Initializer"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about how a nonfailable initializer can delegate"},{"type":"text","text":" "},{"type":"text","text":"up to a failable initializer"},{"type":"text","text":" "},{"type":"text","text":"by force-unwrapping the result of the superclass’s initializer."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about using enumeration cases as functions"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about explicitly referencing an initializer"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Initializer-Expression"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about build configuration"},{"type":"text","text":" "},{"type":"text","text":"and line control statements"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compiler-Control-Statements"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about constructing class instances from metatype values."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the"},{"type":"text","text":" "},{"type":"text","text":"doc:AutomaticReferenceCounting#Weak-References"},{"type":"text","text":" "},{"type":"text","text":"section about weak references being unsuitable for caching."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated a note in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to mention that stored type properties are lazily initialized."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Closures#Capturing-Values"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to clarify how variables and constants are captured in closures."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to describe when you can apply the "},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" attribute to classes."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"text","text":"doc:ErrorHandling#Handling-Errors"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about the performance of executing a "},{"type":"codeVoice","code":"throw"},{"type":"text","text":" statement."},{"type":"text","text":" "},{"type":"text","text":"Added similar information about the "},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about stored and computed type properties"},{"type":"text","text":" "},{"type":"text","text":"for classes, structures, and enumerations."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about labeled break statements."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated a note in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to clarify the behavior of "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" and "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observers."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"text","text":"doc:AccessControl#Access-Levels"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about the scope of "},{"type":"codeVoice","code":"private"},{"type":"text","text":" access."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the"},{"type":"text","text":" "},{"type":"text","text":"doc:AutomaticReferenceCounting#Weak-References"},{"type":"text","text":" "},{"type":"text","text":"section about the differences in weak references"},{"type":"text","text":" "},{"type":"text","text":"between garbage collected systems and ARC."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the"},{"type":"text","text":" "},{"type":"text","text":"doc:StringsAndCharacters#Special-Characters-in-String-Literals"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with a more precise definition of Unicode scalars."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2015-04-08"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 1.2."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift now has a native "},{"type":"codeVoice","code":"Set"},{"type":"text","text":" collection type."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Sets"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@autoclosure"},{"type":"text","text":" is now an attribute of the parameter declaration,"},{"type":"text","text":" "},{"type":"text","text":"not its type."},{"type":"text","text":" "},{"type":"text","text":"There’s also a new "},{"type":"codeVoice","code":"@noescape"},{"type":"text","text":" parameter declaration attribute."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Type methods and properties now use the "},{"type":"codeVoice","code":"static"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"as a declaration modifier."},{"type":"text","text":" "},{"type":"text","text":"For more information see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Variable-Properties"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift now includes the "},{"type":"codeVoice","code":"as?"},{"type":"text","text":" and "},{"type":"codeVoice","code":"as!"},{"type":"text","text":" failable downcast operators."},{"type":"text","text":" "},{"type":"text","text":"For more information,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new guide section about"},{"type":"text","text":" "},{"type":"text","text":"doc:StringsAndCharacters#String-Indices"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Removed the overflow division ("},{"type":"codeVoice","code":"&\/"},{"type":"text","text":") and"},{"type":"text","text":" "},{"type":"text","text":"overflow remainder ("},{"type":"codeVoice","code":"&%"},{"type":"text","text":") operators"},{"type":"text","text":" "},{"type":"text","text":"from "},{"type":"text","text":"doc:AdvancedOperators#Overflow-Operators"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the rules for constant and"},{"type":"text","text":" "},{"type":"text","text":"constant property declaration and initialization."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the definition of Unicode scalars in string literals."},{"type":"text","text":" "},{"type":"text","text":"See "},{"type":"text","text":"doc:StringsAndCharacters#Special-Characters-in-String-Literals"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"type":"text","text":"doc:BasicOperators#Range-Operators"},{"type":"text","text":" to note that"},{"type":"text","text":" "},{"type":"text","text":"a half-open range with the same start and end index will be empty."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"type":"text","text":"doc:Closures#Closures-Are-Reference-Types"},{"type":"text","text":" to clarify"},{"type":"text","text":" "},{"type":"text","text":"the capturing rules for variables."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"type":"text","text":"doc:AdvancedOperators#Value-Overflow"},{"type":"text","text":" to clarify"},{"type":"text","text":" "},{"type":"text","text":"the overflow behavior of signed and unsigned integers"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration"},{"type":"text","text":" to clarify"},{"type":"text","text":" "},{"type":"text","text":"protocol declaration scope and members."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"type":"text","text":"doc:AutomaticReferenceCounting#Defining-a-Capture-List"},{"type":"text","text":" "},{"type":"text","text":"to clarify the syntax for"},{"type":"text","text":" "},{"type":"text","text":"weak and unowned references in closure capture lists."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"type":"text","text":"doc:LexicalStructure#Operators"},{"type":"text","text":" to explicitly mention"},{"type":"text","text":" "},{"type":"text","text":"examples of supported characters for custom operators,"},{"type":"text","text":" "},{"type":"text","text":"such as those in the Mathematical Operators, Miscellaneous Symbols,"},{"type":"text","text":" "},{"type":"text","text":"and Dingbats Unicode blocks."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Constants can now be declared without being initialized"},{"type":"text","text":" "},{"type":"text","text":"in local function scope."},{"type":"text","text":" "},{"type":"text","text":"They must have a set value before first use."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In an initializer, constant properties can now only assign a value once."},{"type":"text","text":" "},{"type":"text","text":"For more information,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"text","text":"doc:Initialization#Assigning-Constant-Properties-During-Initialization"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiple optional bindings can now appear in a single "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"type":"text","text":"as a comma-separated list of assignment expressions."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Optional-Chaining-Expression"},{"type":"text","text":" "},{"type":"text","text":"must appear within a postfix expression."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Protocol casts are no longer limited to "},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" protocols."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Type casts that can fail at runtime"},{"type":"text","text":" "},{"type":"text","text":"now use the "},{"type":"codeVoice","code":"as?"},{"type":"text","text":" or "},{"type":"codeVoice","code":"as!"},{"type":"text","text":" operator,"},{"type":"text","text":" "},{"type":"text","text":"and type casts that are guaranteed not to fail use the "},{"type":"codeVoice","code":"as"},{"type":"text","text":" operator."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Type-Casting-Operators"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2014-10-16"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 1.1."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a full guide to "},{"type":"text","text":"doc:Initialization#Failable-Initializers"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a description of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Failable-Initializer-Requirements"},{"type":"text","text":" "},{"type":"text","text":"for protocols."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Constants and variables of type "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" can now contain"},{"type":"text","text":" "},{"type":"text","text":"function instances. Updated the example in "},{"type":"text","text":"doc:TypeCasting#Type-Casting-for-Any-and-AnyObject"},{"type":"text","text":" "},{"type":"text","text":"to show how to check for and cast to a function type"},{"type":"text","text":" "},{"type":"text","text":"within a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Enumerations with raw values"},{"type":"text","text":" "},{"type":"text","text":"now have a "},{"type":"codeVoice","code":"rawValue"},{"type":"text","text":" property rather than a "},{"type":"codeVoice","code":"toRaw()"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"and a failable initializer with a "},{"type":"codeVoice","code":"rawValue"},{"type":"text","text":" parameter"},{"type":"text","text":" "},{"type":"text","text":"rather than a "},{"type":"codeVoice","code":"fromRaw()"},{"type":"text","text":" method."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"text","text":"doc:Enumerations#Raw-Values"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new reference section about"},{"type":"text","text":" "},{"type":"text","text":"doc:Declarations#Failable-Initializers"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which can trigger initialization failure."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Custom operators can now contain the "},{"type":"codeVoice","code":"?"},{"type":"text","text":" character."},{"type":"text","text":" "},{"type":"text","text":"Updated the "},{"type":"text","text":"doc:LexicalStructure#Operators"},{"type":"text","text":" reference to describe"},{"type":"text","text":" "},{"type":"text","text":"the revised rules."},{"type":"text","text":" "},{"type":"text","text":"Removed a duplicate description of the valid set of operator characters"},{"type":"text","text":" "},{"type":"text","text":"from "},{"type":"text","text":"doc:AdvancedOperators#Custom-Operators"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2014-08-18"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"New document that describes Swift 1.0,"},{"type":"text","text":" "},{"type":"text","text":"Apple’s new programming language for building iOS and OS X apps."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Initializer-Requirements"},{"type":"text","text":" in protocols."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"doc:TheBasics#Assertions-and-Preconditions"},{"type":"text","text":" can now use string interpolation."},{"type":"text","text":" "},{"type":"text","text":"Removed a note to the contrary."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the"},{"type":"text","text":" "},{"type":"text","text":"doc:StringsAndCharacters#Concatenating-Strings-and-Characters"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to reflect the fact that "},{"type":"codeVoice","code":"String"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values"},{"type":"text","text":" "},{"type":"text","text":"can no longer be combined with the addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"or addition assignment operator ("},{"type":"codeVoice","code":"+="},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"These operators are now used only with "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"Use the "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type’s "},{"type":"codeVoice","code":"append(_:)"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"to append a single "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value onto the end of a string."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"availability"},{"type":"text","text":" attribute to"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"doc:TheBasics#Optionals"},{"type":"text","text":" no longer implicitly evaluate to"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"type":"text","text":" when they have a value and "},{"type":"codeVoice","code":"false"},{"type":"text","text":" when they do not,"},{"type":"text","text":" "},{"type":"text","text":"to avoid confusion when working with optional "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"Instead, make an explicit check against "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"=="},{"type":"text","text":" or "},{"type":"codeVoice","code":"!="},{"type":"text","text":" operators"},{"type":"text","text":" "},{"type":"text","text":"to find out if an optional contains a value."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift now has a "},{"type":"text","text":"doc:BasicOperators#Nil-Coalescing-Operator"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"a ?? b"},{"type":"text","text":"), which unwraps an optional’s value if it exists,"},{"type":"text","text":" "},{"type":"text","text":"or returns a default value if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated and expanded"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"text","text":"doc:StringsAndCharacters#Comparing-Strings"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to reflect and demonstrate that string and character comparison"},{"type":"text","text":" "},{"type":"text","text":"and prefix \/ suffix comparison are now based on"},{"type":"text","text":" "},{"type":"text","text":"Unicode canonical equivalence of extended grapheme clusters."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now try to set a property’s value, assign to a subscript,"},{"type":"text","text":" "},{"type":"text","text":"or call a mutating method or operator through"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The information about"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining"},{"type":"text","text":" "},{"type":"text","text":"has been updated accordingly,"},{"type":"text","text":" "},{"type":"text","text":"and the examples of checking for method call success in"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Calling-Methods-Through-Optional-Chaining"},{"type":"text","text":" "},{"type":"text","text":"have been expanded to show how to check for property setting success."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Subscripts-of-Optional-Type"},{"type":"text","text":" "},{"type":"text","text":"through optional chaining."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:CollectionTypes#Accessing-and-Modifying-an-Array"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to note that you can no longer append a single item to an array"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"+="},{"type":"text","text":" operator."},{"type":"text","text":" "},{"type":"text","text":"Instead, use the "},{"type":"codeVoice","code":"append(_:)"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"or append a single-item array with the "},{"type":"codeVoice","code":"+="},{"type":"text","text":" operator."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note that the start value "},{"type":"codeVoice","code":"a"},{"type":"text","text":" "},{"type":"text","text":"for the "},{"type":"text","text":"doc:BasicOperators#Range-Operators"},{"type":"text","text":" "},{"type":"codeVoice","code":"a...b"},{"type":"text","text":" and "},{"type":"codeVoice","code":"a..<b"},{"type":"text","text":" "},{"type":"text","text":"must not be greater than the end value "},{"type":"codeVoice","code":"b"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Rewrote the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"to remove its introductory coverage of initializer overrides."},{"type":"text","text":" "},{"type":"text","text":"This chapter now focuses more on the addition of"},{"type":"text","text":" "},{"type":"text","text":"new functionality in a subclass,"},{"type":"text","text":" "},{"type":"text","text":"and the modification of existing functionality with overrides."},{"type":"text","text":" "},{"type":"text","text":"The chapter’s example of"},{"type":"text","text":" "},{"type":"text","text":"doc:Inheritance#Overriding-Property-Getters-and-Setters"},{"type":"text","text":" "},{"type":"text","text":"has been rewritten to show how to override a "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"(The examples of modifying an inherited property’s default value"},{"type":"text","text":" "},{"type":"text","text":"in a subclass initializer have been moved to"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization"},{"type":"text","text":" chapter.)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the"},{"type":"text","text":" "},{"type":"text","text":"doc:Initialization#Initializer-Inheritance-and-Overriding"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to note that overrides of a designated initializer"},{"type":"text","text":" "},{"type":"text","text":"must now be marked with the "},{"type":"codeVoice","code":"override"},{"type":"text","text":" modifier."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Initialization#Required-Initializers"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to note that the "},{"type":"codeVoice","code":"required"},{"type":"text","text":" modifier is now written before"},{"type":"text","text":" "},{"type":"text","text":"every subclass implementation of a required initializer,"},{"type":"text","text":" "},{"type":"text","text":"and that the requirements for required initializers"},{"type":"text","text":" "},{"type":"text","text":"can now be satisfied by automatically inherited initializers."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Infix "},{"type":"text","text":"doc:AdvancedOperators#Operator-Methods"},{"type":"text","text":" no longer require"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"@infix"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@prefix"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@postfix"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"type":"text","text":"for "},{"type":"text","text":"doc:AdvancedOperators#Prefix-and-Postfix-Operators"},{"type":"text","text":" "},{"type":"text","text":"have been replaced by "},{"type":"codeVoice","code":"prefix"},{"type":"text","text":" and "},{"type":"codeVoice","code":"postfix"},{"type":"text","text":" declaration modifiers."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note about the order in which"},{"type":"text","text":" "},{"type":"text","text":"doc:AdvancedOperators#Prefix-and-Postfix-Operators"},{"type":"text","text":" are applied"},{"type":"text","text":" "},{"type":"text","text":"when both a prefix and a postfix operator are applied to"},{"type":"text","text":" "},{"type":"text","text":"the same operand."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Operator functions for"},{"type":"text","text":" "},{"type":"text","text":"doc:AdvancedOperators#Compound-Assignment-Operators"},{"type":"text","text":" no longer use"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"@assignment"},{"type":"text","text":" attribute when defining the function."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The order in which modifiers are specified when defining"},{"type":"text","text":" "},{"type":"text","text":"doc:AdvancedOperators#Custom-Operators"},{"type":"text","text":" has changed."},{"type":"text","text":" "},{"type":"text","text":"You now write "},{"type":"codeVoice","code":"prefix operator"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":"operator prefix"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"for example."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"dynamic"},{"type":"text","text":" declaration modifier"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about how type inference works"},{"type":"text","text":" "},{"type":"text","text":"with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added more information about curried functions."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new chapter about "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"to reflect the fact that Swift’s "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" type now represents"},{"type":"text","text":" "},{"type":"text","text":"a single Unicode extended grapheme cluster."},{"type":"text","text":" "},{"type":"text","text":"Includes a new section on"},{"type":"text","text":" "},{"type":"text","text":"doc:StringsAndCharacters#Extended-Grapheme-Clusters"},{"type":"text","text":" "},{"type":"text","text":"and more information about"},{"type":"text","text":" "},{"type":"text","text":"doc:StringsAndCharacters#Unicode-Scalar-Values"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"text","text":"doc:StringsAndCharacters#Comparing-Strings"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:StringsAndCharacters#String-Literals"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to note that Unicode scalars inside string literals"},{"type":"text","text":" "},{"type":"text","text":"are now written as "},{"type":"codeVoice","code":"\\u{n}"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"where "},{"type":"codeVoice","code":"n"},{"type":"text","text":" is a hexadecimal number between 0 and 10FFFF,"},{"type":"text","text":" "},{"type":"text","text":"the range of Unicode’s codespace."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" "},{"type":"codeVoice","code":"length"},{"type":"text","text":" property is now mapped onto"},{"type":"text","text":" "},{"type":"text","text":"Swift’s native "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type as "},{"type":"codeVoice","code":"utf16Count"},{"type":"text","text":", not "},{"type":"codeVoice","code":"utf16count"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s native "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type no longer has"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"uppercaseString"},{"type":"text","text":" or "},{"type":"codeVoice","code":"lowercaseString"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"The corresponding section in"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},{"type":"text","text":" "},{"type":"text","text":"has been removed, and various code examples have been updated."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about"},{"type":"text","text":" "},{"type":"text","text":"doc:Initialization#Initializer-Parameters-Without-Argument-Labels"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about"},{"type":"text","text":" "},{"type":"text","text":"doc:Initialization#Required-Initializers"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about "},{"type":"text","text":"doc:Functions#Optional-Tuple-Return-Types"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:TheBasics#Type-Annotations"},{"type":"text","text":" section to note that"},{"type":"text","text":" "},{"type":"text","text":"multiple related variables can be defined on a single line"},{"type":"text","text":" "},{"type":"text","text":"with one type annotation."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@optional"},{"type":"text","text":", "},{"type":"codeVoice","code":"@lazy"},{"type":"text","text":", "},{"type":"codeVoice","code":"@final"},{"type":"text","text":", and "},{"type":"codeVoice","code":"@required"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"type":"text","text":"are now the "},{"type":"codeVoice","code":"optional"},{"type":"text","text":", "},{"type":"codeVoice","code":"lazy"},{"type":"text","text":", "},{"type":"codeVoice","code":"final"},{"type":"text","text":", and "},{"type":"codeVoice","code":"required"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the entire book to refer to "},{"type":"codeVoice","code":"..<"},{"type":"text","text":" as"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"text","text":"doc:BasicOperators#Half-Open-Range-Operator"},{"type":"text","text":" "},{"type":"text","text":"(rather than the “half-closed range operator”)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:CollectionTypes#Accessing-and-Modifying-a-Dictionary"},{"type":"text","text":" "},{"type":"text","text":"section to note that "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" now has"},{"type":"text","text":" "},{"type":"text","text":"a Boolean "},{"type":"codeVoice","code":"isEmpty"},{"type":"text","text":" property."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Clarified the full list of characters that can be used"},{"type":"text","text":" "},{"type":"text","text":"when defining "},{"type":"text","text":"doc:AdvancedOperators#Custom-Operators"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"nil"},{"type":"text","text":" and the Booleans "},{"type":"codeVoice","code":"true"},{"type":"text","text":" and "},{"type":"codeVoice","code":"false"},{"type":"text","text":" are now "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" type now has full value semantics."},{"type":"text","text":" "},{"type":"text","text":"Updated the information about "},{"type":"text","text":"doc:CollectionTypes#Mutability-of-Collections"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"text","text":"doc:CollectionTypes#Arrays"},{"type":"text","text":" to reflect the new approach."},{"type":"text","text":" "},{"type":"text","text":"Also clarified the assignment and copy behavior for strings arrays and dictionaries."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"doc:CollectionTypes#Array-Type-Shorthand-Syntax"},{"type":"text","text":" is now written as"},{"type":"text","text":" "},{"type":"codeVoice","code":"[SomeType]"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":"SomeType[]"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about "},{"type":"text","text":"doc:CollectionTypes#Dictionary-Type-Shorthand-Syntax"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is written as "},{"type":"codeVoice","code":"[KeyType: ValueType]"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about "},{"type":"text","text":"doc:CollectionTypes#Hash-Values-for-Set-Types"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Examples of "},{"type":"text","text":"doc:Closures#Closure-Expressions"},{"type":"text","text":" now use"},{"type":"text","text":" "},{"type":"text","text":"the global "},{"type":"codeVoice","code":"sorted(_:_:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"rather than the global "},{"type":"codeVoice","code":"sort(_:_:)"},{"type":"text","text":" function,"},{"type":"text","text":" "},{"type":"text","text":"to reflect the new array value semantics."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the information about "},{"type":"text","text":"doc:Initialization#Memberwise-Initializers-for-Structure-Types"},{"type":"text","text":" "},{"type":"text","text":"to clarify that the memberwise structure initializer is made available"},{"type":"text","text":" "},{"type":"text","text":"even if a structure’s stored properties don’t have default values."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated to "},{"type":"codeVoice","code":"..<"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":".."},{"type":"text","text":" "},{"type":"text","text":"for the "},{"type":"text","text":"doc:BasicOperators#Half-Open-Range-Operator"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added an example of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type"},{"type":"text","text":"."}]}]}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/RevisionHistory","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Review the recent changes to this book."}],"kind":"article","metadata":{"title":"Historial de Revisiones"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Type-Properties":{"abstract":[],"title":"Type Properties","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties","url":"\/documentation\/the-swift-programming-language\/properties#Type-Properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Sets":{"abstract":[],"title":"Sets","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Sets","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Sets"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Function-Call-Expression":{"abstract":[],"title":"Function Call Expression","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Function-Call-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Function-Call-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Initializer-Expression":{"abstract":[],"title":"Initializer Expression","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Initializer-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Initializer-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#dynamicCallable":{"abstract":[],"title":"dynamicCallable","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicCallable","url":"\/documentation\/the-swift-programming-language\/attributes#dynamicCallable"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#While-Statement":{"abstract":[],"title":"While Statement","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#While-Statement","url":"\/documentation\/the-swift-programming-language\/statements#While-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","title":"Cadenas y caracteres","abstract":[{"type":"text","text":"Store and manipulate text."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints":{"abstract":[],"title":"Using a Protocol in Its Associated Type’s Constraints","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","url":"\/documentation\/the-swift-programming-language\/generics#Using-a-Protocol-in-Its-Associated-Types-Constraints"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Precedence-Group-Declaration":{"abstract":[],"title":"Precedence Group Declaration","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Precedence-Group-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Precedence-Group-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Compiler-Control-Statements":{"abstract":[],"title":"Compiler Control Statements","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compiler-Control-Statements","url":"\/documentation\/the-swift-programming-language\/statements#Compiler-Control-Statements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#frozen":{"abstract":[],"title":"frozen","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen","url":"\/documentation\/the-swift-programming-language\/attributes#frozen"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Failable-Initializer-Requirements":{"abstract":[],"title":"Failable Initializer Requirements","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Failable-Initializer-Requirements","url":"\/documentation\/the-swift-programming-language\/protocols#Failable-Initializer-Requirements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Type-Attributes":{"abstract":[],"title":"Type Attributes","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Type-Attributes","url":"\/documentation\/the-swift-programming-language\/attributes#Type-Attributes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Line-Control-Statement":{"abstract":[],"title":"Line Control Statement","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Line-Control-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Line-Control-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Try-Operator":{"abstract":[],"title":"Try Operator","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Try-Operator","url":"\/documentation\/the-swift-programming-language\/expressions#Try-Operator"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type":{"abstract":[],"title":"Enumerations with Cases of a Raw-Value Type","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","url":"\/documentation\/the-swift-programming-language\/declarations#Enumerations-with-Cases-of-a-Raw-Value-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Optional-Protocol-Requirements":{"abstract":[],"title":"Optional Protocol Requirements","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Optional-Protocol-Requirements","url":"\/documentation\/the-swift-programming-language\/protocols#Optional-Protocol-Requirements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#available":{"abstract":[],"title":"available","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#available","url":"\/documentation\/the-swift-programming-language\/attributes#available"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Protocol-Composition-Type":{"abstract":[],"title":"Protocol Composition Type","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type","url":"\/documentation\/the-swift-programming-language\/types#Protocol-Composition-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Asynchronous-Functions-and-Methods":{"abstract":[],"title":"Asynchronous Functions and Methods","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods","url":"\/documentation\/the-swift-programming-language\/declarations#Asynchronous-Functions-and-Methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"role":"article","title":"Operadores Avanzados","abstract":[{"type":"text","text":"Define custom operators, perform bitwise operations, and use builder syntax."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","title":"Concurrencia","abstract":[{"type":"text","text":"Perform asynchronous operations."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extending-a-Generic-Type":{"abstract":[],"title":"Extending a Generic Type","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type","url":"\/documentation\/the-swift-programming-language\/generics#Extending-a-Generic-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Macros":{"role":"article","title":"Macros","abstract":[{"type":"text","text":"Use macros to generate code at compile time."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/macros"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Methods-with-Special-Names":{"abstract":[],"title":"Methods with Special Names","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Methods-with-Special-Names","url":"\/documentation\/the-swift-programming-language\/declarations#Methods-with-Special-Names"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"role":"article","title":"Inicialización","abstract":[{"type":"text","text":"Set the initial values for a type’s stored properties and perform one-time setup."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"role":"article","title":"Herencia","abstract":[{"type":"text","text":"Subclass to add or override functionality."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"role":"article","title":"Memory Safety","abstract":[{"type":"text","text":"Structure your code to avoid conflicts when accessing memory."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Properties-Through-Optional-Chaining":{"abstract":[],"title":"Accessing Properties Through Optional Chaining","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Properties-Through-Optional-Chaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocol-Composition":{"abstract":[],"title":"Protocol Composition","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition","url":"\/documentation\/the-swift-programming-language\/protocols#Protocol-Composition"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Checking-for-Protocol-Conformance":{"abstract":[],"title":"Checking for Protocol Conformance","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance","url":"\/documentation\/the-swift-programming-language\/protocols#Checking-for-Protocol-Conformance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Self-Type":{"abstract":[],"title":"Self Type","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type","url":"\/documentation\/the-swift-programming-language\/types#Self-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Declaration-Modifiers":{"abstract":[],"title":"Declaration Modifiers","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","url":"\/documentation\/the-swift-programming-language\/declarations#Declaration-Modifiers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"role":"article","title":"Manejo de Errores","abstract":[{"type":"text","text":"Respond to and recover from errors."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Selector-Expression":{"abstract":[],"title":"Selector Expression","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Selector-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Type-Variable-Properties":{"abstract":[],"title":"Type Variable Properties","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Variable-Properties","url":"\/documentation\/the-swift-programming-language\/declarations#Type-Variable-Properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#String-Literals":{"abstract":[],"title":"String Literals","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#String-Literals"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#unknown":{"abstract":[],"title":"unknown","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unknown","url":"\/documentation\/the-swift-programming-language\/attributes#unknown"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes":{"role":"article","title":"Attributes","abstract":[{"type":"text","text":"Add information to declarations and types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Implicit-Conversion-to-a-Pointer-Type":{"abstract":[],"title":"Implicit Conversion to a Pointer Type","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Conversion-to-a-Pointer-Type","url":"\/documentation\/the-swift-programming-language\/expressions#Implicit-Conversion-to-a-Pointer-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Declaration-Attributes":{"abstract":[],"title":"Declaration Attributes","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","url":"\/documentation\/the-swift-programming-language\/attributes#Declaration-Attributes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#main":{"abstract":[],"title":"main","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#main","url":"\/documentation\/the-swift-programming-language\/attributes#main"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Literal-Expression":{"abstract":[],"title":"Literal Expression","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Literal-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Identifiers":{"abstract":[],"title":"Identifiers","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Identifiers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GuidedTour":{"role":"article","title":"Un Recorrido por Swift","abstract":[{"type":"text","text":"Explora las características y la sintaxis de Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/guidedtour"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Result-Transformations":{"abstract":[],"title":"Result Transformations","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Result-Transformations","url":"\/documentation\/the-swift-programming-language\/attributes#Result-Transformations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extensions-with-a-Generic-Where-Clause":{"abstract":[],"title":"Extensions with a Generic Where Clause","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause","url":"\/documentation\/the-swift-programming-language\/generics#Extensions-with-a-Generic-Where-Clause"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Metatype-Type":{"abstract":[],"title":"Metatype Type","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type","url":"\/documentation\/the-swift-programming-language\/types#Metatype-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Regular-Expression-Literals":{"abstract":[],"title":"Regular Expression Literals","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Regular-Expression-Literals","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Regular-Expression-Literals"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Conditionally-Conforming-to-a-Protocol":{"abstract":[],"title":"Conditionally Conforming to a Protocol","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Conditionally-Conforming-to-a-Protocol","url":"\/documentation\/the-swift-programming-language\/protocols#Conditionally-Conforming-to-a-Protocol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"role":"article","title":"Generics","abstract":[{"type":"text","text":"Write code that works for multiple types and specify requirements for those types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions":{"role":"article","title":"Expressions","abstract":[{"type":"text","text":"Access, modify, and assign values."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Initializer-Requirements":{"abstract":[],"title":"Initializer Requirements","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Initializer-Requirements","url":"\/documentation\/the-swift-programming-language\/protocols#Initializer-Requirements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Where-Clauses":{"abstract":[],"title":"Generic Where Clauses","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses","url":"\/documentation\/the-swift-programming-language\/generics#Generic-Where-Clauses"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Functions-that-Never-Return":{"abstract":[],"title":"Functions that Never Return","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return","url":"\/documentation\/the-swift-programming-language\/declarations#Functions-that-Never-Return"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Explicit-Member-Expression":{"abstract":[],"title":"Explicit Member Expression","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Explicit-Member-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#dynamicMemberLookup":{"abstract":[],"title":"dynamicMemberLookup","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicMemberLookup","url":"\/documentation\/the-swift-programming-language\/attributes#dynamicMemberLookup"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Optional-Chaining-Expression":{"abstract":[],"title":"Optional-Chaining Expression","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Optional-Chaining-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Optional-Chaining-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Keywords-and-Punctuation":{"abstract":[],"title":"Keywords and Punctuation","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Keywords-and-Punctuation","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Keywords-and-Punctuation"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Stored-Variable-Observers-and-Property-Observers":{"abstract":[],"title":"Stored Variable Observers and Property Observers","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Stored-Variable-Observers-and-Property-Observers","url":"\/documentation\/the-swift-programming-language\/declarations#Stored-Variable-Observers-and-Property-Observers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GenericParametersAndArguments":{"role":"article","title":"Generic Parameters and Arguments","abstract":[{"type":"text","text":"Generalize declarations to abstract away concrete types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/genericparametersandarguments"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Sendable":{"abstract":[],"title":"Sendable","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Sendable","url":"\/documentation\/the-swift-programming-language\/attributes#Sendable"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Literals":{"abstract":[],"title":"Literals","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Literals"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"role":"article","title":"Opaque and Boxed Types","abstract":[{"type":"text","text":"Hide implementation details about a value’s type."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/opaquetypes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Conditional-Expression":{"abstract":[],"title":"Conditional Expression","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Conditional-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Conditional-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Function-Type":{"abstract":[],"title":"Function Type","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","url":"\/documentation\/the-swift-programming-language\/types#Function-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Compile-Time-Diagnostic-Statement":{"abstract":[],"title":"Compile-Time Diagnostic Statement","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compile-Time-Diagnostic-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Compile-Time-Diagnostic-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Protocol-Associated-Type-Declaration":{"abstract":[],"title":"Protocol Associated Type Declaration","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Associated-Type-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Protocol-Associated-Type-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"role":"article","title":"Control de Acceso","abstract":[{"type":"text","text":"Manage the visibility of code by declaration, file, and module."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Wrappers":{"abstract":[],"title":"Property Wrappers","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Wrappers","url":"\/documentation\/the-swift-programming-language\/properties#Property-Wrappers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Subscripts-of-Optional-Type":{"abstract":[],"title":"Accessing Subscripts of Optional Type","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Subscripts-of-Optional-Type","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Subscripts-of-Optional-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Enumerations-with-Cases-of-Any-Type":{"abstract":[],"title":"Enumerations with Cases of Any Type","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type","url":"\/documentation\/the-swift-programming-language\/declarations#Enumerations-with-Cases-of-Any-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Observers":{"abstract":[],"title":"Property Observers","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","url":"\/documentation\/the-swift-programming-language\/properties#Property-Observers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"role":"article","title":"Optional Chaining","abstract":[{"type":"text","text":"Access members of an optional value without unwrapping."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"role":"article","title":"El Lenguaje de Programación Swift (5.9 beta)","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Break-Statement":{"abstract":[],"title":"Break Statement","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Break-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Extension-Declaration":{"abstract":[],"title":"Extension Declaration","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Extension-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Do-Statement":{"abstract":[],"title":"Do Statement","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Do-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"role":"article","title":"Fundamentos","abstract":[{"type":"text","text":"Trabaja con tipos comunes de datos y escribe sintaxis básica."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Defer-Statement":{"abstract":[],"title":"Defer Statement","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Defer-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Defer-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Subscripts":{"abstract":[],"title":"Generic Subscripts","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Subscripts","url":"\/documentation\/the-swift-programming-language\/generics#Generic-Subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types":{"role":"article","title":"Types","abstract":[{"type":"text","text":"Use built-in named and compound types."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Patterns":{"role":"article","title":"Patrones","abstract":[{"type":"text","text":"Match and destructure values."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/patterns"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switch-Statement":{"abstract":[],"title":"Switch Statement","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switch-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Switch-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","title":"Flujo de Control","abstract":[{"type":"text","text":"Structure code with branches, loops, and early exits."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Calling-Methods-Through-Optional-Chaining":{"abstract":[],"title":"Calling Methods Through Optional Chaining","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Calling-Methods-Through-Optional-Chaining","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Calling-Methods-Through-Optional-Chaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Contextual-Where-Clauses":{"abstract":[],"title":"Contextual Where Clauses","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Contextual-Where-Clauses","url":"\/documentation\/the-swift-programming-language\/generics#Contextual-Where-Clauses"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"role":"article","title":"Funciones","abstract":[{"type":"text","text":"Define and call functions, label their arguments, and use their return values."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Rethrowing-Functions-and-Methods":{"abstract":[],"title":"Rethrowing Functions and Methods","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","url":"\/documentation\/the-swift-programming-language\/declarations#Rethrowing-Functions-and-Methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"role":"article","title":"Protocols","abstract":[{"type":"text","text":"Define requirements that conforming types must implement."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Guard-Statement":{"abstract":[],"title":"Guard Statement","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Guard-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Guard-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Type-Casting-Operators":{"abstract":[],"title":"Type-Casting Operators","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Type-Casting-Operators","url":"\/documentation\/the-swift-programming-language\/expressions#Type-Casting-Operators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#unchecked":{"abstract":[],"title":"unchecked","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unchecked","url":"\/documentation\/the-swift-programming-language\/attributes#unchecked"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","title":"Conteo Automático de Referencias","abstract":[{"type":"text","text":"Model the lifetime of objects and their relationships."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocol-Extensions":{"abstract":[],"title":"Protocol Extensions","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions","url":"\/documentation\/the-swift-programming-language\/protocols#Protocol-Extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Availability-Condition":{"abstract":[],"title":"Availability Condition","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Availability-Condition","url":"\/documentation\/the-swift-programming-language\/statements#Availability-Condition"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Class-Only-Protocols":{"abstract":[],"title":"Class-Only Protocols","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols","url":"\/documentation\/the-swift-programming-language\/protocols#Class-Only-Protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Constant-Declaration":{"abstract":[],"title":"Constant Declaration","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Constant-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure":{"role":"article","title":"Lexical Structure","abstract":[{"type":"text","text":"Use the lowest-level components of the syntax."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/lexicalstructure"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Key-Path-Expression":{"abstract":[],"title":"Key-Path Expression","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Key-Path-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Protocol-Declaration":{"abstract":[],"title":"Protocol Declaration","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Protocol-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Function-Declaration":{"abstract":[],"title":"Function Declaration","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Function-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"role":"article","title":"Enumeraciones","abstract":[{"type":"text","text":"Model custom types that define a list of possible values."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Await-Operator":{"abstract":[],"title":"Await Operator","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Await-Operator","url":"\/documentation\/the-swift-programming-language\/expressions#Await-Operator"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations":{"role":"article","title":"Declaraciones","abstract":[{"type":"text","text":"Introduce types, operators, variables, and other names and constructs."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Throw-Statement":{"abstract":[],"title":"Throw Statement","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Throw-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Throw-Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switching-Over-Future-Enumeration-Cases":{"abstract":[],"title":"Switching Over Future Enumeration Cases","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","url":"\/documentation\/the-swift-programming-language\/statements#Switching-Over-Future-Enumeration-Cases"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Associated-Types":{"abstract":[],"title":"Associated Types","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types","url":"\/documentation\/the-swift-programming-language\/generics#Associated-Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Implicit-Member-Expression":{"abstract":[],"title":"Implicit Member Expression","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Member-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Implicit-Member-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Associated-Types-with-a-Generic-Where-Clause":{"abstract":[],"title":"Associated Types with a Generic Where Clause","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types-with-a-Generic-Where-Clause","url":"\/documentation\/the-swift-programming-language\/generics#Associated-Types-with-a-Generic-Where-Clause"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Type-Alias-Declaration":{"abstract":[],"title":"Type Alias Declaration","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Alias-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Type-Alias-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Actor-Declaration":{"abstract":[],"title":"Actor Declaration","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Actor-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Actor-Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements":{"role":"article","title":"Statements","abstract":[{"type":"text","text":"Group expressions and control the flow of execution."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Any-Type":{"abstract":[],"title":"Any Type","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Any-Type","url":"\/documentation\/the-swift-programming-language\/types#Any-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Conditional-Compilation-Block":{"abstract":[],"title":"Conditional Compilation Block","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","url":"\/documentation\/the-swift-programming-language\/statements#Conditional-Compilation-Block"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#resultBuilder":{"abstract":[],"title":"resultBuilder","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#resultBuilder","url":"\/documentation\/the-swift-programming-language\/attributes#resultBuilder"}}}