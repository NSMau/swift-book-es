{"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"kind":"article","metadata":{"title":"Historial de Revisiones"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2023-09-18"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 5.9.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":" and "},{"type":"codeVoice","code":"switch"},{"text":" expressions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Conditional-Expression","type":"reference","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros","type":"reference","isActive":true},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"with information about generating code at compile time."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Expanded the discussion of optionals in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added an example of concurrency to "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about boxed protocol types"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes"},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"buildPartialBlock(first:)"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"type":"codeVoice","code":"buildPartialBlock(accumulated:next:)"},{"type":"text","text":" methods"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Result-Transformations","isActive":true},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added visionOS to the lists of platforms in"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#available","isActive":true},{"type":"text","text":" "},{"text":"and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Formatted the formal grammar to use blank lines for grouping.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2023-03-30","type":"text"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 5.8.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"text":"doc:ControlFlow#Deferred-Actions","type":"text"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"showing "},{"code":"defer","type":"codeVoice"},{"text":" outside of error handling.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Adopted Swift-DocC for publication.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Minor corrections and additions throughout."}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2022-09-12"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 5.7.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:Concurrency#Sendable-Types"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"text":"with information about sending data between actors and tasks,","type":"text"},{"type":"text","text":" "},{"text":"and added information about the ","type":"text"},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@unchecked"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Sendable"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unchecked"},{"type":"text","text":" sections."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Regular-Expression-Literals"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about creating a regular expression."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the short form of ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":"-"},{"type":"codeVoice","code":"let"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about "},{"code":"#unavailable","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:ControlFlow#Checking-API-Availability"},{"text":" section.","type":"text"}]}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2022-03-14"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.6."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","type":"reference","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about using "},{"code":"#if","type":"codeVoice"},{"text":" ","type":"text"},{"text":"around chained method calls and other postfix expressions.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the visual styling of figures throughout."}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"2021-09-20","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 5.5.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about asynchronous functions, tasks, and actors","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","isActive":true,"type":"reference"},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"text":"and to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Actor-Declaration","isActive":true,"type":"reference"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Await-Operator","type":"reference"},{"text":" sections.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about identifiers that start with an underscore."}]}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2021-04-26"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 5.4.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:AdvancedOperators#Result-Builders"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#resultBuilder"},{"text":" sections","type":"text"},{"type":"text","text":" "},{"text":"with information about result builders.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Conversion-to-a-Pointer-Type"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with information about how in-out parameters"},{"text":" ","type":"text"},{"type":"text","text":"can be implicitly converted to unsafe pointers in a function call."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:Functions#Variadic-Parameters"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","isActive":true},{"type":"text","text":" sections,"},{"type":"text","text":" "},{"text":"now that a function can have multiple variadic parameters.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Member-Expression"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"now that implicit member expressions can be chained together.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"2020-09-16","type":"text"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.3."}]}]},{"content":[{"inlineContent":[{"text":"Added information about multiple trailing closures","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:Closures#Trailing-Closures","type":"text"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"and added information about how trailing closures are matched to parameters","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Function-Call-Expression"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about synthesized implementations","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" for enumerations"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Contextual-Where-Clauses"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"now that you can write a generic "},{"code":"where","type":"codeVoice"},{"text":" clause in more places.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:AutomaticReferenceCounting#Unowned-Optional-References"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about using unowned references with optional values."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"code":"@main","type":"codeVoice"},{"text":" attribute","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#main"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Added ","type":"text"},{"type":"codeVoice","code":"#filePath"},{"type":"text","text":" to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","isActive":true,"type":"reference"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"and updated the discussion of ","type":"text"},{"code":"#file","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Closures#Escaping-Closures"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that closures can refer to "},{"type":"codeVoice","code":"self"},{"text":" implicitly in more scenarios.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:ErrorHandling#Handling-Errors-Using-Do-Catch","type":"text"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement"},{"type":"text","text":" sections,"},{"type":"text","text":" "},{"type":"text","text":"now that a "},{"type":"codeVoice","code":"catch"},{"type":"text","text":" clause can match against multiple errors."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added more information about ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"and moved it into the new "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Any-Type","type":"reference","isActive":true},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","isActive":true},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"now that lazy properties can have observers.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration","isActive":true},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"text":"now that members of an enumeration can satisfy protocol requirements.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Stored-Variable-Observers-and-Property-Observers","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to describe when the getter is called before the observer."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety"},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to mention atomic operations."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2020-03-24","type":"text"}]}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 5.2."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about passing a key path instead of a closure"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","isActive":true,"type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Methods-with-Special-Names"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"with information about syntactic sugar the lets instances of","type":"text"},{"type":"text","text":" "},{"text":"classes, structures, and enumerations be used with function call syntax.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:Subscripts#Subscript-Options","type":"text"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"now that subscripts support parameters with default values.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type","type":"reference","isActive":true},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that the "},{"type":"codeVoice","code":"Self"},{"text":" can be used in more contexts.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:TheBasics#Implicitly-Unwrapped-Optionals","type":"text"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to make it clearer that an implicitly unwrapped optional value"},{"type":"text","text":" "},{"type":"text","text":"can be used as either an optional or non-optional value."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2019-09-10"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 5.1.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about functions"},{"text":" ","type":"text"},{"text":"that specify a protocol that their return value conforms to,","type":"text"},{"type":"text","text":" "},{"text":"instead of providing a specific named return type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","type":"reference","isActive":true},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about property wrappers"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Wrappers","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about enumerations and structures","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that are frozen for library evolution"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen","type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"type":"text","text":"doc:Functions#Functions-With-an-Implicit-Return"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"text","text":"doc:Properties#Shorthand-Getter-Declaration"},{"type":"text","text":" sections"},{"text":" ","type":"text"},{"type":"text","text":"with information about functions that omit "},{"code":"return","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about using subscripts on types"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:Subscripts#Type-Subscripts"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:Patterns#Enumeration-Case-Pattern"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that an enumeration case pattern can match an optional value."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:Initialization#Memberwise-Initializers-for-Structure-Types","type":"text"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that memberwise initializers support"},{"text":" ","type":"text"},{"type":"text","text":"omitting parameters for properties that have a default value."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about dynamic members"},{"type":"text","text":" "},{"text":"that are looked up by key path at runtime","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicMemberLookup","type":"reference","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added ","type":"text"},{"type":"codeVoice","code":"macCatalyst"},{"type":"text","text":" to the list of target environments"},{"text":" ","type":"text"},{"type":"text","text":"in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"reference","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that "},{"type":"codeVoice","code":"Self"},{"text":" can be used to refer to the type","type":"text"},{"type":"text","text":" "},{"text":"introduced by the current class, structure, or enumeration declaration.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2019-03-25"}]}]},{"items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 5.0.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"type":"text","text":"doc:StringsAndCharacters#Extended-String-Delimiters"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"with information about extended string delimiters.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicCallable"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about dynamically calling instances as functions"},{"type":"text","text":" "},{"text":"using the ","type":"text"},{"type":"codeVoice","code":"dynamicCallable"},{"type":"text","text":" attribute."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unknown","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","isActive":true,"type":"reference"},{"type":"text","text":" sections"},{"type":"text","text":" "},{"type":"text","text":"with information about handling future enumeration cases"},{"text":" ","type":"text"},{"type":"text","text":"in switch statements using"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"code":"unknown","type":"codeVoice"},{"text":" switch case attribute.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the identity key path ("},{"code":"\\.self","type":"codeVoice"},{"text":")","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about using the less than ("},{"code":"<","type":"codeVoice"},{"type":"text","text":") operator"},{"type":"text","text":" "},{"type":"text","text":"in platform conditions to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2018-09-17","type":"text"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 4.2."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about accessing all of an enumeration’s cases"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:Enumerations#Iterating-over-Enumeration-Cases"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Added information about ","type":"text"},{"type":"codeVoice","code":"#error"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"#warning"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compile-Time-Diagnostic-Statement","isActive":true},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about inlining"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"under the ","type":"text"},{"code":"inlinable","type":"codeVoice"},{"text":" and  ","type":"text"},{"type":"codeVoice","code":"usableFromInline"},{"text":" attributes.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about members that are looked up by name at runtime","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"under the ","type":"text"},{"code":"dynamicMemberLookup","type":"codeVoice"},{"type":"text","text":" attribute."}]}]},{"content":[{"inlineContent":[{"text":"Added information about the ","type":"text"},{"code":"requires_stored_property_inits","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"warn_unqualified_access"},{"text":" attributes","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about how to conditionally compile code"},{"type":"text","text":" "},{"text":"depending on the Swift compiler version being used","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about "},{"type":"codeVoice","code":"#dsohandle"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","type":"reference","isActive":true},{"text":" section.","type":"text"}]}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2018-03-29"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 4.1."}]}]},{"content":[{"inlineContent":[{"text":"Added information about synthesized implementations of equivalence operators","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"text":"doc:AdvancedOperators#Equivalence-Operators","type":"text"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about conditional protocol conformance","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","type":"reference","isActive":true},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"and to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Conditionally-Conforming-to-a-Protocol"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true,"type":"reference"},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about recursive protocol constraints","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","type":"reference","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"canImport()"},{"type":"text","text":" and "},{"type":"codeVoice","code":"targetEnvironment()"},{"text":" platform conditions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true},{"type":"text","text":"."}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2017-12-04"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 4.0.3.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that key paths support subscript components."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"2017-09-19","type":"text"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 4.0."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about exclusive access to memory"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","type":"reference","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types-with-a-Generic-Where-Clause","isActive":true,"type":"reference"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"now that you can use generic ","type":"text"},{"type":"codeVoice","code":"where"},{"text":" clauses","type":"text"},{"type":"text","text":" "},{"text":"to constrain associated types.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about multiline string literals"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:StringsAndCharacters#String-Literals"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","isActive":true,"type":"reference"},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"text":"and to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure"},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"type":"text","text":"in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference","isActive":true},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"now that this attribute is inferred in fewer places.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Subscripts"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"now that subscripts can be generic.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true,"type":"reference"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"and in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","isActive":true},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"text":"now that protocol composition types can contain a superclass requirement.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of protocol extensions"},{"text":" ","type":"text"},{"text":"in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration"},{"text":" ","type":"text"},{"text":"now that ","type":"text"},{"code":"final","type":"codeVoice"},{"type":"text","text":" isn’t allowed in them."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about preconditions and fatal errors"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"text","text":"doc:TheBasics#Assertions-and-Preconditions"},{"type":"text","text":" section."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2017-03-27","type":"text"}]}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 3.1.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause","type":"reference","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"with information about extensions that include requirements.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added examples of iterating over a range"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:ControlFlow#For-In-Loops"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added an example of failable numeric conversions"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:Initialization#Failable-Initializers","type":"text"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"about using the ","type":"text"},{"code":"available","type":"codeVoice"},{"text":" attribute with a Swift language version.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to note that argument labels aren’t allowed when writing a function type."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of Swift language version numbers"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that an optional patch number is allowed."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","type":"reference","isActive":true},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"now that Swift distinguishes between functions that take multiple parameters","type":"text"},{"type":"text","text":" "},{"text":"and functions that take a single parameter of a tuple type.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Removed the Dynamic Type Expression section"},{"type":"text","text":" "},{"text":"from the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","isActive":true},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that "},{"type":"codeVoice","code":"type(of:)"},{"type":"text","text":" is a Swift standard library function."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2016-10-27"}]}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 3.0.1.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of weak and unowned references"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"type":"codeVoice","code":"unowned"},{"text":", ","type":"text"},{"code":"unowned(safe)","type":"codeVoice"},{"type":"text","text":", and "},{"code":"unowned(unsafe)","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"declaration modifiers"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","type":"reference","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the ","type":"text"},{"type":"text","text":"doc:TypeCasting#Type-Casting-for-Any-and-AnyObject"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"about using an optional value when a value of type "},{"type":"codeVoice","code":"Any"},{"text":" is expected.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","isActive":true},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"text":"to separate the discussion of parenthesized expressions and tuple expressions.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2016-09-13"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 3.0."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of functions in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","isActive":true},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","isActive":true,"type":"reference"},{"type":"text","text":" section to note that"},{"type":"text","text":" "},{"type":"text","text":"all parameters get an argument label by default."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of operators"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"now that you implement them as type methods instead of as global functions."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"code":"open","type":"codeVoice"},{"type":"text","text":" and "},{"code":"fileprivate","type":"codeVoice"},{"text":" access-level modifiers","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of ","type":"text"},{"type":"codeVoice","code":"inout"},{"type":"text","text":" in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to note that it appears in front of a parameter’s type"},{"type":"text","text":" "},{"type":"text","text":"instead of in front of a parameter’s name."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of the ","type":"text"},{"type":"codeVoice","code":"@noescape"},{"text":" and ","type":"text"},{"code":"@autoclosure","type":"codeVoice"},{"type":"text","text":" attributes"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"text","text":"doc:Closures#Escaping-Closures"},{"type":"text","text":" and "},{"text":"doc:Closures#Autoclosures","type":"text"},{"type":"text","text":" sections"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","type":"reference"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"now that they’re type attributes, rather than declaration attributes."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about operator precedence groups","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:AdvancedOperators#Precedence-for-Custom-Infix-Operators","type":"text"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","isActive":true,"type":"reference"},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"type":"text","text":"and to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Precedence-Group-Declaration","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations"},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated discussion throughout"},{"text":" ","type":"text"},{"type":"text","text":"to use macOS instead of OS X,"},{"type":"text","text":" "},{"type":"codeVoice","code":"Error"},{"text":" instead of ","type":"text"},{"code":"ErrorProtocol","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and protocol names such as ","type":"text"},{"type":"codeVoice","code":"ExpressibleByStringLiteral"},{"text":" ","type":"text"},{"text":"instead of ","type":"text"},{"code":"StringLiteralConvertible","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses","type":"reference"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics"},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"text":"and in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","type":"reference","isActive":true},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"type":"text","text":"now that generic "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clauses are written at the end of a declaration."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion in the ","type":"text"},{"type":"text","text":"doc:Closures#Escaping-Closures"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that closures are nonescaping by default."}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"type":"text","text":"doc:TheBasics#Optional-Binding"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","isActive":true},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#While-Statement","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that "},{"code":"if","type":"codeVoice"},{"text":", ","type":"text"},{"code":"while","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"use a comma-separated list of conditions without "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clauses."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about switch cases that have multiple patterns","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:ControlFlow#Switch"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","type":"reference"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switch-Statement","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","isActive":true},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of function types"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"now that function argument labels are no longer part of a function’s type."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of protocol composition types","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true,"type":"reference"},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"text":"and in the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types"},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to use the new "},{"code":"Protocol1 & Protocol2","type":"codeVoice"},{"text":" syntax.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion in the Dynamic Type Expression section","type":"text"},{"type":"text","text":" "},{"text":"to use the new ","type":"text"},{"code":"type(of:)","type":"codeVoice"},{"type":"text","text":" syntax for dynamic type expressions."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of line control statements"},{"text":" ","type":"text"},{"text":"to use the ","type":"text"},{"code":"#sourceLocation(file:line:)","type":"codeVoice"},{"text":" syntax","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Line-Control-Statement","type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"to use the new "},{"code":"Never","type":"codeVoice"},{"type":"text","text":" type."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about playground literals","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion in the ","type":"text"},{"type":"text","text":"doc:Declarations#In-Out-Parameters"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to note that only nonescaping closures can capture in-out parameters.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion about default parameters","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"text","text":"doc:Functions#Default-Parameter-Values"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that they can’t be reordered in function calls."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated attribute arguments to use a colon"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","isActive":true},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about throwing an error"},{"text":" ","type":"text"},{"text":"inside the catch block of a rethrowing function","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about accessing the selector","type":"text"},{"type":"text","text":" "},{"text":"of an Objective-C property’s getter or setter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression","type":"reference","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Alias-Declaration","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"about generic type aliases and using type aliases inside of protocols."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of function types in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to note that parentheses around the parameter types are required.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","isActive":true},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"text":"to note that the ","type":"text"},{"code":"@IBAction","type":"codeVoice"},{"type":"text","text":", "},{"code":"@IBOutlet","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"@NSManaged"},{"text":" attributes","type":"text"},{"text":" ","type":"text"},{"text":"imply the ","type":"text"},{"code":"@objc","type":"codeVoice"},{"text":" attribute.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"@GKInspectable"},{"text":" attribute","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of optional protocol requirements"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Optional-Protocol-Requirements","type":"reference","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to clarify that they’re used only in code that interoperates with Objective-C."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Removed the discussion of explicitly using "},{"code":"let","type":"codeVoice"},{"type":"text","text":" in function parameters"},{"type":"text","text":" "},{"text":"from the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","type":"reference","isActive":true},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Removed the discussion of the "},{"code":"Boolean","type":"codeVoice"},{"text":" protocol","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"from the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"text":"now that the protocol has been removed from the Swift standard library.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Corrected the discussion of the "},{"type":"codeVoice","code":"@NSApplicationMain"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true,"type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2016-03-21"}],"type":"strong"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 2.2."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about how to conditionally compile code","type":"text"},{"type":"text","text":" "},{"type":"text","text":"depending on the version of Swift being used"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about how to distinguish","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"between methods or initializers whose names differ"},{"text":" ","type":"text"},{"type":"text","text":"only by the names of their arguments"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"#selector"},{"type":"text","text":" syntax"},{"type":"text","text":" "},{"text":"for Objective-C selectors","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression","type":"reference","isActive":true},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of associated types","type":"text"},{"type":"text","text":" "},{"text":"to use the ","type":"text"},{"type":"codeVoice","code":"associatedtype"},{"text":" keyword","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types","isActive":true},{"type":"text","text":" "},{"type":"text","text":"and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Associated-Type-Declaration","isActive":true,"type":"reference"},{"text":" sections.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated information about initializers that return "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" "},{"text":"before the instance is fully initialized","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"text":"doc:Initialization#Failable-Initializers","type":"text"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about comparing tuples"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:BasicOperators#Comparison-Operators","type":"text"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about using keywords as external parameter names","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Keywords-and-Punctuation"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of the ","type":"text"},{"type":"codeVoice","code":"@objc"},{"text":" attribute","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"text":" section to note that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"enumerations and enumeration cases can use this attribute."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:LexicalStructure#Operators"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"with discussion of custom operators that contain a dot.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"that rethrowing functions can’t directly throw errors.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a note to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"about property observers being called","type":"text"},{"type":"text","text":" "},{"text":"when you pass a property as an in-out parameter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a section about error handling","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","type":"reference"},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated figures in the"},{"type":"text","text":" "},{"type":"text","text":"doc:AutomaticReferenceCounting#Weak-References"},{"text":" ","type":"text"},{"text":"section to show the deallocation process more clearly.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Removed discussion of C-style ","type":"text"},{"code":"for","type":"codeVoice"},{"type":"text","text":" loops,"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"++","type":"codeVoice"},{"type":"text","text":" prefix and postfix operators,"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"type":"codeVoice","code":"--"},{"text":" prefix and postfix operators.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Removed discussion of variable function arguments","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the special syntax for curried functions."}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2015-10-20","type":"text"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 2.1.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#String-Interpolation"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","type":"reference","isActive":true},{"text":" sections","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that string interpolations can contain string literals."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"text":"doc:Closures#Escaping-Closures","type":"text"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"with information about the "},{"type":"codeVoice","code":"@noescape"},{"text":" attribute.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"reference","isActive":true},{"type":"text","text":" sections"},{"type":"text","text":" "},{"text":"with information about tvOS.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the behavior of in-out parameters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:Declarations#In-Out-Parameters","type":"text"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information to the "},{"type":"text","text":"doc:Expressions#Capture-Lists"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"about how values specified in closure capture lists are captured.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining"},{"text":" ","type":"text"},{"type":"text","text":"section to clarify how assignment through optional chaining"},{"type":"text","text":" "},{"type":"text","text":"behaves."}]}]},{"content":[{"inlineContent":[{"text":"Improved the discussion of autoclosures","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"text","text":"doc:Closures#Autoclosures"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added an example that uses the ","type":"text"},{"type":"codeVoice","code":"??"},{"text":" operator","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour"},{"text":" chapter.","type":"text"}]}]}]},{"inlineContent":[{"inlineContent":[{"text":"2015-09-16","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 2.0.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about error handling"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","type":"reference","isActive":true},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","isActive":true},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Throw-Statement","type":"reference","isActive":true},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Defer-Statement","isActive":true},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Try-Operator","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:ErrorHandling#Representing-and-Throwing-Errors"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"now that all types can conform to the ","type":"text"},{"code":"ErrorType","type":"codeVoice"},{"text":" protocol.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the new ","type":"text"},{"code":"try?","type":"codeVoice"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"text":"doc:ErrorHandling#Converting-Errors-to-Optional-Values","type":"text"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about recursive enumerations"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Enumerations#Recursive-Enumerations"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","isActive":true},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","type":"reference"},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about API availability checking","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:ControlFlow#Checking-API-Availability"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","type":"reference"},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Availability-Condition","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","type":"reference"},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the new "},{"code":"guard","type":"codeVoice"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:ControlFlow#Early-Exit","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","type":"reference"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Guard-Statement"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","isActive":true,"type":"reference"},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about protocol extensions"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions","type":"reference"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","type":"reference","isActive":true},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about access control for unit testing"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"text":"doc:AccessControl#Access-Levels-for-Unit-Test-Targets","type":"text"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl"},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the new optional pattern"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Patterns#Optional-Pattern"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","isActive":true},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:ControlFlow#Repeat-While"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"with information about the ","type":"text"},{"code":"repeat","type":"codeVoice"},{"type":"text","text":"-"},{"code":"while","type":"codeVoice"},{"text":" loop.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"text":"now that ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" no longer conforms"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"code":"CollectionType","type":"codeVoice"},{"type":"text","text":" protocol from the Swift standard library."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the new Swift standard library","type":"text"},{"type":"text","text":" "},{"code":"print(_:separator:terminator)","type":"codeVoice"},{"text":" function","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:TheBasics#Printing-Constants-and-Variables"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about the behavior","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of enumeration cases with "},{"code":"String","type":"codeVoice"},{"text":" raw values","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"text","text":"doc:Enumerations#Implicitly-Assigned-Raw-Values"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations"},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations"},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"@autoclosure"},{"text":" attribute —","type":"text"},{"type":"text","text":" "},{"text":"including its ","type":"text"},{"code":"@autoclosure(escaping)","type":"codeVoice"},{"text":" form —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"text","text":"doc:Closures#Autoclosures"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about the "},{"code":"@available","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"codeVoice","code":"@warn_unused_result"},{"type":"text","text":" attributes."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Type-Attributes"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"with information about the ","type":"text"},{"code":"@convention","type":"codeVoice"},{"type":"text","text":" attribute."}]}]},{"content":[{"inlineContent":[{"text":"Added an example of using multiple optional bindings","type":"text"},{"type":"text","text":" "},{"text":"with a ","type":"text"},{"type":"codeVoice","code":"where"},{"text":" clause","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"text":"doc:TheBasics#Optional-Binding","type":"text"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"about how concatenating string literals using the ","type":"text"},{"type":"codeVoice","code":"+"},{"type":"text","text":" operator"},{"type":"text","text":" "},{"type":"text","text":"happens at compile time."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"about comparing metatype values and using them","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to construct instances with initializer expressions."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"text":"doc:TheBasics#Debugging-with-Assertions","type":"text"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"about when user-defined assertions are disabled.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"type":"codeVoice","code":"@NSManaged"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference","isActive":true},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"now that the attribute can be applied to certain instance methods.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"text":"doc:Functions#Variadic-Parameters","type":"text"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that variadic parameters can be declared in any position"},{"type":"text","text":" "},{"type":"text","text":"in a function’s parameter list."}]}]},{"content":[{"inlineContent":[{"text":"Added information","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"text","text":"doc:Initialization#Overriding-a-Failable-Initializer"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"about how a nonfailable initializer can delegate"},{"type":"text","text":" "},{"text":"up to a failable initializer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by force-unwrapping the result of the superclass’s initializer."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about using enumeration cases as functions","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about explicitly referencing an initializer"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Initializer-Expression","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about build configuration"},{"text":" ","type":"text"},{"type":"text","text":"and line control statements"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compiler-Control-Statements"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"about constructing class instances from metatype values.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the","type":"text"},{"type":"text","text":" "},{"text":"doc:AutomaticReferenceCounting#Weak-References","type":"text"},{"type":"text","text":" "},{"text":"section about weak references being unsuitable for caching.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated a note in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to mention that stored type properties are lazily initialized.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"text","text":"doc:Closures#Capturing-Values"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to clarify how variables and constants are captured in closures."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"to describe when you can apply the ","type":"text"},{"code":"@objc","type":"codeVoice"},{"text":" attribute to classes.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the ","type":"text"},{"type":"text","text":"doc:ErrorHandling#Handling-Errors"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about the performance of executing a "},{"type":"codeVoice","code":"throw"},{"type":"text","text":" statement."},{"text":" ","type":"text"},{"type":"text","text":"Added similar information about the "},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"with information about stored and computed type properties","type":"text"},{"text":" ","type":"text"},{"text":"for classes, structures, and enumerations.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement","type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about labeled break statements."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated a note in the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to clarify the behavior of "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" and "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observers."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the ","type":"text"},{"type":"text","text":"doc:AccessControl#Access-Levels"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"with information about the scope of ","type":"text"},{"code":"private","type":"codeVoice"},{"type":"text","text":" access."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"doc:AutomaticReferenceCounting#Weak-References"},{"text":" ","type":"text"},{"type":"text","text":"section about the differences in weak references"},{"type":"text","text":" "},{"type":"text","text":"between garbage collected systems and ARC."}]}]},{"content":[{"inlineContent":[{"text":"Updated the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#Special-Characters-in-String-Literals"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"with a more precise definition of Unicode scalars."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2015-04-08","type":"text"}]}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 1.2."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Swift now has a native ","type":"text"},{"code":"Set","type":"codeVoice"},{"type":"text","text":" collection type."},{"text":" ","type":"text"},{"text":"For more information, see ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Sets"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"@autoclosure","type":"codeVoice"},{"type":"text","text":" is now an attribute of the parameter declaration,"},{"text":" ","type":"text"},{"text":"not its type.","type":"text"},{"type":"text","text":" "},{"text":"There’s also a new ","type":"text"},{"type":"codeVoice","code":"@noescape"},{"text":" parameter declaration attribute.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Type methods and properties now use the ","type":"text"},{"type":"codeVoice","code":"static"},{"text":" keyword","type":"text"},{"type":"text","text":" "},{"text":"as a declaration modifier.","type":"text"},{"text":" ","type":"text"},{"text":"For more information see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Variable-Properties","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift now includes the "},{"code":"as?","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"as!"},{"text":" failable downcast operators.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For more information,"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a new guide section about"},{"type":"text","text":" "},{"text":"doc:StringsAndCharacters#String-Indices","type":"text"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Removed the overflow division ("},{"code":"&\/","type":"codeVoice"},{"text":") and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"overflow remainder ("},{"code":"&%","type":"codeVoice"},{"type":"text","text":") operators"},{"text":" ","type":"text"},{"type":"text","text":"from "},{"text":"doc:AdvancedOperators#Overflow-Operators","type":"text"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the rules for constant and","type":"text"},{"type":"text","text":" "},{"text":"constant property declaration and initialization.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For more information, see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the definition of Unicode scalars in string literals.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"See "},{"type":"text","text":"doc:StringsAndCharacters#Special-Characters-in-String-Literals"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated "},{"type":"text","text":"doc:BasicOperators#Range-Operators"},{"text":" to note that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a half-open range with the same start and end index will be empty."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated ","type":"text"},{"text":"doc:Closures#Closures-Are-Reference-Types","type":"text"},{"text":" to clarify","type":"text"},{"text":" ","type":"text"},{"text":"the capturing rules for variables.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Value-Overflow"},{"type":"text","text":" to clarify"},{"type":"text","text":" "},{"text":"the overflow behavior of signed and unsigned integers","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration","type":"reference","isActive":true},{"text":" to clarify","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"protocol declaration scope and members."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"type":"text","text":"doc:AutomaticReferenceCounting#Defining-a-Capture-List"},{"type":"text","text":" "},{"text":"to clarify the syntax for","type":"text"},{"type":"text","text":" "},{"text":"weak and unowned references in closure capture lists.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated "},{"type":"text","text":"doc:LexicalStructure#Operators"},{"type":"text","text":" to explicitly mention"},{"text":" ","type":"text"},{"type":"text","text":"examples of supported characters for custom operators,"},{"type":"text","text":" "},{"type":"text","text":"such as those in the Mathematical Operators, Miscellaneous Symbols,"},{"type":"text","text":" "},{"text":"and Dingbats Unicode blocks.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Constants can now be declared without being initialized","type":"text"},{"text":" ","type":"text"},{"text":"in local function scope.","type":"text"},{"text":" ","type":"text"},{"text":"They must have a set value before first use.","type":"text"},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"In an initializer, constant properties can now only assign a value once.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For more information,"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"type":"text","text":"doc:Initialization#Assigning-Constant-Properties-During-Initialization"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiple optional bindings can now appear in a single "},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"type":"text","text":"as a comma-separated list of assignment expressions."},{"text":" ","type":"text"},{"type":"text","text":"For more information, see "},{"text":"doc:TheBasics#Optional-Binding","type":"text"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Optional-Chaining-Expression","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"must appear within a postfix expression."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Protocol casts are no longer limited to "},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" protocols."}]}]},{"content":[{"inlineContent":[{"text":"Type casts that can fail at runtime","type":"text"},{"type":"text","text":" "},{"text":"now use the ","type":"text"},{"code":"as?","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"as!","type":"codeVoice"},{"text":" operator,","type":"text"},{"text":" ","type":"text"},{"text":"and type casts that are guaranteed not to fail use the ","type":"text"},{"type":"codeVoice","code":"as"},{"text":" operator.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Type-Casting-Operators","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"2014-10-16","type":"text"}],"type":"strong"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 1.1."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a full guide to "},{"type":"text","text":"doc:Initialization#Failable-Initializers"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a description of "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Failable-Initializer-Requirements","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"for protocols."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Constants and variables of type "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" can now contain"},{"type":"text","text":" "},{"type":"text","text":"function instances. Updated the example in "},{"text":"doc:TypeCasting#Type-Casting-for-Any-and-AnyObject","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to show how to check for and cast to a function type"},{"type":"text","text":" "},{"text":"within a ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" statement.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Enumerations with raw values"},{"type":"text","text":" "},{"text":"now have a ","type":"text"},{"code":"rawValue","type":"codeVoice"},{"type":"text","text":" property rather than a "},{"type":"codeVoice","code":"toRaw()"},{"type":"text","text":" method"},{"text":" ","type":"text"},{"text":"and a failable initializer with a ","type":"text"},{"type":"codeVoice","code":"rawValue"},{"text":" parameter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"rather than a "},{"type":"codeVoice","code":"fromRaw()"},{"text":" method.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"text","text":"doc:Enumerations#Raw-Values"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new reference section about"},{"text":" ","type":"text"},{"type":"text","text":"doc:Declarations#Failable-Initializers"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which can trigger initialization failure."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Custom operators can now contain the "},{"code":"?","type":"codeVoice"},{"type":"text","text":" character."},{"type":"text","text":" "},{"type":"text","text":"Updated the "},{"type":"text","text":"doc:LexicalStructure#Operators"},{"text":" reference to describe","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the revised rules."},{"type":"text","text":" "},{"text":"Removed a duplicate description of the valid set of operator characters","type":"text"},{"text":" ","type":"text"},{"text":"from ","type":"text"},{"text":"doc:AdvancedOperators#Custom-Operators","type":"text"},{"text":".","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"2014-08-18","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"New document that describes Swift 1.0,","type":"text"},{"type":"text","text":" "},{"text":"Apple’s new programming language for building iOS and OS X apps.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Initializer-Requirements","isActive":true},{"text":" in protocols.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"doc:TheBasics#Assertions-and-Preconditions","type":"text"},{"type":"text","text":" can now use string interpolation."},{"type":"text","text":" "},{"text":"Removed a note to the contrary.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:StringsAndCharacters#Concatenating-Strings-and-Characters"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to reflect the fact that "},{"code":"String","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Character","type":"codeVoice"},{"text":" values","type":"text"},{"type":"text","text":" "},{"text":"can no longer be combined with the addition operator (","type":"text"},{"type":"codeVoice","code":"+"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or addition assignment operator ("},{"type":"codeVoice","code":"+="},{"type":"text","text":")."},{"type":"text","text":" "},{"text":"These operators are now used only with ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" values."},{"text":" ","type":"text"},{"text":"Use the ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" type’s "},{"type":"codeVoice","code":"append(_:)"},{"type":"text","text":" method"},{"text":" ","type":"text"},{"type":"text","text":"to append a single "},{"code":"Character","type":"codeVoice"},{"text":" value onto the end of a string.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"code":"availability","type":"codeVoice"},{"text":" attribute to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"doc:TheBasics#Optionals"},{"type":"text","text":" no longer implicitly evaluate to"},{"text":" ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" when they have a value and "},{"type":"codeVoice","code":"false"},{"text":" when they do not,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to avoid confusion when working with optional "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"Instead, make an explicit check against "},{"type":"codeVoice","code":"nil"},{"text":" ","type":"text"},{"text":"with the ","type":"text"},{"code":"==","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"!=","type":"codeVoice"},{"text":" operators","type":"text"},{"text":" ","type":"text"},{"text":"to find out if an optional contains a value.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift now has a ","type":"text"},{"text":"doc:BasicOperators#Nil-Coalescing-Operator","type":"text"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"a ?? b"},{"text":"), which unwraps an optional’s value if it exists,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or returns a default value if the optional is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated and expanded"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"text","text":"doc:StringsAndCharacters#Comparing-Strings"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to reflect and demonstrate that string and character comparison"},{"text":" ","type":"text"},{"text":"and prefix \/ suffix comparison are now based on","type":"text"},{"text":" ","type":"text"},{"text":"Unicode canonical equivalence of extended grapheme clusters.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"You can now try to set a property’s value, assign to a subscript,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or call a mutating method or operator through"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","isActive":true,"type":"reference"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The information about"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"has been updated accordingly,"},{"type":"text","text":" "},{"text":"and the examples of checking for method call success in","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Calling-Methods-Through-Optional-Chaining","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"have been expanded to show how to check for property setting success."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Subscripts-of-Optional-Type","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"through optional chaining."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:CollectionTypes#Accessing-and-Modifying-an-Array","type":"text"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"to note that you can no longer append a single item to an array","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"+="},{"type":"text","text":" operator."},{"text":" ","type":"text"},{"text":"Instead, use the ","type":"text"},{"type":"codeVoice","code":"append(_:)"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"or append a single-item array with the "},{"type":"codeVoice","code":"+="},{"text":" operator.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a note that the start value "},{"code":"a","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"for the "},{"type":"text","text":"doc:BasicOperators#Range-Operators"},{"text":" ","type":"text"},{"code":"a...b","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"a..<b"},{"type":"text","text":" "},{"type":"text","text":"must not be greater than the end value "},{"code":"b","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Rewrote the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","isActive":true},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"text":"to remove its introductory coverage of initializer overrides.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This chapter now focuses more on the addition of"},{"type":"text","text":" "},{"text":"new functionality in a subclass,","type":"text"},{"type":"text","text":" "},{"text":"and the modification of existing functionality with overrides.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The chapter’s example of"},{"text":" ","type":"text"},{"text":"doc:Inheritance#Overriding-Property-Getters-and-Setters","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"has been rewritten to show how to override a "},{"code":"description","type":"codeVoice"},{"text":" property.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(The examples of modifying an inherited property’s default value"},{"type":"text","text":" "},{"text":"in a subclass initializer have been moved to","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","isActive":true,"type":"reference"},{"text":" chapter.)","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the"},{"type":"text","text":" "},{"type":"text","text":"doc:Initialization#Initializer-Inheritance-and-Overriding"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to note that overrides of a designated initializer"},{"type":"text","text":" "},{"type":"text","text":"must now be marked with the "},{"type":"codeVoice","code":"override"},{"type":"text","text":" modifier."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:Initialization#Required-Initializers"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to note that the ","type":"text"},{"type":"codeVoice","code":"required"},{"type":"text","text":" modifier is now written before"},{"text":" ","type":"text"},{"type":"text","text":"every subclass implementation of a required initializer,"},{"text":" ","type":"text"},{"text":"and that the requirements for required initializers","type":"text"},{"text":" ","type":"text"},{"text":"can now be satisfied by automatically inherited initializers.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Infix ","type":"text"},{"text":"doc:AdvancedOperators#Operator-Methods","type":"text"},{"text":" no longer require","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"@infix","type":"codeVoice"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"@prefix","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"@postfix"},{"text":" attributes","type":"text"},{"text":" ","type":"text"},{"text":"for ","type":"text"},{"text":"doc:AdvancedOperators#Prefix-and-Postfix-Operators","type":"text"},{"type":"text","text":" "},{"type":"text","text":"have been replaced by "},{"code":"prefix","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"postfix"},{"text":" declaration modifiers.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a note about the order in which"},{"text":" ","type":"text"},{"type":"text","text":"doc:AdvancedOperators#Prefix-and-Postfix-Operators"},{"type":"text","text":" are applied"},{"text":" ","type":"text"},{"type":"text","text":"when both a prefix and a postfix operator are applied to"},{"type":"text","text":" "},{"type":"text","text":"the same operand."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Operator functions for"},{"type":"text","text":" "},{"type":"text","text":"doc:AdvancedOperators#Compound-Assignment-Operators"},{"type":"text","text":" no longer use"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"code":"@assignment","type":"codeVoice"},{"type":"text","text":" attribute when defining the function."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The order in which modifiers are specified when defining"},{"type":"text","text":" "},{"type":"text","text":"doc:AdvancedOperators#Custom-Operators"},{"text":" has changed.","type":"text"},{"type":"text","text":" "},{"text":"You now write ","type":"text"},{"code":"prefix operator","type":"codeVoice"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":"operator prefix"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"for example."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about the ","type":"text"},{"type":"codeVoice","code":"dynamic"},{"text":" declaration modifier","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about how type inference works"},{"text":" ","type":"text"},{"text":"with ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added more information about curried functions."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new chapter about ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","isActive":true},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"to reflect the fact that Swift’s ","type":"text"},{"type":"codeVoice","code":"Character"},{"type":"text","text":" type now represents"},{"type":"text","text":" "},{"type":"text","text":"a single Unicode extended grapheme cluster."},{"type":"text","text":" "},{"text":"Includes a new section on","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:StringsAndCharacters#Extended-Grapheme-Clusters"},{"text":" ","type":"text"},{"type":"text","text":"and more information about"},{"type":"text","text":" "},{"text":"doc:StringsAndCharacters#Unicode-Scalar-Values","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"text":"doc:StringsAndCharacters#Comparing-Strings","type":"text"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:StringsAndCharacters#String-Literals","type":"text"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to note that Unicode scalars inside string literals"},{"type":"text","text":" "},{"type":"text","text":"are now written as "},{"code":"\\u{n}","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"where "},{"code":"n","type":"codeVoice"},{"type":"text","text":" is a hexadecimal number between 0 and 10FFFF,"},{"text":" ","type":"text"},{"type":"text","text":"the range of Unicode’s codespace."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"NSString"},{"type":"text","text":" "},{"type":"codeVoice","code":"length"},{"text":" property is now mapped onto","type":"text"},{"type":"text","text":" "},{"text":"Swift’s native ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" type as "},{"type":"codeVoice","code":"utf16Count"},{"text":", not ","type":"text"},{"type":"codeVoice","code":"utf16count"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s native "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type no longer has"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"uppercaseString"},{"type":"text","text":" or "},{"code":"lowercaseString","type":"codeVoice"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"The corresponding section in"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","isActive":true},{"text":" ","type":"text"},{"text":"has been removed, and various code examples have been updated.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added a new section about","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"doc:Initialization#Initializer-Parameters-Without-Argument-Labels"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new section about","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doc:Initialization#Required-Initializers"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Added a new section about ","type":"text"},{"type":"text","text":"doc:Functions#Optional-Tuple-Return-Types"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"text","text":"doc:TheBasics#Type-Annotations"},{"type":"text","text":" section to note that"},{"type":"text","text":" "},{"type":"text","text":"multiple related variables can be defined on a single line"},{"text":" ","type":"text"},{"type":"text","text":"with one type annotation."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@optional"},{"type":"text","text":", "},{"type":"codeVoice","code":"@lazy"},{"text":", ","type":"text"},{"type":"codeVoice","code":"@final"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"@required"},{"text":" attributes","type":"text"},{"type":"text","text":" "},{"text":"are now the ","type":"text"},{"code":"optional","type":"codeVoice"},{"type":"text","text":", "},{"code":"lazy","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"final"},{"type":"text","text":", and "},{"type":"codeVoice","code":"required"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","type":"reference","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the entire book to refer to "},{"code":"..<","type":"codeVoice"},{"text":" as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"text","text":"doc:BasicOperators#Half-Open-Range-Operator"},{"text":" ","type":"text"},{"type":"text","text":"(rather than the “half-closed range operator”)."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"text":"doc:CollectionTypes#Accessing-and-Modifying-a-Dictionary","type":"text"},{"type":"text","text":" "},{"text":"section to note that ","type":"text"},{"code":"Dictionary","type":"codeVoice"},{"text":" now has","type":"text"},{"text":" ","type":"text"},{"text":"a Boolean ","type":"text"},{"code":"isEmpty","type":"codeVoice"},{"text":" property.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Clarified the full list of characters that can be used"},{"type":"text","text":" "},{"type":"text","text":"when defining "},{"type":"text","text":"doc:AdvancedOperators#Custom-Operators"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"nil"},{"text":" and the Booleans ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" and "},{"code":"false","type":"codeVoice"},{"type":"text","text":" are now "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Swift’s ","type":"text"},{"type":"codeVoice","code":"Array"},{"type":"text","text":" type now has full value semantics."},{"text":" ","type":"text"},{"text":"Updated the information about ","type":"text"},{"text":"doc:CollectionTypes#Mutability-of-Collections","type":"text"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"text","text":"doc:CollectionTypes#Arrays"},{"text":" to reflect the new approach.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Also clarified the assignment and copy behavior for strings arrays and dictionaries."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"doc:CollectionTypes#Array-Type-Shorthand-Syntax","type":"text"},{"type":"text","text":" is now written as"},{"text":" ","type":"text"},{"type":"codeVoice","code":"[SomeType]"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":"SomeType[]"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about "},{"type":"text","text":"doc:CollectionTypes#Dictionary-Type-Shorthand-Syntax"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is written as "},{"code":"[KeyType: ValueType]","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new section about ","type":"text"},{"type":"text","text":"doc:CollectionTypes#Hash-Values-for-Set-Types"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Examples of "},{"type":"text","text":"doc:Closures#Closure-Expressions"},{"text":" now use","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the global "},{"code":"sorted(_:_:)","type":"codeVoice"},{"type":"text","text":" function"},{"type":"text","text":" "},{"type":"text","text":"rather than the global "},{"type":"codeVoice","code":"sort(_:_:)"},{"type":"text","text":" function,"},{"type":"text","text":" "},{"type":"text","text":"to reflect the new array value semantics."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the information about "},{"type":"text","text":"doc:Initialization#Memberwise-Initializers-for-Structure-Types"},{"type":"text","text":" "},{"type":"text","text":"to clarify that the memberwise structure initializer is made available"},{"text":" ","type":"text"},{"text":"even if a structure’s stored properties don’t have default values.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated to ","type":"text"},{"code":"..<","type":"codeVoice"},{"type":"text","text":" rather than "},{"code":"..","type":"codeVoice"},{"type":"text","text":" "},{"text":"for the ","type":"text"},{"type":"text","text":"doc:BasicOperators#Half-Open-Range-Operator"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added an example of "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/RevisionHistory","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Review the recent changes to this book."}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Defer-Statement":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Defer-Statement","type":"topic","kind":"section","title":"Defer Statement","url":"\/documentation\/the-swift-programming-language\/statements#Defer-Statement","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Checking-for-Protocol-Conformance":{"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance","title":"Checking for Protocol Conformance","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Checking-for-Protocol-Conformance","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Break-Statement":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement","type":"topic","kind":"section","title":"Break Statement","url":"\/documentation\/the-swift-programming-language\/statements#Break-Statement","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Protocol-Declaration":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration","type":"topic","kind":"section","title":"Protocol Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Protocol-Declaration","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Type-Attributes":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Type-Attributes","type":"topic","kind":"section","title":"Type Attributes","url":"\/documentation\/the-swift-programming-language\/attributes#Type-Attributes","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Conditional-Expression":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Conditional-Expression","type":"topic","kind":"section","title":"Conditional Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Conditional-Expression","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Patterns":{"url":"\/documentation\/the-swift-programming-language\/patterns","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","type":"topic","role":"article","abstract":[{"type":"text","text":"Match and destructure values."}],"title":"Patrones","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","kind":"article","abstract":[{"type":"text","text":"Write code that works for multiple types and specify requirements for those types."}],"url":"\/documentation\/the-swift-programming-language\/generics","role":"article","type":"topic","title":"Generics"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations":{"url":"\/documentation\/the-swift-programming-language\/declarations","title":"Declaraciones","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","role":"article","abstract":[{"type":"text","text":"Introduce types, operators, variables, and other names and constructs."}],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Declaration-Modifiers":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","type":"topic","kind":"section","title":"Declaration Modifiers","url":"\/documentation\/the-swift-programming-language\/declarations#Declaration-Modifiers","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","type":"topic","kind":"section","title":"Using a Protocol in Its Associated Type’s Constraints","url":"\/documentation\/the-swift-programming-language\/generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements":{"url":"\/documentation\/the-swift-programming-language\/statements","title":"Statements","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","role":"article","abstract":[{"type":"text","text":"Group expressions and control the flow of execution."}],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Precedence-Group-Declaration":{"title":"Precedence Group Declaration","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Precedence-Group-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Precedence-Group-Declaration","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"kind":"article","title":"Concurrencia","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","abstract":[{"type":"text","text":"Perform asynchronous operations."}],"url":"\/documentation\/the-swift-programming-language\/concurrency","role":"article","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#frozen":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen","type":"topic","kind":"section","title":"frozen","url":"\/documentation\/the-swift-programming-language\/attributes#frozen","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Associated-Types":{"title":"Associated Types","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types","url":"\/documentation\/the-swift-programming-language\/generics#Associated-Types","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Properties-Through-Optional-Chaining":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","title":"Accessing Properties Through Optional Chaining","abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Properties-Through-Optional-Chaining"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"url":"\/documentation\/the-swift-programming-language\/functions","title":"Funciones","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","role":"article","abstract":[{"type":"text","text":"Define and call functions, label their arguments, and use their return values."}],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extending-a-Generic-Type":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type","type":"topic","kind":"section","title":"Extending a Generic Type","url":"\/documentation\/the-swift-programming-language\/generics#Extending-a-Generic-Type","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Initializer-Requirements":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Initializer-Requirements","type":"topic","kind":"section","title":"Initializer Requirements","url":"\/documentation\/the-swift-programming-language\/protocols#Initializer-Requirements","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#dynamicMemberLookup":{"title":"dynamicMemberLookup","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicMemberLookup","url":"\/documentation\/the-swift-programming-language\/attributes#dynamicMemberLookup","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#dynamicCallable":{"title":"dynamicCallable","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicCallable","url":"\/documentation\/the-swift-programming-language\/attributes#dynamicCallable","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#unknown":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unknown","type":"topic","kind":"section","title":"unknown","url":"\/documentation\/the-swift-programming-language\/attributes#unknown","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"abstract":[{"type":"text","text":"Model custom types that define a list of possible values."}],"url":"\/documentation\/the-swift-programming-language\/enumerations","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","title":"Enumeraciones","kind":"article","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocol-Extensions":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions","type":"topic","kind":"section","title":"Protocol Extensions","url":"\/documentation\/the-swift-programming-language\/protocols#Protocol-Extensions","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Await-Operator":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Await-Operator","type":"topic","kind":"section","title":"Await Operator","url":"\/documentation\/the-swift-programming-language\/expressions#Await-Operator","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Implicit-Member-Expression":{"title":"Implicit Member Expression","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Member-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Implicit-Member-Expression","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Associated-Types-with-a-Generic-Where-Clause":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types-with-a-Generic-Where-Clause","abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/generics#Associated-Types-with-a-Generic-Where-Clause","title":"Associated Types with a Generic Where Clause"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Type-Properties":{"title":"Type Properties","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties","url":"\/documentation\/the-swift-programming-language\/properties#Type-Properties","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"url":"\/documentation\/the-swift-programming-language\/optionalchaining","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","type":"topic","role":"article","abstract":[{"type":"text","text":"Access members of an optional value without unwrapping."}],"title":"Optional Chaining","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Sets":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Sets","type":"topic","kind":"section","title":"Sets","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Sets","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Try-Operator":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Try-Operator","type":"topic","kind":"section","title":"Try Operator","url":"\/documentation\/the-swift-programming-language\/expressions#Try-Operator","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switch-Statement":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switch-Statement","type":"topic","kind":"section","title":"Switch Statement","url":"\/documentation\/the-swift-programming-language\/statements#Switch-Statement","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Macros":{"url":"\/documentation\/the-swift-programming-language\/macros","title":"Macros","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros","role":"article","abstract":[{"type":"text","text":"Use macros to generate code at compile time."}],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Extension-Declaration":{"abstract":[],"title":"Extension Declaration","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Extension-Declaration","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Compile-Time-Diagnostic-Statement":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compile-Time-Diagnostic-Statement","type":"topic","kind":"section","title":"Compile-Time Diagnostic Statement","url":"\/documentation\/the-swift-programming-language\/statements#Compile-Time-Diagnostic-Statement","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Initializer-Expression":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Initializer-Expression","type":"topic","kind":"section","title":"Initializer Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Initializer-Expression","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Guard-Statement":{"title":"Guard Statement","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Guard-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Guard-Statement","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Calling-Methods-Through-Optional-Chaining":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Calling-Methods-Through-Optional-Chaining","type":"topic","kind":"section","title":"Calling Methods Through Optional Chaining","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Calling-Methods-Through-Optional-Chaining","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Subscripts-of-Optional-Type":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Subscripts-of-Optional-Type","type":"topic","kind":"section","title":"Accessing Subscripts of Optional Type","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Subscripts-of-Optional-Type","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Any-Type":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Any-Type","type":"topic","kind":"section","title":"Any Type","url":"\/documentation\/the-swift-programming-language\/types#Any-Type","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes":{"url":"\/documentation\/the-swift-programming-language\/attributes","title":"Attributes","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","role":"article","abstract":[{"type":"text","text":"Add information to declarations and types."}],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Enumerations-with-Cases-of-Any-Type":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type","type":"topic","kind":"section","title":"Enumerations with Cases of Any Type","url":"\/documentation\/the-swift-programming-language\/declarations#Enumerations-with-Cases-of-Any-Type","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"url":"\/documentation\/the-swift-programming-language\/thebasics","title":"Fundamentos","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","role":"article","abstract":[{"type":"text","text":"Trabaja con tipos comunes de datos y escribe sintaxis básica."}],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Protocol-Composition-Type":{"title":"Protocol Composition Type","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type","url":"\/documentation\/the-swift-programming-language\/types#Protocol-Composition-Type","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Literal-Expression":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","type":"topic","kind":"section","title":"Literal Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Literal-Expression","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Asynchronous-Functions-and-Methods":{"abstract":[],"title":"Asynchronous Functions and Methods","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods","url":"\/documentation\/the-swift-programming-language\/declarations#Asynchronous-Functions-and-Methods","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"url":"\/documentation\/the-swift-programming-language","kind":"article","type":"topic","title":"The Swift Programming Language (6)","role":"collection","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Methods-with-Special-Names":{"title":"Methods with Special Names","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Methods-with-Special-Names","url":"\/documentation\/the-swift-programming-language\/declarations#Methods-with-Special-Names","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"type":"topic","abstract":[{"type":"text","text":"Set the initial values for a type’s stored properties and perform one-time setup."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","role":"article","kind":"article","title":"Inicialización","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Optional-Protocol-Requirements":{"title":"Optional Protocol Requirements","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Optional-Protocol-Requirements","url":"\/documentation\/the-swift-programming-language\/protocols#Optional-Protocol-Requirements","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","type":"topic","abstract":[{"type":"text","text":"Model the lifetime of objects and their relationships."}],"url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting","kind":"article","role":"article","title":"Conteo automático de referencias"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Actor-Declaration":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Actor-Declaration","type":"topic","kind":"section","title":"Actor Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Actor-Declaration","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Result-Transformations":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Result-Transformations","type":"topic","kind":"section","title":"Result Transformations","url":"\/documentation\/the-swift-programming-language\/attributes#Result-Transformations","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"url":"\/documentation\/the-swift-programming-language\/opaquetypes","title":"Opaque and Boxed Types","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","role":"article","abstract":[{"type":"text","text":"Hide implementation details about a value’s type."}],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#available":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#available","type":"topic","kind":"section","title":"available","url":"\/documentation\/the-swift-programming-language\/attributes#available","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Throw-Statement":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Throw-Statement","type":"topic","kind":"section","title":"Throw Statement","url":"\/documentation\/the-swift-programming-language\/statements#Throw-Statement","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Wrappers":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Wrappers","type":"topic","kind":"section","title":"Property Wrappers","url":"\/documentation\/the-swift-programming-language\/properties#Property-Wrappers","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Function-Type":{"kind":"section","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","type":"topic","title":"Function Type","url":"\/documentation\/the-swift-programming-language\/types#Function-Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Constant-Declaration":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","type":"topic","kind":"section","title":"Constant Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Constant-Declaration","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#unchecked":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unchecked","type":"topic","kind":"section","title":"unchecked","url":"\/documentation\/the-swift-programming-language\/attributes#unchecked","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Keywords-and-Punctuation":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Keywords-and-Punctuation","type":"topic","kind":"section","title":"Keywords and Punctuation","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Keywords-and-Punctuation","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Metatype-Type":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type","type":"topic","kind":"section","title":"Metatype Type","url":"\/documentation\/the-swift-programming-language\/types#Metatype-Type","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Conditional-Compilation-Block":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"topic","kind":"section","title":"Conditional Compilation Block","url":"\/documentation\/the-swift-programming-language\/statements#Conditional-Compilation-Block","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"url":"\/documentation\/the-swift-programming-language\/memorysafety","title":"Memory Safety","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","role":"article","abstract":[{"type":"text","text":"Structure your code to avoid conflicts when accessing memory."}],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Identifiers":{"title":"Identifiers","type":"topic","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Identifiers","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Line-Control-Statement":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Line-Control-Statement","type":"topic","kind":"section","title":"Line Control Statement","url":"\/documentation\/the-swift-programming-language\/statements#Line-Control-Statement","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"url":"\/documentation\/the-swift-programming-language\/advancedoperators","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","type":"topic","role":"article","abstract":[{"type":"text","text":"Define custom operators, perform bitwise operations, and use builder syntax."}],"title":"Operadores avanzados","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extensions-with-a-Generic-Where-Clause":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause","abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/generics#Extensions-with-a-Generic-Where-Clause","title":"Extensions with a Generic Where Clause"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Rethrowing-Functions-and-Methods":{"abstract":[],"title":"Rethrowing Functions and Methods","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","url":"\/documentation\/the-swift-programming-language\/declarations#Rethrowing-Functions-and-Methods","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switching-Over-Future-Enumeration-Cases":{"kind":"section","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","type":"topic","title":"Switching Over Future Enumeration Cases","url":"\/documentation\/the-swift-programming-language\/statements#Switching-Over-Future-Enumeration-Cases"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Stored-Variable-Observers-and-Property-Observers":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Stored-Variable-Observers-and-Property-Observers","type":"topic","kind":"section","title":"Stored Variable Observers and Property Observers","url":"\/documentation\/the-swift-programming-language\/declarations#Stored-Variable-Observers-and-Property-Observers","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Explicit-Member-Expression":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","type":"topic","kind":"section","title":"Explicit Member Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Explicit-Member-Expression","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Functions-that-Never-Return":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return","type":"topic","kind":"section","title":"Functions that Never Return","url":"\/documentation\/the-swift-programming-language\/declarations#Functions-that-Never-Return","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Availability-Condition":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Availability-Condition","type":"topic","kind":"section","title":"Availability Condition","url":"\/documentation\/the-swift-programming-language\/statements#Availability-Condition","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Contextual-Where-Clauses":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Contextual-Where-Clauses","type":"topic","kind":"section","title":"Contextual Where Clauses","url":"\/documentation\/the-swift-programming-language\/generics#Contextual-Where-Clauses","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#resultBuilder":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#resultBuilder","url":"\/documentation\/the-swift-programming-language\/attributes#resultBuilder","title":"resultBuilder","kind":"section","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocol-Composition":{"title":"Protocol Composition","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition","url":"\/documentation\/the-swift-programming-language\/protocols#Protocol-Composition","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Where-Clauses":{"title":"Generic Where Clauses","abstract":[],"url":"\/documentation\/the-swift-programming-language\/generics#Generic-Where-Clauses","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GenericParametersAndArguments":{"url":"\/documentation\/the-swift-programming-language\/genericparametersandarguments","title":"Generic Parameters and Arguments","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","role":"article","abstract":[{"type":"text","text":"Generalize declarations to abstract away concrete types."}],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GuidedTour":{"url":"\/documentation\/the-swift-programming-language\/guidedtour","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","type":"topic","role":"article","abstract":[{"type":"text","text":"Explora las características y la sintaxis de Swift."}],"title":"Un Recorrido por Swift","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Declaration-Attributes":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"topic","kind":"section","title":"Declaration Attributes","url":"\/documentation\/the-swift-programming-language\/attributes#Declaration-Attributes","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"url":"\/documentation\/the-swift-programming-language\/accesscontrol","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","type":"topic","role":"article","abstract":[{"type":"text","text":"Manage the visibility of code by declaration, file, and module."}],"title":"Control de acceso","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"url":"\/documentation\/the-swift-programming-language\/stringsandcharacters","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","type":"topic","role":"article","abstract":[{"type":"text","text":"Store and manipulate text."}],"title":"Cadenas y caracteres","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#main":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#main","type":"topic","kind":"section","title":"main","url":"\/documentation\/the-swift-programming-language\/attributes#main","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions":{"url":"\/documentation\/the-swift-programming-language\/expressions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","type":"topic","role":"article","abstract":[{"type":"text","text":"Access, modify, and assign values."}],"title":"Expressions","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Failable-Initializer-Requirements":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Failable-Initializer-Requirements","type":"topic","kind":"section","title":"Failable Initializer Requirements","url":"\/documentation\/the-swift-programming-language\/protocols#Failable-Initializer-Requirements","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Subscripts":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Subscripts","type":"topic","kind":"section","title":"Generic Subscripts","url":"\/documentation\/the-swift-programming-language\/generics#Generic-Subscripts","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#String-Literals":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","type":"topic","kind":"section","title":"String Literals","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#String-Literals","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"url":"\/documentation\/the-swift-programming-language\/errorhandling","title":"Manejo de errores","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","role":"article","abstract":[{"type":"text","text":"Respond to and recover from errors."}],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"kind":"article","title":"Herencia","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","abstract":[{"type":"text","text":"Subclass to add or override functionality."}],"url":"\/documentation\/the-swift-programming-language\/inheritance","role":"article","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types":{"url":"\/documentation\/the-swift-programming-language\/types","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","type":"topic","role":"article","abstract":[{"type":"text","text":"Use built-in named and compound types."}],"title":"Types","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Class-Only-Protocols":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Class-Only-Protocols","abstract":[],"kind":"section","title":"Class-Only Protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Key-Path-Expression":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","type":"topic","kind":"section","title":"Key-Path Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Key-Path-Expression","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Function-Call-Expression":{"title":"Function Call Expression","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Function-Call-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Function-Call-Expression","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Selector-Expression":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression","type":"topic","kind":"section","title":"Selector Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Selector-Expression","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Type-Alias-Declaration":{"title":"Type Alias Declaration","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Alias-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Type-Alias-Declaration","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Literals":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals","type":"topic","kind":"section","title":"Literals","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Literals","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#While-Statement":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#While-Statement","type":"topic","kind":"section","title":"While Statement","url":"\/documentation\/the-swift-programming-language\/statements#While-Statement","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Type-Casting-Operators":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Type-Casting-Operators","type":"topic","kind":"section","title":"Type-Casting Operators","url":"\/documentation\/the-swift-programming-language\/expressions#Type-Casting-Operators","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Self-Type":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type","type":"topic","kind":"section","title":"Self Type","url":"\/documentation\/the-swift-programming-language\/types#Self-Type","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","type":"topic","kind":"section","title":"Enumerations with Cases of a Raw-Value Type","url":"\/documentation\/the-swift-programming-language\/declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Function-Declaration":{"title":"Function Declaration","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Function-Declaration","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"url":"\/documentation\/the-swift-programming-language\/controlflow","title":"Flujo de control","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","role":"article","abstract":[{"type":"text","text":"Structure code with branches, loops, and early exits."}],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Optional-Chaining-Expression":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Optional-Chaining-Expression","type":"topic","kind":"section","title":"Optional-Chaining Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Optional-Chaining-Expression","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Conditionally-Conforming-to-a-Protocol":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Conditionally-Conforming-to-a-Protocol","type":"topic","kind":"section","title":"Conditionally Conforming to a Protocol","url":"\/documentation\/the-swift-programming-language\/protocols#Conditionally-Conforming-to-a-Protocol","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Regular-Expression-Literals":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Regular-Expression-Literals","type":"topic","kind":"section","title":"Regular Expression Literals","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Regular-Expression-Literals","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Protocol-Associated-Type-Declaration":{"title":"Protocol Associated Type Declaration","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Associated-Type-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Protocol-Associated-Type-Declaration","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Implicit-Conversion-to-a-Pointer-Type":{"title":"Implicit Conversion to a Pointer Type","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Conversion-to-a-Pointer-Type","url":"\/documentation\/the-swift-programming-language\/expressions#Implicit-Conversion-to-a-Pointer-Type","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Type-Variable-Properties":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Variable-Properties","type":"topic","kind":"section","title":"Type Variable Properties","url":"\/documentation\/the-swift-programming-language\/declarations#Type-Variable-Properties","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Observers":{"title":"Property Observers","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","url":"\/documentation\/the-swift-programming-language\/properties#Property-Observers","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Do-Statement":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","type":"topic","kind":"section","title":"Do Statement","url":"\/documentation\/the-swift-programming-language\/statements#Do-Statement","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Sendable":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Sendable","type":"topic","kind":"section","title":"Sendable","url":"\/documentation\/the-swift-programming-language\/attributes#Sendable","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Compiler-Control-Statements":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compiler-Control-Statements","type":"topic","kind":"section","title":"Compiler Control Statements","url":"\/documentation\/the-swift-programming-language\/statements#Compiler-Control-Statements","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"type":"topic","abstract":[{"type":"text","text":"Define requirements that conforming types must implement."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","role":"article","kind":"article","title":"Protocols","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure":{"url":"\/documentation\/the-swift-programming-language\/lexicalstructure","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure","type":"topic","role":"article","abstract":[{"type":"text","text":"Use the lowest-level components of the syntax."}],"title":"Lexical Structure","kind":"article"}}}