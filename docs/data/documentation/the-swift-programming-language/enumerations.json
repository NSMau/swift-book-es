{"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"sections":[],"kind":"article","primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"type":"text","text":"An "},{"inlineContent":[{"text":"enumeration","type":"text"}],"type":"emphasis"},{"text":" defines a common type for a group of related values","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you are familiar with C,"},{"text":" ","type":"text"},{"type":"text","text":"you will know that C enumerations assign related names to a set of integer values."},{"text":" ","type":"text"},{"text":"Enumerations in Swift are much more flexible,","type":"text"},{"text":" ","type":"text"},{"text":"and don’t have to provide a value for each case of the enumeration.","type":"text"},{"type":"text","text":" "},{"text":"If a value (known as a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"raw","type":"text"}]},{"text":" value) is provided for each enumeration case,","type":"text"},{"type":"text","text":" "},{"text":"the value can be a string, a character,","type":"text"},{"text":" ","type":"text"},{"text":"or a value of any integer or floating-point type.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, enumeration cases can specify"},{"type":"text","text":" "},{"text":"associated values of ","type":"text"},{"inlineContent":[{"type":"text","text":"any"}],"type":"emphasis"},{"type":"text","text":" type to be stored along with each different case value,"},{"type":"text","text":" "},{"type":"text","text":"much as unions or variants do in other languages."},{"text":" ","type":"text"},{"text":"You can define a common set of related cases as part of one enumeration,","type":"text"},{"text":" ","type":"text"},{"text":"each of which has a different set of values of appropriate types associated with it.","type":"text"}]},{"inlineContent":[{"text":"Enumerations in Swift are first-class types in their own right.","type":"text"},{"text":" ","type":"text"},{"text":"They adopt many features traditionally supported only by classes,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"such as computed properties to provide additional information about"},{"type":"text","text":" "},{"text":"the enumeration’s current value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and instance methods to provide functionality related to"},{"text":" ","type":"text"},{"text":"the values the enumeration represents.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Enumerations can also define initializers to provide an initial case value;"},{"type":"text","text":" "},{"text":"can be extended to expand their functionality beyond their original implementation;","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and can conform to protocols to provide standard functionality."}],"type":"paragraph"},{"inlineContent":[{"text":"For more about these capabilities, see","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","isActive":true},{"text":", and ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","text":"Sintaxis de las enumeraciones","anchor":"Sintaxis-de-las-enumeraciones"},{"inlineContent":[{"type":"text","text":"You introduce enumerations with the "},{"type":"codeVoice","code":"enum"},{"text":" keyword","type":"text"},{"type":"text","text":" "},{"text":"and place their entire definition within a pair of braces:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["enum SomeEnumeration {","    \/\/ enumeration definition goes here","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example for the four main points of a compass:"}]},{"code":["enum CompassPoint {","    case north","    case south","    case east","    case west","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The values defined in an enumeration","type":"text"},{"type":"text","text":" "},{"text":"(such as ","type":"text"},{"code":"north","type":"codeVoice"},{"text":", ","type":"text"},{"code":"south","type":"codeVoice"},{"type":"text","text":", "},{"code":"east","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"west"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are its "},{"type":"emphasis","inlineContent":[{"text":"enumeration cases","type":"text"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"You use the ","type":"text"},{"type":"codeVoice","code":"case"},{"text":" keyword to introduce new enumeration cases.","type":"text"}]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift enumeration cases don’t have an integer value set by default,"},{"type":"text","text":" "},{"type":"text","text":"unlike languages like C and Objective-C."},{"text":" ","type":"text"},{"text":"In the ","type":"text"},{"code":"CompassPoint","type":"codeVoice"},{"text":" example above,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"north"},{"type":"text","text":", "},{"type":"codeVoice","code":"south"},{"text":", ","type":"text"},{"code":"east","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"west"},{"text":" ","type":"text"},{"text":"don’t implicitly equal","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":", "},{"code":"1","type":"codeVoice"},{"type":"text","text":", "},{"code":"2","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"3","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Instead, the different enumeration cases are values in their own right,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with an explicitly defined type of "},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":"."}]}],"name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiple cases can appear on a single line, separated by commas:"}]},{"code":["enum Planet {","    case mercury, venus, earth, mars, jupiter, saturn, uranus, neptune","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each enumeration definition defines a new type."},{"text":" ","type":"text"},{"type":"text","text":"Like other types in Swift, their names"},{"text":" ","type":"text"},{"text":"(such as ","type":"text"},{"code":"CompassPoint","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Planet"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"start with a capital letter.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Give enumeration types singular rather than plural names,"},{"type":"text","text":" "},{"type":"text","text":"so that they read as self-evident:"}]},{"code":["var directionToHead = CompassPoint.west"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of "},{"code":"directionToHead","type":"codeVoice"},{"text":" is inferred","type":"text"},{"type":"text","text":" "},{"text":"when it’s initialized with one of the possible values of ","type":"text"},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Once "},{"type":"codeVoice","code":"directionToHead"},{"text":" is declared as a ","type":"text"},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"you can set it to a different "},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":" value using a shorter dot syntax:"}]},{"syntax":"swift","code":["directionToHead = .east"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of "},{"type":"codeVoice","code":"directionToHead"},{"type":"text","text":" is already known,"},{"type":"text","text":" "},{"text":"and so you can drop the type when setting its value.","type":"text"},{"text":" ","type":"text"},{"text":"This makes for highly readable code when working with explicitly typed enumeration values.","type":"text"}]},{"type":"heading","level":2,"anchor":"Igualando-los-valores-de-una-enumeraci%C3%B3n-con-una-instrucci%C3%B3n-switch","text":"Igualando los valores de una enumeración con una instrucción switch"},{"inlineContent":[{"text":"You can match individual enumeration values with a ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" statement:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["directionToHead = .south","switch directionToHead {","case .north:","    print(\"Lots of planets have a north\")","case .south:","    print(\"Watch out for penguins\")","case .east:","    print(\"Where the sun rises\")","case .west:","    print(\"Where the skies are blue\")","}","\/\/ Prints \"Watch out for penguins\""]},{"type":"paragraph","inlineContent":[{"text":"You can read this code as:","type":"text"}]},{"inlineContent":[{"text":"“Consider the value of ","type":"text"},{"type":"codeVoice","code":"directionToHead"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In the case where it equals "},{"type":"codeVoice","code":".north"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"print ","type":"text"},{"type":"codeVoice","code":"\"Lots of planets have a north\""},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"In the case where it equals ","type":"text"},{"code":".south","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"print ","type":"text"},{"type":"codeVoice","code":"\"Watch out for penguins\""},{"text":".”","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"…and so on."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As described in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement must be exhaustive when considering an enumeration’s cases."},{"text":" ","type":"text"},{"type":"text","text":"If the "},{"code":"case","type":"codeVoice"},{"type":"text","text":" for "},{"code":".west","type":"codeVoice"},{"text":" is omitted,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"this code doesn’t compile,"},{"text":" ","type":"text"},{"type":"text","text":"because it doesn’t consider the complete list of "},{"type":"codeVoice","code":"CompassPoint"},{"text":" cases.","type":"text"},{"text":" ","type":"text"},{"text":"Requiring exhaustiveness ensures that enumeration cases aren’t accidentally omitted.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"When it isn’t appropriate to provide a ","type":"text"},{"type":"codeVoice","code":"case"},{"type":"text","text":" for every enumeration case,"},{"type":"text","text":" "},{"type":"text","text":"you can provide a "},{"type":"codeVoice","code":"default"},{"type":"text","text":" case to cover any cases that aren’t addressed explicitly:"}]},{"code":["let somePlanet = Planet.earth","switch somePlanet {","case .earth:","    print(\"Mostly harmless\")","default:","    print(\"Not a safe place for humans\")","}","\/\/ Prints \"Mostly harmless\""],"type":"codeListing","syntax":"swift"},{"type":"heading","level":2,"anchor":"Iterar-sobre-los-casos-de-una-enumeraci%C3%B3n","text":"Iterar sobre los casos de una enumeración"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For some enumerations,"},{"type":"text","text":" "},{"type":"text","text":"it’s useful to have a collection of all of that enumeration’s cases."},{"text":" ","type":"text"},{"type":"text","text":"You enable this by"},{"text":" ","type":"text"},{"text":"writing ","type":"text"},{"code":": CaseIterable","type":"codeVoice"},{"text":" after the enumeration’s name.","type":"text"},{"text":" ","type":"text"},{"text":"Swift exposes a collection of all the cases","type":"text"},{"type":"text","text":" "},{"text":"as an ","type":"text"},{"type":"codeVoice","code":"allCases"},{"type":"text","text":" property of the enumeration type."},{"type":"text","text":" "},{"text":"Here’s an example:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["enum Beverage: CaseIterable {","    case coffee, tea, juice","}","let numberOfChoices = Beverage.allCases.count","print(\"\\(numberOfChoices) beverages available\")","\/\/ Prints \"3 beverages available\""]},{"inlineContent":[{"text":"In the example above,","type":"text"},{"type":"text","text":" "},{"text":"you write ","type":"text"},{"code":"Beverage.allCases","type":"codeVoice"},{"type":"text","text":" to access a collection"},{"text":" ","type":"text"},{"text":"that contains all of the cases of the ","type":"text"},{"type":"codeVoice","code":"Beverage"},{"type":"text","text":" enumeration."},{"type":"text","text":" "},{"text":"You can use ","type":"text"},{"type":"codeVoice","code":"allCases"},{"type":"text","text":" like any other collection —"},{"type":"text","text":" "},{"type":"text","text":"the collection’s elements are instances of the enumeration type,"},{"type":"text","text":" "},{"type":"text","text":"so in this case they’re "},{"code":"Beverage","type":"codeVoice"},{"type":"text","text":" values."},{"type":"text","text":" "},{"text":"The example above counts how many cases there are,","type":"text"},{"text":" ","type":"text"},{"text":"and the example below uses a ","type":"text"},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"code":"in","type":"codeVoice"},{"type":"text","text":" loop to iterate over all the cases."}],"type":"paragraph"},{"code":["for beverage in Beverage.allCases {","    print(beverage)","}","\/\/ coffee","\/\/ tea","\/\/ juice"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The syntax used in the examples above"},{"text":" ","type":"text"},{"text":"marks the enumeration as conforming to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/caseiterable"},{"text":" protocol.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For information about protocols, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},{"type":"text","text":"."}],"type":"paragraph"},{"level":2,"anchor":"Valores-asociados","text":"Valores asociados","type":"heading"},{"inlineContent":[{"text":"The examples in the previous section show how the cases of an enumeration are","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a defined (and typed) value in their own right."},{"type":"text","text":" "},{"type":"text","text":"You can set a constant or variable to "},{"type":"codeVoice","code":"Planet.earth"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and check for this value later."},{"text":" ","type":"text"},{"text":"However, it’s sometimes useful to be able to store","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"values of other types alongside these case values."},{"text":" ","type":"text"},{"type":"text","text":"This additional information is called an "},{"inlineContent":[{"text":"associated value","type":"text"}],"type":"emphasis"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and it varies each time you use that case as a value in your code.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You can define Swift enumerations to store associated values of any given type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the value types can be different for each case of the enumeration if needed."},{"type":"text","text":" "},{"text":"Enumerations similar to these are known as","type":"text"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"discriminated unions"}]},{"type":"text","text":", "},{"type":"emphasis","inlineContent":[{"text":"tagged unions","type":"text"}]},{"type":"text","text":", or "},{"inlineContent":[{"text":"variants","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"in other programming languages."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose an inventory tracking system needs to"},{"type":"text","text":" "},{"text":"track products by two different types of barcode.","type":"text"},{"text":" ","type":"text"},{"text":"Some products are labeled with 1D barcodes in UPC format,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which uses the numbers "},{"type":"codeVoice","code":"0"},{"text":" to ","type":"text"},{"code":"9","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Each barcode has a number system digit,"},{"text":" ","type":"text"},{"type":"text","text":"followed by five manufacturer code digits and five product code digits."},{"type":"text","text":" "},{"text":"These are followed by a check digit to verify that the code has been scanned correctly:","type":"text"}]},{"inlineContent":[{"type":"image","identifier":"barcode_UPC"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Other products are labeled with 2D barcodes in QR code format,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which can use any ISO 8859-1 character"},{"type":"text","text":" "},{"type":"text","text":"and can encode a string up to 2,953 characters long:"}]},{"inlineContent":[{"type":"image","identifier":"barcode_QR"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s convenient for an inventory tracking system to store UPC barcodes"},{"type":"text","text":" "},{"type":"text","text":"as a tuple of four integers,"},{"type":"text","text":" "},{"text":"and QR code barcodes as a string of any length.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In Swift, an enumeration to define product barcodes of either type might look like this:","type":"text"}]},{"type":"codeListing","code":["enum Barcode {","    case upc(Int, Int, Int, Int)","    case qrCode(String)","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"This can be read as:"}],"type":"paragraph"},{"inlineContent":[{"text":"“Define an enumeration type called ","type":"text"},{"code":"Barcode","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which can take either a value of ","type":"text"},{"type":"codeVoice","code":"upc"},{"text":" ","type":"text"},{"text":"with an associated value of type (","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":", "},{"code":"Int","type":"codeVoice"},{"type":"text","text":", "},{"code":"Int","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"or a value of "},{"code":"qrCode","type":"codeVoice"},{"text":" with an associated value of type ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":".”"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This definition doesn’t provide any actual ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" or "},{"code":"String","type":"codeVoice"},{"text":" values —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it just defines the "},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"},{"text":" of associated values","type":"text"},{"text":" ","type":"text"},{"text":"that ","type":"text"},{"code":"Barcode","type":"codeVoice"},{"text":" constants and variables can store","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when they’re equal to "},{"type":"codeVoice","code":"Barcode.upc"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"Barcode.qrCode"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"You can then create new barcodes using either type:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var productBarcode = Barcode.upc(8, 85909, 51226, 3)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example creates a new variable called "},{"type":"codeVoice","code":"productBarcode"},{"type":"text","text":" "},{"type":"text","text":"and assigns it a value of "},{"type":"codeVoice","code":"Barcode.upc"},{"type":"text","text":" "},{"text":"with an associated tuple value of ","type":"text"},{"code":"(8, 85909, 51226, 3)","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"You can assign the same product a different type of barcode:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["productBarcode = .qrCode(\"ABCDEFGHIJKLMNOP\")"]},{"type":"paragraph","inlineContent":[{"text":"At this point,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the original "},{"type":"codeVoice","code":"Barcode.upc"},{"type":"text","text":" and its integer values are replaced by"},{"type":"text","text":" "},{"text":"the new ","type":"text"},{"type":"codeVoice","code":"Barcode.qrCode"},{"type":"text","text":" and its string value."},{"type":"text","text":" "},{"type":"text","text":"Constants and variables of type "},{"type":"codeVoice","code":"Barcode"},{"text":" can store either a ","type":"text"},{"code":".upc","type":"codeVoice"},{"type":"text","text":" or a "},{"type":"codeVoice","code":".qrCode"},{"text":" ","type":"text"},{"type":"text","text":"(together with their associated values),"},{"text":" ","type":"text"},{"type":"text","text":"but they can store only one of them at any given time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can check the different barcode types using a switch statement,"},{"text":" ","type":"text"},{"text":"similar to the example in","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Igualando-los-valores-de-una-enumeraci%C3%B3n-con-una-instrucci%C3%B3n-switch","type":"reference"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This time, however,"},{"text":" ","type":"text"},{"text":"the associated values are extracted as part of the switch statement.","type":"text"},{"type":"text","text":" "},{"text":"You extract each associated value as a constant (with the ","type":"text"},{"type":"codeVoice","code":"let"},{"type":"text","text":" prefix)"},{"text":" ","type":"text"},{"type":"text","text":"or a variable (with the "},{"code":"var","type":"codeVoice"},{"type":"text","text":" prefix)"},{"type":"text","text":" "},{"text":"for use within the ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" case’s body:","type":"text"}]},{"code":["switch productBarcode {","case .upc(let numberSystem, let manufacturer, let product, let check):","    print(\"UPC: \\(numberSystem), \\(manufacturer), \\(product), \\(check).\")","case .qrCode(let productCode):","    print(\"QR code: \\(productCode).\")","}","\/\/ Prints \"QR code: ABCDEFGHIJKLMNOP.\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"If all of the associated values for an enumeration case"},{"type":"text","text":" "},{"type":"text","text":"are extracted as constants, or if all are extracted as variables,"},{"text":" ","type":"text"},{"text":"you can place a single ","type":"text"},{"code":"let","type":"codeVoice"},{"type":"text","text":" or "},{"code":"var","type":"codeVoice"},{"type":"text","text":" annotation before the case name, for brevity:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["switch productBarcode {","case let .upc(numberSystem, manufacturer, product, check):","    print(\"UPC : \\(numberSystem), \\(manufacturer), \\(product), \\(check).\")","case let .qrCode(productCode):","    print(\"QR code: \\(productCode).\")","}","\/\/ Prints \"QR code: ABCDEFGHIJKLMNOP.\""]},{"text":"Valores brutos","type":"heading","anchor":"Valores-brutos","level":2},{"type":"paragraph","inlineContent":[{"text":"The barcode example in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Valores-asociados","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"shows how cases of an enumeration can declare that they store"},{"text":" ","type":"text"},{"type":"text","text":"associated values of different types."},{"type":"text","text":" "},{"text":"As an alternative to associated values,","type":"text"},{"type":"text","text":" "},{"text":"enumeration cases can come prepopulated with default values","type":"text"},{"type":"text","text":" "},{"text":"(called ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"raw values"}]},{"type":"text","text":"),"},{"text":" ","type":"text"},{"text":"which are all of the same type.","type":"text"}]},{"inlineContent":[{"text":"Here’s an example that stores raw ASCII values alongside named enumeration cases:","type":"text"}],"type":"paragraph"},{"code":["enum ASCIIControlCharacter: Character {","    case tab = \"\\t\"","    case lineFeed = \"\\n\"","    case carriageReturn = \"\\r\"","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Here, the raw values for an enumeration called ","type":"text"},{"code":"ASCIIControlCharacter","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"are defined to be of type "},{"type":"codeVoice","code":"Character"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and are set to some of the more common ASCII control characters.","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Character"},{"text":" values are described in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","type":"reference","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Raw values can be","type":"text"},{"text":" ","type":"text"},{"text":"strings, characters, or any of the integer or floating-point number types.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Each raw value must be unique within its enumeration declaration."}]},{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Raw values are "},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"text":" the same as associated values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Raw values are set to prepopulated values"},{"type":"text","text":" "},{"type":"text","text":"when you first define the enumeration in your code,"},{"type":"text","text":" "},{"type":"text","text":"like the three ASCII codes above."},{"type":"text","text":" "},{"type":"text","text":"The raw value for a particular enumeration case is always the same."},{"text":" ","type":"text"},{"type":"text","text":"Associated values are set when you create a new constant or variable"},{"text":" ","type":"text"},{"type":"text","text":"based on one of the enumeration’s cases,"},{"text":" ","type":"text"},{"type":"text","text":"and can be different each time you do so."}]}],"style":"note"},{"type":"heading","text":"Valores brutos asignados implícitamente","level":3,"anchor":"Valores-brutos-asignados-impl%C3%ADcitamente"},{"type":"paragraph","inlineContent":[{"text":"When you’re working with enumerations that store integer or string raw values,","type":"text"},{"type":"text","text":" "},{"text":"you don’t have to explicitly assign a raw value for each case.","type":"text"},{"type":"text","text":" "},{"text":"When you don’t, Swift automatically assigns the values for you.","type":"text"}]},{"inlineContent":[{"type":"text","text":"For example, when integers are used for raw values,"},{"text":" ","type":"text"},{"type":"text","text":"the implicit value for each case is one more than the previous case."},{"text":" ","type":"text"},{"text":"If the first case doesn’t have a value set, its value is ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The enumeration below is a refinement of the earlier "},{"code":"Planet","type":"codeVoice"},{"type":"text","text":" enumeration,"},{"text":" ","type":"text"},{"text":"with integer raw values to represent each planet’s order from the sun:","type":"text"}]},{"code":["enum Planet: Int {","    case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"In the example above,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Planet.mercury"},{"type":"text","text":" has an explicit raw value of "},{"code":"1","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"code":"Planet.venus","type":"codeVoice"},{"type":"text","text":" has an implicit raw value of "},{"type":"codeVoice","code":"2"},{"type":"text","text":", and so on."}],"type":"paragraph"},{"inlineContent":[{"text":"When strings are used for raw values,","type":"text"},{"text":" ","type":"text"},{"text":"the implicit value for each case is the text of that case’s name.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The enumeration below is a refinement of the earlier "},{"code":"CompassPoint","type":"codeVoice"},{"text":" enumeration,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with string raw values to represent each direction’s name:"}]},{"syntax":"swift","code":["enum CompassPoint: String {","    case north, south, east, west","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"In the example above,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"CompassPoint.south"},{"type":"text","text":" has an implicit raw value of "},{"type":"codeVoice","code":"\"south\""},{"type":"text","text":", and so on."}]},{"type":"paragraph","inlineContent":[{"text":"You access the raw value of an enumeration case with its ","type":"text"},{"code":"rawValue","type":"codeVoice"},{"text":" property:","type":"text"}]},{"code":["let earthsOrder = Planet.earth.rawValue","\/\/ earthsOrder is 3","","let sunsetDirection = CompassPoint.west.rawValue","\/\/ sunsetDirection is \"west\""],"syntax":"swift","type":"codeListing"},{"type":"heading","anchor":"Inicializaci%C3%B3n-a-partir-de-un-valor-bruto","text":"Inicialización a partir de un valor bruto","level":3},{"inlineContent":[{"text":"If you define an enumeration with a raw-value type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the enumeration automatically receives an initializer"},{"type":"text","text":" "},{"text":"that takes a value of the raw value’s type (as a parameter called ","type":"text"},{"code":"rawValue","type":"codeVoice"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"and returns either an enumeration case or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"You can use this initializer to try to create a new instance of the enumeration.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This example identifies Uranus from its raw value of "},{"type":"codeVoice","code":"7"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["let possiblePlanet = Planet(rawValue: 7)","\/\/ possiblePlanet is of type Planet? and equals Planet.uranus"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Not all possible "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" values will find a matching planet, however."},{"type":"text","text":" "},{"text":"Because of this, the raw value initializer always returns an ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional"}]},{"type":"text","text":" enumeration case."},{"text":" ","type":"text"},{"text":"In the example above, ","type":"text"},{"type":"codeVoice","code":"possiblePlanet"},{"type":"text","text":" is of type "},{"code":"Planet?","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or “optional "},{"type":"codeVoice","code":"Planet"},{"type":"text","text":".”"}]},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"The raw value initializer is a failable initializer,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because not every raw value will return an enumeration case."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"text","text":"doc:Declarations#Inicializadores-falibles"},{"text":".","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you try to find a planet with a position of "},{"code":"11","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the optional "},{"type":"codeVoice","code":"Planet"},{"text":" value returned by the raw value initializer will be ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":":","type":"text"}]},{"code":["let positionToFind = 11","if let somePlanet = Planet(rawValue: positionToFind) {","    switch somePlanet {","    case .earth:","        print(\"Mostly harmless\")","    default:","        print(\"Not a safe place for humans\")","    }","} else {","    print(\"There isn't a planet at position \\(positionToFind)\")","}","\/\/ Prints \"There isn't a planet at position 11\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This example uses optional binding to try to access a planet with a raw value of ","type":"text"},{"type":"codeVoice","code":"11"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"The statement "},{"type":"codeVoice","code":"if let somePlanet = Planet(rawValue: 11)"},{"type":"text","text":" creates an optional "},{"type":"codeVoice","code":"Planet"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and sets "},{"type":"codeVoice","code":"somePlanet"},{"type":"text","text":" to the value of that optional "},{"type":"codeVoice","code":"Planet"},{"type":"text","text":" if it can be retrieved."},{"text":" ","type":"text"},{"type":"text","text":"In this case, it isn’t possible to retrieve a planet with a position of "},{"type":"codeVoice","code":"11"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and so the "},{"code":"else","type":"codeVoice"},{"text":" branch is executed instead.","type":"text"}]},{"text":"Enumeraciones recursivas","anchor":"Enumeraciones-recursivas","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"text":"recursive enumeration","type":"text"}],"type":"emphasis"},{"type":"text","text":" is an enumeration"},{"text":" ","type":"text"},{"text":"that has another instance of the enumeration","type":"text"},{"type":"text","text":" "},{"text":"as the associated value for one or more of the enumeration cases.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You indicate that an enumeration case is recursive"},{"type":"text","text":" "},{"type":"text","text":"by writing "},{"code":"indirect","type":"codeVoice"},{"type":"text","text":" before it,"},{"text":" ","type":"text"},{"text":"which tells the compiler to insert the necessary layer of indirection.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, here is an enumeration that stores simple arithmetic expressions:"}]},{"type":"codeListing","syntax":"swift","code":["enum ArithmeticExpression {","    case number(Int)","    indirect case addition(ArithmeticExpression, ArithmeticExpression)","    indirect case multiplication(ArithmeticExpression, ArithmeticExpression)","}"]},{"type":"paragraph","inlineContent":[{"text":"You can also write ","type":"text"},{"type":"codeVoice","code":"indirect"},{"type":"text","text":" before the beginning of the enumeration"},{"type":"text","text":" "},{"text":"to enable indirection for all of the enumeration’s cases that have an associated value:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["indirect enum ArithmeticExpression {","    case number(Int)","    case addition(ArithmeticExpression, ArithmeticExpression)","    case multiplication(ArithmeticExpression, ArithmeticExpression)","}"]},{"inlineContent":[{"type":"text","text":"This enumeration can store three kinds of arithmetic expressions:"},{"type":"text","text":" "},{"type":"text","text":"a plain number,"},{"type":"text","text":" "},{"text":"the addition of two expressions,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the multiplication of two expressions."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"addition"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"multiplication"},{"type":"text","text":" cases have associated values"},{"text":" ","type":"text"},{"type":"text","text":"that are also arithmetic expressions —"},{"type":"text","text":" "},{"type":"text","text":"these associated values make it possible to nest expressions."},{"text":" ","type":"text"},{"text":"For example, the expression ","type":"text"},{"type":"codeVoice","code":"(5 + 4) * 2"},{"text":" ","type":"text"},{"type":"text","text":"has a number on the right-hand side of the multiplication"},{"text":" ","type":"text"},{"type":"text","text":"and another expression on the left-hand side of the multiplication."},{"text":" ","type":"text"},{"text":"Because the data is nested,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the enumeration used to store the data also needs to support nesting —"},{"type":"text","text":" "},{"type":"text","text":"this means the enumeration needs to be recursive."},{"text":" ","type":"text"},{"type":"text","text":"The code below shows the "},{"type":"codeVoice","code":"ArithmeticExpression"},{"type":"text","text":" recursive enumeration"},{"type":"text","text":" "},{"text":"being created for ","type":"text"},{"type":"codeVoice","code":"(5 + 4) * 2"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let five = ArithmeticExpression.number(5)","let four = ArithmeticExpression.number(4)","let sum = ArithmeticExpression.addition(five, four)","let product = ArithmeticExpression.multiplication(sum, ArithmeticExpression.number(2))"]},{"inlineContent":[{"type":"text","text":"A recursive function is a straightforward way"},{"text":" ","type":"text"},{"type":"text","text":"to work with data that has a recursive structure."},{"type":"text","text":" "},{"text":"For example, here’s a function that evaluates an arithmetic expression:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["func evaluate(_ expression: ArithmeticExpression) -> Int {","    switch expression {","    case let .number(value):","        return value","    case let .addition(left, right):","        return evaluate(left) + evaluate(right)","    case let .multiplication(left, right):","        return evaluate(left) * evaluate(right)","    }","}","","print(evaluate(product))","\/\/ Prints \"18\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function evaluates a plain number"},{"type":"text","text":" "},{"type":"text","text":"by simply returning the associated value."},{"text":" ","type":"text"},{"type":"text","text":"It evaluates an addition or multiplication"},{"type":"text","text":" "},{"type":"text","text":"by evaluating the expression on the left-hand side,"},{"text":" ","type":"text"},{"type":"text","text":"evaluating the expression on the right-hand side,"},{"type":"text","text":" "},{"type":"text","text":"and then adding them or multiplying them."}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo."}]},{"inlineContent":[{"type":"text","text":"Conoce más acerca del uso del "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}],"name":"Software Beta","style":"note","type":"aside"}]}],"metadata":{"title":"Enumeraciones"},"abstract":[{"type":"text","text":"Model custom types that define a list of possible values."}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","interfaceLanguage":"swift"},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","title":"Métodos","type":"topic","kind":"article","abstract":[{"type":"text","text":"Define and call functions that are part of an instance or type."}],"role":"article","url":"\/documentation\/the-swift-programming-language\/methods"},"https://developer.apple.com/es/support/beta-software/":{"type":"link","title":"software beta de Apple","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","titleInlineContent":[{"text":"software beta de Apple","type":"text"}],"url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","url":"\/documentation\/the-swift-programming-language\/extensions","kind":"article","title":"Extensiones","abstract":[{"text":"Add functionality to an existing type.","type":"text"}],"type":"topic"},"https://developer.apple.com/documentation/swift/caseiterable":{"type":"link","title":"CaseIterable","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/caseiterable","titleInlineContent":[{"code":"CaseIterable","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/caseiterable"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"title":"Inicialización","url":"\/documentation\/the-swift-programming-language\/initialization","kind":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","abstract":[{"type":"text","text":"Set the initial values for a type’s stored properties and perform one-time setup."}],"role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"title":"Protocols","url":"\/documentation\/the-swift-programming-language\/protocols","kind":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","abstract":[{"type":"text","text":"Define requirements that conforming types must implement."}],"role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","title":"Propiedades","type":"topic","kind":"article","abstract":[{"type":"text","text":"Access stored and computed values that are part of an instance or type."}],"role":"article","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"role":"collection","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","url":"\/documentation\/the-swift-programming-language","title":"The Swift Programming Language (6)","abstract":[],"type":"topic"},"barcode_QR":{"alt":null,"type":"image","variants":[{"url":"\/images\/org.swift.tspl\/barcode_QR@2x.png","traits":["2x","light"]},{"traits":["2x","dark"],"url":"\/images\/org.swift.tspl\/barcode_QR~dark@2x.png"}],"identifier":"barcode_QR"},"barcode_UPC":{"alt":null,"type":"image","variants":[{"url":"\/images\/org.swift.tspl\/barcode_UPC@2x.png","traits":["2x","light"]},{"traits":["2x","dark"],"url":"\/images\/org.swift.tspl\/barcode_UPC~dark@2x.png"}],"identifier":"barcode_UPC"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"role":"article","abstract":[{"type":"text","text":"Structure code with branches, loops, and early exits."}],"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","title":"Flujo de control","url":"\/documentation\/the-swift-programming-language\/controlflow","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations#Igualando-los-valores-de-una-enumeraci%C3%B3n-con-una-instrucci%C3%B3n-switch":{"kind":"section","type":"topic","title":"Igualando los valores de una enumeración con una instrucción switch","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Igualando-los-valores-de-una-enumeraci%C3%B3n-con-una-instrucci%C3%B3n-switch","url":"\/documentation\/the-swift-programming-language\/enumerations#Igualando-los-valores-de-una-enumeraci%C3%B3n-con-una-instrucci%C3%B3n-switch","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations#Valores-asociados":{"kind":"section","type":"topic","title":"Valores asociados","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Valores-asociados","url":"\/documentation\/the-swift-programming-language\/enumerations#Valores-asociados","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"title":"Cadenas y caracteres","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","abstract":[{"text":"Store and manipulate text.","type":"text"}],"role":"article","kind":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters"}}}