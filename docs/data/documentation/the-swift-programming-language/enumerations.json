{"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","interfaceLanguage":"swift"},"metadata":{"title":"Enumeraciones"},"kind":"article","schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"abstract":[{"type":"text","text":"Model custom types that define a list of possible values."}],"primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values"},{"text":" ","type":"text"},{"type":"text","text":"and enables you to work with those values in a type-safe way within your code."}]},{"type":"paragraph","inlineContent":[{"text":"If you are familiar with C,","type":"text"},{"type":"text","text":" "},{"text":"you will know that C enumerations assign related names to a set of integer values.","type":"text"},{"type":"text","text":" "},{"text":"Enumerations in Swift are much more flexible,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and don’t have to provide a value for each case of the enumeration."},{"type":"text","text":" "},{"type":"text","text":"If a value (known as a "},{"inlineContent":[{"type":"text","text":"raw"}],"type":"emphasis"},{"text":" value) is provided for each enumeration case,","type":"text"},{"type":"text","text":" "},{"text":"the value can be a string, a character,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or a value of any integer or floating-point type."}]},{"inlineContent":[{"type":"text","text":"Alternatively, enumeration cases can specify"},{"type":"text","text":" "},{"text":"associated values of ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"any","type":"text"}]},{"type":"text","text":" type to be stored along with each different case value,"},{"text":" ","type":"text"},{"type":"text","text":"much as unions or variants do in other languages."},{"type":"text","text":" "},{"type":"text","text":"You can define a common set of related cases as part of one enumeration,"},{"type":"text","text":" "},{"type":"text","text":"each of which has a different set of values of appropriate types associated with it."}],"type":"paragraph"},{"inlineContent":[{"text":"Enumerations in Swift are first-class types in their own right.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"They adopt many features traditionally supported only by classes,"},{"text":" ","type":"text"},{"text":"such as computed properties to provide additional information about","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the enumeration’s current value,"},{"type":"text","text":" "},{"text":"and instance methods to provide functionality related to","type":"text"},{"text":" ","type":"text"},{"text":"the values the enumeration represents.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Enumerations can also define initializers to provide an initial case value;"},{"type":"text","text":" "},{"text":"can be extended to expand their functionality beyond their original implementation;","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and can conform to protocols to provide standard functionality."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more about these capabilities, see"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","type":"reference"},{"text":", ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","isActive":true},{"text":", ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","type":"reference","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","type":"reference","isActive":true},{"type":"text","text":", and "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","type":"reference"},{"type":"text","text":"."}]},{"text":"Sintaxis de las enumeraciones","level":2,"anchor":"Sintaxis-de-las-enumeraciones","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You introduce enumerations with the ","type":"text"},{"code":"enum","type":"codeVoice"},{"type":"text","text":" keyword"},{"text":" ","type":"text"},{"text":"and place their entire definition within a pair of braces:","type":"text"}]},{"code":["enum SomeEnumeration {","    \/\/ enumeration definition goes here","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Here’s an example for the four main points of a compass:","type":"text"}]},{"type":"codeListing","code":["enum CompassPoint {","    case north","    case south","    case east","    case west","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The values defined in an enumeration"},{"text":" ","type":"text"},{"text":"(such as ","type":"text"},{"type":"codeVoice","code":"north"},{"text":", ","type":"text"},{"type":"codeVoice","code":"south"},{"type":"text","text":", "},{"code":"east","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"west"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"are its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration cases"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"You use the ","type":"text"},{"type":"codeVoice","code":"case"},{"type":"text","text":" keyword to introduce new enumeration cases."}],"type":"paragraph"},{"type":"aside","name":"Note","content":[{"inlineContent":[{"text":"Swift enumeration cases don’t have an integer value set by default,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"unlike languages like C and Objective-C."},{"type":"text","text":" "},{"text":"In the ","type":"text"},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":" example above,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"north"},{"type":"text","text":", "},{"code":"south","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"east"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"west"},{"text":" ","type":"text"},{"text":"don’t implicitly equal","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"0"},{"text":", ","type":"text"},{"type":"codeVoice","code":"1"},{"text":", ","type":"text"},{"code":"2","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"3"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Instead, the different enumeration cases are values in their own right,","type":"text"},{"type":"text","text":" "},{"text":"with an explicitly defined type of ","type":"text"},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":"."}],"type":"paragraph"}],"style":"note"},{"type":"paragraph","inlineContent":[{"text":"Multiple cases can appear on a single line, separated by commas:","type":"text"}]},{"code":["enum Planet {","    case mercury, venus, earth, mars, jupiter, saturn, uranus, neptune","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Each enumeration definition defines a new type.","type":"text"},{"text":" ","type":"text"},{"text":"Like other types in Swift, their names","type":"text"},{"text":" ","type":"text"},{"text":"(such as ","type":"text"},{"type":"codeVoice","code":"CompassPoint"},{"text":" and ","type":"text"},{"code":"Planet","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"start with a capital letter."},{"text":" ","type":"text"},{"type":"text","text":"Give enumeration types singular rather than plural names,"},{"type":"text","text":" "},{"text":"so that they read as self-evident:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["var directionToHead = CompassPoint.west"]},{"inlineContent":[{"text":"The type of ","type":"text"},{"code":"directionToHead","type":"codeVoice"},{"type":"text","text":" is inferred"},{"text":" ","type":"text"},{"type":"text","text":"when it’s initialized with one of the possible values of "},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Once "},{"code":"directionToHead","type":"codeVoice"},{"type":"text","text":" is declared as a "},{"type":"codeVoice","code":"CompassPoint"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can set it to a different "},{"type":"codeVoice","code":"CompassPoint"},{"text":" value using a shorter dot syntax:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["directionToHead = .east"]},{"type":"paragraph","inlineContent":[{"text":"The type of ","type":"text"},{"type":"codeVoice","code":"directionToHead"},{"type":"text","text":" is already known,"},{"text":" ","type":"text"},{"text":"and so you can drop the type when setting its value.","type":"text"},{"text":" ","type":"text"},{"text":"This makes for highly readable code when working with explicitly typed enumeration values.","type":"text"}]},{"text":"Igualando los valores de una enumeración con una instrucción switch","type":"heading","anchor":"Igualando-los-valores-de-una-enumeraci%C3%B3n-con-una-instrucci%C3%B3n-switch","level":2},{"inlineContent":[{"type":"text","text":"You can match individual enumeration values with a "},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statement:"}],"type":"paragraph"},{"type":"codeListing","code":["directionToHead = .south","switch directionToHead {","case .north:","    print(\"Lots of planets have a north\")","case .south:","    print(\"Watch out for penguins\")","case .east:","    print(\"Where the sun rises\")","case .west:","    print(\"Where the skies are blue\")","}","\/\/ Prints \"Watch out for penguins\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"You can read this code as:","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"“Consider the value of "},{"type":"codeVoice","code":"directionToHead"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In the case where it equals "},{"type":"codeVoice","code":".north"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"print "},{"type":"codeVoice","code":"\"Lots of planets have a north\""},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In the case where it equals "},{"type":"codeVoice","code":".south"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"print ","type":"text"},{"code":"\"Watch out for penguins\"","type":"codeVoice"},{"text":".”","type":"text"}]},{"inlineContent":[{"text":"…and so on.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"As described in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true,"type":"reference"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement must be exhaustive when considering an enumeration’s cases."},{"text":" ","type":"text"},{"type":"text","text":"If the "},{"type":"codeVoice","code":"case"},{"text":" for ","type":"text"},{"code":".west","type":"codeVoice"},{"type":"text","text":" is omitted,"},{"type":"text","text":" "},{"type":"text","text":"this code doesn’t compile,"},{"text":" ","type":"text"},{"text":"because it doesn’t consider the complete list of ","type":"text"},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":" cases."},{"type":"text","text":" "},{"type":"text","text":"Requiring exhaustiveness ensures that enumeration cases aren’t accidentally omitted."}]},{"type":"paragraph","inlineContent":[{"text":"When it isn’t appropriate to provide a ","type":"text"},{"code":"case","type":"codeVoice"},{"type":"text","text":" for every enumeration case,"},{"text":" ","type":"text"},{"text":"you can provide a ","type":"text"},{"type":"codeVoice","code":"default"},{"text":" case to cover any cases that aren’t addressed explicitly:","type":"text"}]},{"type":"codeListing","code":["let somePlanet = Planet.earth","switch somePlanet {","case .earth:","    print(\"Mostly harmless\")","default:","    print(\"Not a safe place for humans\")","}","\/\/ Prints \"Mostly harmless\""],"syntax":"swift"},{"type":"heading","level":2,"text":"Iterar sobre los casos de una enumeración","anchor":"Iterar-sobre-los-casos-de-una-enumeraci%C3%B3n"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For some enumerations,"},{"type":"text","text":" "},{"type":"text","text":"it’s useful to have a collection of all of that enumeration’s cases."},{"type":"text","text":" "},{"text":"You enable this by","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"writing "},{"type":"codeVoice","code":": CaseIterable"},{"type":"text","text":" after the enumeration’s name."},{"type":"text","text":" "},{"type":"text","text":"Swift exposes a collection of all the cases"},{"text":" ","type":"text"},{"type":"text","text":"as an "},{"type":"codeVoice","code":"allCases"},{"type":"text","text":" property of the enumeration type."},{"type":"text","text":" "},{"type":"text","text":"Here’s an example:"}]},{"syntax":"swift","code":["enum Beverage: CaseIterable {","    case coffee, tea, juice","}","let numberOfChoices = Beverage.allCases.count","print(\"\\(numberOfChoices) beverages available\")","\/\/ Prints \"3 beverages available\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"In the example above,"},{"text":" ","type":"text"},{"type":"text","text":"you write "},{"code":"Beverage.allCases","type":"codeVoice"},{"type":"text","text":" to access a collection"},{"type":"text","text":" "},{"text":"that contains all of the cases of the ","type":"text"},{"type":"codeVoice","code":"Beverage"},{"type":"text","text":" enumeration."},{"text":" ","type":"text"},{"text":"You can use ","type":"text"},{"type":"codeVoice","code":"allCases"},{"text":" like any other collection —","type":"text"},{"type":"text","text":" "},{"text":"the collection’s elements are instances of the enumeration type,","type":"text"},{"text":" ","type":"text"},{"text":"so in this case they’re ","type":"text"},{"code":"Beverage","type":"codeVoice"},{"text":" values.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The example above counts how many cases there are,"},{"type":"text","text":" "},{"type":"text","text":"and the example below uses a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"text":" loop to iterate over all the cases.","type":"text"}],"type":"paragraph"},{"code":["for beverage in Beverage.allCases {","    print(beverage)","}","\/\/ coffee","\/\/ tea","\/\/ juice"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The syntax used in the examples above","type":"text"},{"text":" ","type":"text"},{"text":"marks the enumeration as conforming to the","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/caseiterable","type":"reference","isActive":true},{"text":" protocol.","type":"text"},{"type":"text","text":" "},{"text":"For information about protocols, see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols"},{"type":"text","text":"."}]},{"type":"heading","text":"Valores asociados","level":2,"anchor":"Valores-asociados"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The examples in the previous section show how the cases of an enumeration are"},{"type":"text","text":" "},{"type":"text","text":"a defined (and typed) value in their own right."},{"type":"text","text":" "},{"text":"You can set a constant or variable to ","type":"text"},{"code":"Planet.earth","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and check for this value later."},{"text":" ","type":"text"},{"type":"text","text":"However, it’s sometimes useful to be able to store"},{"type":"text","text":" "},{"type":"text","text":"values of other types alongside these case values."},{"type":"text","text":" "},{"text":"This additional information is called an ","type":"text"},{"inlineContent":[{"type":"text","text":"associated value"}],"type":"emphasis"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and it varies each time you use that case as a value in your code.","type":"text"}]},{"inlineContent":[{"text":"You can define Swift enumerations to store associated values of any given type,","type":"text"},{"type":"text","text":" "},{"text":"and the value types can be different for each case of the enumeration if needed.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Enumerations similar to these are known as"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"discriminated unions"}],"type":"emphasis"},{"text":", ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"tagged unions"}]},{"type":"text","text":", or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"variants"}]},{"text":" ","type":"text"},{"type":"text","text":"in other programming languages."}],"type":"paragraph"},{"inlineContent":[{"text":"For example, suppose an inventory tracking system needs to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"track products by two different types of barcode."},{"text":" ","type":"text"},{"text":"Some products are labeled with 1D barcodes in UPC format,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which uses the numbers "},{"type":"codeVoice","code":"0"},{"type":"text","text":" to "},{"type":"codeVoice","code":"9"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Each barcode has a number system digit,"},{"text":" ","type":"text"},{"type":"text","text":"followed by five manufacturer code digits and five product code digits."},{"text":" ","type":"text"},{"type":"text","text":"These are followed by a check digit to verify that the code has been scanned correctly:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"barcode_UPC"}]},{"type":"paragraph","inlineContent":[{"text":"Other products are labeled with 2D barcodes in QR code format,","type":"text"},{"type":"text","text":" "},{"text":"which can use any ISO 8859-1 character","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and can encode a string up to 2,953 characters long:"}]},{"inlineContent":[{"type":"image","identifier":"barcode_QR"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s convenient for an inventory tracking system to store UPC barcodes"},{"type":"text","text":" "},{"text":"as a tuple of four integers,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and QR code barcodes as a string of any length."}]},{"type":"paragraph","inlineContent":[{"text":"In Swift, an enumeration to define product barcodes of either type might look like this:","type":"text"}]},{"code":["enum Barcode {","    case upc(Int, Int, Int, Int)","    case qrCode(String)","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can be read as:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"“Define an enumeration type called "},{"type":"codeVoice","code":"Barcode"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which can take either a value of "},{"type":"codeVoice","code":"upc"},{"type":"text","text":" "},{"text":"with an associated value of type (","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int"},{"text":", ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":"),"},{"type":"text","text":" "},{"text":"or a value of ","type":"text"},{"code":"qrCode","type":"codeVoice"},{"type":"text","text":" with an associated value of type "},{"code":"String","type":"codeVoice"},{"text":".”","type":"text"}]},{"inlineContent":[{"type":"text","text":"This definition doesn’t provide any actual "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" or "},{"type":"codeVoice","code":"String"},{"text":" values —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it just defines the "},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"},{"type":"text","text":" of associated values"},{"type":"text","text":" "},{"type":"text","text":"that "},{"type":"codeVoice","code":"Barcode"},{"text":" constants and variables can store","type":"text"},{"text":" ","type":"text"},{"text":"when they’re equal to ","type":"text"},{"type":"codeVoice","code":"Barcode.upc"},{"type":"text","text":" or "},{"code":"Barcode.qrCode","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"You can then create new barcodes using either type:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["var productBarcode = Barcode.upc(8, 85909, 51226, 3)"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"This example creates a new variable called "},{"type":"codeVoice","code":"productBarcode"},{"type":"text","text":" "},{"text":"and assigns it a value of ","type":"text"},{"code":"Barcode.upc","type":"codeVoice"},{"type":"text","text":" "},{"text":"with an associated tuple value of ","type":"text"},{"type":"codeVoice","code":"(8, 85909, 51226, 3)"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can assign the same product a different type of barcode:"}]},{"syntax":"swift","type":"codeListing","code":["productBarcode = .qrCode(\"ABCDEFGHIJKLMNOP\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"At this point,"},{"text":" ","type":"text"},{"type":"text","text":"the original "},{"type":"codeVoice","code":"Barcode.upc"},{"type":"text","text":" and its integer values are replaced by"},{"text":" ","type":"text"},{"type":"text","text":"the new "},{"type":"codeVoice","code":"Barcode.qrCode"},{"type":"text","text":" and its string value."},{"type":"text","text":" "},{"type":"text","text":"Constants and variables of type "},{"code":"Barcode","type":"codeVoice"},{"text":" can store either a ","type":"text"},{"code":".upc","type":"codeVoice"},{"type":"text","text":" or a "},{"type":"codeVoice","code":".qrCode"},{"type":"text","text":" "},{"type":"text","text":"(together with their associated values),"},{"type":"text","text":" "},{"type":"text","text":"but they can store only one of them at any given time."}]},{"inlineContent":[{"type":"text","text":"You can check the different barcode types using a switch statement,"},{"text":" ","type":"text"},{"type":"text","text":"similar to the example in"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Igualando-los-valores-de-una-enumeraci%C3%B3n-con-una-instrucci%C3%B3n-switch"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This time, however,"},{"text":" ","type":"text"},{"text":"the associated values are extracted as part of the switch statement.","type":"text"},{"type":"text","text":" "},{"text":"You extract each associated value as a constant (with the ","type":"text"},{"type":"codeVoice","code":"let"},{"type":"text","text":" prefix)"},{"type":"text","text":" "},{"type":"text","text":"or a variable (with the "},{"code":"var","type":"codeVoice"},{"text":" prefix)","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for use within the "},{"code":"switch","type":"codeVoice"},{"text":" case’s body:","type":"text"}],"type":"paragraph"},{"code":["switch productBarcode {","case .upc(let numberSystem, let manufacturer, let product, let check):","    print(\"UPC: \\(numberSystem), \\(manufacturer), \\(product), \\(check).\")","case .qrCode(let productCode):","    print(\"QR code: \\(productCode).\")","}","\/\/ Prints \"QR code: ABCDEFGHIJKLMNOP.\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If all of the associated values for an enumeration case","type":"text"},{"text":" ","type":"text"},{"text":"are extracted as constants, or if all are extracted as variables,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can place a single "},{"type":"codeVoice","code":"let"},{"text":" or ","type":"text"},{"code":"var","type":"codeVoice"},{"type":"text","text":" annotation before the case name, for brevity:"}]},{"syntax":"swift","code":["switch productBarcode {","case let .upc(numberSystem, manufacturer, product, check):","    print(\"UPC : \\(numberSystem), \\(manufacturer), \\(product), \\(check).\")","case let .qrCode(productCode):","    print(\"QR code: \\(productCode).\")","}","\/\/ Prints \"QR code: ABCDEFGHIJKLMNOP.\""],"type":"codeListing"},{"type":"heading","anchor":"Valores-brutos","level":2,"text":"Valores brutos"},{"inlineContent":[{"text":"The barcode example in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Valores-asociados"},{"type":"text","text":" "},{"type":"text","text":"shows how cases of an enumeration can declare that they store"},{"type":"text","text":" "},{"text":"associated values of different types.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"As an alternative to associated values,"},{"text":" ","type":"text"},{"text":"enumeration cases can come prepopulated with default values","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(called "},{"type":"emphasis","inlineContent":[{"type":"text","text":"raw values"}]},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"which are all of the same type."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Here’s an example that stores raw ASCII values alongside named enumeration cases:","type":"text"}]},{"type":"codeListing","code":["enum ASCIIControlCharacter: Character {","    case tab = \"\\t\"","    case lineFeed = \"\\n\"","    case carriageReturn = \"\\r\"","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Here, the raw values for an enumeration called "},{"type":"codeVoice","code":"ASCIIControlCharacter"},{"text":" ","type":"text"},{"text":"are defined to be of type ","type":"text"},{"type":"codeVoice","code":"Character"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and are set to some of the more common ASCII control characters."},{"type":"text","text":" "},{"code":"Character","type":"codeVoice"},{"text":" values are described in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"Raw values can be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"strings, characters, or any of the integer or floating-point number types."},{"type":"text","text":" "},{"text":"Each raw value must be unique within its enumeration declaration.","type":"text"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Raw values are "},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"type":"text","text":" the same as associated values."},{"text":" ","type":"text"},{"type":"text","text":"Raw values are set to prepopulated values"},{"text":" ","type":"text"},{"text":"when you first define the enumeration in your code,","type":"text"},{"type":"text","text":" "},{"text":"like the three ASCII codes above.","type":"text"},{"type":"text","text":" "},{"text":"The raw value for a particular enumeration case is always the same.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Associated values are set when you create a new constant or variable"},{"text":" ","type":"text"},{"type":"text","text":"based on one of the enumeration’s cases,"},{"text":" ","type":"text"},{"type":"text","text":"and can be different each time you do so."}]}],"name":"Note","style":"note","type":"aside"},{"level":3,"type":"heading","anchor":"Valores-brutos-asignados-impl%C3%ADcitamente","text":"Valores brutos asignados implícitamente"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you’re working with enumerations that store integer or string raw values,"},{"type":"text","text":" "},{"type":"text","text":"you don’t have to explicitly assign a raw value for each case."},{"type":"text","text":" "},{"type":"text","text":"When you don’t, Swift automatically assigns the values for you."}]},{"inlineContent":[{"type":"text","text":"For example, when integers are used for raw values,"},{"type":"text","text":" "},{"type":"text","text":"the implicit value for each case is one more than the previous case."},{"type":"text","text":" "},{"type":"text","text":"If the first case doesn’t have a value set, its value is "},{"type":"codeVoice","code":"0"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The enumeration below is a refinement of the earlier "},{"type":"codeVoice","code":"Planet"},{"type":"text","text":" enumeration,"},{"text":" ","type":"text"},{"text":"with integer raw values to represent each planet’s order from the sun:","type":"text"}]},{"code":["enum Planet: Int {","    case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"In the example above,","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Planet.mercury"},{"text":" has an explicit raw value of ","type":"text"},{"type":"codeVoice","code":"1"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Planet.venus"},{"text":" has an implicit raw value of ","type":"text"},{"code":"2","type":"codeVoice"},{"type":"text","text":", and so on."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"When strings are used for raw values,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the implicit value for each case is the text of that case’s name."}]},{"inlineContent":[{"type":"text","text":"The enumeration below is a refinement of the earlier "},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":" enumeration,"},{"text":" ","type":"text"},{"type":"text","text":"with string raw values to represent each direction’s name:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["enum CompassPoint: String {","    case north, south, east, west","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"CompassPoint.south"},{"text":" has an implicit raw value of ","type":"text"},{"code":"\"south\"","type":"codeVoice"},{"text":", and so on.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You access the raw value of an enumeration case with its ","type":"text"},{"type":"codeVoice","code":"rawValue"},{"type":"text","text":" property:"}]},{"syntax":"swift","type":"codeListing","code":["let earthsOrder = Planet.earth.rawValue","\/\/ earthsOrder is 3","","let sunsetDirection = CompassPoint.west.rawValue","\/\/ sunsetDirection is \"west\""]},{"text":"Inicialización a partir de un valor bruto","type":"heading","anchor":"Inicializaci%C3%B3n-a-partir-de-un-valor-bruto","level":3},{"inlineContent":[{"text":"If you define an enumeration with a raw-value type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the enumeration automatically receives an initializer"},{"type":"text","text":" "},{"type":"text","text":"that takes a value of the raw value’s type (as a parameter called "},{"type":"codeVoice","code":"rawValue"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"and returns either an enumeration case or "},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"You can use this initializer to try to create a new instance of the enumeration.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This example identifies Uranus from its raw value of "},{"code":"7","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let possiblePlanet = Planet(rawValue: 7)","\/\/ possiblePlanet is of type Planet? and equals Planet.uranus"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Not all possible "},{"code":"Int","type":"codeVoice"},{"text":" values will find a matching planet, however.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Because of this, the raw value initializer always returns an "},{"inlineContent":[{"type":"text","text":"optional"}],"type":"emphasis"},{"text":" enumeration case.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In the example above, "},{"type":"codeVoice","code":"possiblePlanet"},{"text":" is of type ","type":"text"},{"code":"Planet?","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or “optional "},{"type":"codeVoice","code":"Planet"},{"type":"text","text":".”"}]},{"content":[{"inlineContent":[{"type":"text","text":"The raw value initializer is a failable initializer,"},{"type":"text","text":" "},{"type":"text","text":"because not every raw value will return an enumeration case."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"text":"doc:Declarations#Inicializadores-falibles","type":"text"},{"text":".","type":"text"}],"type":"paragraph"}],"name":"Note","style":"note","type":"aside"},{"inlineContent":[{"text":"If you try to find a planet with a position of ","type":"text"},{"code":"11","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the optional "},{"code":"Planet","type":"codeVoice"},{"text":" value returned by the raw value initializer will be ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let positionToFind = 11","if let somePlanet = Planet(rawValue: positionToFind) {","    switch somePlanet {","    case .earth:","        print(\"Mostly harmless\")","    default:","        print(\"Not a safe place for humans\")","    }","} else {","    print(\"There isn't a planet at position \\(positionToFind)\")","}","\/\/ Prints \"There isn't a planet at position 11\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example uses optional binding to try to access a planet with a raw value of "},{"type":"codeVoice","code":"11"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The statement ","type":"text"},{"type":"codeVoice","code":"if let somePlanet = Planet(rawValue: 11)"},{"type":"text","text":" creates an optional "},{"type":"codeVoice","code":"Planet"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"and sets ","type":"text"},{"code":"somePlanet","type":"codeVoice"},{"type":"text","text":" to the value of that optional "},{"code":"Planet","type":"codeVoice"},{"text":" if it can be retrieved.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In this case, it isn’t possible to retrieve a planet with a position of "},{"code":"11","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and so the "},{"type":"codeVoice","code":"else"},{"type":"text","text":" branch is executed instead."}]},{"anchor":"Enumeraciones-recursivas","level":2,"text":"Enumeraciones recursivas","type":"heading"},{"inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"text":"recursive enumeration","type":"text"}],"type":"emphasis"},{"text":" is an enumeration","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that has another instance of the enumeration"},{"type":"text","text":" "},{"type":"text","text":"as the associated value for one or more of the enumeration cases."},{"type":"text","text":" "},{"type":"text","text":"You indicate that an enumeration case is recursive"},{"type":"text","text":" "},{"type":"text","text":"by writing "},{"type":"codeVoice","code":"indirect"},{"type":"text","text":" before it,"},{"text":" ","type":"text"},{"text":"which tells the compiler to insert the necessary layer of indirection.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For example, here is an enumeration that stores simple arithmetic expressions:","type":"text"}],"type":"paragraph"},{"code":["enum ArithmeticExpression {","    case number(Int)","    indirect case addition(ArithmeticExpression, ArithmeticExpression)","    indirect case multiplication(ArithmeticExpression, ArithmeticExpression)","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can also write ","type":"text"},{"type":"codeVoice","code":"indirect"},{"type":"text","text":" before the beginning of the enumeration"},{"type":"text","text":" "},{"type":"text","text":"to enable indirection for all of the enumeration’s cases that have an associated value:"}]},{"type":"codeListing","code":["indirect enum ArithmeticExpression {","    case number(Int)","    case addition(ArithmeticExpression, ArithmeticExpression)","    case multiplication(ArithmeticExpression, ArithmeticExpression)","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"This enumeration can store three kinds of arithmetic expressions:"},{"text":" ","type":"text"},{"text":"a plain number,","type":"text"},{"text":" ","type":"text"},{"text":"the addition of two expressions,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the multiplication of two expressions."},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"addition"},{"type":"text","text":" and "},{"code":"multiplication","type":"codeVoice"},{"type":"text","text":" cases have associated values"},{"type":"text","text":" "},{"text":"that are also arithmetic expressions —","type":"text"},{"type":"text","text":" "},{"text":"these associated values make it possible to nest expressions.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, the expression "},{"type":"codeVoice","code":"(5 + 4) * 2"},{"type":"text","text":" "},{"text":"has a number on the right-hand side of the multiplication","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and another expression on the left-hand side of the multiplication."},{"type":"text","text":" "},{"type":"text","text":"Because the data is nested,"},{"type":"text","text":" "},{"type":"text","text":"the enumeration used to store the data also needs to support nesting —"},{"type":"text","text":" "},{"text":"this means the enumeration needs to be recursive.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The code below shows the "},{"code":"ArithmeticExpression","type":"codeVoice"},{"type":"text","text":" recursive enumeration"},{"text":" ","type":"text"},{"type":"text","text":"being created for "},{"type":"codeVoice","code":"(5 + 4) * 2"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["let five = ArithmeticExpression.number(5)","let four = ArithmeticExpression.number(4)","let sum = ArithmeticExpression.addition(five, four)","let product = ArithmeticExpression.multiplication(sum, ArithmeticExpression.number(2))"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A recursive function is a straightforward way"},{"text":" ","type":"text"},{"text":"to work with data that has a recursive structure.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, here’s a function that evaluates an arithmetic expression:"}]},{"code":["func evaluate(_ expression: ArithmeticExpression) -> Int {","    switch expression {","    case let .number(value):","        return value","    case let .addition(left, right):","        return evaluate(left) + evaluate(right)","    case let .multiplication(left, right):","        return evaluate(left) * evaluate(right)","    }","}","","print(evaluate(product))","\/\/ Prints \"18\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"This function evaluates a plain number","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by simply returning the associated value."},{"type":"text","text":" "},{"text":"It evaluates an addition or multiplication","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by evaluating the expression on the left-hand side,"},{"type":"text","text":" "},{"type":"text","text":"evaluating the expression on the right-hand side,"},{"text":" ","type":"text"},{"type":"text","text":"and then adding them or multiplying them."}]},{"type":"aside","name":"Software Beta","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Esta documentación contiene información preliminar sobre una API o tecnología en desarrollo. Esta información está sujeta a cambios, y todo software implementado en conformidad con esta documentación debe ser testeado con el software final del sistema operativo."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conoce más acerca del uso del "},{"identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"reference","isActive":true},{"text":".","type":"text"}]}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"references":{"barcode_QR":{"variants":[{"url":"\/images\/org.swift.tspl\/barcode_QR@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/barcode_QR~dark@2x.png","traits":["2x","dark"]}],"identifier":"barcode_QR","alt":null,"type":"image"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"abstract":[{"type":"text","text":"Set the initial values for a type’s stored properties and perform one-time setup."}],"kind":"article","type":"topic","role":"article","title":"Inicialización","url":"\/documentation\/the-swift-programming-language\/initialization","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"type":"topic","abstract":[{"type":"text","text":"Define requirements that conforming types must implement."}],"kind":"article","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","title":"Protocols","url":"\/documentation\/the-swift-programming-language\/protocols"},"https://developer.apple.com/es/support/beta-software/":{"titleInlineContent":[{"text":"software beta de Apple","type":"text"}],"url":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","type":"link","identifier":"https:\/\/developer.apple.com\/es\/support\/beta-software\/","title":"software beta de Apple"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"type":"topic","abstract":[{"type":"text","text":"Access stored and computed values that are part of an instance or type."}],"title":"Propiedades","role":"article","url":"\/documentation\/the-swift-programming-language\/properties","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties"},"https://developer.apple.com/documentation/swift/caseiterable":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/caseiterable","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swift\/caseiterable","titleInlineContent":[{"type":"codeVoice","code":"CaseIterable"}],"title":"CaseIterable"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"abstract":[{"type":"text","text":"Store and manipulate text."}],"kind":"article","type":"topic","role":"article","title":"Cadenas y caracteres","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","url":"\/documentation\/the-swift-programming-language","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","type":"topic","role":"collection","title":"The Swift Programming Language (5.9)","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations#Valores-asociados":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Valores-asociados","url":"\/documentation\/the-swift-programming-language\/enumerations#Valores-asociados","abstract":[],"kind":"section","title":"Valores asociados"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"kind":"article","abstract":[{"type":"text","text":"Structure code with branches, loops, and early exits."}],"type":"topic","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","title":"Flujo de control","url":"\/documentation\/the-swift-programming-language\/controlflow"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"abstract":[{"type":"text","text":"Define and call functions that are part of an instance or type."}],"kind":"article","type":"topic","role":"article","title":"Métodos","url":"\/documentation\/the-swift-programming-language\/methods","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations#Igualando-los-valores-de-una-enumeraci%C3%B3n-con-una-instrucci%C3%B3n-switch":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Igualando-los-valores-de-una-enumeraci%C3%B3n-con-una-instrucci%C3%B3n-switch","url":"\/documentation\/the-swift-programming-language\/enumerations#Igualando-los-valores-de-una-enumeraci%C3%B3n-con-una-instrucci%C3%B3n-switch","abstract":[],"kind":"section","title":"Igualando los valores de una enumeración con una instrucción switch"},"barcode_UPC":{"type":"image","identifier":"barcode_UPC","variants":[{"url":"\/images\/org.swift.tspl\/barcode_UPC@2x.png","traits":["2x","light"]},{"url":"\/images\/org.swift.tspl\/barcode_UPC~dark@2x.png","traits":["2x","dark"]}],"alt":null},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","role":"article","type":"topic","title":"Extensiones","url":"\/documentation\/the-swift-programming-language\/extensions","abstract":[{"text":"Add functionality to an existing type.","type":"text"}],"kind":"article"}}}